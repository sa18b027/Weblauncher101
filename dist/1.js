(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./src/webgazer.js":
/*!*************************!*\
  !*** ./src/webgazer.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _defineProperty2=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty/index.js\").default;var _wrapNativeSuper=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/wrapNativeSuper */ \"./node_modules/@babel/runtime/helpers/wrapNativeSuper/index.js\").default;var _assertThisInitialized=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized/index.js\").default;var _get=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/get */ \"./node_modules/@babel/runtime/helpers/get/index.js\").default;var _getPrototypeOf=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf/index.js\").default;var _inherits=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits/index.js\").default;var _createSuper=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createSuper */ \"./node_modules/@babel/runtime/helpers/createSuper/index.js\").default;var _createForOfIteratorHelper=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createForOfIteratorHelper */ \"./node_modules/@babel/runtime/helpers/createForOfIteratorHelper/index.js\").default;var _classCallCheck2=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck/index.js\").default;var _createClass=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass/index.js\").default;var _toConsumableArray2=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray/index.js\").default;var _asyncToGenerator=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator/index.js\").default;var _slicedToArray=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray/index.js\").default;var _typeof2=__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof/index.js\").default;__webpack_require__(/*! regenerator-runtime/runtime.js */ \"./node_modules/regenerator-runtime/runtime.js\");__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");__webpack_require__(/*! core-js/modules/es.string.sub.js */ \"./node_modules/core-js/modules/es.string.sub.js\");__webpack_require__(/*! core-js/modules/es.array.reduce.js */ \"./node_modules/core-js/modules/es.array.reduce.js\");__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");__webpack_require__(/*! core-js/modules/es.number.min-safe-integer.js */ \"./node_modules/core-js/modules/es.number.min-safe-integer.js\");__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");__webpack_require__(/*! core-js/modules/es.number.max-safe-integer.js */ \"./node_modules/core-js/modules/es.number.max-safe-integer.js\");__webpack_require__(/*! core-js/modules/es.string.ends-with.js */ \"./node_modules/core-js/modules/es.string.ends-with.js\");__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");__webpack_require__(/*! core-js/modules/es.array-buffer.constructor.js */ \"./node_modules/core-js/modules/es.array-buffer.constructor.js\");__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"./node_modules/core-js/modules/es.string.starts-with.js\");__webpack_require__(/*! core-js/modules/web.url.js */ \"./node_modules/core-js/modules/web.url.js\");__webpack_require__(/*! core-js/modules/es.typed-array.uint8-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-array.js\");__webpack_require__(/*! core-js/modules/es.typed-array.copy-within.js */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");__webpack_require__(/*! core-js/modules/es.typed-array.every.js */ \"./node_modules/core-js/modules/es.typed-array.every.js\");__webpack_require__(/*! core-js/modules/es.typed-array.fill.js */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");__webpack_require__(/*! core-js/modules/es.typed-array.filter.js */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");__webpack_require__(/*! core-js/modules/es.typed-array.find.js */ \"./node_modules/core-js/modules/es.typed-array.find.js\");__webpack_require__(/*! core-js/modules/es.typed-array.find-index.js */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");__webpack_require__(/*! core-js/modules/es.typed-array.for-each.js */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");__webpack_require__(/*! core-js/modules/es.typed-array.includes.js */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");__webpack_require__(/*! core-js/modules/es.typed-array.index-of.js */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");__webpack_require__(/*! core-js/modules/es.typed-array.iterator.js */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");__webpack_require__(/*! core-js/modules/es.typed-array.join.js */ \"./node_modules/core-js/modules/es.typed-array.join.js\");__webpack_require__(/*! core-js/modules/es.typed-array.last-index-of.js */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");__webpack_require__(/*! core-js/modules/es.typed-array.map.js */ \"./node_modules/core-js/modules/es.typed-array.map.js\");__webpack_require__(/*! core-js/modules/es.typed-array.reduce.js */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");__webpack_require__(/*! core-js/modules/es.typed-array.reduce-right.js */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");__webpack_require__(/*! core-js/modules/es.typed-array.reverse.js */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");__webpack_require__(/*! core-js/modules/es.typed-array.set.js */ \"./node_modules/core-js/modules/es.typed-array.set.js\");__webpack_require__(/*! core-js/modules/es.typed-array.slice.js */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");__webpack_require__(/*! core-js/modules/es.typed-array.some.js */ \"./node_modules/core-js/modules/es.typed-array.some.js\");__webpack_require__(/*! core-js/modules/es.typed-array.sort.js */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");__webpack_require__(/*! core-js/modules/es.typed-array.subarray.js */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");__webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");__webpack_require__(/*! core-js/modules/es.typed-array.to-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");__webpack_require__(/*! core-js/modules/es.number.is-integer.js */ \"./node_modules/core-js/modules/es.number.is-integer.js\");__webpack_require__(/*! core-js/modules/es.typed-array.int32-array.js */ \"./node_modules/core-js/modules/es.typed-array.int32-array.js\");__webpack_require__(/*! core-js/modules/es.typed-array.float32-array.js */ \"./node_modules/core-js/modules/es.typed-array.float32-array.js\");__webpack_require__(/*! core-js/modules/es.symbol.has-instance.js */ \"./node_modules/core-js/modules/es.symbol.has-instance.js\");__webpack_require__(/*! core-js/modules/es.function.has-instance.js */ \"./node_modules/core-js/modules/es.function.has-instance.js\");__webpack_require__(/*! core-js/modules/es.weak-map.js */ \"./node_modules/core-js/modules/es.weak-map.js\");__webpack_require__(/*! core-js/modules/es.set.js */ \"./node_modules/core-js/modules/es.set.js\");__webpack_require__(/*! core-js/modules/es.typed-array.uint8-clamped-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js\");__webpack_require__(/*! core-js/modules/es.math.tanh.js */ \"./node_modules/core-js/modules/es.math.tanh.js\");__webpack_require__(/*! core-js/modules/es.typed-array.uint32-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint32-array.js\");__webpack_require__(/*! core-js/modules/es.string.repeat.js */ \"./node_modules/core-js/modules/es.string.repeat.js\");__webpack_require__(/*! core-js/modules/es.array.find.js */ \"./node_modules/core-js/modules/es.array.find.js\");__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ \"./node_modules/core-js/modules/es.number.to-fixed.js\");__webpack_require__(/*! core-js/modules/es.regexp.flags.js */ \"./node_modules/core-js/modules/es.regexp.flags.js\");__webpack_require__(/*! core-js/modules/es.string.search.js */ \"./node_modules/core-js/modules/es.string.search.js\");__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");__webpack_require__(/*! core-js/modules/es.string.sup.js */ \"./node_modules/core-js/modules/es.string.sup.js\");__webpack_require__(/*! core-js/modules/es.typed-array.uint16-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint16-array.js\");__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");__webpack_require__(/*! core-js/modules/es.map.js */ \"./node_modules/core-js/modules/es.map.js\");__webpack_require__(/*! core-js/modules/es.number.is-safe-integer.js */ \"./node_modules/core-js/modules/es.number.is-safe-integer.js\");__webpack_require__(/*! core-js/modules/es.number.is-finite.js */ \"./node_modules/core-js/modules/es.number.is-finite.js\");__webpack_require__(/*! core-js/modules/es.math.expm1.js */ \"./node_modules/core-js/modules/es.math.expm1.js\");__webpack_require__(/*! core-js/modules/es.math.log10.js */ \"./node_modules/core-js/modules/es.math.log10.js\");__webpack_require__(/*! core-js/modules/es.math.hypot.js */ \"./node_modules/core-js/modules/es.math.hypot.js\");__webpack_require__(/*! core-js/modules/es.math.sinh.js */ \"./node_modules/core-js/modules/es.math.sinh.js\");__webpack_require__(/*! core-js/modules/es.math.cosh.js */ \"./node_modules/core-js/modules/es.math.cosh.js\");__webpack_require__(/*! core-js/modules/es.math.asinh.js */ \"./node_modules/core-js/modules/es.math.asinh.js\");__webpack_require__(/*! core-js/modules/es.math.acosh.js */ \"./node_modules/core-js/modules/es.math.acosh.js\");__webpack_require__(/*! core-js/modules/es.math.atanh.js */ \"./node_modules/core-js/modules/es.math.atanh.js\");__webpack_require__(/*! core-js/modules/es.math.sign.js */ \"./node_modules/core-js/modules/es.math.sign.js\");__webpack_require__(/*! core-js/modules/es.math.trunc.js */ \"./node_modules/core-js/modules/es.math.trunc.js\");__webpack_require__(/*! core-js/modules/web.immediate.js */ \"./node_modules/core-js/modules/web.immediate.js\");__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");__webpack_require__(/*! core-js/modules/es.typed-array.int8-array.js */ \"./node_modules/core-js/modules/es.typed-array.int8-array.js\");__webpack_require__(/*! core-js/modules/es.typed-array.int16-array.js */ \"./node_modules/core-js/modules/es.typed-array.int16-array.js\");__webpack_require__(/*! core-js/modules/es.typed-array.float64-array.js */ \"./node_modules/core-js/modules/es.typed-array.float64-array.js\");__webpack_require__(/*! core-js/modules/es.symbol.species.js */ \"./node_modules/core-js/modules/es.symbol.species.js\");__webpack_require__(/*! core-js/modules/es.array.species.js */ \"./node_modules/core-js/modules/es.array.species.js\");__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");__webpack_require__(/*! core-js/modules/web.url.to-json.js */ \"./node_modules/core-js/modules/web.url.to-json.js\");__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");__webpack_require__(/*! core-js/modules/es.string.anchor.js */ \"./node_modules/core-js/modules/es.string.anchor.js\");__webpack_require__(/*! core-js/modules/es.weak-set.js */ \"./node_modules/core-js/modules/es.weak-set.js\");__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");__webpack_require__(/*! core-js/modules/es.math.log2.js */ \"./node_modules/core-js/modules/es.math.log2.js\");/*!\r\n * \r\n *  WebGazer.js: Scalable Webcam EyeTracking Using User Interactions\r\n *  Copyright (c) 2016-2020, Brown HCI Group \r\n *  Licensed under GPLv3. Companies with a valuation of less than $1M can use WebGazer.js under LGPLv3.\r\n *  \r\n */var webgazer=/******/function(modules){// webpackBootstrap\n/******/ // The module cache\n/******/var installedModules={};/******/ /******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ /******/ // Check if module is in cache\n/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ /******/ // Flag the module as loaded\n/******/module.l=true;/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******/ /******/ // expose the module cache\n/******/__webpack_require__.c=installedModules;/******/ /******/ // define getter function for harmony exports\n/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******/ /******/ // define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/ /******/ // create a fake namespace object\n/******/ // mode & 1: value is a module id, require it\n/******/ // mode & 2: merge all properties of value into the ns\n/******/ // mode & 4: return value when already ns object\n/******/ // mode & 8|1: behave like require\n/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&_typeof2(value)==='object'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,'default',{enumerable:true,value:value});/******/if(mode&2&&typeof value!='string')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******/ /******/ // Object.prototype.hasOwnProperty.call\n/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******/ /******/ // __webpack_public_path__\n/******/__webpack_require__.p=\"\";/******/ /******/ /******/ // Load entry module and return exports\n/******/return __webpack_require__(__webpack_require__.s=90);/******/}(/************************************************************************/ /******/[/* 0 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"AdadeltaOptimizer\",function(){return(/* reexport */adadelta_optimizer_AdadeltaOptimizer);});__webpack_require__.d(__webpack_exports__,\"AdagradOptimizer\",function(){return(/* reexport */adagrad_optimizer_AdagradOptimizer);});__webpack_require__.d(__webpack_exports__,\"AdamOptimizer\",function(){return(/* reexport */adam_optimizer_AdamOptimizer);});__webpack_require__.d(__webpack_exports__,\"AdamaxOptimizer\",function(){return(/* reexport */adamax_optimizer_AdamaxOptimizer);});__webpack_require__.d(__webpack_exports__,\"MomentumOptimizer\",function(){return(/* reexport */momentum_optimizer_MomentumOptimizer);});__webpack_require__.d(__webpack_exports__,\"Optimizer\",function(){return(/* reexport */optimizer_Optimizer);});__webpack_require__.d(__webpack_exports__,\"RMSPropOptimizer\",function(){return(/* reexport */rmsprop_optimizer_RMSPropOptimizer);});__webpack_require__.d(__webpack_exports__,\"SGDOptimizer\",function(){return(/* reexport */sgd_optimizer_SGDOptimizer);});__webpack_require__.d(__webpack_exports__,\"Tensor\",function(){return(/* reexport */dist_tensor[\"a\"/* Tensor */]);});__webpack_require__.d(__webpack_exports__,\"TensorBuffer\",function(){return(/* reexport */dist_tensor[\"b\"/* TensorBuffer */]);});__webpack_require__.d(__webpack_exports__,\"Variable\",function(){return(/* reexport */dist_tensor[\"c\"/* Variable */]);});__webpack_require__.d(__webpack_exports__,\"Rank\",function(){return(/* reexport */dist_types[\"a\"/* Rank */]);});__webpack_require__.d(__webpack_exports__,\"sumOutType\",function(){return(/* reexport */dist_types[\"b\"/* sumOutType */]);});__webpack_require__.d(__webpack_exports__,\"upcastType\",function(){return(/* reexport */dist_types[\"c\"/* upcastType */]);});__webpack_require__.d(__webpack_exports__,\"add\",function(){return(/* reexport */add);});__webpack_require__.d(__webpack_exports__,\"addN\",function(){return(/* reexport */addN);});__webpack_require__.d(__webpack_exports__,\"atan2\",function(){return(/* reexport */atan2);});__webpack_require__.d(__webpack_exports__,\"avgPool\",function(){return(/* reexport */avgPool);});__webpack_require__.d(__webpack_exports__,\"avgPool3d\",function(){return(/* reexport */avgPool3d);});__webpack_require__.d(__webpack_exports__,\"batchToSpaceND\",function(){return(/* reexport */batchToSpaceND);});__webpack_require__.d(__webpack_exports__,\"batchNorm\",function(){return(/* reexport */batchNorm);});__webpack_require__.d(__webpack_exports__,\"batchNorm2d\",function(){return(/* reexport */batchNorm2d);});__webpack_require__.d(__webpack_exports__,\"batchNorm3d\",function(){return(/* reexport */batchNorm3d);});__webpack_require__.d(__webpack_exports__,\"batchNorm4d\",function(){return(/* reexport */batchNorm4d);});__webpack_require__.d(__webpack_exports__,\"broadcastTo\",function(){return(/* reexport */broadcastTo);});__webpack_require__.d(__webpack_exports__,\"clone\",function(){return(/* reexport */clone);});__webpack_require__.d(__webpack_exports__,\"complex\",function(){return(/* reexport */complex[\"a\"/* complex */]);});__webpack_require__.d(__webpack_exports__,\"concat\",function(){return(/* reexport */concat);});__webpack_require__.d(__webpack_exports__,\"concat1d\",function(){return(/* reexport */concat1d);});__webpack_require__.d(__webpack_exports__,\"concat2d\",function(){return(/* reexport */concat2d);});__webpack_require__.d(__webpack_exports__,\"concat3d\",function(){return(/* reexport */concat3d);});__webpack_require__.d(__webpack_exports__,\"concat4d\",function(){return(/* reexport */concat4d);});__webpack_require__.d(__webpack_exports__,\"conv1d\",function(){return(/* reexport */conv1d);});__webpack_require__.d(__webpack_exports__,\"conv2d\",function(){return(/* reexport */conv2d);});__webpack_require__.d(__webpack_exports__,\"conv2dTranspose\",function(){return(/* reexport */conv2dTranspose);});__webpack_require__.d(__webpack_exports__,\"conv3d\",function(){return(/* reexport */conv3d);});__webpack_require__.d(__webpack_exports__,\"conv3dTranspose\",function(){return(/* reexport */conv3dTranspose);});__webpack_require__.d(__webpack_exports__,\"cumsum\",function(){return(/* reexport */cumsum);});__webpack_require__.d(__webpack_exports__,\"depthToSpace\",function(){return(/* reexport */depthToSpace);});__webpack_require__.d(__webpack_exports__,\"depthwiseConv2d\",function(){return(/* reexport */depthwiseConv2d);});__webpack_require__.d(__webpack_exports__,\"diag\",function(){return(/* reexport */diag);});__webpack_require__.d(__webpack_exports__,\"div\",function(){return(/* reexport */div);});__webpack_require__.d(__webpack_exports__,\"divNoNan\",function(){return(/* reexport */divNoNan);});__webpack_require__.d(__webpack_exports__,\"dot\",function(){return(/* reexport */dot);});__webpack_require__.d(__webpack_exports__,\"elu\",function(){return(/* reexport */elu);});__webpack_require__.d(__webpack_exports__,\"equal\",function(){return(/* reexport */equal);});__webpack_require__.d(__webpack_exports__,\"eye\",function(){return(/* reexport */eye);});__webpack_require__.d(__webpack_exports__,\"fill\",function(){return(/* reexport */fill);});__webpack_require__.d(__webpack_exports__,\"floorDiv\",function(){return(/* reexport */floorDiv);});__webpack_require__.d(__webpack_exports__,\"greater\",function(){return(/* reexport */greater);});__webpack_require__.d(__webpack_exports__,\"greaterEqual\",function(){return(/* reexport */greaterEqual);});__webpack_require__.d(__webpack_exports__,\"imag\",function(){return(/* reexport */imag[\"a\"/* imag */]);});__webpack_require__.d(__webpack_exports__,\"leakyRelu\",function(){return(/* reexport */leakyRelu);});__webpack_require__.d(__webpack_exports__,\"less\",function(){return(/* reexport */less);});__webpack_require__.d(__webpack_exports__,\"lessEqual\",function(){return(/* reexport */lessEqual);});__webpack_require__.d(__webpack_exports__,\"localResponseNormalization\",function(){return(/* reexport */localResponseNormalization);});__webpack_require__.d(__webpack_exports__,\"matMul\",function(){return(/* reexport */matMul);});__webpack_require__.d(__webpack_exports__,\"max\",function(){return(/* reexport */max_max);});__webpack_require__.d(__webpack_exports__,\"maxPool\",function(){return(/* reexport */maxPool);});__webpack_require__.d(__webpack_exports__,\"maxPool3d\",function(){return(/* reexport */maxPool3d);});__webpack_require__.d(__webpack_exports__,\"maxPoolWithArgmax\",function(){return(/* reexport */maxPoolWithArgmax);});__webpack_require__.d(__webpack_exports__,\"maximum\",function(){return(/* reexport */maximum);});__webpack_require__.d(__webpack_exports__,\"minimum\",function(){return(/* reexport */minimum);});__webpack_require__.d(__webpack_exports__,\"mod\",function(){return(/* reexport */mod);});__webpack_require__.d(__webpack_exports__,\"mul\",function(){return(/* reexport */mul);});__webpack_require__.d(__webpack_exports__,\"multinomial\",function(){return(/* reexport */multinomial);});__webpack_require__.d(__webpack_exports__,\"notEqual\",function(){return(/* reexport */notEqual);});__webpack_require__.d(__webpack_exports__,\"oneHot\",function(){return(/* reexport */oneHot);});__webpack_require__.d(__webpack_exports__,\"outerProduct\",function(){return(/* reexport */outerProduct);});__webpack_require__.d(__webpack_exports__,\"pad\",function(){return(/* reexport */pad_pad);});__webpack_require__.d(__webpack_exports__,\"pad1d\",function(){return(/* reexport */pad1d);});__webpack_require__.d(__webpack_exports__,\"pad2d\",function(){return(/* reexport */pad2d);});__webpack_require__.d(__webpack_exports__,\"pad3d\",function(){return(/* reexport */pad3d);});__webpack_require__.d(__webpack_exports__,\"pad4d\",function(){return(/* reexport */pad4d);});__webpack_require__.d(__webpack_exports__,\"pool\",function(){return(/* reexport */pool);});__webpack_require__.d(__webpack_exports__,\"pow\",function(){return(/* reexport */pow);});__webpack_require__.d(__webpack_exports__,\"prelu\",function(){return(/* reexport */prelu);});__webpack_require__.d(__webpack_exports__,\"rand\",function(){return(/* reexport */rand);});__webpack_require__.d(__webpack_exports__,\"randomGamma\",function(){return(/* reexport */randomGamma);});__webpack_require__.d(__webpack_exports__,\"randomNormal\",function(){return(/* reexport */randomNormal);});__webpack_require__.d(__webpack_exports__,\"randomUniform\",function(){return(/* reexport */randomUniform);});__webpack_require__.d(__webpack_exports__,\"real\",function(){return(/* reexport */real[\"a\"/* real */]);});__webpack_require__.d(__webpack_exports__,\"relu\",function(){return(/* reexport */relu);});__webpack_require__.d(__webpack_exports__,\"relu6\",function(){return(/* reexport */relu6);});__webpack_require__.d(__webpack_exports__,\"selu\",function(){return(/* reexport */selu);});__webpack_require__.d(__webpack_exports__,\"separableConv2d\",function(){return(/* reexport */separableConv2d);});__webpack_require__.d(__webpack_exports__,\"spaceToBatchND\",function(){return(/* reexport */spaceToBatchND);});__webpack_require__.d(__webpack_exports__,\"split\",function(){return(/* reexport */split);});__webpack_require__.d(__webpack_exports__,\"square\",function(){return(/* reexport */square);});__webpack_require__.d(__webpack_exports__,\"squaredDifference\",function(){return(/* reexport */squaredDifference);});__webpack_require__.d(__webpack_exports__,\"sub\",function(){return(/* reexport */sub);});__webpack_require__.d(__webpack_exports__,\"tile\",function(){return(/* reexport */tile);});__webpack_require__.d(__webpack_exports__,\"truncatedNormal\",function(){return(/* reexport */truncatedNormal);});__webpack_require__.d(__webpack_exports__,\"booleanMaskAsync\",function(){return(/* reexport */booleanMaskAsync);});__webpack_require__.d(__webpack_exports__,\"reverse\",function(){return(/* reexport */reverse_reverse);});__webpack_require__.d(__webpack_exports__,\"reverse1d\",function(){return(/* reexport */reverse1d);});__webpack_require__.d(__webpack_exports__,\"reverse2d\",function(){return(/* reexport */reverse2d);});__webpack_require__.d(__webpack_exports__,\"reverse3d\",function(){return(/* reexport */reverse3d);});__webpack_require__.d(__webpack_exports__,\"reverse4d\",function(){return(/* reexport */reverse4d);});__webpack_require__.d(__webpack_exports__,\"slice\",function(){return(/* reexport */slice);});__webpack_require__.d(__webpack_exports__,\"slice1d\",function(){return(/* reexport */slice1d);});__webpack_require__.d(__webpack_exports__,\"slice2d\",function(){return(/* reexport */slice2d);});__webpack_require__.d(__webpack_exports__,\"slice3d\",function(){return(/* reexport */slice3d);});__webpack_require__.d(__webpack_exports__,\"slice4d\",function(){return(/* reexport */slice4d);});__webpack_require__.d(__webpack_exports__,\"abs\",function(){return(/* reexport */abs);});__webpack_require__.d(__webpack_exports__,\"acos\",function(){return(/* reexport */acos);});__webpack_require__.d(__webpack_exports__,\"acosh\",function(){return(/* reexport */acosh);});__webpack_require__.d(__webpack_exports__,\"asin\",function(){return(/* reexport */asin);});__webpack_require__.d(__webpack_exports__,\"asinh\",function(){return(/* reexport */asinh);});__webpack_require__.d(__webpack_exports__,\"atan\",function(){return(/* reexport */atan);});__webpack_require__.d(__webpack_exports__,\"atanh\",function(){return(/* reexport */atanh);});__webpack_require__.d(__webpack_exports__,\"ceil\",function(){return(/* reexport */ceil);});__webpack_require__.d(__webpack_exports__,\"clipByValue\",function(){return(/* reexport */clipByValue);});__webpack_require__.d(__webpack_exports__,\"cos\",function(){return(/* reexport */cos);});__webpack_require__.d(__webpack_exports__,\"cosh\",function(){return(/* reexport */cosh);});__webpack_require__.d(__webpack_exports__,\"erf\",function(){return(/* reexport */erf);});__webpack_require__.d(__webpack_exports__,\"exp\",function(){return(/* reexport */unary_ops_exp);});__webpack_require__.d(__webpack_exports__,\"expm1\",function(){return(/* reexport */expm1);});__webpack_require__.d(__webpack_exports__,\"floor\",function(){return(/* reexport */floor);});__webpack_require__.d(__webpack_exports__,\"log\",function(){return(/* reexport */log);});__webpack_require__.d(__webpack_exports__,\"log1p\",function(){return(/* reexport */log1p);});__webpack_require__.d(__webpack_exports__,\"logSigmoid\",function(){return(/* reexport */logSigmoid);});__webpack_require__.d(__webpack_exports__,\"neg\",function(){return(/* reexport */neg);});__webpack_require__.d(__webpack_exports__,\"reciprocal\",function(){return(/* reexport */reciprocal);});__webpack_require__.d(__webpack_exports__,\"round\",function(){return(/* reexport */round);});__webpack_require__.d(__webpack_exports__,\"rsqrt\",function(){return(/* reexport */rsqrt);});__webpack_require__.d(__webpack_exports__,\"sigmoid\",function(){return(/* reexport */sigmoid);});__webpack_require__.d(__webpack_exports__,\"sign\",function(){return(/* reexport */sign);});__webpack_require__.d(__webpack_exports__,\"isNaN\",function(){return(/* reexport */unary_ops_isNaN);});__webpack_require__.d(__webpack_exports__,\"isInf\",function(){return(/* reexport */isInf);});__webpack_require__.d(__webpack_exports__,\"isFinite\",function(){return(/* reexport */unary_ops_isFinite);});__webpack_require__.d(__webpack_exports__,\"sin\",function(){return(/* reexport */sin);});__webpack_require__.d(__webpack_exports__,\"sinh\",function(){return(/* reexport */sinh);});__webpack_require__.d(__webpack_exports__,\"softplus\",function(){return(/* reexport */softplus);});__webpack_require__.d(__webpack_exports__,\"sqrt\",function(){return(/* reexport */sqrt);});__webpack_require__.d(__webpack_exports__,\"step\",function(){return(/* reexport */unary_ops_step);});__webpack_require__.d(__webpack_exports__,\"tan\",function(){return(/* reexport */tan);});__webpack_require__.d(__webpack_exports__,\"tanh\",function(){return(/* reexport */tanh);});__webpack_require__.d(__webpack_exports__,\"all\",function(){return(/* reexport */reduction_ops_all);});__webpack_require__.d(__webpack_exports__,\"any\",function(){return(/* reexport */any);});__webpack_require__.d(__webpack_exports__,\"argMax\",function(){return(/* reexport */argMax);});__webpack_require__.d(__webpack_exports__,\"argMin\",function(){return(/* reexport */argMin);});__webpack_require__.d(__webpack_exports__,\"logSumExp\",function(){return(/* reexport */logSumExp);});__webpack_require__.d(__webpack_exports__,\"mean\",function(){return(/* reexport */reduction_ops_mean);});__webpack_require__.d(__webpack_exports__,\"min\",function(){return(/* reexport */reduction_ops_min);});__webpack_require__.d(__webpack_exports__,\"moments\",function(){return(/* reexport */moments);});__webpack_require__.d(__webpack_exports__,\"sum\",function(){return(/* reexport */sum);});__webpack_require__.d(__webpack_exports__,\"prod\",function(){return(/* reexport */reduction_ops_prod);});__webpack_require__.d(__webpack_exports__,\"equalStrict\",function(){return(/* reexport */equalStrict);});__webpack_require__.d(__webpack_exports__,\"greaterEqualStrict\",function(){return(/* reexport */greaterEqualStrict);});__webpack_require__.d(__webpack_exports__,\"greaterStrict\",function(){return(/* reexport */greaterStrict);});__webpack_require__.d(__webpack_exports__,\"lessEqualStrict\",function(){return(/* reexport */lessEqualStrict);});__webpack_require__.d(__webpack_exports__,\"lessStrict\",function(){return(/* reexport */lessStrict);});__webpack_require__.d(__webpack_exports__,\"notEqualStrict\",function(){return(/* reexport */notEqualStrict);});__webpack_require__.d(__webpack_exports__,\"addStrict\",function(){return(/* reexport */addStrict);});__webpack_require__.d(__webpack_exports__,\"divStrict\",function(){return(/* reexport */divStrict);});__webpack_require__.d(__webpack_exports__,\"maximumStrict\",function(){return(/* reexport */maximumStrict);});__webpack_require__.d(__webpack_exports__,\"minimumStrict\",function(){return(/* reexport */minimumStrict);});__webpack_require__.d(__webpack_exports__,\"modStrict\",function(){return(/* reexport */modStrict);});__webpack_require__.d(__webpack_exports__,\"mulStrict\",function(){return(/* reexport */mulStrict);});__webpack_require__.d(__webpack_exports__,\"powStrict\",function(){return(/* reexport */powStrict);});__webpack_require__.d(__webpack_exports__,\"squaredDifferenceStrict\",function(){return(/* reexport */squaredDifferenceStrict);});__webpack_require__.d(__webpack_exports__,\"subStrict\",function(){return(/* reexport */subStrict);});__webpack_require__.d(__webpack_exports__,\"logicalAnd\",function(){return(/* reexport */logicalAnd);});__webpack_require__.d(__webpack_exports__,\"logicalNot\",function(){return(/* reexport */logicalNot);});__webpack_require__.d(__webpack_exports__,\"logicalOr\",function(){return(/* reexport */logicalOr);});__webpack_require__.d(__webpack_exports__,\"logicalXor\",function(){return(/* reexport */logicalXor);});__webpack_require__.d(__webpack_exports__,\"where\",function(){return(/* reexport */where);});__webpack_require__.d(__webpack_exports__,\"whereAsync\",function(){return(/* reexport */whereAsync);});__webpack_require__.d(__webpack_exports__,\"buffer\",function(){return(/* reexport */array_ops_buffer);});__webpack_require__.d(__webpack_exports__,\"print\",function(){return(/* reexport */print);});__webpack_require__.d(__webpack_exports__,\"cast\",function(){return(/* reexport */cast);});__webpack_require__.d(__webpack_exports__,\"expandDims\",function(){return(/* reexport */expandDims);});__webpack_require__.d(__webpack_exports__,\"reshape\",function(){return(/* reexport */reshape);});__webpack_require__.d(__webpack_exports__,\"squeeze\",function(){return(/* reexport */squeeze);});__webpack_require__.d(__webpack_exports__,\"stack\",function(){return(/* reexport */stack);});__webpack_require__.d(__webpack_exports__,\"unstack\",function(){return(/* reexport */unstack);});__webpack_require__.d(__webpack_exports__,\"setdiff1dAsync\",function(){return(/* reexport */setdiff1dAsync);});__webpack_require__.d(__webpack_exports__,\"linspace\",function(){return(/* reexport */tensor_ops[\"a\"/* linspace */]);});__webpack_require__.d(__webpack_exports__,\"ones\",function(){return(/* reexport */tensor_ops[\"b\"/* ones */]);});__webpack_require__.d(__webpack_exports__,\"range\",function(){return(/* reexport */tensor_ops[\"d\"/* range */]);});__webpack_require__.d(__webpack_exports__,\"scalar\",function(){return(/* reexport */tensor_ops[\"e\"/* scalar */]);});__webpack_require__.d(__webpack_exports__,\"tensor\",function(){return(/* reexport */tensor_ops[\"f\"/* tensor */]);});__webpack_require__.d(__webpack_exports__,\"tensor1d\",function(){return(/* reexport */tensor_ops[\"g\"/* tensor1d */]);});__webpack_require__.d(__webpack_exports__,\"tensor2d\",function(){return(/* reexport */tensor_ops[\"h\"/* tensor2d */]);});__webpack_require__.d(__webpack_exports__,\"tensor3d\",function(){return(/* reexport */tensor_ops[\"i\"/* tensor3d */]);});__webpack_require__.d(__webpack_exports__,\"tensor4d\",function(){return(/* reexport */tensor_ops[\"j\"/* tensor4d */]);});__webpack_require__.d(__webpack_exports__,\"tensor5d\",function(){return(/* reexport */tensor_ops[\"k\"/* tensor5d */]);});__webpack_require__.d(__webpack_exports__,\"tensor6d\",function(){return(/* reexport */tensor_ops[\"l\"/* tensor6d */]);});__webpack_require__.d(__webpack_exports__,\"variable\",function(){return(/* reexport */tensor_ops[\"m\"/* variable */]);});__webpack_require__.d(__webpack_exports__,\"zeros\",function(){return(/* reexport */tensor_ops[\"n\"/* zeros */]);});__webpack_require__.d(__webpack_exports__,\"onesLike\",function(){return(/* reexport */tensor_ops[\"c\"/* onesLike */]);});__webpack_require__.d(__webpack_exports__,\"zerosLike\",function(){return(/* reexport */tensor_ops[\"o\"/* zerosLike */]);});__webpack_require__.d(__webpack_exports__,\"transpose\",function(){return(/* reexport */transpose);});__webpack_require__.d(__webpack_exports__,\"softmax\",function(){return(/* reexport */softmax);});__webpack_require__.d(__webpack_exports__,\"logSoftmax\",function(){return(/* reexport */logSoftmax);});__webpack_require__.d(__webpack_exports__,\"norm\",function(){return(/* reexport */norm_norm);});__webpack_require__.d(__webpack_exports__,\"gather\",function(){return(/* reexport */gather);});__webpack_require__.d(__webpack_exports__,\"unsortedSegmentSum\",function(){return(/* reexport */unsortedSegmentSum);});__webpack_require__.d(__webpack_exports__,\"basicLSTMCell\",function(){return(/* reexport */basicLSTMCell);});__webpack_require__.d(__webpack_exports__,\"multiRNNCell\",function(){return(/* reexport */multiRNNCell);});__webpack_require__.d(__webpack_exports__,\"movingAverage\",function(){return(/* reexport */movingAverage);});__webpack_require__.d(__webpack_exports__,\"stridedSlice\",function(){return(/* reexport */stridedSlice);});__webpack_require__.d(__webpack_exports__,\"topk\",function(){return(/* reexport */topk);});__webpack_require__.d(__webpack_exports__,\"scatterND\",function(){return(/* reexport */scatterND);});__webpack_require__.d(__webpack_exports__,\"fft\",function(){return(/* reexport */fft);});__webpack_require__.d(__webpack_exports__,\"ifft\",function(){return(/* reexport */ifft);});__webpack_require__.d(__webpack_exports__,\"rfft\",function(){return(/* reexport */rfft);});__webpack_require__.d(__webpack_exports__,\"irfft\",function(){return(/* reexport */irfft);});__webpack_require__.d(__webpack_exports__,\"sparseToDense\",function(){return(/* reexport */sparseToDense);});__webpack_require__.d(__webpack_exports__,\"gatherND\",function(){return(/* reexport */gatherND);});__webpack_require__.d(__webpack_exports__,\"dropout\",function(){return(/* reexport */dropout);});__webpack_require__.d(__webpack_exports__,\"hannWindow\",function(){return(/* reexport */hannWindow);});__webpack_require__.d(__webpack_exports__,\"hammingWindow\",function(){return(/* reexport */hammingWindow);});__webpack_require__.d(__webpack_exports__,\"frame\",function(){return(/* reexport */signal_ops_frame);});__webpack_require__.d(__webpack_exports__,\"stft\",function(){return(/* reexport */stft);});__webpack_require__.d(__webpack_exports__,\"inTopKAsync\",function(){return(/* reexport */inTopKAsync);});__webpack_require__.d(__webpack_exports__,\"op\",function(){return(/* reexport */operation[\"a\"/* op */]);});__webpack_require__.d(__webpack_exports__,\"image\",function(){return(/* reexport */image_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"linalg\",function(){return(/* reexport */linalg_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"losses\",function(){return(/* reexport */loss_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"spectral\",function(){return(/* reexport */spectral_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"fused\",function(){return(/* reexport */fused_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"signal\",function(){return(/* reexport */signal_ops_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"Reduction\",function(){return(/* reexport */Reduction);});__webpack_require__.d(__webpack_exports__,\"train\",function(){return(/* reexport */train);});__webpack_require__.d(__webpack_exports__,\"enableProdMode\",function(){return(/* reexport */enableProdMode);});__webpack_require__.d(__webpack_exports__,\"enableDebugMode\",function(){return(/* reexport */enableDebugMode);});__webpack_require__.d(__webpack_exports__,\"disableDeprecationWarnings\",function(){return(/* reexport */disableDeprecationWarnings);});__webpack_require__.d(__webpack_exports__,\"deprecationWarn\",function(){return(/* reexport */deprecationWarn);});__webpack_require__.d(__webpack_exports__,\"disposeVariables\",function(){return(/* reexport */disposeVariables);});__webpack_require__.d(__webpack_exports__,\"engine\",function(){return(/* reexport */globals_engine);});__webpack_require__.d(__webpack_exports__,\"memory\",function(){return(/* reexport */memory);});__webpack_require__.d(__webpack_exports__,\"profile\",function(){return(/* reexport */profile);});__webpack_require__.d(__webpack_exports__,\"tidy\",function(){return(/* reexport */tidy);});__webpack_require__.d(__webpack_exports__,\"dispose\",function(){return(/* reexport */_dispose);});__webpack_require__.d(__webpack_exports__,\"keep\",function(){return(/* reexport */keep);});__webpack_require__.d(__webpack_exports__,\"time\",function(){return(/* reexport */time);});__webpack_require__.d(__webpack_exports__,\"setBackend\",function(){return(/* reexport */setBackend);});__webpack_require__.d(__webpack_exports__,\"ready\",function(){return(/* reexport */ready);});__webpack_require__.d(__webpack_exports__,\"getBackend\",function(){return(/* reexport */getBackend);});__webpack_require__.d(__webpack_exports__,\"removeBackend\",function(){return(/* reexport */removeBackend);});__webpack_require__.d(__webpack_exports__,\"findBackend\",function(){return(/* reexport */findBackend);});__webpack_require__.d(__webpack_exports__,\"findBackendFactory\",function(){return(/* reexport */findBackendFactory);});__webpack_require__.d(__webpack_exports__,\"registerBackend\",function(){return(/* reexport */registerBackend);});__webpack_require__.d(__webpack_exports__,\"backend\",function(){return(/* reexport */globals_backend);});__webpack_require__.d(__webpack_exports__,\"setPlatform\",function(){return(/* reexport */setPlatform);});__webpack_require__.d(__webpack_exports__,\"getKernel\",function(){return(/* reexport */kernel_registry[\"b\"/* getKernel */]);});__webpack_require__.d(__webpack_exports__,\"getGradient\",function(){return(/* reexport */kernel_registry[\"a\"/* getGradient */]);});__webpack_require__.d(__webpack_exports__,\"getKernelsForBackend\",function(){return(/* reexport */kernel_registry[\"c\"/* getKernelsForBackend */]);});__webpack_require__.d(__webpack_exports__,\"registerKernel\",function(){return(/* reexport */kernel_registry[\"e\"/* registerKernel */]);});__webpack_require__.d(__webpack_exports__,\"registerGradient\",function(){return(/* reexport */kernel_registry[\"d\"/* registerGradient */]);});__webpack_require__.d(__webpack_exports__,\"unregisterKernel\",function(){return(/* reexport */kernel_registry[\"g\"/* unregisterKernel */]);});__webpack_require__.d(__webpack_exports__,\"unregisterGradient\",function(){return(/* reexport */kernel_registry[\"f\"/* unregisterGradient */]);});__webpack_require__.d(__webpack_exports__,\"customGrad\",function(){return(/* reexport */customGrad);});__webpack_require__.d(__webpack_exports__,\"grad\",function(){return(/* reexport */gradients_grad);});__webpack_require__.d(__webpack_exports__,\"grads\",function(){return(/* reexport */gradients_grads);});__webpack_require__.d(__webpack_exports__,\"valueAndGrad\",function(){return(/* reexport */valueAndGrad);});__webpack_require__.d(__webpack_exports__,\"valueAndGrads\",function(){return(/* reexport */valueAndGrads);});__webpack_require__.d(__webpack_exports__,\"variableGrads\",function(){return(/* reexport */variableGrads);});__webpack_require__.d(__webpack_exports__,\"Environment\",function(){return(/* reexport */environment[\"b\"/* Environment */]);});__webpack_require__.d(__webpack_exports__,\"env\",function(){return(/* reexport */environment[\"c\"/* env */]);});__webpack_require__.d(__webpack_exports__,\"ENV\",function(){return(/* reexport */environment[\"a\"/* ENV */]);});__webpack_require__.d(__webpack_exports__,\"version_core\",function(){return(/* reexport */version);});__webpack_require__.d(__webpack_exports__,\"nextFrame\",function(){return(/* reexport */browser_util[\"a\"/* nextFrame */]);});__webpack_require__.d(__webpack_exports__,\"browser\",function(){return(/* reexport */browser_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"io\",function(){return(/* reexport */io_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"math\",function(){return(/* reexport */math_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"serialization\",function(){return(/* reexport */serialization_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"test_util\",function(){return(/* reexport */test_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"util\",function(){return(/* reexport */util);});__webpack_require__.d(__webpack_exports__,\"backend_util\",function(){return(/* reexport */backend_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"tensor_util\",function(){return(/* reexport */tensor_util);});__webpack_require__.d(__webpack_exports__,\"slice_util\",function(){return(/* reexport */slice_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"gather_util\",function(){return(/* reexport */gather_nd_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"scatter_util\",function(){return(/* reexport */scatter_nd_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"device_util\",function(){return(/* reexport */device_util);});__webpack_require__.d(__webpack_exports__,\"kernel_impls\",function(){return(/* reexport */kernel_impls_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"KernelBackend\",function(){return(/* reexport */KernelBackend);});__webpack_require__.d(__webpack_exports__,\"DataStorage\",function(){return(/* reexport */DataStorage);});__webpack_require__.d(__webpack_exports__,\"Add\",function(){return(/* reexport */kernel_names[\"a\"/* Add */]);});__webpack_require__.d(__webpack_exports__,\"AddN\",function(){return(/* reexport */kernel_names[\"b\"/* AddN */]);});__webpack_require__.d(__webpack_exports__,\"Atan2\",function(){return(/* reexport */kernel_names[\"c\"/* Atan2 */]);});__webpack_require__.d(__webpack_exports__,\"AvgPool\",function(){return(/* reexport */kernel_names[\"d\"/* AvgPool */]);});__webpack_require__.d(__webpack_exports__,\"AvgPoolBackprop\",function(){return(/* reexport */kernel_names[\"g\"/* AvgPoolBackprop */]);});__webpack_require__.d(__webpack_exports__,\"AvgPool3D\",function(){return(/* reexport */kernel_names[\"e\"/* AvgPool3D */]);});__webpack_require__.d(__webpack_exports__,\"AvgPool3DBackprop\",function(){return(/* reexport */kernel_names[\"f\"/* AvgPool3DBackprop */]);});__webpack_require__.d(__webpack_exports__,\"BatchMatMul\",function(){return(/* reexport */kernel_names[\"h\"/* BatchMatMul */]);});__webpack_require__.d(__webpack_exports__,\"BatchToSpaceND\",function(){return(/* reexport */kernel_names[\"i\"/* BatchToSpaceND */]);});__webpack_require__.d(__webpack_exports__,\"BroadcastTo\",function(){return(/* reexport */kernel_names[\"j\"/* BroadcastTo */]);});__webpack_require__.d(__webpack_exports__,\"Complex\",function(){return(/* reexport */kernel_names[\"k\"/* Complex */]);});__webpack_require__.d(__webpack_exports__,\"Concat\",function(){return(/* reexport */kernel_names[\"l\"/* Concat */]);});__webpack_require__.d(__webpack_exports__,\"Conv2D\",function(){return(/* reexport */kernel_names[\"m\"/* Conv2D */]);});__webpack_require__.d(__webpack_exports__,\"Conv2DBackpropFilter\",function(){return(/* reexport */kernel_names[\"n\"/* Conv2DBackpropFilter */]);});__webpack_require__.d(__webpack_exports__,\"Conv2DBackpropInput\",function(){return(/* reexport */kernel_names[\"o\"/* Conv2DBackpropInput */]);});__webpack_require__.d(__webpack_exports__,\"Conv3D\",function(){return(/* reexport */kernel_names[\"p\"/* Conv3D */]);});__webpack_require__.d(__webpack_exports__,\"Conv3DBackpropFilterV2\",function(){return(/* reexport */kernel_names[\"q\"/* Conv3DBackpropFilterV2 */]);});__webpack_require__.d(__webpack_exports__,\"Conv3DBackpropInputV2\",function(){return(/* reexport */kernel_names[\"r\"/* Conv3DBackpropInputV2 */]);});__webpack_require__.d(__webpack_exports__,\"Cumsum\",function(){return(/* reexport */kernel_names[\"s\"/* Cumsum */]);});__webpack_require__.d(__webpack_exports__,\"DepthToSpace\",function(){return(/* reexport */kernel_names[\"t\"/* DepthToSpace */]);});__webpack_require__.d(__webpack_exports__,\"DepthwiseConv2dNative\",function(){return(/* reexport */kernel_names[\"u\"/* DepthwiseConv2dNative */]);});__webpack_require__.d(__webpack_exports__,\"DepthwiseConv2dNativeBackpropFilter\",function(){return(/* reexport */kernel_names[\"v\"/* DepthwiseConv2dNativeBackpropFilter */]);});__webpack_require__.d(__webpack_exports__,\"DepthwiseConv2dNativeBackpropInput\",function(){return(/* reexport */kernel_names[\"w\"/* DepthwiseConv2dNativeBackpropInput */]);});__webpack_require__.d(__webpack_exports__,\"Diag\",function(){return(/* reexport */kernel_names[\"x\"/* Diag */]);});__webpack_require__.d(__webpack_exports__,\"Div\",function(){return(/* reexport */kernel_names[\"y\"/* Div */]);});__webpack_require__.d(__webpack_exports__,\"Elu\",function(){return(/* reexport */kernel_names[\"z\"/* Elu */]);});__webpack_require__.d(__webpack_exports__,\"EluGrad\",function(){return(/* reexport */kernel_names[\"A\"/* EluGrad */]);});__webpack_require__.d(__webpack_exports__,\"Equal\",function(){return(/* reexport */kernel_names[\"B\"/* Equal */]);});__webpack_require__.d(__webpack_exports__,\"FloorDiv\",function(){return(/* reexport */kernel_names[\"D\"/* FloorDiv */]);});__webpack_require__.d(__webpack_exports__,\"Fill\",function(){return(/* reexport */kernel_names[\"C\"/* Fill */]);});__webpack_require__.d(__webpack_exports__,\"FusedBatchNorm\",function(){return(/* reexport */kernel_names[\"F\"/* FusedBatchNorm */]);});__webpack_require__.d(__webpack_exports__,\"GatherNd\",function(){return(/* reexport */kernel_names[\"G\"/* GatherNd */]);});__webpack_require__.d(__webpack_exports__,\"Greater\",function(){return(/* reexport */kernel_names[\"H\"/* Greater */]);});__webpack_require__.d(__webpack_exports__,\"GreaterEqual\",function(){return(/* reexport */kernel_names[\"I\"/* GreaterEqual */]);});__webpack_require__.d(__webpack_exports__,\"Identity\",function(){return(/* reexport */kernel_names[\"J\"/* Identity */]);});__webpack_require__.d(__webpack_exports__,\"Imag\",function(){return(/* reexport */kernel_names[\"K\"/* Imag */]);});__webpack_require__.d(__webpack_exports__,\"Less\",function(){return(/* reexport */kernel_names[\"N\"/* Less */]);});__webpack_require__.d(__webpack_exports__,\"LessEqual\",function(){return(/* reexport */kernel_names[\"O\"/* LessEqual */]);});__webpack_require__.d(__webpack_exports__,\"LRN\",function(){return(/* reexport */kernel_names[\"L\"/* LRN */]);});__webpack_require__.d(__webpack_exports__,\"LRNBackprop\",function(){return(/* reexport */kernel_names[\"M\"/* LRNBackprop */]);});__webpack_require__.d(__webpack_exports__,\"Max\",function(){return(/* reexport */kernel_names[\"P\"/* Max */]);});__webpack_require__.d(__webpack_exports__,\"Maximum\",function(){return(/* reexport */kernel_names[\"V\"/* Maximum */]);});__webpack_require__.d(__webpack_exports__,\"MaxPool\",function(){return(/* reexport */kernel_names[\"Q\"/* MaxPool */]);});__webpack_require__.d(__webpack_exports__,\"MaxPoolBackprop\",function(){return(/* reexport */kernel_names[\"T\"/* MaxPoolBackprop */]);});__webpack_require__.d(__webpack_exports__,\"MaxPool3D\",function(){return(/* reexport */kernel_names[\"R\"/* MaxPool3D */]);});__webpack_require__.d(__webpack_exports__,\"MaxPool3DBackprop\",function(){return(/* reexport */kernel_names[\"S\"/* MaxPool3DBackprop */]);});__webpack_require__.d(__webpack_exports__,\"MaxPoolWithArgmax\",function(){return(/* reexport */kernel_names[\"U\"/* MaxPoolWithArgmax */]);});__webpack_require__.d(__webpack_exports__,\"Minimum\",function(){return(/* reexport */kernel_names[\"W\"/* Minimum */]);});__webpack_require__.d(__webpack_exports__,\"Mod\",function(){return(/* reexport */kernel_names[\"X\"/* Mod */]);});__webpack_require__.d(__webpack_exports__,\"Multiply\",function(){return(/* reexport */kernel_names[\"Y\"/* Multiply */]);});__webpack_require__.d(__webpack_exports__,\"NotEqual\",function(){return(/* reexport */kernel_names[\"bb\"/* NotEqual */]);});__webpack_require__.d(__webpack_exports__,\"NonMaxSuppressionV3\",function(){return(/* reexport */kernel_names[\"Z\"/* NonMaxSuppressionV3 */]);});__webpack_require__.d(__webpack_exports__,\"NonMaxSuppressionV5\",function(){return(/* reexport */kernel_names[\"ab\"/* NonMaxSuppressionV5 */]);});__webpack_require__.d(__webpack_exports__,\"OneHot\",function(){return(/* reexport */kernel_names[\"cb\"/* OneHot */]);});__webpack_require__.d(__webpack_exports__,\"PadV2\",function(){return(/* reexport */kernel_names[\"db\"/* PadV2 */]);});__webpack_require__.d(__webpack_exports__,\"Pool\",function(){return(/* reexport */kernel_names[\"eb\"/* Pool */]);});__webpack_require__.d(__webpack_exports__,\"Pow\",function(){return(/* reexport */kernel_names[\"fb\"/* Pow */]);});__webpack_require__.d(__webpack_exports__,\"Prelu\",function(){return(/* reexport */kernel_names[\"gb\"/* Prelu */]);});__webpack_require__.d(__webpack_exports__,\"Real\",function(){return(/* reexport */kernel_names[\"hb\"/* Real */]);});__webpack_require__.d(__webpack_exports__,\"Relu\",function(){return(/* reexport */kernel_names[\"ib\"/* Relu */]);});__webpack_require__.d(__webpack_exports__,\"Relu6\",function(){return(/* reexport */kernel_names[\"jb\"/* Relu6 */]);});__webpack_require__.d(__webpack_exports__,\"SelectV2\",function(){return(/* reexport */kernel_names[\"kb\"/* SelectV2 */]);});__webpack_require__.d(__webpack_exports__,\"Selu\",function(){return(/* reexport */kernel_names[\"lb\"/* Selu */]);});__webpack_require__.d(__webpack_exports__,\"SpaceToBatchND\",function(){return(/* reexport */kernel_names[\"mb\"/* SpaceToBatchND */]);});__webpack_require__.d(__webpack_exports__,\"SplitV\",function(){return(/* reexport */kernel_names[\"nb\"/* SplitV */]);});__webpack_require__.d(__webpack_exports__,\"SquaredDifference\",function(){return(/* reexport */kernel_names[\"pb\"/* SquaredDifference */]);});__webpack_require__.d(__webpack_exports__,\"Square\",function(){return(/* reexport */kernel_names[\"ob\"/* Square */]);});__webpack_require__.d(__webpack_exports__,\"Sub\",function(){return(/* reexport */kernel_names[\"qb\"/* Sub */]);});__webpack_require__.d(__webpack_exports__,\"Tile\",function(){return(/* reexport */kernel_names[\"rb\"/* Tile */]);});__webpack_require__.d(__webpack_exports__,\"Transpose\",function(){return(/* reexport */kernel_names[\"sb\"/* Transpose */]);});__webpack_require__.d(__webpack_exports__,\"FromPixels\",function(){return(/* reexport */kernel_names[\"E\"/* FromPixels */]);});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js\nvar slice_util_namespaceObject={};__webpack_require__.r(slice_util_namespaceObject);__webpack_require__.d(slice_util_namespaceObject,\"assertParamsValid\",function(){return assertParamsValid;});__webpack_require__.d(slice_util_namespaceObject,\"maskToAxes\",function(){return maskToAxes;});__webpack_require__.d(slice_util_namespaceObject,\"computeOutShape\",function(){return slice_util_computeOutShape;});__webpack_require__.d(slice_util_namespaceObject,\"stridesWithElidedDims\",function(){return stridesWithElidedDims;});__webpack_require__.d(slice_util_namespaceObject,\"startIndicesWithElidedDims\",function(){return startIndicesWithElidedDims;});__webpack_require__.d(slice_util_namespaceObject,\"stopIndicesWithElidedDims\",function(){return stopIndicesWithElidedDims;});__webpack_require__.d(slice_util_namespaceObject,\"stridesForAxis\",function(){return stridesForAxis;});__webpack_require__.d(slice_util_namespaceObject,\"startForAxis\",function(){return startForAxis;});__webpack_require__.d(slice_util_namespaceObject,\"stopForAxis\",function(){return stopForAxis;});__webpack_require__.d(slice_util_namespaceObject,\"isSliceContinous\",function(){return isSliceContinous;});__webpack_require__.d(slice_util_namespaceObject,\"computeFlatOffset\",function(){return computeFlatOffset;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/io/io.js\nvar io_namespaceObject={};__webpack_require__.r(io_namespaceObject);__webpack_require__.d(io_namespaceObject,\"copyModel\",function(){return copyModel;});__webpack_require__.d(io_namespaceObject,\"listModels\",function(){return listModels;});__webpack_require__.d(io_namespaceObject,\"moveModel\",function(){return moveModel;});__webpack_require__.d(io_namespaceObject,\"removeModel\",function(){return removeModel;});__webpack_require__.d(io_namespaceObject,\"browserFiles\",function(){return browserFiles;});__webpack_require__.d(io_namespaceObject,\"browserHTTPRequest\",function(){return browserHTTPRequest;});__webpack_require__.d(io_namespaceObject,\"concatenateArrayBuffers\",function(){return io_utils[\"d\"/* concatenateArrayBuffers */];});__webpack_require__.d(io_namespaceObject,\"decodeWeights\",function(){return io_utils[\"e\"/* decodeWeights */];});__webpack_require__.d(io_namespaceObject,\"encodeWeights\",function(){return io_utils[\"f\"/* encodeWeights */];});__webpack_require__.d(io_namespaceObject,\"fromMemory\",function(){return fromMemory;});__webpack_require__.d(io_namespaceObject,\"getLoadHandlers\",function(){return getLoadHandlers;});__webpack_require__.d(io_namespaceObject,\"getModelArtifactsInfoForJSON\",function(){return io_utils[\"g\"/* getModelArtifactsInfoForJSON */];});__webpack_require__.d(io_namespaceObject,\"getSaveHandlers\",function(){return getSaveHandlers;});__webpack_require__.d(io_namespaceObject,\"http\",function(){return http;});__webpack_require__.d(io_namespaceObject,\"isHTTPScheme\",function(){return isHTTPScheme;});__webpack_require__.d(io_namespaceObject,\"loadWeights\",function(){return loadWeights;});__webpack_require__.d(io_namespaceObject,\"registerLoadRouter\",function(){return registerLoadRouter;});__webpack_require__.d(io_namespaceObject,\"registerSaveRouter\",function(){return registerSaveRouter;});__webpack_require__.d(io_namespaceObject,\"weightsLoaderFactory\",function(){return weightsLoaderFactory;});__webpack_require__.d(io_namespaceObject,\"withSaveHandler\",function(){return withSaveHandler;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/math.js\nvar math_namespaceObject={};__webpack_require__.r(math_namespaceObject);__webpack_require__.d(math_namespaceObject,\"confusionMatrix\",function(){return confusionMatrix;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js\nvar browser_namespaceObject={};__webpack_require__.r(browser_namespaceObject);__webpack_require__.d(browser_namespaceObject,\"toPixels\",function(){return toPixels;});__webpack_require__.d(browser_namespaceObject,\"fromPixels\",function(){return fromPixels;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js\nvar gather_nd_util_namespaceObject={};__webpack_require__.r(gather_nd_util_namespaceObject);__webpack_require__.d(gather_nd_util_namespaceObject,\"prepareAndValidate\",function(){return prepareAndValidate;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js\nvar scatter_nd_util_namespaceObject={};__webpack_require__.r(scatter_nd_util_namespaceObject);__webpack_require__.d(scatter_nd_util_namespaceObject,\"validateUpdateShape\",function(){return validateUpdateShape;});__webpack_require__.d(scatter_nd_util_namespaceObject,\"validateInput\",function(){return validateInput;});__webpack_require__.d(scatter_nd_util_namespaceObject,\"calculateShapes\",function(){return calculateShapes;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/serialization.js\nvar serialization_namespaceObject={};__webpack_require__.r(serialization_namespaceObject);__webpack_require__.d(serialization_namespaceObject,\"Serializable\",function(){return Serializable;});__webpack_require__.d(serialization_namespaceObject,\"SerializationMap\",function(){return SerializationMap;});__webpack_require__.d(serialization_namespaceObject,\"registerClass\",function(){return registerClass;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/test_util.js\nvar test_util_namespaceObject={};__webpack_require__.r(test_util_namespaceObject);__webpack_require__.d(test_util_namespaceObject,\"TEST_EPSILON_FLOAT16\",function(){return TEST_EPSILON_FLOAT16;});__webpack_require__.d(test_util_namespaceObject,\"expectArraysClose\",function(){return expectArraysClose;});__webpack_require__.d(test_util_namespaceObject,\"testEpsilon\",function(){return testEpsilon;});__webpack_require__.d(test_util_namespaceObject,\"expectPromiseToFail\",function(){return expectPromiseToFail;});__webpack_require__.d(test_util_namespaceObject,\"expectArraysEqual\",function(){return expectArraysEqual;});__webpack_require__.d(test_util_namespaceObject,\"expectNumbersClose\",function(){return expectNumbersClose;});__webpack_require__.d(test_util_namespaceObject,\"expectValuesInRange\",function(){return expectValuesInRange;});__webpack_require__.d(test_util_namespaceObject,\"expectArrayBuffersEqual\",function(){return expectArrayBuffersEqual;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js\nvar segment_util_namespaceObject={};__webpack_require__.r(segment_util_namespaceObject);__webpack_require__.d(segment_util_namespaceObject,\"segOpComputeOptimalWindowSize\",function(){return segOpComputeOptimalWindowSize;});__webpack_require__.d(segment_util_namespaceObject,\"computeOutShape\",function(){return segment_util_computeOutShape;});__webpack_require__.d(segment_util_namespaceObject,\"collectGatherOpShapeInfo\",function(){return collectGatherOpShapeInfo;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral_ops.js\nvar spectral_ops_namespaceObject={};__webpack_require__.r(spectral_ops_namespaceObject);__webpack_require__.d(spectral_ops_namespaceObject,\"fft\",function(){return fft;});__webpack_require__.d(spectral_ops_namespaceObject,\"ifft\",function(){return ifft;});__webpack_require__.d(spectral_ops_namespaceObject,\"rfft\",function(){return rfft;});__webpack_require__.d(spectral_ops_namespaceObject,\"irfft\",function(){return irfft;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops.js\nvar signal_ops_namespaceObject={};__webpack_require__.r(signal_ops_namespaceObject);__webpack_require__.d(signal_ops_namespaceObject,\"hannWindow\",function(){return hannWindow;});__webpack_require__.d(signal_ops_namespaceObject,\"hammingWindow\",function(){return hammingWindow;});__webpack_require__.d(signal_ops_namespaceObject,\"frame\",function(){return signal_ops_frame;});__webpack_require__.d(signal_ops_namespaceObject,\"stft\",function(){return stft;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops.js\nvar loss_ops_namespaceObject={};__webpack_require__.r(loss_ops_namespaceObject);__webpack_require__.d(loss_ops_namespaceObject,\"Reduction\",function(){return Reduction;});__webpack_require__.d(loss_ops_namespaceObject,\"absoluteDifference\",function(){return absoluteDifference;});__webpack_require__.d(loss_ops_namespaceObject,\"computeWeightedLoss\",function(){return computeWeightedLoss;});__webpack_require__.d(loss_ops_namespaceObject,\"cosineDistance\",function(){return cosineDistance;});__webpack_require__.d(loss_ops_namespaceObject,\"hingeLoss\",function(){return hingeLoss;});__webpack_require__.d(loss_ops_namespaceObject,\"huberLoss\",function(){return huberLoss;});__webpack_require__.d(loss_ops_namespaceObject,\"logLoss\",function(){return logLoss;});__webpack_require__.d(loss_ops_namespaceObject,\"meanSquaredError\",function(){return meanSquaredError;});__webpack_require__.d(loss_ops_namespaceObject,\"sigmoidCrossEntropy\",function(){return sigmoidCrossEntropy;});__webpack_require__.d(loss_ops_namespaceObject,\"softmaxCrossEntropy\",function(){return softmaxCrossEntropy;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg_ops.js\nvar linalg_ops_namespaceObject={};__webpack_require__.r(linalg_ops_namespaceObject);__webpack_require__.d(linalg_ops_namespaceObject,\"bandPart\",function(){return bandPart;});__webpack_require__.d(linalg_ops_namespaceObject,\"gramSchmidt\",function(){return gramSchmidt;});__webpack_require__.d(linalg_ops_namespaceObject,\"qr\",function(){return qr;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js\nvar image_ops_namespaceObject={};__webpack_require__.r(image_ops_namespaceObject);__webpack_require__.d(image_ops_namespaceObject,\"nonMaxSuppression\",function(){return nonMaxSuppression;});__webpack_require__.d(image_ops_namespaceObject,\"resizeBilinear\",function(){return resizeBilinear;});__webpack_require__.d(image_ops_namespaceObject,\"resizeNearestNeighbor\",function(){return resizeNearestNeighbor;});__webpack_require__.d(image_ops_namespaceObject,\"nonMaxSuppressionAsync\",function(){return nonMaxSuppressionAsync;});__webpack_require__.d(image_ops_namespaceObject,\"nonMaxSuppressionWithScore\",function(){return nonMaxSuppressionWithScore;});__webpack_require__.d(image_ops_namespaceObject,\"nonMaxSuppressionWithScoreAsync\",function(){return nonMaxSuppressionWithScoreAsync;});__webpack_require__.d(image_ops_namespaceObject,\"cropAndResize\",function(){return cropAndResize;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js\nvar fused_ops_namespaceObject={};__webpack_require__.r(fused_ops_namespaceObject);__webpack_require__.d(fused_ops_namespaceObject,\"matMul\",function(){return fused_ops_matMul;});__webpack_require__.d(fused_ops_namespaceObject,\"conv2d\",function(){return fused_ops_conv2d;});__webpack_require__.d(fused_ops_namespaceObject,\"depthwiseConv2d\",function(){return fused_ops_depthwiseConv2d;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\nvar ops_namespaceObject={};__webpack_require__.r(ops_namespaceObject);__webpack_require__.d(ops_namespaceObject,\"add\",function(){return add;});__webpack_require__.d(ops_namespaceObject,\"addN\",function(){return addN;});__webpack_require__.d(ops_namespaceObject,\"atan2\",function(){return atan2;});__webpack_require__.d(ops_namespaceObject,\"avgPool\",function(){return avgPool;});__webpack_require__.d(ops_namespaceObject,\"avgPool3d\",function(){return avgPool3d;});__webpack_require__.d(ops_namespaceObject,\"batchToSpaceND\",function(){return batchToSpaceND;});__webpack_require__.d(ops_namespaceObject,\"batchNorm\",function(){return batchNorm;});__webpack_require__.d(ops_namespaceObject,\"batchNorm2d\",function(){return batchNorm2d;});__webpack_require__.d(ops_namespaceObject,\"batchNorm3d\",function(){return batchNorm3d;});__webpack_require__.d(ops_namespaceObject,\"batchNorm4d\",function(){return batchNorm4d;});__webpack_require__.d(ops_namespaceObject,\"broadcastTo\",function(){return broadcastTo;});__webpack_require__.d(ops_namespaceObject,\"clone\",function(){return clone;});__webpack_require__.d(ops_namespaceObject,\"complex\",function(){return complex[\"a\"/* complex */];});__webpack_require__.d(ops_namespaceObject,\"concat\",function(){return concat;});__webpack_require__.d(ops_namespaceObject,\"concat1d\",function(){return concat1d;});__webpack_require__.d(ops_namespaceObject,\"concat2d\",function(){return concat2d;});__webpack_require__.d(ops_namespaceObject,\"concat3d\",function(){return concat3d;});__webpack_require__.d(ops_namespaceObject,\"concat4d\",function(){return concat4d;});__webpack_require__.d(ops_namespaceObject,\"conv1d\",function(){return conv1d;});__webpack_require__.d(ops_namespaceObject,\"conv2d\",function(){return conv2d;});__webpack_require__.d(ops_namespaceObject,\"conv2dTranspose\",function(){return conv2dTranspose;});__webpack_require__.d(ops_namespaceObject,\"conv3d\",function(){return conv3d;});__webpack_require__.d(ops_namespaceObject,\"conv3dTranspose\",function(){return conv3dTranspose;});__webpack_require__.d(ops_namespaceObject,\"cumsum\",function(){return cumsum;});__webpack_require__.d(ops_namespaceObject,\"depthToSpace\",function(){return depthToSpace;});__webpack_require__.d(ops_namespaceObject,\"depthwiseConv2d\",function(){return depthwiseConv2d;});__webpack_require__.d(ops_namespaceObject,\"diag\",function(){return diag;});__webpack_require__.d(ops_namespaceObject,\"div\",function(){return div;});__webpack_require__.d(ops_namespaceObject,\"divNoNan\",function(){return divNoNan;});__webpack_require__.d(ops_namespaceObject,\"dot\",function(){return dot;});__webpack_require__.d(ops_namespaceObject,\"elu\",function(){return elu;});__webpack_require__.d(ops_namespaceObject,\"equal\",function(){return equal;});__webpack_require__.d(ops_namespaceObject,\"eye\",function(){return eye;});__webpack_require__.d(ops_namespaceObject,\"fill\",function(){return fill;});__webpack_require__.d(ops_namespaceObject,\"floorDiv\",function(){return floorDiv;});__webpack_require__.d(ops_namespaceObject,\"greater\",function(){return greater;});__webpack_require__.d(ops_namespaceObject,\"greaterEqual\",function(){return greaterEqual;});__webpack_require__.d(ops_namespaceObject,\"imag\",function(){return imag[\"a\"/* imag */];});__webpack_require__.d(ops_namespaceObject,\"leakyRelu\",function(){return leakyRelu;});__webpack_require__.d(ops_namespaceObject,\"less\",function(){return less;});__webpack_require__.d(ops_namespaceObject,\"lessEqual\",function(){return lessEqual;});__webpack_require__.d(ops_namespaceObject,\"localResponseNormalization\",function(){return localResponseNormalization;});__webpack_require__.d(ops_namespaceObject,\"matMul\",function(){return matMul;});__webpack_require__.d(ops_namespaceObject,\"max\",function(){return max_max;});__webpack_require__.d(ops_namespaceObject,\"maxPool\",function(){return maxPool;});__webpack_require__.d(ops_namespaceObject,\"maxPool3d\",function(){return maxPool3d;});__webpack_require__.d(ops_namespaceObject,\"maxPoolWithArgmax\",function(){return maxPoolWithArgmax;});__webpack_require__.d(ops_namespaceObject,\"maximum\",function(){return maximum;});__webpack_require__.d(ops_namespaceObject,\"minimum\",function(){return minimum;});__webpack_require__.d(ops_namespaceObject,\"mod\",function(){return mod;});__webpack_require__.d(ops_namespaceObject,\"mul\",function(){return mul;});__webpack_require__.d(ops_namespaceObject,\"multinomial\",function(){return multinomial;});__webpack_require__.d(ops_namespaceObject,\"notEqual\",function(){return notEqual;});__webpack_require__.d(ops_namespaceObject,\"oneHot\",function(){return oneHot;});__webpack_require__.d(ops_namespaceObject,\"outerProduct\",function(){return outerProduct;});__webpack_require__.d(ops_namespaceObject,\"pad\",function(){return pad_pad;});__webpack_require__.d(ops_namespaceObject,\"pad1d\",function(){return pad1d;});__webpack_require__.d(ops_namespaceObject,\"pad2d\",function(){return pad2d;});__webpack_require__.d(ops_namespaceObject,\"pad3d\",function(){return pad3d;});__webpack_require__.d(ops_namespaceObject,\"pad4d\",function(){return pad4d;});__webpack_require__.d(ops_namespaceObject,\"pool\",function(){return pool;});__webpack_require__.d(ops_namespaceObject,\"pow\",function(){return pow;});__webpack_require__.d(ops_namespaceObject,\"prelu\",function(){return prelu;});__webpack_require__.d(ops_namespaceObject,\"rand\",function(){return rand;});__webpack_require__.d(ops_namespaceObject,\"randomGamma\",function(){return randomGamma;});__webpack_require__.d(ops_namespaceObject,\"randomNormal\",function(){return randomNormal;});__webpack_require__.d(ops_namespaceObject,\"randomUniform\",function(){return randomUniform;});__webpack_require__.d(ops_namespaceObject,\"real\",function(){return real[\"a\"/* real */];});__webpack_require__.d(ops_namespaceObject,\"relu\",function(){return relu;});__webpack_require__.d(ops_namespaceObject,\"relu6\",function(){return relu6;});__webpack_require__.d(ops_namespaceObject,\"selu\",function(){return selu;});__webpack_require__.d(ops_namespaceObject,\"separableConv2d\",function(){return separableConv2d;});__webpack_require__.d(ops_namespaceObject,\"spaceToBatchND\",function(){return spaceToBatchND;});__webpack_require__.d(ops_namespaceObject,\"split\",function(){return split;});__webpack_require__.d(ops_namespaceObject,\"square\",function(){return square;});__webpack_require__.d(ops_namespaceObject,\"squaredDifference\",function(){return squaredDifference;});__webpack_require__.d(ops_namespaceObject,\"sub\",function(){return sub;});__webpack_require__.d(ops_namespaceObject,\"tile\",function(){return tile;});__webpack_require__.d(ops_namespaceObject,\"truncatedNormal\",function(){return truncatedNormal;});__webpack_require__.d(ops_namespaceObject,\"booleanMaskAsync\",function(){return booleanMaskAsync;});__webpack_require__.d(ops_namespaceObject,\"reverse\",function(){return reverse_reverse;});__webpack_require__.d(ops_namespaceObject,\"reverse1d\",function(){return reverse1d;});__webpack_require__.d(ops_namespaceObject,\"reverse2d\",function(){return reverse2d;});__webpack_require__.d(ops_namespaceObject,\"reverse3d\",function(){return reverse3d;});__webpack_require__.d(ops_namespaceObject,\"reverse4d\",function(){return reverse4d;});__webpack_require__.d(ops_namespaceObject,\"slice\",function(){return slice;});__webpack_require__.d(ops_namespaceObject,\"slice1d\",function(){return slice1d;});__webpack_require__.d(ops_namespaceObject,\"slice2d\",function(){return slice2d;});__webpack_require__.d(ops_namespaceObject,\"slice3d\",function(){return slice3d;});__webpack_require__.d(ops_namespaceObject,\"slice4d\",function(){return slice4d;});__webpack_require__.d(ops_namespaceObject,\"abs\",function(){return abs;});__webpack_require__.d(ops_namespaceObject,\"acos\",function(){return acos;});__webpack_require__.d(ops_namespaceObject,\"acosh\",function(){return acosh;});__webpack_require__.d(ops_namespaceObject,\"asin\",function(){return asin;});__webpack_require__.d(ops_namespaceObject,\"asinh\",function(){return asinh;});__webpack_require__.d(ops_namespaceObject,\"atan\",function(){return atan;});__webpack_require__.d(ops_namespaceObject,\"atanh\",function(){return atanh;});__webpack_require__.d(ops_namespaceObject,\"ceil\",function(){return ceil;});__webpack_require__.d(ops_namespaceObject,\"clipByValue\",function(){return clipByValue;});__webpack_require__.d(ops_namespaceObject,\"cos\",function(){return cos;});__webpack_require__.d(ops_namespaceObject,\"cosh\",function(){return cosh;});__webpack_require__.d(ops_namespaceObject,\"erf\",function(){return erf;});__webpack_require__.d(ops_namespaceObject,\"exp\",function(){return unary_ops_exp;});__webpack_require__.d(ops_namespaceObject,\"expm1\",function(){return expm1;});__webpack_require__.d(ops_namespaceObject,\"floor\",function(){return floor;});__webpack_require__.d(ops_namespaceObject,\"log\",function(){return log;});__webpack_require__.d(ops_namespaceObject,\"log1p\",function(){return log1p;});__webpack_require__.d(ops_namespaceObject,\"logSigmoid\",function(){return logSigmoid;});__webpack_require__.d(ops_namespaceObject,\"neg\",function(){return neg;});__webpack_require__.d(ops_namespaceObject,\"reciprocal\",function(){return reciprocal;});__webpack_require__.d(ops_namespaceObject,\"round\",function(){return round;});__webpack_require__.d(ops_namespaceObject,\"rsqrt\",function(){return rsqrt;});__webpack_require__.d(ops_namespaceObject,\"sigmoid\",function(){return sigmoid;});__webpack_require__.d(ops_namespaceObject,\"sign\",function(){return sign;});__webpack_require__.d(ops_namespaceObject,\"isNaN\",function(){return unary_ops_isNaN;});__webpack_require__.d(ops_namespaceObject,\"isInf\",function(){return isInf;});__webpack_require__.d(ops_namespaceObject,\"isFinite\",function(){return unary_ops_isFinite;});__webpack_require__.d(ops_namespaceObject,\"sin\",function(){return sin;});__webpack_require__.d(ops_namespaceObject,\"sinh\",function(){return sinh;});__webpack_require__.d(ops_namespaceObject,\"softplus\",function(){return softplus;});__webpack_require__.d(ops_namespaceObject,\"sqrt\",function(){return sqrt;});__webpack_require__.d(ops_namespaceObject,\"step\",function(){return unary_ops_step;});__webpack_require__.d(ops_namespaceObject,\"tan\",function(){return tan;});__webpack_require__.d(ops_namespaceObject,\"tanh\",function(){return tanh;});__webpack_require__.d(ops_namespaceObject,\"all\",function(){return reduction_ops_all;});__webpack_require__.d(ops_namespaceObject,\"any\",function(){return any;});__webpack_require__.d(ops_namespaceObject,\"argMax\",function(){return argMax;});__webpack_require__.d(ops_namespaceObject,\"argMin\",function(){return argMin;});__webpack_require__.d(ops_namespaceObject,\"logSumExp\",function(){return logSumExp;});__webpack_require__.d(ops_namespaceObject,\"mean\",function(){return reduction_ops_mean;});__webpack_require__.d(ops_namespaceObject,\"min\",function(){return reduction_ops_min;});__webpack_require__.d(ops_namespaceObject,\"moments\",function(){return moments;});__webpack_require__.d(ops_namespaceObject,\"sum\",function(){return sum;});__webpack_require__.d(ops_namespaceObject,\"prod\",function(){return reduction_ops_prod;});__webpack_require__.d(ops_namespaceObject,\"equalStrict\",function(){return equalStrict;});__webpack_require__.d(ops_namespaceObject,\"greaterEqualStrict\",function(){return greaterEqualStrict;});__webpack_require__.d(ops_namespaceObject,\"greaterStrict\",function(){return greaterStrict;});__webpack_require__.d(ops_namespaceObject,\"lessEqualStrict\",function(){return lessEqualStrict;});__webpack_require__.d(ops_namespaceObject,\"lessStrict\",function(){return lessStrict;});__webpack_require__.d(ops_namespaceObject,\"notEqualStrict\",function(){return notEqualStrict;});__webpack_require__.d(ops_namespaceObject,\"addStrict\",function(){return addStrict;});__webpack_require__.d(ops_namespaceObject,\"divStrict\",function(){return divStrict;});__webpack_require__.d(ops_namespaceObject,\"maximumStrict\",function(){return maximumStrict;});__webpack_require__.d(ops_namespaceObject,\"minimumStrict\",function(){return minimumStrict;});__webpack_require__.d(ops_namespaceObject,\"modStrict\",function(){return modStrict;});__webpack_require__.d(ops_namespaceObject,\"mulStrict\",function(){return mulStrict;});__webpack_require__.d(ops_namespaceObject,\"powStrict\",function(){return powStrict;});__webpack_require__.d(ops_namespaceObject,\"squaredDifferenceStrict\",function(){return squaredDifferenceStrict;});__webpack_require__.d(ops_namespaceObject,\"subStrict\",function(){return subStrict;});__webpack_require__.d(ops_namespaceObject,\"logicalAnd\",function(){return logicalAnd;});__webpack_require__.d(ops_namespaceObject,\"logicalNot\",function(){return logicalNot;});__webpack_require__.d(ops_namespaceObject,\"logicalOr\",function(){return logicalOr;});__webpack_require__.d(ops_namespaceObject,\"logicalXor\",function(){return logicalXor;});__webpack_require__.d(ops_namespaceObject,\"where\",function(){return where;});__webpack_require__.d(ops_namespaceObject,\"whereAsync\",function(){return whereAsync;});__webpack_require__.d(ops_namespaceObject,\"buffer\",function(){return array_ops_buffer;});__webpack_require__.d(ops_namespaceObject,\"print\",function(){return print;});__webpack_require__.d(ops_namespaceObject,\"cast\",function(){return cast;});__webpack_require__.d(ops_namespaceObject,\"expandDims\",function(){return expandDims;});__webpack_require__.d(ops_namespaceObject,\"reshape\",function(){return reshape;});__webpack_require__.d(ops_namespaceObject,\"squeeze\",function(){return squeeze;});__webpack_require__.d(ops_namespaceObject,\"stack\",function(){return stack;});__webpack_require__.d(ops_namespaceObject,\"unstack\",function(){return unstack;});__webpack_require__.d(ops_namespaceObject,\"setdiff1dAsync\",function(){return setdiff1dAsync;});__webpack_require__.d(ops_namespaceObject,\"linspace\",function(){return tensor_ops[\"a\"/* linspace */];});__webpack_require__.d(ops_namespaceObject,\"ones\",function(){return tensor_ops[\"b\"/* ones */];});__webpack_require__.d(ops_namespaceObject,\"range\",function(){return tensor_ops[\"d\"/* range */];});__webpack_require__.d(ops_namespaceObject,\"scalar\",function(){return tensor_ops[\"e\"/* scalar */];});__webpack_require__.d(ops_namespaceObject,\"tensor\",function(){return tensor_ops[\"f\"/* tensor */];});__webpack_require__.d(ops_namespaceObject,\"tensor1d\",function(){return tensor_ops[\"g\"/* tensor1d */];});__webpack_require__.d(ops_namespaceObject,\"tensor2d\",function(){return tensor_ops[\"h\"/* tensor2d */];});__webpack_require__.d(ops_namespaceObject,\"tensor3d\",function(){return tensor_ops[\"i\"/* tensor3d */];});__webpack_require__.d(ops_namespaceObject,\"tensor4d\",function(){return tensor_ops[\"j\"/* tensor4d */];});__webpack_require__.d(ops_namespaceObject,\"tensor5d\",function(){return tensor_ops[\"k\"/* tensor5d */];});__webpack_require__.d(ops_namespaceObject,\"tensor6d\",function(){return tensor_ops[\"l\"/* tensor6d */];});__webpack_require__.d(ops_namespaceObject,\"variable\",function(){return tensor_ops[\"m\"/* variable */];});__webpack_require__.d(ops_namespaceObject,\"zeros\",function(){return tensor_ops[\"n\"/* zeros */];});__webpack_require__.d(ops_namespaceObject,\"onesLike\",function(){return tensor_ops[\"c\"/* onesLike */];});__webpack_require__.d(ops_namespaceObject,\"zerosLike\",function(){return tensor_ops[\"o\"/* zerosLike */];});__webpack_require__.d(ops_namespaceObject,\"transpose\",function(){return transpose;});__webpack_require__.d(ops_namespaceObject,\"softmax\",function(){return softmax;});__webpack_require__.d(ops_namespaceObject,\"logSoftmax\",function(){return logSoftmax;});__webpack_require__.d(ops_namespaceObject,\"norm\",function(){return norm_norm;});__webpack_require__.d(ops_namespaceObject,\"gather\",function(){return gather;});__webpack_require__.d(ops_namespaceObject,\"unsortedSegmentSum\",function(){return unsortedSegmentSum;});__webpack_require__.d(ops_namespaceObject,\"basicLSTMCell\",function(){return basicLSTMCell;});__webpack_require__.d(ops_namespaceObject,\"multiRNNCell\",function(){return multiRNNCell;});__webpack_require__.d(ops_namespaceObject,\"movingAverage\",function(){return movingAverage;});__webpack_require__.d(ops_namespaceObject,\"stridedSlice\",function(){return stridedSlice;});__webpack_require__.d(ops_namespaceObject,\"topk\",function(){return topk;});__webpack_require__.d(ops_namespaceObject,\"scatterND\",function(){return scatterND;});__webpack_require__.d(ops_namespaceObject,\"fft\",function(){return fft;});__webpack_require__.d(ops_namespaceObject,\"ifft\",function(){return ifft;});__webpack_require__.d(ops_namespaceObject,\"rfft\",function(){return rfft;});__webpack_require__.d(ops_namespaceObject,\"irfft\",function(){return irfft;});__webpack_require__.d(ops_namespaceObject,\"sparseToDense\",function(){return sparseToDense;});__webpack_require__.d(ops_namespaceObject,\"gatherND\",function(){return gatherND;});__webpack_require__.d(ops_namespaceObject,\"dropout\",function(){return dropout;});__webpack_require__.d(ops_namespaceObject,\"hannWindow\",function(){return hannWindow;});__webpack_require__.d(ops_namespaceObject,\"hammingWindow\",function(){return hammingWindow;});__webpack_require__.d(ops_namespaceObject,\"frame\",function(){return signal_ops_frame;});__webpack_require__.d(ops_namespaceObject,\"stft\",function(){return stft;});__webpack_require__.d(ops_namespaceObject,\"inTopKAsync\",function(){return inTopKAsync;});__webpack_require__.d(ops_namespaceObject,\"op\",function(){return operation[\"a\"/* op */];});__webpack_require__.d(ops_namespaceObject,\"image\",function(){return image_ops_namespaceObject;});__webpack_require__.d(ops_namespaceObject,\"linalg\",function(){return linalg_ops_namespaceObject;});__webpack_require__.d(ops_namespaceObject,\"losses\",function(){return loss_ops_namespaceObject;});__webpack_require__.d(ops_namespaceObject,\"spectral\",function(){return spectral_ops_namespaceObject;});__webpack_require__.d(ops_namespaceObject,\"fused\",function(){return fused_ops_namespaceObject;});__webpack_require__.d(ops_namespaceObject,\"signal\",function(){return signal_ops_namespaceObject;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js\nvar backend_util_namespaceObject={};__webpack_require__.r(backend_util_namespaceObject);__webpack_require__.d(backend_util_namespaceObject,\"axesAreInnerMostDims\",function(){return axesAreInnerMostDims;});__webpack_require__.d(backend_util_namespaceObject,\"combineLocations\",function(){return combineLocations;});__webpack_require__.d(backend_util_namespaceObject,\"computeOutAndReduceShapes\",function(){return computeOutAndReduceShapes;});__webpack_require__.d(backend_util_namespaceObject,\"expandShapeToKeepDim\",function(){return expandShapeToKeepDim;});__webpack_require__.d(backend_util_namespaceObject,\"assertAxesAreInnerMostDims\",function(){return assertAxesAreInnerMostDims;});__webpack_require__.d(backend_util_namespaceObject,\"getAxesPermutation\",function(){return getAxesPermutation;});__webpack_require__.d(backend_util_namespaceObject,\"getUndoAxesPermutation\",function(){return getUndoAxesPermutation;});__webpack_require__.d(backend_util_namespaceObject,\"getInnerMostAxes\",function(){return getInnerMostAxes;});__webpack_require__.d(backend_util_namespaceObject,\"getBroadcastDims\",function(){return getBroadcastDims;});__webpack_require__.d(backend_util_namespaceObject,\"getReductionAxes\",function(){return getReductionAxes;});__webpack_require__.d(backend_util_namespaceObject,\"assertAndGetBroadcastShape\",function(){return assertAndGetBroadcastShape;});__webpack_require__.d(backend_util_namespaceObject,\"assertParamsConsistent\",function(){return assertParamsConsistent;});__webpack_require__.d(backend_util_namespaceObject,\"computeOutShape\",function(){return computeOutShape;});__webpack_require__.d(backend_util_namespaceObject,\"computePool2DInfo\",function(){return computePool2DInfo;});__webpack_require__.d(backend_util_namespaceObject,\"computePool3DInfo\",function(){return computePool3DInfo;});__webpack_require__.d(backend_util_namespaceObject,\"computeConv2DInfo\",function(){return computeConv2DInfo;});__webpack_require__.d(backend_util_namespaceObject,\"computeConv3DInfo\",function(){return computeConv3DInfo;});__webpack_require__.d(backend_util_namespaceObject,\"computeDefaultPad\",function(){return computeDefaultPad;});__webpack_require__.d(backend_util_namespaceObject,\"tupleValuesAreOne\",function(){return tupleValuesAreOne;});__webpack_require__.d(backend_util_namespaceObject,\"eitherStridesOrDilationsAreOne\",function(){return eitherStridesOrDilationsAreOne;});__webpack_require__.d(backend_util_namespaceObject,\"convertConv2DDataFormat\",function(){return convertConv2DDataFormat;});__webpack_require__.d(backend_util_namespaceObject,\"PARALLELIZE_THRESHOLD\",function(){return PARALLELIZE_THRESHOLD;});__webpack_require__.d(backend_util_namespaceObject,\"computeOptimalWindowSize\",function(){return computeOptimalWindowSize;});__webpack_require__.d(backend_util_namespaceObject,\"nonMaxSuppressionV3\",function(){return nonMaxSuppressionV3;});__webpack_require__.d(backend_util_namespaceObject,\"nonMaxSuppressionV5\",function(){return nonMaxSuppressionV5;});__webpack_require__.d(backend_util_namespaceObject,\"upcastType\",function(){return dist_types[\"c\"/* upcastType */];});__webpack_require__.d(backend_util_namespaceObject,\"getReshaped\",function(){return getReshaped;});__webpack_require__.d(backend_util_namespaceObject,\"getPermuted\",function(){return getPermuted;});__webpack_require__.d(backend_util_namespaceObject,\"getReshapedPermuted\",function(){return getReshapedPermuted;});__webpack_require__.d(backend_util_namespaceObject,\"getSliceBeginCoords\",function(){return getSliceBeginCoords;});__webpack_require__.d(backend_util_namespaceObject,\"getSliceSize\",function(){return getSliceSize;});__webpack_require__.d(backend_util_namespaceObject,\"prepareAndValidate\",function(){return prepareAndValidate;});__webpack_require__.d(backend_util_namespaceObject,\"validateUpdateShape\",function(){return validateUpdateShape;});__webpack_require__.d(backend_util_namespaceObject,\"validateInput\",function(){return validateInput;});__webpack_require__.d(backend_util_namespaceObject,\"calculateShapes\",function(){return calculateShapes;});__webpack_require__.d(backend_util_namespaceObject,\"SELU_SCALEALPHA\",function(){return SELU_SCALEALPHA;});__webpack_require__.d(backend_util_namespaceObject,\"SELU_SCALE\",function(){return SELU_SCALE;});__webpack_require__.d(backend_util_namespaceObject,\"shouldFuse\",function(){return shouldFuse;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_P\",function(){return ERF_P;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_A1\",function(){return ERF_A1;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_A2\",function(){return ERF_A2;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_A3\",function(){return ERF_A3;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_A4\",function(){return ERF_A4;});__webpack_require__.d(backend_util_namespaceObject,\"ERF_A5\",function(){return ERF_A5;});__webpack_require__.d(backend_util_namespaceObject,\"warn\",function(){return warn;});__webpack_require__.d(backend_util_namespaceObject,\"log\",function(){return log_log;});__webpack_require__.d(backend_util_namespaceObject,\"mergeRealAndImagArrays\",function(){return mergeRealAndImagArrays;});__webpack_require__.d(backend_util_namespaceObject,\"splitRealAndImagArrays\",function(){return splitRealAndImagArrays;});__webpack_require__.d(backend_util_namespaceObject,\"complexWithEvenIndex\",function(){return complexWithEvenIndex;});__webpack_require__.d(backend_util_namespaceObject,\"complexWithOddIndex\",function(){return complexWithOddIndex;});__webpack_require__.d(backend_util_namespaceObject,\"getComplexWithIndex\",function(){return getComplexWithIndex;});__webpack_require__.d(backend_util_namespaceObject,\"assignToTypedArray\",function(){return assignToTypedArray;});__webpack_require__.d(backend_util_namespaceObject,\"exponents\",function(){return exponents;});__webpack_require__.d(backend_util_namespaceObject,\"exponent\",function(){return exponent;});__webpack_require__.d(backend_util_namespaceObject,\"segment_util\",function(){return segment_util_namespaceObject;});__webpack_require__.d(backend_util_namespaceObject,\"castTensor\",function(){return castTensor;});__webpack_require__.d(backend_util_namespaceObject,\"reshapeTensor\",function(){return reshapeTensor;});__webpack_require__.d(backend_util_namespaceObject,\"linspaceImpl\",function(){return linspaceImpl;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js\nvar kernel_impls_namespaceObject={};__webpack_require__.r(kernel_impls_namespaceObject);__webpack_require__.d(kernel_impls_namespaceObject,\"nonMaxSuppressionV3\",function(){return nonMaxSuppressionV3;});__webpack_require__.d(kernel_impls_namespaceObject,\"nonMaxSuppressionV5\",function(){return nonMaxSuppressionV5;});__webpack_require__.d(kernel_impls_namespaceObject,\"split\",function(){return split_shared_split;});__webpack_require__.d(kernel_impls_namespaceObject,\"tile\",function(){return tile_impl_tile;});__webpack_require__.d(kernel_impls_namespaceObject,\"topkImpl\",function(){return topkImpl;});__webpack_require__.d(kernel_impls_namespaceObject,\"whereImpl\",function(){return whereImpl;});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/engine.js + 2 modules\nvar engine=__webpack_require__(5);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/flags.js\nvar flags=__webpack_require__(61);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js\nvar kernel_names=__webpack_require__(6);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the dimensions in the input shape that are broadcasted to\r\n * produce the provided output shape.\r\n *\r\n * The returned dimensions are 0-indexed and sorted. An example:\r\n * inShape = [4, 1, 3]\r\n * outShape = [5, 4, 3, 3]\r\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\r\n */function getBroadcastDims(inShape,outShape){var inRank=inShape.length;var dims=[];for(var i=0;i<inRank;i++){var dim=inRank-1-i;var a=inShape[dim]||1;var b=outShape[outShape.length-1-i]||1;if(b>1&&a===1){dims.unshift(dim);}}return dims;}/**\r\n * Returns the axes in the output space that should be reduced to produce\r\n * the input space.\r\n */function getReductionAxes(inShape,outShape){var result=[];for(var i=0;i<outShape.length;i++){var inDim=inShape[inShape.length-i-1];var outAxis=outShape.length-i-1;var outDim=outShape[outAxis];if(inDim==null||inDim===1&&outDim>1){result.unshift(outAxis);}}return result;}function assertAndGetBroadcastShape(shapeA,shapeB){var result=[];var l=Math.max(shapeA.length,shapeB.length);for(var i=0;i<l;i++){var a=shapeA[shapeA.length-i-1];if(a==null){a=1;}var b=shapeB[shapeB.length-i-1];if(b==null){b=1;}if(a===1){result.unshift(b);}else if(b===1){result.unshift(a);}else if(a!==b){var errMsg=\"Operands could not be broadcast together with shapes \"+\"\".concat(shapeA,\" and \").concat(shapeB,\".\");throw Error(errMsg);}else{result.unshift(a);}}return result;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var addGradConfig={kernelName:kernel_names[\"a\"/* Add */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved=_slicedToArray(saved,2),a=_saved[0],b=_saved[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var res=dy;var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){res=res.sum(reduceAxes);}return res.reshape(a.shape);};var derB=function derB(){var res=dy;var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){res=res.sum(reduceAxes);}return res.reshape(b.shape);};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var addNGradConfig={kernelName:kernel_names[\"b\"/* AddN */],saveAllInputs:true,gradFunc:function gradFunc(dy,saved){var ders={};saved.forEach(function(_,i){ders[i]=function(){return dy.clone();};});return ders;}};// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\nvar tensor_util=__webpack_require__(11);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js\nvar tensor_util_env=__webpack_require__(3);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\nvar operation=__webpack_require__(4);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/add.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast add a with b.\r\n * const a = tf.scalar(5);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n * @param a The first `tf.Tensor` to add.\r\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function add_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','add');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','add');var _Object=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object2=_slicedToArray(_Object,2);$a=_Object2[0];$b=_Object2[1];var forward=function forward(backend,save){var res=backend.add($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"a\"/* Add */]);}var add=Object(operation[\"a\"/* op */])({add_:add_});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor.js + 1 modules\nvar dist_tensor=__webpack_require__(7);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/util.js\nvar util=__webpack_require__(1);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function assertParamsConsistent(shapes,axis){var rank=shapes[0].length;shapes.forEach(function(shape,i){util[\"assert\"](shape.length===rank,function(){return\"Error in concat\".concat(rank,\"D: rank of tensors[\").concat(i,\"] must be the same \")+\"as the rank of the rest (\".concat(rank,\")\");});});util[\"assert\"](axis>=0&&axis<rank,function(){return\"Error in concat\".concat(rank,\"D: axis must be between 0 and \").concat(rank-1,\".\");});var firstShape=shapes[0];shapes.forEach(function(shape,i){for(var r=0;r<rank;r++){util[\"assert\"](r===axis||shape[r]===firstShape[r],function(){return\"Error in concat\".concat(rank,\"D: Shape of tensors[\").concat(i,\"] (\").concat(shape,\") \")+\"does not match the shape of the rest (\".concat(firstShape,\") \")+\"along the non-concatenated axis \".concat(i,\".\");});}});}function computeOutShape(shapes,axis){var outputShape=shapes[0].slice();for(var i=1;i<shapes.length;i++){outputShape[axis]+=shapes[i][axis];}return outputShape;}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops.js\nvar tensor_ops=__webpack_require__(8);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Concatenates a list of `tf.Tensor`s along a given axis.\r\n *\r\n * The tensors ranks and types must match, and their sizes must match in all\r\n * dimensions except `axis`.\r\n *\r\n * Also available are stricter rank-specific methods that assert that\r\n * `tensors` are of the given rank:\r\n *   - `tf.concat1d`\r\n *   - `tf.concat2d`\r\n *   - `tf.concat3d`\r\n *   - `tf.concat4d`\r\n *\r\n * Except `tf.concat1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * a.concat(b).print();  // or a.concat(b)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n * tf.concat([a, b, c]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\r\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\r\n * const axis = 1;\r\n * tf.concat([a, b], axis).print();\r\n * ```\r\n * @param tensors A list of tensors to concatenate.\r\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function concat_(tensors){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;Object(util[\"assert\"])(tensors.length>=1,function(){return'Pass at least one tensor to concat';});var $tensors=Object(tensor_util_env[\"b\"/* convertToTensorArray */])(tensors,'tensors','concat');if($tensors[0].dtype==='complex64'){$tensors.forEach(function(tensor){if(tensor.dtype!=='complex64'){throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \".concat(tensor.dtype,\". \"));}});}var $axis=Object(util[\"parseAxisParam\"])(axis,$tensors[0].shape)[0];var outShape=computeOutShape($tensors.map(function(t){return t.shape;}),$axis);if(Object(util[\"sizeFromShape\"])(outShape)===0){return Object(tensor_ops[\"f\"/* tensor */])([],outShape);}// Keep only non-empty tensors (ignore tensors with 0 in their shape).\n$tensors=$tensors.filter(function(t){return t.size>0;});if($tensors.length===1){return $tensors[0];}var shapes=$tensors.map(function(t){return t.shape;});assertParamsConsistent(shapes,$axis);var forward=function forward(backend,save){var res=backend.concat($tensors,$axis);save($tensors);return res;};var inputs=$tensors;var attr={axis:axis};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"l\"/* Concat */],attr);}var concat=Object(operation[\"a\"/* op */])({concat_:concat_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Reshapes a `tf.Tensor` to a given shape.\r\n *\r\n * Given an input tensor, returns a new tensor with the same values as the\r\n * input tensor with shape `shape`.\r\n *\r\n * If one component of shape is the special value -1, the size of that\r\n * dimension is computed so that the total size remains constant. In\r\n * particular, a shape of [-1] flattens into 1-D. At most one component of\r\n * shape can be -1.\r\n *\r\n * If shape is 1-D or higher, then the operation returns a tensor with shape\r\n * shape filled with the values of tensor. In this case, the number of\r\n * elements implied by shape must be the same as the number of elements in\r\n * tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.reshape([2, 2]).print();\r\n * ```\r\n *\r\n * @param x The input tensor to be reshaped.\r\n * @param shape An array of integers defining the output tensor shape.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function reshape_(x,shape){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reshape',null);shape=util[\"inferFromImplicitShape\"](shape,$x.size);util[\"assert\"]($x.size===util[\"sizeFromShape\"](shape),function(){return'new shape and old shape must have the same number of elements.';});var grad=function grad(dy){return{x:function x(){return dy.reshape($x.shape);}};};var attrs={shape:shape};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.reshape($x,shape);},{x:$x},grad,'Reshape',attrs);}/**\r\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\r\n * x.squeeze().print();\r\n * ```\r\n *\r\n * @param x The input tensor to be squeezed.\r\n * @param axis An optional list of numbers. If specified, only\r\n *     squeezes the dimensions listed. The dimension index starts at 0. It\r\n * is an error to squeeze a dimension that is not 1.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function squeeze_(x,axis){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','squeeze');return reshape($x,util[\"squeezeShape\"]($x.shape,axis).newShape);}/**\r\n * Casts a `tf.Tensor` to a new dtype.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1.5, 2.5, 3]);\r\n * tf.cast(x, 'int32').print();\r\n * ```\r\n * @param x The input tensor to be casted.\r\n * @param dtype The dtype to cast the input tensor to.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function cast_(x,dtype){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','cast');// Sanity checks.\nif(!util[\"isValidDtype\"](dtype)){throw new Error(\"Failed to cast to unknown dtype \".concat(dtype));}if(dtype==='string'&&$x.dtype!=='string'||dtype!=='string'&&$x.dtype==='string'){throw new Error('Only strings can be casted to strings');}var grad=function grad(dy){return{x:function x(){return dy.clone();}};};var attrs={dtype:dtype};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.cast($x,dtype);},{x:$x},grad,'Cast',attrs);}/**\r\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n * tf.stack([a, b, c]).print();\r\n * ```\r\n *\r\n * @param tensors A list of tensor objects with the same shape and dtype.\r\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function stack_(tensors){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var $tensors=Object(tensor_util_env[\"b\"/* convertToTensorArray */])(tensors,'tensors','stack');util[\"assert\"]($tensors.length>=1,function(){return'Pass at least one tensor to tf.stack';});if($tensors.length===1){return $tensors[0].expandDims(axis);}var rank=$tensors[0].rank;var shape=$tensors[0].shape;var dtype=$tensors[0].dtype;util[\"assert\"](axis<=rank,function(){return'Axis must be <= rank of the tensor';});$tensors.forEach(function(t){util[\"assertShapesMatch\"](shape,t.shape,'All tensors passed to stack must have matching shapes');});$tensors.forEach(function(t){util[\"assert\"](dtype===t.dtype,function(){return'All tensors passed to stack must have matching dtypes';});});var expandedTensors=$tensors.map(function(t){return t.expandDims(axis);});return concat(expandedTensors,axis);}/**\r\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * tf.unstack(a).forEach(tensor => tensor.print());\r\n * ```\r\n *\r\n * @param x A tensor object.\r\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function unstack_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;axis=axis||0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','unstack');util[\"assert\"](axis>=-$x.shape.length&&axis<$x.shape.length,function(){return\"Axis = \".concat(axis,\" is not in [-\").concat($x.shape.length,\", \").concat($x.shape.length,\")\");});if(axis<0){axis+=$x.shape.length;}var grad=function grad(dy){return{x:function x(){return stack(dy,axis);}};};var attrs={axis:axis};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.unstack($x,axis);},{x:$x},grad,'Unpack',attrs);}/**\r\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\r\n * into the tensor's shape.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const axis = 1;\r\n * x.expandDims(axis).print();\r\n * ```\r\n *\r\n * @param x The input tensor whose dimensions to be expanded.\r\n * @param axis The dimension index at which to insert shape of `1`. Defaults\r\n *     to 0 (the first dimension).\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function expandDims_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var parseAs=null;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','expandDims',parseAs);util[\"assert\"](axis<=$x.rank,function(){return'Axis must be <= rank of the tensor';});var newShape=$x.shape.slice();if(axis<0){// Negative value is counted from the tail of rank.\nutil[\"assert\"](-($x.rank+1)<=axis,function(){return\"Axis must be in the interval [\".concat(-($x.rank+1),\", \").concat($x.rank,\"]\");});axis=$x.rank+axis+1;}newShape.splice(axis,0,1);return reshape($x,newShape);}/**\r\n * Computes the difference between two lists of numbers.\r\n *\r\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\r\n * that represents all values that are in `x` but not in `y`. The returned\r\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\r\n * (duplicates are preserved). This operation also returns a Tensor indices that\r\n * represents the position of each out element in `x`. In other words:\r\n *\r\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\r\n *\r\n * ```js\r\n * const x = [1, 2, 3, 4, 5, 6];\r\n * const y = [1, 3, 5];\r\n *\r\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\r\n * out.print(); // [2, 4, 6]\r\n * indices.print(); // [1, 3, 5]\r\n * ```\r\n *\r\n * @param x 1-D Tensor. Values to keep.\r\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\r\n *     output.\r\n * @returns Promise of Tensor tuple [out, indices].\r\n *  out: Tensor with the same type as x.\r\n *  indices: A Tensor of type int32.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function setdiff1dAsync_(_x,_x2){return _setdiff1dAsync_.apply(this,arguments);}/**\r\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\r\n *\r\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\r\n * `buffer.set()`, or by modifying directly `buffer.values`.\r\n *\r\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\r\n * those values.\r\n *\r\n * ```js\r\n * // Create a buffer and set values at particular indices.\r\n * const buffer = tf.buffer([2, 2]);\r\n * buffer.set(3, 0, 0);\r\n * buffer.set(5, 1, 0);\r\n *\r\n * // Convert the buffer back to a tensor.\r\n * buffer.toTensor().print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\r\n * @param values The values of the buffer as `TypedArray`. Defaults to\r\n * zeros.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function _setdiff1dAsync_(){_setdiff1dAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee35(x,y){var $x,$y,xVals,yVals,ySet,outputSize,i,buffer,indices,_i19,p;return regeneratorRuntime.wrap(function _callee35$(_context35){while(1){switch(_context35.prev=_context35.next){case 0:$x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','setdiff1d');$y=Object(tensor_util_env[\"a\"/* convertToTensor */])(y,'y','setdiff1d');util[\"assert\"]($x.dtype===$y.dtype,function(){return\"x and y should have the same dtype, but got x (\".concat($x.dtype,\") and y (\").concat($y.dtype,\").\");});util[\"assert\"]($x.rank===1,function(){return\"x should be 1D tensor, but got x (\".concat($x.shape,\").\");});util[\"assert\"]($y.rank===1,function(){return\"y should be 1D tensor, but got y (\".concat($y.shape,\").\");});_context35.next=7;return $x.data();case 7:xVals=_context35.sent;_context35.next=10;return $y.data();case 10:yVals=_context35.sent;ySet=new Set(yVals);outputSize=0;for(i=0;i<xVals.length;i++){if(!ySet.has(xVals[i])){outputSize++;}}buffer=new dist_tensor[\"b\"/* TensorBuffer */]([outputSize],$x.dtype);indices=new dist_tensor[\"b\"/* TensorBuffer */]([outputSize],'int32');for(_i19=0,p=0;_i19<xVals.length;_i19++){if(!ySet.has(xVals[_i19])){buffer.values[p]=xVals[_i19];indices.values[p]=_i19;p++;}}return _context35.abrupt(\"return\",[buffer.toTensor(),indices.toTensor()]);case 18:case\"end\":return _context35.stop();}}},_callee35);}));return _setdiff1dAsync_.apply(this,arguments);}function array_ops_buffer(shape){var dtype=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'float32';var values=arguments.length>2?arguments[2]:undefined;dtype=dtype||'float32';util[\"assertNonNegativeIntegerDimensions\"](shape);return new dist_tensor[\"b\"/* TensorBuffer */](shape,dtype,values);}/**\r\n * Prints information about the `tf.Tensor` including its data.\r\n *\r\n * ```js\r\n * const verbose = true;\r\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\r\n * ```\r\n * @param x The tensor to be printed.\r\n * @param verbose Whether to print verbose information about the ` Tensor`,\r\n * including dtype and size.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function print(x){var verbose=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;console.log(x.toString(verbose));}var cast=Object(operation[\"a\"/* op */])({cast_:cast_});var expandDims=Object(operation[\"a\"/* op */])({expandDims_:expandDims_});var reshape=Object(operation[\"a\"/* op */])({reshape_:reshape_});var squeeze=Object(operation[\"a\"/* op */])({squeeze_:squeeze_});var stack=Object(operation[\"a\"/* op */])({stack_:stack_});var unstack=Object(operation[\"a\"/* op */])({unstack_:unstack_});var setdiff1dAsync=setdiff1dAsync_;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\r\n * The result is rounded with floor function.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * a.floorDiv(b).print();  // or tf.div(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n *\r\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function floorDiv_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','floorDiv');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','floorDiv');var _Object3=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object4=_slicedToArray(_Object3,2);$a=_Object4[0];$b=_Object4[1];var forward=function forward(backend,save){var res=backend.floorDiv($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"D\"/* FloorDiv */]);}var floorDiv=Object(operation[\"a\"/* op */])({floorDiv_:floorDiv_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/div.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * a.div(b).print();  // or tf.div(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n *\r\n * a.div(b).print();  // or tf.div(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function div_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','div');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','div');var _Object5=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object6=_slicedToArray(_Object5,2);$a=_Object6[0];$b=_Object6[1];if($a.dtype==='int32'&&$b.dtype==='int32'){return floorDiv($a,$b);}var forward=function forward(backend,save){var res=backend.realDivide($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};var attrs={};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"y\"/* Div */],attrs);}var div=Object(operation[\"a\"/* op */])({div_:div_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\r\n *\r\n * We also expose `tf.mulStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.tensor1d([2, 3, 4, 5]);\r\n *\r\n * a.mul(b).print();  // or tf.mul(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast mul a with b.\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.mul(b).print();  // or tf.mul(a, b)\r\n * ```\r\n * @param a The first tensor to multiply.\r\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function mul_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','mul');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','mul');var _Object7=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object8=_slicedToArray(_Object7,2);$a=_Object8[0];$b=_Object8[1];var forward=function forward(backend,save){var res=backend.multiply($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"Y\"/* Multiply */]);}var mul=Object(operation[\"a\"/* op */])({mul_:mul_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\r\n * gradient of `f(x)` with respect to `x`.\r\n *\r\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\r\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\r\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\r\n *\r\n * ```js\r\n * // f(x) = x ^ 2\r\n * const f = x => x.square();\r\n * // f'(x) = 2x\r\n * const g = tf.grad(f);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * g(x).print();\r\n * ```\r\n *\r\n * ```js\r\n * // f(x) = x ^ 3\r\n * const f = x => x.pow(tf.scalar(3, 'int32'));\r\n * // f'(x) = 3x ^ 2\r\n * const g = tf.grad(f);\r\n * // f''(x) = 6x\r\n * const gg = tf.grad(g);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * gg(x).print();\r\n * ```\r\n *\r\n * @param f The function f(x), to compute gradient for.\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function gradients_grad(f){util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in grad(f) must be a function';});return function(x,dy){// x can be of any dtype, thus null as the last argument.\nvar $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','tf.grad',null);var $dy=dy!=null?Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','tf.grad'):null;return engine[\"a\"/* ENGINE */].tidy(function(){var _engine$a$gradients=engine[\"a\"/* ENGINE */].gradients(function(){return f($x);},[$x],$dy),value=_engine$a$gradients.value,grads=_engine$a$gradients.grads;if($dy!=null){util[\"assertShapesMatch\"](value.shape,$dy.shape,'The shape of dy passed in grad(f)(x, dy) must match the shape '+'returned by f(x)');}checkGrads(grads);return grads[0];});};}/**\r\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\r\n * which gives an array of gradients of `f()` with respect to each input\r\n * [`x1`,`x2`,...].\r\n *\r\n * If `dy` is passed when calling `g()`, the gradient of\r\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\r\n * The provided `f` must take one or more tensors and return a single tensor\r\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\r\n *\r\n * ```js\r\n * // f(a, b) = a * b\r\n * const f = (a, b) => a.mul(b);\r\n * // df / da = b, df / db = a\r\n * const g = tf.grads(f);\r\n *\r\n * const a = tf.tensor1d([2, 3]);\r\n * const b = tf.tensor1d([-2, -3]);\r\n * const [da, db] = g([a, b]);\r\n * console.log('da');\r\n * da.print();\r\n * console.log('db');\r\n * db.print();\r\n * ```\r\n *\r\n * @param f The function `f(x1, x2,...)` to compute gradients for.\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function gradients_grads(f){util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in grads(f) must be a function';});return function(args,dy){util[\"assert\"](Array.isArray(args),function(){return'The args passed in grads(f)(args) must be an array '+'of `Tensor`s or `TensorLike`s';});// args can be of any dtype, thus null as the last argument.\nvar $args=Object(tensor_util_env[\"b\"/* convertToTensorArray */])(args,'args','tf.grads',null);var $dy=dy!=null?Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','tf.grads'):null;return engine[\"a\"/* ENGINE */].tidy(function(){var _engine$a$gradients2=engine[\"a\"/* ENGINE */].gradients(function(){return f.apply(void 0,_toConsumableArray2($args));},$args,$dy),value=_engine$a$gradients2.value,grads=_engine$a$gradients2.grads;if($dy!=null){util[\"assertShapesMatch\"](value.shape,$dy.shape,'The shape of dy passed in grads(f)([x1,...], dy) must '+'match the shape returned by f([x1,...])');}checkGrads(grads);return grads;});};}/**\r\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\r\n * returns a metric you want to show.\r\n *\r\n * The result is a rich object with the following properties:\r\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\r\n * - value: The value returned by `f(x)`.\r\n *\r\n * ```js\r\n * // f(x) = x ^ 2\r\n * const f = x => x.square();\r\n * // f'(x) = 2x\r\n * const g = tf.valueAndGrad(f);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * const {value, grad} = g(x);\r\n *\r\n * console.log('value');\r\n * value.print();\r\n * console.log('grad');\r\n * grad.print();\r\n * ```\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function valueAndGrad(f){util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in valueAndGrad(f) must be a function';});return function(x,dy){util[\"assert\"](x instanceof dist_tensor[\"a\"/* Tensor */],function(){return'The x passed in valueAndGrad(f)(x) must be a tensor';});util[\"assert\"](dy==null||dy instanceof dist_tensor[\"a\"/* Tensor */],function(){return'The dy passed in valueAndGrad(f)(x, dy) must be a tensor';});var _engine$a$gradients3=engine[\"a\"/* ENGINE */].gradients(function(){return f(x);},[x],dy),grads=_engine$a$gradients3.grads,value=_engine$a$gradients3.value;checkGrads(grads);return{grad:grads[0],value:value};};}/**\r\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\r\n * returns a metric you want to show.\r\n *\r\n * The result is a rich object with the following properties:\r\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\r\n * - value: The value returned by `f(x)`.\r\n *\r\n * ```js\r\n * // f(a, b) = a * b\r\n * const f = (a, b) => a.mul(b);\r\n * // df/da = b, df/db = a\r\n * const g = tf.valueAndGrads(f);\r\n *\r\n * const a = tf.tensor1d([2, 3]);\r\n * const b = tf.tensor1d([-2, -3]);\r\n * const {value, grads} = g([a, b]);\r\n *\r\n * const [da, db] = grads;\r\n *\r\n * console.log('value');\r\n * value.print();\r\n *\r\n * console.log('da');\r\n * da.print();\r\n * console.log('db');\r\n * db.print();\r\n * ```\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function valueAndGrads(f){util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in valueAndGrads(f) must be a function';});return function(args,dy){util[\"assert\"](Array.isArray(args)&&args.every(function(arg){return arg instanceof dist_tensor[\"a\"/* Tensor */];}),function(){return'The args passed in valueAndGrads(f)(args) must be array of '+'tensors';});util[\"assert\"](dy==null||dy instanceof dist_tensor[\"a\"/* Tensor */],function(){return'The dy passed in valueAndGrads(f)(args, dy) must be a tensor';});var res=engine[\"a\"/* ENGINE */].gradients(function(){return f.apply(void 0,_toConsumableArray2(args));},args,dy);if(dy!=null){util[\"assertShapesMatch\"](res.value.shape,dy.shape,'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must '+'match the shape returned by f([x1,...])');}checkGrads(res.grads);return res;};}/**\r\n * Computes and returns the gradient of f(x) with respect to the list of\r\n * trainable variables provided by `varList`. If no list is provided, it\r\n * defaults to all trainable variables.\r\n *\r\n * ```js\r\n * const a = tf.variable(tf.tensor1d([3, 4]));\r\n * const b = tf.variable(tf.tensor1d([5, 6]));\r\n * const x = tf.tensor1d([1, 2]);\r\n *\r\n * // f(a, b) = a * x ^ 2 + b * x\r\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\r\n * // df/da = x ^ 2, df/db = x\r\n * const {value, grads} = tf.variableGrads(f);\r\n *\r\n * Object.keys(grads).forEach(varName => grads[varName].print());\r\n * ```\r\n *\r\n * @param f The function to execute. f() should return a scalar.\r\n * @param varList The list of variables to compute the gradients with respect\r\n *     to. Defaults to all trainable variables.\r\n * @returns An object with the following keys and values:\r\n *   - `value`: The value of the function `f`.\r\n *   - `grads`: A map from the names of the variables to the gradients.\r\n *     If the `varList` argument is provided explicitly and contains a subset of\r\n *     non-trainable variables, this map in the return value will contain keys\r\n *     that map the names of the non-trainable variables to `null`.\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function variableGrads(f,varList){util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in variableGrads(f) must be a function';});util[\"assert\"](varList==null||Array.isArray(varList)&&varList.every(function(v){return v instanceof dist_tensor[\"c\"/* Variable */];}),function(){return'The varList passed in variableGrads(f, varList) must be an array '+'of variables';});var specifiedVarList=varList!=null;if(!specifiedVarList){// Get all of the trainable variables.\nvarList=[];for(var varName in engine[\"a\"/* ENGINE */].registeredVariables){varList.push(engine[\"a\"/* ENGINE */].registeredVariables[varName]);}}var specifiedNonTrainable=specifiedVarList?varList.filter(function(variable){return!variable.trainable;}):null;// Prune non-trainable variables.\nvar originalVarCount=varList.length;varList=varList.filter(function(variable){return variable.trainable;});util[\"assert\"](varList.length>0,function(){return\"variableGrads() expects at least one of the input variables to \"+\"be trainable, but none of the \".concat(originalVarCount,\" variables is \")+\"trainable.\";});var allowNoGradients=true;var _engine$a$gradients4=engine[\"a\"/* ENGINE */].gradients(f,varList,null,allowNoGradients),value=_engine$a$gradients4.value,grads=_engine$a$gradients4.grads;util[\"assert\"](grads.some(function(g){return g!=null;}),function(){return'Cannot find a connection between any variable and the result of '+'the loss function y=f(x). Please make sure the operations that '+'use variables are inside the function f passed to minimize().';});util[\"assert\"](value.rank===0,function(){return\"The f passed in variableGrads(f) must return a scalar, but it \"+\"returned a rank-\".concat(value.rank,\" tensor\");});var namedGrads={};varList.forEach(function(v,i){if(grads[i]!=null){namedGrads[v.name]=grads[i];}});if(specifiedNonTrainable!=null){// If varList is explicitly provided and contains non-trainable values,\n// add them to the returned gradients with `null` values.\nspecifiedNonTrainable.forEach(function(v){return namedGrads[v.name]=null;});}return{value:value,grads:namedGrads};}/**\r\n * Overrides the gradient computation of a function `f`.\r\n *\r\n * Takes a function\r\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\r\n * and returns another function `g(...inputs)` which takes the same inputs as\r\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\r\n * with respect to each input of `f` are computed using `f().gradFunc`.\r\n *\r\n * The `save` function passsed to `f` should be used for saving tensors needed\r\n * in the gradient. And the `saved` passed to the `gradFunc` is a\r\n * `NamedTensorMap`, which contains those saved tensor.\r\n *\r\n * ```js\r\n * const customOp = tf.customGrad((x, save) => {\r\n *   // Save x to make sure it's available later for the gradient.\r\n *   save([x]);\r\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\r\n *   return {\r\n *     value: x.square(),\r\n *     // Note `saved.x` which points to the `x` we saved earlier.\r\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\r\n *   };\r\n * });\r\n *\r\n * const x = tf.tensor1d([-1, -2, 3]);\r\n * const dx = tf.grad(x => customOp(x));\r\n *\r\n * console.log(`f(x):`);\r\n * customOp(x).print();\r\n * console.log(`f'(x):`);\r\n * dx(x).print();\r\n * ```\r\n *\r\n * @param f The function to evaluate in forward mode, which should return\r\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\r\n *     returns the custom gradients of `f` with respect to its inputs.\r\n */ /** @doc {heading: 'Training', subheading: 'Gradients'} */function customGrad(f){return engine[\"a\"/* ENGINE */].customGrad(f);}function checkGrads(grads){var numNullGradients=grads.filter(function(g){return g==null;}).length;if(numNullGradients>0){throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns true if the axis specifies the inner most dimensions of the\r\n * array.\r\n */function axesAreInnerMostDims(axes,rank){for(var i=0;i<axes.length;++i){if(axes[axes.length-i-1]!==rank-1-i){return false;}}return true;}function combineLocations(outputLoc,reduceLoc,axes){var rank=outputLoc.length+reduceLoc.length;var loc=[];var outIdx=0;var reduceIdx=0;for(var dim=0;dim<rank;dim++){if(axes.indexOf(dim)===-1){loc.push(outputLoc[outIdx++]);}else{loc.push(reduceLoc[reduceIdx++]);}}return loc;}function computeOutAndReduceShapes(aShape,axes){var outShape=[];var rank=aShape.length;for(var dim=0;dim<rank;dim++){if(axes.indexOf(dim)===-1){outShape.push(aShape[dim]);}}var reduceShape=axes.map(function(dim){return aShape[dim];});return[outShape,reduceShape];}function expandShapeToKeepDim(shape,axes){var reduceSubShape=axes.map(function(x){return 1;});return combineLocations(shape,reduceSubShape,axes);}function assertAxesAreInnerMostDims(msg,axes,rank){util[\"assert\"](axesAreInnerMostDims(axes,rank),function(){return\"\".concat(msg,\" supports only inner-most axes for now. \")+\"Got axes \".concat(axes,\" and rank-\").concat(rank,\" input.\");});}/**\r\n * Returns the axes permutation to be used with `tf.transpose`, if such\r\n * permutation is necessary. Otherwise it returns null. This method is used by\r\n * operations that operate only on inner-most axes.\r\n */function getAxesPermutation(axes,rank){if(axesAreInnerMostDims(axes,rank)){return null;}var result=[];for(var i=0;i<rank;++i){if(axes.indexOf(i)===-1){result.push(i);}}axes.forEach(function(axis){return result.push(axis);});return result;}/** Returns the axes permutation that undoes the original permutation. */function getUndoAxesPermutation(axes){return axes.map(function(axis,i){return[i,axis];}).sort(function(a,b){return a[1]-b[1];}).map(function(x){return x[0];});}function getInnerMostAxes(numAxes,rank){var res=[];for(var i=rank-numAxes;i<rank;++i){res.push(i);}return res;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops_util.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Gradient helper function for the min and max operations.\r\n */function gradForMinAndMax(dy,y,xOrig,origAxes,permutedAxes){if(y.rank<xOrig.rank){y=y.reshape(expandShapeToKeepDim(y.shape,origAxes));}if(dy.rank<xOrig.rank){dy=dy.reshape(expandShapeToKeepDim(dy.shape,origAxes));}return{x:function x(){var dx=dy.mul(xOrig.equal(y).cast(dy.dtype));return permutedAxes==null?dx:dx.transpose(permutedAxes);}};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the log(sum(exp(elements across the reduction dimensions)).\r\n *\r\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\r\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\r\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\r\n * If `axis` has no entries, all dimensions are reduced, and an array with a\r\n * single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.logSumExp().print();  // or tf.logSumExp(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\r\n * ```\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) to reduce. If null (the default),\r\n *     reduces all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with length\r\n *     of 1. Defaults to false.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function logSumExp_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','logSumExp');var axes=util[\"parseAxisParam\"](axis,$x.shape);var xMax=$x.max(axes,true/* keepDims */);var a=$x.sub(xMax);var b=a.exp();var c=b.sum(axes);var d=c.log();var res=xMax.reshape(d.shape).add(d);if(keepDims){var newShape=expandShapeToKeepDim(res.shape,axes);return res.reshape(newShape);}return res;}/**\r\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If axes has no entries, all dimensions are reduced, and a\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.sum().print();  // or tf.sum(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.sum(axis).print();  // or tf.sum(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\r\n *   it will be converted to `int32` and the output dtype will be `int32`.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function sum_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sum');if($x.dtype==='bool'){$x=$x.toInt();}var axes=util[\"parseAxisParam\"](axis,$x.shape);// Use a custom gradient to bypass 2 gradient backprops since sum is used\n// extremely often.\nvar customOp=customGrad(function(x){var permutation=getAxesPermutation(axes,x.rank);var reductionAxes=axes;var permutedX=x;if(permutation!=null){permutedX=x.transpose(permutation);reductionAxes=getInnerMostAxes(reductionAxes.length,x.rank);}var gradFunc=function gradFunc(dy){var expandedDyShape=x.shape.slice();axes.forEach(function(axis){expandedDyShape[axis]=1;});var expandedDy=dy.reshape(expandedDyShape);var derX=expandedDy.mul(Object(tensor_ops[\"b\"/* ones */])(x.shape,'float32'));return derX;};var gradInputs=function gradInputs(dy){return{x:function x(){return gradFunc(dy);}};};var attrs={axes:reductionAxes};var value=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.sum(permutedX,reductionAxes);},{x:permutedX},gradInputs,'Sum',attrs);if(keepDims){var newShape=expandShapeToKeepDim(value.shape,axes);value=value.reshape(newShape);}return{value:value,gradFunc:gradFunc};});return customOp($x);}/**\r\n * Computes the product of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.prod().print();  // or tf.prod(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.prod(axis).print();  // or tf.prod(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor to compute the product over. If the dtype is `bool`\r\n *   it will be converted to `int32` and the output dtype will be `int32`.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function prod_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','prod');if($x.dtype==='bool'){$x=$x.toInt();}var axes=util[\"parseAxisParam\"](axis,$x.shape);var permutation=getAxesPermutation(axes,$x.rank);var reductionAxes=axes;var permutedX=$x;if(permutation!=null){permutedX=$x.transpose(permutation);reductionAxes=getInnerMostAxes(reductionAxes.length,$x.rank);}var value=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.prod(permutedX,reductionAxes);},{permutedX:permutedX});if(keepDims){var newShape=expandShapeToKeepDim(value.shape,axes);value=value.reshape(newShape);}return value;}/**\r\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\r\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\r\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\r\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\r\n * a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.mean().print();  // or tf.mean(a)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.mean(axis).print();  // or tf.mean(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function mean_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','mean');var axes=util[\"parseAxisParam\"](axis,$x.shape);var shapes=computeOutAndReduceShapes($x.shape,axes);var reduceShape=shapes[1];var reduceSize=util[\"sizeFromShape\"](reduceShape);// Use a custom gradient to bypass 2 gradient backprops since mean is used\n// extremely often.\nvar customOp=customGrad(function(x){var reduceSizeScalar=Object(tensor_ops[\"e\"/* scalar */])(reduceSize);// Cast if needed.\nvar xReduce=reduceSizeScalar.dtype===x.dtype?x:x.cast(reduceSizeScalar.dtype);var res=xReduce.div(reduceSizeScalar);var value=res.sum(axis,keepDims);var gradFunc=function gradFunc(dy){var expandedDyShape=x.shape.slice();axes.forEach(function(axis){expandedDyShape[axis]=1;});var expandedDy=dy.reshape(expandedDyShape);var derX=expandedDy.mul(Object(tensor_ops[\"b\"/* ones */])(x.shape,'float32')).div(reduceSize);return derX;};return{value:value,gradFunc:gradFunc};});return customOp($x);}/**\r\n * Computes the minimum value from the input.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\r\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\r\n * If `axes` has no entries, all dimensions are reduced, and an array with a\r\n * single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.min().print();  // or tf.min(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.min(axis).print();  // or tf.min(x, axis)\r\n * ```\r\n *\r\n * @param x The input Tensor.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function min_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','min');var xOrig=$x;var origAxes=util[\"parseAxisParam\"](axis,$x.shape);var axes=origAxes;var permutedAxes=getAxesPermutation(axes,$x.rank);if(permutedAxes!=null){$x=$x.transpose(permutedAxes);axes=getInnerMostAxes(axes.length,$x.rank);}var grad=function grad(dy,saved){return gradForMinAndMax(dy,saved[1],saved[0],origAxes,permutedAxes);};var inputsToSave=[$x];var outputsToSave=[true];var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.min($x,axes);save([xOrig,y]);return y;},{x:$x},grad,'Min',{axes:axes},inputsToSave,outputsToSave);if(keepDims){var newShape=expandShapeToKeepDim(res.shape,origAxes);res=res.reshape(newShape);}return res;}/**\r\n * Returns the indices of the minimum values along an `axis`.\r\n *\r\n * The result has the same shape as `input` with the dimension along `axis`\r\n * removed.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.argMin().print();  // or tf.argMin(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\r\n *\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function argMin_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','argMin');if(axis==null){axis=0;}var axes=util[\"parseAxisParam\"](axis,$x.shape);var permutedAxes=getAxesPermutation(axes,$x.rank);if(permutedAxes!=null){$x=$x.transpose(permutedAxes);axes=getInnerMostAxes(axes.length,$x.rank);}var grad=function grad(dy,saved){var _saved2=_slicedToArray(saved,1),_$x=_saved2[0];return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(_$x);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.argMin($x,axes[0]);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Returns the indices of the maximum values along an `axis`.\r\n *\r\n * The result has the same shape as `input` with the dimension along `axis`\r\n * removed.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.argMax().print();  // or tf.argMax(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function argMax_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','argMax');if(axis==null){axis=0;}var axes=util[\"parseAxisParam\"](axis,$x.shape);var permutedAxes=getAxesPermutation(axes,$x.rank);if(permutedAxes!=null){$x=$x.transpose(permutedAxes);axes=getInnerMostAxes(axes.length,$x.rank);}var grad=function grad(dy,saved){var _saved3=_slicedToArray(saved,1),$x=_saved3[0];return{x:function x(){return Object(tensor_ops[\"o\"/* zerosLike */])($x);}};};var attrs={axis:axes[0]};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.argMax($x,axes[0]);save([$x]);return res;},{x:$x},grad,'ArgMax',attrs,inputsToSave);}/**\r\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1], 'bool');\r\n *\r\n * x.all().print();  // or tf.all(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\r\n *\r\n * const axis = 1;\r\n * x.all(axis).print();  // or tf.all(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype bool.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function all_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','all','bool');var origAxes=util[\"parseAxisParam\"](axis,$x.shape);var axes=origAxes;var permutedAxes=getAxesPermutation(axes,$x.rank);if(permutedAxes!=null){$x=$x.transpose(permutedAxes);axes=getInnerMostAxes(axes.length,$x.rank);}var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.all($x,axes);},{$x:$x});if(keepDims){var newShape=expandShapeToKeepDim(res.shape,origAxes);return res.reshape(newShape);}return res;}/**\r\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1], 'bool');\r\n *\r\n * x.any().print();  // or tf.any(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\r\n *\r\n * const axis = 1;\r\n * x.any(axis).print();  // or tf.any(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype bool.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function any_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','any','bool');var origAxes=util[\"parseAxisParam\"](axis,$x.shape);var axes=origAxes;var permutedAxes=getAxesPermutation(axes,$x.rank);if(permutedAxes!=null){$x=$x.transpose(permutedAxes);axes=getInnerMostAxes(axes.length,$x.rank);}var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.any($x,axes);},{$x:$x});if(keepDims){var newShape=expandShapeToKeepDim(res.shape,origAxes);return res.reshape(newShape);}return res;}/**\r\n * Calculates the mean and variance of `x`. The mean and variance are\r\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\r\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) along with to compute mean and\r\n *     variance. By default it reduces all dimensions.\r\n * @param keepDims If true, the moments have the same dimensionality as the\r\n *     input.\r\n * @return An object with two keys: `mean` and `variance`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function moments_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','moments');var axes=util[\"parseAxisParam\"](axis,x.shape);var mean=x.mean(axes,keepDims);var keepDimsShape=mean.shape;if(!keepDims){keepDimsShape=expandShapeToKeepDim(mean.shape,axes);}var devSquared=x.toFloat().sub(mean.reshape(keepDimsShape)).square();var variance=devSquared.mean(axes,keepDims);return{mean:mean,variance:variance};}var reduction_ops_all=Object(operation[\"a\"/* op */])({all_:all_});// tslint:disable-next-line:variable-name\nvar any=Object(operation[\"a\"/* op */])({any_:any_});var argMax=Object(operation[\"a\"/* op */])({argMax_:argMax_});var argMin=Object(operation[\"a\"/* op */])({argMin_:argMin_});var logSumExp=Object(operation[\"a\"/* op */])({logSumExp_:logSumExp_});var reduction_ops_mean=Object(operation[\"a\"/* op */])({mean_:mean_});var reduction_ops_min=Object(operation[\"a\"/* op */])({min_:min_});var moments=Object(operation[\"a\"/* op */])({moments_:moments_});var sum=Object(operation[\"a\"/* op */])({sum_:sum_});var reduction_ops_prod=Object(operation[\"a\"/* op */])({prod_:prod_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/square.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes square of `x` element-wise: `x ^ 2`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\r\n *\r\n * x.square().print();  // or tf.square(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function square_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','square');var attrs={};var inputsToSave=[$x];var outputsToSave=[];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){save([$x]);return backend.square($x);},{x:$x},null/* grad */,'Square',attrs,inputsToSave,outputsToSave);}var square=Object(operation[\"a\"/* op */])({square_:square_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/unary_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes `-1 * x` element-wise.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\r\n *\r\n * x.neg().print();  // or tf.neg(x)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function neg_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','neg');var grad=function grad(dy){return{x:function x(){return dy.neg();}};};var attrs={};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.neg($x);},{x:$x},grad,'Neg',attrs,inputsToSave);}/**\r\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\r\n *\r\n * x.ceil().print();  // or tf.ceil(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function ceil_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','ceil');// TODO(manrajgrover): Return null for gradients when backprop supports it.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.ceil($x);},{$x:$x},grad);}/**\r\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\r\n *\r\n * x.floor().print();  // or tf.floor(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function floor_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','floor');// TODO(nsthorat): Let gradients be null for cases where we want to stop\n// backpropgation.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.floor($x);},{$x:$x},grad);}/**\r\n * Returns an element-wise indication of the sign of a number.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\r\n *\r\n * x.sign().print();  // or tf.sign(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function sign_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sign');var grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.sign($x);},{$x:$x},grad);}/**\r\n * RReturns which elements of x are NaN.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\r\n *\r\n * x.isNaN().print();  // or tf.isNaN(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function isNaN_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','isNaN');// TODO(nsthorat): Let gradients be null for cases where we want to stop\n// backpropgation.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.isNaN($x);},{$x:$x},grad);}/**\r\n * Returns which elements of x are Infinity or -Infinity.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\r\n *\r\n * x.isInf().print();  // or tf.isNaN(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function isInf_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','isInf');// TODO(nsthorat): Let gradients be null for cases where we want to stop\n// backpropgation.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.isInf($x);},{$x:$x},grad);}/**\r\n * Returns which elements of x are finite.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\r\n *\r\n * x.isFinite().print();  // or tf.isNaN(x)\r\n * ```\r\n * @param x The input Tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function isFinite_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','isFinite');// TODO(nsthorat): Let gradients be null for cases where we want to stop\n// backpropgation.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.isFinite($x);},{$x:$x},grad);}/**\r\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\r\n * It implements banker's rounding.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\r\n *\r\n * x.round().print();  // or tf.round(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function round_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','round');// TODO(nsthorat): Let gradients be null for cases where we want to stop\n// backpropgation.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.round($x);},{$x:$x},grad);}/**\r\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, -3]);\r\n *\r\n * x.exp().print();  // or tf.exp(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function exp_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','exp');var bck=function bck(dy,saved){// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn{x:function x(){return dy.mul(saved[0]);}};};var attrs={};var inputsToSave=[];var outputsToSave=[true];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.exp($x);save([y]);return y;},{x:$x},bck,'Exp',attrs,inputsToSave,outputsToSave);}/**\r\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\r\n * `e ^ x - 1`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, -3]);\r\n *\r\n * x.expm1().print();  // or tf.expm1(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function expm1_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','expm1');var grad=function grad(dy,saved){var _saved4=_slicedToArray(saved,1),_$x2=_saved4[0];return{$x:function $x(){return dy.mul(_$x2.exp());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.expm1($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, Math.E]);\r\n *\r\n * x.log().print();  // or tf.log(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function log_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','log');var grad=function grad(dy,saved){var _saved5=_slicedToArray(saved,1),$x=_saved5[0];return{x:function x(){return dy.div($x.toFloat());}};};var attrs={};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.log($x);save([$x]);return res;},{x:$x},grad,'Log',attrs,inputsToSave);}/**\r\n * Computes natural logarithm of the input `tf.Tensor` plus one\r\n * element-wise: `ln(1 + x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\r\n *\r\n * x.log1p().print();  // or tf.log1p(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function log1p_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','log1p');var grad=function grad(dy,saved){var _saved6=_slicedToArray(saved,1),_$x3=_saved6[0];return{$x:function $x(){return dy.div(_$x3.add(1));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.log1p($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 4, -1]);\r\n *\r\n * x.sqrt().print();  // or tf.sqrt(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function sqrt_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sqrt');var grad=function grad(dy,saved){var _saved7=_slicedToArray(saved,1),$x=_saved7[0];return{x:function x(){return dy.div($x.toFloat().sqrt().mul(2));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.sqrt($x);save([$x]);return res;},{x:$x},grad,'Sqrt',{});}/**\r\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\r\n * `y = 1 / sqrt(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 4, -1]);\r\n *\r\n * x.rsqrt().print();  // or tf.rsqrt(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function rsqrt_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','rsqrt');var grad=function grad(dy,saved){var _saved8=_slicedToArray(saved,1),$x=_saved8[0];return{x:function x(){return dy.div($x.pow(1.5).mul(2)).neg();}};};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.rsqrt($x);save([$x]);return res;},{x:$x},grad,'Rsqrt',{}/* attrs */,inputsToSave);}/**\r\n * Computes reciprocal of x element-wise: `1 / x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, 2]);\r\n *\r\n * x.reciprocal().print();  // or tf.reciprocal(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function reciprocal_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reciprocal');var grad=function grad(dy,saved){var _saved9=_slicedToArray(saved,1),_$x4=_saved9[0];return{$x:function $x(){return dy.div(_$x4.square().neg());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.reciprocal($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes absolute value element-wise: `abs(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.abs().print();  // or tf.abs(x)\r\n * ```\r\n * @param x The input `tf.Tensor`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function abs_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','abs');if($x.dtype==='complex64'){return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.complexAbs($x);},{$x:$x});}var grad=function grad(dy,saved){var _saved10=_slicedToArray(saved,1),$x=_saved10[0];return{x:function x(){return dy.mul($x.toFloat().step(-1));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.abs($x);save([$x]);return res;},{x:$x},grad,'Abs');}/**\r\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\r\n * ```\r\n * @param x The input tensor.\r\n * @param clipValueMin Lower-bound of range to be clipped to.\r\n * @param clipValueMax Upper-bound of range to be clipped to.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function clipByValue_(x,clipValueMin,clipValueMax){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','clipByValue');util[\"assert\"](clipValueMin<=clipValueMax,function(){return\"Error in clip: min (\".concat(clipValueMin,\") must be \")+\"less than or equal to max (\".concat(clipValueMax,\").\");});var grad=function grad(dy,saved){var _saved11=_slicedToArray(saved,1),$x=_saved11[0];return{x:function x(){return dy.where($x.greaterEqual(clipValueMin).logicalAnd($x.lessEqual(clipValueMax)),Object(tensor_ops[\"o\"/* zerosLike */])(dy));}};};var inputsToSave=[$x];var attr={min:clipValueMin,max:clipValueMax};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.clip($x,clipValueMin,clipValueMax);save([$x]);return res;},{x:$x},grad,'ClipByValue',attr,inputsToSave);}/**\r\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, -1, 2, -3]);\r\n *\r\n * x.sigmoid().print();  // or tf.sigmoid(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function sigmoid_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sigmoid');var grad=function grad(dy,saved){var _saved12=_slicedToArray(saved,1),y=_saved12[0];return{x:function x(){return dy.mul(y.mul(Object(tensor_ops[\"e\"/* scalar */])(1).sub(y)));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.sigmoid($x);save([y]);return y;},{x:$x},grad,'Sigmoid');}/**\r\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\r\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function logSigmoid_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','logSigmoid');var grad=function grad(dy,saved){var _saved13=_slicedToArray(saved,1),_$x5=_saved13[0];return{$x:function $x(){return dy.mul(_$x5.neg().sigmoid());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.softplus($x.neg()).neg();save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.softplus().print();  // or tf.softplus(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function softplus_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','softplus');var grad=function grad(dy,saved){var _saved14=_slicedToArray(saved,1),_$x6=_saved14[0];return{$x:function $x(){return dy.mul(_$x6.sigmoid());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.softplus($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes sin of the input Tensor element-wise: `sin(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\r\n *\r\n * x.sin().print();  // or tf.sin(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function sin_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sin');var grad=function grad(dy,saved){var _saved15=_slicedToArray(saved,1),$x=_saved15[0];return{x:function x(){return $x.toFloat().cos().mul(dy);}};};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.sin($x);save([$x]);return res;},{x:$x},grad,'Sin',{}/* attrs */,inputsToSave);}/**\r\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\r\n *\r\n * x.cos().print();  // or tf.cos(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function cos_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','cos');var grad=function grad(dy,saved){var _saved16=_slicedToArray(saved,1),$x=_saved16[0];return{x:function x(){return $x.toFloat().sin().neg().mul(dy);}};};var inputsToSave=[$x];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.cos($x);save([$x]);return res;},{x:$x},grad,'Cos',{}/* attrs */,inputsToSave);}/**\r\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\r\n *\r\n * x.tan().print();  // or tf.tan(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function tan_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','tan');var grad=function grad(dy,saved){var _saved17=_slicedToArray(saved,1),_$x7=_saved17[0];return{$x:function $x(){return dy.div(_$x7.cos().square());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.tan($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.asin().print();  // or tf.asin(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function asin_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','asin');var grad=function grad(dy,saved){var _saved18=_slicedToArray(saved,1),_$x8=_saved18[0];return{// tslint:disable-next-line: no-unnecessary-type-assertion\n$x:function $x(){return dy.div(Object(tensor_ops[\"e\"/* scalar */])(1).sub(_$x8.toFloat().square()).sqrt());}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.asin($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.acos().print();  // or tf.acos(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function acos_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','acos');var grad=function grad(dy,saved){var _saved19=_slicedToArray(saved,1),_$x9=_saved19[0];return{$x:function $x(){var a=_$x9.toFloat().square();var b=Object(tensor_ops[\"e\"/* scalar */])(1).sub(a).sqrt();// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn dy.div(b).neg();}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.acos($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.atan().print();  // or tf.atan(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function atan_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','atan');var grad=function grad(dy,saved){var _saved20=_slicedToArray(saved,1),_$x10=_saved20[0];return{$x:function $x(){return dy.div(_$x10.toFloat().square().add(1));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.atan($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.sinh().print();  // or tf.sinh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function sinh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','sinh');var grad=function grad(dy,saved){var _saved21=_slicedToArray(saved,1),_$x11=_saved21[0];// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn{$x:function $x(){return _$x11.toFloat().cosh().mul(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.sinh($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.cosh().print();  // or tf.cosh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function cosh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','cosh');var grad=function grad(dy,saved){var _saved22=_slicedToArray(saved,1),_$x12=_saved22[0];// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn{$x:function $x(){return _$x12.toFloat().sinh().mul(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.cosh($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, 70]);\r\n *\r\n * x.tanh().print();  // or tf.tanh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function tanh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','tanh');var grad=function grad(dy,saved){var _saved23=_slicedToArray(saved,1),y=_saved23[0];// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn{x:function x(){return Object(tensor_ops[\"e\"/* scalar */])(1).sub(y.square()).mul(dy);}};};var outputsToSave=[true];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.tanh($x);save([y]);return y;},{x:$x},grad,'Tanh',{}/* attrs */,null/* inputsToSave */,outputsToSave);}/**\r\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\r\n * `asinh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.asinh().print();  // or tf.asinh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function asinh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','asinh');var grad=function grad(dy,saved){var _saved24=_slicedToArray(saved,1),_$x13=_saved24[0];return{$x:function $x(){var a=Object(tensor_ops[\"e\"/* scalar */])(1).add(_$x13.toFloat().square()).sqrt();// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn dy.div(a);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.asinh($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\r\n * `acosh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\r\n *\r\n * x.acosh().print();  // or tf.acosh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function acosh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','acosh');var grad=function grad(dy,saved){var _saved25=_slicedToArray(saved,1),_$x14=_saved25[0];return{$x:function $x(){var a=_$x14.toFloat().square().sub(1).sqrt();// tslint:disable-next-line: no-unnecessary-type-assertion\nreturn dy.div(a);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.acosh($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\r\n * `atanh(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, .1, -.1, .7]);\r\n *\r\n * x.atanh().print();  // or tf.atanh(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function atanh_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','atanh');var grad=function grad(dy,saved){var _saved26=_slicedToArray(saved,1),_$x15=_saved26[0];return{$x:function $x(){return dy.div(Object(tensor_ops[\"e\"/* scalar */])(1).sub(_$x15.toFloat().square()));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.atanh($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes gause error function of the input `tf.Tensor` element-wise:\r\n * `erf(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, .1, -.1, .7]);\r\n *\r\n * x.erf().print(); // or tf.erf(x);\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function erf_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','erf');util[\"assert\"]($x.dtype==='int32'||$x.dtype==='float32',function(){return'Input dtype must be `int32` or `float32`.';});if($x.dtype==='int32'){$x=$x.toFloat();}var grad=function grad(dy,saved){var _saved27=_slicedToArray(saved,1),_$x16=_saved27[0];return{$x:function $x(){return dy.mul(_$x16.square().neg().exp().mul(2/Math.sqrt(Math.PI)));}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.erf($x);save([$x]);return res;},{$x:$x},grad);}/**\r\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 2, -1, -3]);\r\n *\r\n * x.step(.5).print();  // or tf.step(x, .5)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The gradient when input is negative.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function step_(x){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','step');// TODO(manrajgrover): Return null for gradients when backprop supports\n// it.\nvar grad=function grad(dy){return{$x:function $x(){return Object(tensor_ops[\"o\"/* zerosLike */])(dy);}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.step($x,alpha);},{$x:$x},grad);}var abs=Object(operation[\"a\"/* op */])({abs_:abs_});var acos=Object(operation[\"a\"/* op */])({acos_:acos_});var acosh=Object(operation[\"a\"/* op */])({acosh_:acosh_});var asin=Object(operation[\"a\"/* op */])({asin_:asin_});var asinh=Object(operation[\"a\"/* op */])({asinh_:asinh_});var atan=Object(operation[\"a\"/* op */])({atan_:atan_});var atanh=Object(operation[\"a\"/* op */])({atanh_:atanh_});var ceil=Object(operation[\"a\"/* op */])({ceil_:ceil_});var clipByValue=Object(operation[\"a\"/* op */])({clipByValue_:clipByValue_});var cos=Object(operation[\"a\"/* op */])({cos_:cos_});var cosh=Object(operation[\"a\"/* op */])({cosh_:cosh_});var erf=Object(operation[\"a\"/* op */])({erf_:erf_});var unary_ops_exp=Object(operation[\"a\"/* op */])({exp_:exp_});var expm1=Object(operation[\"a\"/* op */])({expm1_:expm1_});var floor=Object(operation[\"a\"/* op */])({floor_:floor_});var log=Object(operation[\"a\"/* op */])({log_:log_});var log1p=Object(operation[\"a\"/* op */])({log1p_:log1p_});var logSigmoid=Object(operation[\"a\"/* op */])({logSigmoid_:logSigmoid_});var neg=Object(operation[\"a\"/* op */])({neg_:neg_});var reciprocal=Object(operation[\"a\"/* op */])({reciprocal_:reciprocal_});var round=Object(operation[\"a\"/* op */])({round_:round_});var rsqrt=Object(operation[\"a\"/* op */])({rsqrt_:rsqrt_});var sigmoid=Object(operation[\"a\"/* op */])({sigmoid_:sigmoid_});var sign=Object(operation[\"a\"/* op */])({sign_:sign_});var unary_ops_isNaN=Object(operation[\"a\"/* op */])({isNaN_:isNaN_});var isInf=Object(operation[\"a\"/* op */])({isInf_:isInf_});var unary_ops_isFinite=Object(operation[\"a\"/* op */])({isFinite_:isFinite_});var sin=Object(operation[\"a\"/* op */])({sin_:sin_});var sinh=Object(operation[\"a\"/* op */])({sinh_:sinh_});var softplus=Object(operation[\"a\"/* op */])({softplus_:softplus_});var sqrt=Object(operation[\"a\"/* op */])({sqrt_:sqrt_});var unary_ops_step=Object(operation[\"a\"/* op */])({step_:step_});var tan=Object(operation[\"a\"/* op */])({tan_:tan_});var tanh=Object(operation[\"a\"/* op */])({tanh_:tanh_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var atan2GradConfig={kernelName:kernel_names[\"c\"/* Atan2 */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved28=_slicedToArray(saved,2),a=_saved28[0],b=_saved28[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var d=add(square(a),square(b));var res=mul(dy,div(b,d));var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,a.shape);};var derB=function derB(){var d=add(square(a),square(b));var res=neg(mul(dy,div(a,d)));var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,b.shape);};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function computePool2DInfo(inShape,filterSize,strides,dilations,pad,roundingMode){var dataFormat=arguments.length>6&&arguments[6]!==undefined?arguments[6]:'channelsLast';var _parseTupleParam=parseTupleParam(filterSize),_parseTupleParam2=_slicedToArray(_parseTupleParam,2),filterHeight=_parseTupleParam2[0],filterWidth=_parseTupleParam2[1];var filterShape;if(dataFormat==='channelsLast'){filterShape=[filterHeight,filterWidth,inShape[3],inShape[3]];}else if(dataFormat==='channelsFirst'){filterShape=[filterHeight,filterWidth,inShape[1],inShape[1]];}else{throw new Error(\"Unknown dataFormat \".concat(dataFormat));}return computeConv2DInfo(inShape,filterShape,strides,dilations,pad,roundingMode,false,dataFormat);}/**\r\n * Computes the information for a forward pass of a pooling3D operation.\r\n */function computePool3DInfo(inShape,filterSize,strides,dilations,pad,roundingMode){var dataFormat=arguments.length>6&&arguments[6]!==undefined?arguments[6]:'NDHWC';var _parse3TupleParam=parse3TupleParam(filterSize),_parse3TupleParam2=_slicedToArray(_parse3TupleParam,3),filterDepth=_parse3TupleParam2[0],filterHeight=_parse3TupleParam2[1],filterWidth=_parse3TupleParam2[2];var filterShape;var $dataFormat;if(dataFormat==='NDHWC'){$dataFormat='channelsLast';filterShape=[filterDepth,filterHeight,filterWidth,inShape[4],inShape[4]];}else if(dataFormat==='NCDHW'){$dataFormat='channelsFirst';filterShape=[filterDepth,filterHeight,filterWidth,inShape[1],inShape[1]];}else{throw new Error(\"Unknown dataFormat \".concat(dataFormat));}return computeConv3DInfo(inShape,filterShape,strides,dilations,pad,false,$dataFormat,roundingMode);}/**\r\n * Computes the information for a forward pass of a convolution/pooling\r\n * operation.\r\n */function computeConv2DInfo(inShape,filterShape,strides,dilations,pad,roundingMode){var depthwise=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;var dataFormat=arguments.length>7&&arguments[7]!==undefined?arguments[7]:'channelsLast';var batchSize=-1,inHeight=-1,inWidth=-1,inChannels=-1;if(dataFormat==='channelsLast'){var _inShape=_slicedToArray(inShape,4);batchSize=_inShape[0];inHeight=_inShape[1];inWidth=_inShape[2];inChannels=_inShape[3];}else if(dataFormat==='channelsFirst'){var _inShape2=_slicedToArray(inShape,4);batchSize=_inShape2[0];inChannels=_inShape2[1];inHeight=_inShape2[2];inWidth=_inShape2[3];}else{throw new Error(\"Unknown dataFormat \".concat(dataFormat));}var _filterShape=_slicedToArray(filterShape,4),filterHeight=_filterShape[0],filterWidth=_filterShape[1],filterChannels=_filterShape[3];var _parseTupleParam3=parseTupleParam(strides),_parseTupleParam4=_slicedToArray(_parseTupleParam3,2),strideHeight=_parseTupleParam4[0],strideWidth=_parseTupleParam4[1];var _parseTupleParam5=parseTupleParam(dilations),_parseTupleParam6=_slicedToArray(_parseTupleParam5,2),dilationHeight=_parseTupleParam6[0],dilationWidth=_parseTupleParam6[1];var effectiveFilterHeight=getEffectiveFilterSize(filterHeight,dilationHeight);var effectiveFilterWidth=getEffectiveFilterSize(filterWidth,dilationWidth);var _getPadAndOutInfo=getPadAndOutInfo(pad,inHeight,inWidth,strideHeight,strideWidth,effectiveFilterHeight,effectiveFilterWidth,roundingMode,dataFormat),padInfo=_getPadAndOutInfo.padInfo,outHeight=_getPadAndOutInfo.outHeight,outWidth=_getPadAndOutInfo.outWidth;var outChannels=depthwise?filterChannels*inChannels:filterChannels;var outShape;if(dataFormat==='channelsFirst'){outShape=[batchSize,outChannels,outHeight,outWidth];}else if(dataFormat==='channelsLast'){outShape=[batchSize,outHeight,outWidth,outChannels];}return{batchSize:batchSize,dataFormat:dataFormat,inHeight:inHeight,inWidth:inWidth,inChannels:inChannels,outHeight:outHeight,outWidth:outWidth,outChannels:outChannels,padInfo:padInfo,strideHeight:strideHeight,strideWidth:strideWidth,filterHeight:filterHeight,filterWidth:filterWidth,effectiveFilterHeight:effectiveFilterHeight,effectiveFilterWidth:effectiveFilterWidth,dilationHeight:dilationHeight,dilationWidth:dilationWidth,inShape:inShape,outShape:outShape,filterShape:filterShape};}/**\r\n * Computes the information for a forward pass of a 3D convolution/pooling\r\n * operation.\r\n */function computeConv3DInfo(inShape,filterShape,strides,dilations,pad){var depthwise=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;var dataFormat=arguments.length>6&&arguments[6]!==undefined?arguments[6]:'channelsLast';var roundingMode=arguments.length>7?arguments[7]:undefined;var batchSize=-1,inDepth=-1,inHeight=-1,inWidth=-1,inChannels=-1;if(dataFormat==='channelsLast'){var _inShape3=_slicedToArray(inShape,5);batchSize=_inShape3[0];inDepth=_inShape3[1];inHeight=_inShape3[2];inWidth=_inShape3[3];inChannels=_inShape3[4];}else if(dataFormat==='channelsFirst'){var _inShape4=_slicedToArray(inShape,5);batchSize=_inShape4[0];inChannels=_inShape4[1];inDepth=_inShape4[2];inHeight=_inShape4[3];inWidth=_inShape4[4];}else{throw new Error(\"Unknown dataFormat \".concat(dataFormat));}var _filterShape2=_slicedToArray(filterShape,5),filterDepth=_filterShape2[0],filterHeight=_filterShape2[1],filterWidth=_filterShape2[2],filterChannels=_filterShape2[4];var _parse3TupleParam3=parse3TupleParam(strides),_parse3TupleParam4=_slicedToArray(_parse3TupleParam3,3),strideDepth=_parse3TupleParam4[0],strideHeight=_parse3TupleParam4[1],strideWidth=_parse3TupleParam4[2];var _parse3TupleParam5=parse3TupleParam(dilations),_parse3TupleParam6=_slicedToArray(_parse3TupleParam5,3),dilationDepth=_parse3TupleParam6[0],dilationHeight=_parse3TupleParam6[1],dilationWidth=_parse3TupleParam6[2];var effectiveFilterDepth=getEffectiveFilterSize(filterDepth,dilationDepth);var effectiveFilterHeight=getEffectiveFilterSize(filterHeight,dilationHeight);var effectiveFilterWidth=getEffectiveFilterSize(filterWidth,dilationWidth);var _get3DPadAndOutInfo=get3DPadAndOutInfo(pad,inDepth,inHeight,inWidth,strideDepth,strideHeight,strideWidth,effectiveFilterDepth,effectiveFilterHeight,effectiveFilterWidth,roundingMode),padInfo=_get3DPadAndOutInfo.padInfo,outDepth=_get3DPadAndOutInfo.outDepth,outHeight=_get3DPadAndOutInfo.outHeight,outWidth=_get3DPadAndOutInfo.outWidth;var outChannels=depthwise?filterChannels*inChannels:filterChannels;var outShape;if(dataFormat==='channelsFirst'){outShape=[batchSize,outChannels,outDepth,outHeight,outWidth];}else if(dataFormat==='channelsLast'){outShape=[batchSize,outDepth,outHeight,outWidth,outChannels];}return{batchSize:batchSize,dataFormat:dataFormat,inDepth:inDepth,inHeight:inHeight,inWidth:inWidth,inChannels:inChannels,outDepth:outDepth,outHeight:outHeight,outWidth:outWidth,outChannels:outChannels,padInfo:padInfo,strideDepth:strideDepth,strideHeight:strideHeight,strideWidth:strideWidth,filterDepth:filterDepth,filterHeight:filterHeight,filterWidth:filterWidth,effectiveFilterDepth:effectiveFilterDepth,effectiveFilterHeight:effectiveFilterHeight,effectiveFilterWidth:effectiveFilterWidth,dilationDepth:dilationDepth,dilationHeight:dilationHeight,dilationWidth:dilationWidth,inShape:inShape,outShape:outShape,filterShape:filterShape};}function computeOutputShape2D(inShape,fieldSize,stride,zeroPad,roundingMode){if(zeroPad==null){zeroPad=computeDefaultPad(inShape,fieldSize,stride);}var inputRows=inShape[0];var inputCols=inShape[1];var outputRows=conditionalRound((inputRows-fieldSize+2*zeroPad)/stride+1,roundingMode);util[\"assert\"](util[\"isInt\"](outputRows),function(){return\"The output # of rows (\".concat(outputRows,\") must be an integer. \")+\"Change the stride and/or zero pad parameters\";});var outputCols=conditionalRound((inputCols-fieldSize+2*zeroPad)/stride+1,roundingMode);util[\"assert\"](util[\"isInt\"](outputCols),function(){return\"The output # of columns (\".concat(outputCols,\") must be an integer. \")+\"Change the stride and/or zero pad parameters\";});return[outputRows,outputCols];}function computeOutputShape4D(inShape,fieldSize,outChannels,stride,zeroPad,roundingMode){if(zeroPad==null){zeroPad=computeDefaultPad(inShape,fieldSize,stride);}var inputDepth=inShape[0];var inputRows=inShape[1];var inputCols=inShape[2];var outputDepths=conditionalRound((inputDepth-fieldSize+2*zeroPad)/stride+1,roundingMode);util[\"assert\"](util[\"isInt\"](outputDepths),function(){return\"The output # of depths (\".concat(outputDepths,\") must be an integer. \")+\"Change the stride and/or zero pad parameters\";});var outputRows=conditionalRound((inputRows-fieldSize+2*zeroPad)/stride+1,roundingMode);util[\"assert\"](util[\"isInt\"](outputRows),function(){return\"The output # of rows (\".concat(outputRows,\") must be an integer. \")+\"Change the stride and/or zero pad parameters\";});var outputCols=conditionalRound((inputCols-fieldSize+2*zeroPad)/stride+1,roundingMode);util[\"assert\"](util[\"isInt\"](outputCols),function(){return\"The output # of columns (\".concat(outputCols,\") must be an integer. \")+\"Change the stride and/or zero pad parameters\";});return[outputDepths,outputRows,outputCols,outChannels];}function computeDefaultPad(inputShape,fieldSize,stride){var dilation=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var effectiveFieldSize=getEffectiveFilterSize(fieldSize,dilation);return Math.floor((inputShape[0]*(stride-1)-stride+effectiveFieldSize)/2);}function parseTupleParam(param){if(typeof param==='number'){return[param,param,param];}if(param.length===2){return[param[0],param[1],1];}return param;}function parse3TupleParam(param){return typeof param==='number'?[param,param,param]:param;}/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\r\n * Atrous convolution is equivalent to standard convolution with upsampled\r\n * filters with effective_filter_height =\r\n * filter_height + (filter_height - 1) * (dilation - 1)\r\n * and effective_filter_width =\r\n * filter_width + (filter_width - 1) * (dilation - 1),\r\n * produced by inserting dilation - 1 zeros along consecutive elements across\r\n * the filters' spatial dimensions.\r\n * When there is a dilation, this converts a filter dimension to the\r\n * effective filter dimension, so it can be used in a standard convolution.\r\n */function getEffectiveFilterSize(filterSize,dilation){if(dilation<=1){return filterSize;}return filterSize+(filterSize-1)*(dilation-1);}function getPadAndOutInfo(pad,inHeight,inWidth,strideHeight,strideWidth,filterHeight,filterWidth,roundingMode,dataFormat){var padInfo;var outHeight;var outWidth;if(typeof pad==='number'){var padType=pad===0?'VALID':'NUMBER';padInfo={top:pad,bottom:pad,left:pad,right:pad,type:padType};var outShape=computeOutputShape2D([inHeight,inWidth],filterHeight,strideHeight,pad,roundingMode);outHeight=outShape[0];outWidth=outShape[1];}else if(pad==='same'){outHeight=Math.ceil(inHeight/strideHeight);outWidth=Math.ceil(inWidth/strideWidth);var padAlongHeight=Math.max(0,(outHeight-1)*strideHeight+filterHeight-inHeight);var padAlongWidth=Math.max(0,(outWidth-1)*strideWidth+filterWidth-inWidth);var top=Math.floor(padAlongHeight/2);var bottom=padAlongHeight-top;var left=Math.floor(padAlongWidth/2);var right=padAlongWidth-left;padInfo={top:top,bottom:bottom,left:left,right:right,type:'SAME'};}else if(pad==='valid'){padInfo={top:0,bottom:0,left:0,right:0,type:'VALID'};outHeight=Math.ceil((inHeight-filterHeight+1)/strideHeight);outWidth=Math.ceil((inWidth-filterWidth+1)/strideWidth);}else if(_typeof2(pad)==='object'){var _top=dataFormat==='channelsLast'?pad[1][0]:pad[2][0];var _bottom=dataFormat==='channelsLast'?pad[1][1]:pad[2][1];var _left=dataFormat==='channelsLast'?pad[2][0]:pad[3][0];var _right=dataFormat==='channelsLast'?pad[2][1]:pad[3][1];var _padType=_top===0&&_bottom===0&&_left===0&&_right===0?'VALID':'EXPLICIT';padInfo={top:_top,bottom:_bottom,left:_left,right:_right,type:_padType};outHeight=conditionalRound((inHeight-filterHeight+_top+_bottom)/strideHeight+1,roundingMode);outWidth=conditionalRound((inWidth-filterWidth+_left+_right)/strideWidth+1,roundingMode);}else{throw Error(\"Unknown padding parameter: \".concat(pad));}return{padInfo:padInfo,outHeight:outHeight,outWidth:outWidth};}function get3DPadAndOutInfo(pad,inDepth,inHeight,inWidth,strideDepth,strideHeight,strideWidth,filterDepth,filterHeight,filterWidth,roundingMode){var padInfo;var outDepth;var outHeight;var outWidth;if(typeof pad==='number'){var padType=pad===0?'VALID':'NUMBER';padInfo={top:pad,bottom:pad,left:pad,right:pad,front:pad,back:pad,type:padType};var outShape=computeOutputShape4D([inDepth,inHeight,inWidth,1],filterDepth,1,strideDepth,pad,roundingMode);outDepth=outShape[0];outHeight=outShape[1];outWidth=outShape[2];}else if(pad==='same'){outDepth=Math.ceil(inDepth/strideDepth);outHeight=Math.ceil(inHeight/strideHeight);outWidth=Math.ceil(inWidth/strideWidth);var padAlongDepth=(outDepth-1)*strideDepth+filterDepth-inDepth;var padAlongHeight=(outHeight-1)*strideHeight+filterHeight-inHeight;var padAlongWidth=(outWidth-1)*strideWidth+filterWidth-inWidth;var front=Math.floor(padAlongDepth/2);var back=padAlongDepth-front;var top=Math.floor(padAlongHeight/2);var bottom=padAlongHeight-top;var left=Math.floor(padAlongWidth/2);var right=padAlongWidth-left;padInfo={top:top,bottom:bottom,left:left,right:right,front:front,back:back,type:'SAME'};}else if(pad==='valid'){padInfo={top:0,bottom:0,left:0,right:0,front:0,back:0,type:'VALID'};outDepth=Math.ceil((inDepth-filterDepth+1)/strideDepth);outHeight=Math.ceil((inHeight-filterHeight+1)/strideHeight);outWidth=Math.ceil((inWidth-filterWidth+1)/strideWidth);}else{throw Error(\"Unknown padding parameter: \".concat(pad));}return{padInfo:padInfo,outDepth:outDepth,outHeight:outHeight,outWidth:outWidth};}/**\r\n * Rounds a value depending on the rounding mode\r\n * @param value\r\n * @param roundingMode\r\n */function conditionalRound(value,roundingMode){if(!roundingMode){return value;}switch(roundingMode){case'round':// used for Caffe Conv\nreturn Math.round(value);case'ceil':// used for Caffe Pool\nreturn Math.ceil(value);case'floor':return Math.floor(value);default:throw new Error(\"Unknown roundingMode \".concat(roundingMode));}}function tupleValuesAreOne(param){var _parseTupleParam7=parseTupleParam(param),_parseTupleParam8=_slicedToArray(_parseTupleParam7,3),dimA=_parseTupleParam8[0],dimB=_parseTupleParam8[1],dimC=_parseTupleParam8[2];return dimA===1&&dimB===1&&dimC===1;}function eitherStridesOrDilationsAreOne(strides,dilations){return tupleValuesAreOne(strides)||tupleValuesAreOne(dilations);}/**\r\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\r\n *    'channelsLast'|'channelsFirst'\r\n * @param dataFormat in 'NHWC'|'NCHW' mode\r\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\r\n * @throws unknown dataFormat\r\n */function convertConv2DDataFormat(dataFormat){if(dataFormat==='NHWC'){return'channelsLast';}else if(dataFormat==='NCHW'){return'channelsFirst';}else{throw new Error(\"Unknown dataFormat \".concat(dataFormat));}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the backprop of a 3d avg pool.\r\n *\r\n * @param dy The dy error, of rank 5 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * assumed.\r\n * @param input The original input image, of rank 5 or rank4 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation\r\n *     rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */function avgPool3dBackprop_(dy,input,filterSize,strides){var dilations=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[1,1,1];var pad=arguments.length>5?arguments[5]:undefined;var dimRoundingMode=arguments.length>6?arguments[6]:undefined;var $dy=Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','avgPool3dBackprop');var $input=Object(tensor_util_env[\"a\"/* convertToTensor */])(input,'input','avgPool3dBackprop');var dy5D=$dy;var input5D=$input;var reshapedTo5D=false;if($input.rank===4){reshapedTo5D=true;dy5D=reshape($dy,[1,$dy.shape[0],$dy.shape[1],$dy.shape[2],$dy.shape[3]]);input5D=reshape($input,[1,$input.shape[0],$input.shape[1],$input.shape[2],$input.shape[3]]);}util[\"assert\"](dy5D.rank===5,function(){return\"Error in avgPool3dBackprop: dy must be rank 5 but got rank \"+\"\".concat(dy5D.rank,\".\");});util[\"assert\"](input5D.rank===5,function(){return\"Error in avgPool3dBackprop: input must be rank 5 but got rank \"+\"\".concat(input5D.rank,\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in avgPool3dBackprop: Either strides or dilations '+\"must be 1. Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in maxPool3dBackprop: pad must be an integer when \"+\"using, dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend){var convInfo=computePool3DInfo(input5D.shape,filterSize,strides,dilations,pad,dimRoundingMode);return backend.avgPool3dBackprop(dy5D,input5D,convInfo);};var inputs={dy:dy5D,input:input5D};var attrs={filterSize:filterSize,strides:strides,dilations:dilations,pad:pad,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"f\"/* AvgPool3DBackprop */],attrs);if(reshapedTo5D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3],res.shape[4]]);}return res;}var avgPool3dBackprop=Object(operation[\"a\"/* op */])({avgPool3dBackprop_:avgPool3dBackprop_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var avgPool3DGradConfig={kernelName:kernel_names[\"e\"/* AvgPool3D */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved,attrs){var _saved29=_slicedToArray(saved,1),_x3=_saved29[0];var filterSize=attrs.filterSize,strides=attrs.strides,dilations=attrs.dilations,pad=attrs.pad,dimRoundingMode=attrs.dimRoundingMode;var $dilations=dilations==null?[1,1,1]:dilations;return{x:function x(){return avgPool3dBackprop(dy,_x3,filterSize,strides,$dilations,pad,dimRoundingMode);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the backprop of an 2D avg pool.\r\n *\r\n * @param dy The dy error, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param input The input image, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */function avgPoolBackprop_(dy,input,filterSize,strides,pad){var $dy=Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','avgPoolBackprop');var $input=Object(tensor_util_env[\"a\"/* convertToTensor */])(input,'input','avgPoolBackprop');util[\"assert\"]($input.rank===$dy.rank,function(){return\"Rank of input (\".concat($input.rank,\") does not match rank of dy (\").concat($dy.rank,\")\");});var input4D=$input;var dy4D=$dy;var reshapedTo4D=false;if($input.rank===3){reshapedTo4D=true;input4D=reshape($input,[1,$input.shape[0],$input.shape[1],$input.shape[2]]);dy4D=reshape($dy,[1,$dy.shape[0],$dy.shape[1],$dy.shape[2]]);}util[\"assert\"](dy4D.rank===4,function(){return\"Error in avgPoolBackprop: dy must be rank 4 but got rank \"+\"\".concat(dy4D.rank,\".\");});util[\"assert\"](input4D.rank===4,function(){return\"Error in avgPoolBackprop: input must be rank 4 but got rank \"+\"\".concat(input4D.rank,\".\");});var forward=function forward(backend){var convInfo=computePool2DInfo(input4D.shape,filterSize,strides,1/* dilations */,pad);return backend.avgPoolBackprop(dy4D,input4D,convInfo);};var inputs={dy:dy4D,input:input4D};var attrs={filterSize:filterSize,strides:strides,pad:pad};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"g\"/* AvgPoolBackprop */],attrs);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var avgPoolBackprop=Object(operation[\"a\"/* op */])({avgPoolBackprop_:avgPoolBackprop_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var avgPoolGradConfig={kernelName:kernel_names[\"d\"/* AvgPool */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved,attrs){var _saved30=_slicedToArray(saved,1),_x4=_saved30[0];var filterSize=attrs.filterSize,strides=attrs.strides,pad=attrs.pad;return{x:function x(){return avgPoolBackprop(dy,_x4,filterSize,strides,pad);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the dot product of two matrices, A * B. These must be matrices.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2], [1, 2]);\r\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * a.matMul(b).print();  // or tf.matMul(a, b)\r\n * ```\r\n * @param a First matrix in dot product operation.\r\n * @param b Second matrix in dot product operation.\r\n * @param transposeA If true, `a` is transposed before multiplication.\r\n * @param transposeB If true, `b` is transposed before multiplication.\r\n */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */function matMul_(a,b){var transposeA=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var transposeB=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','matMul');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','matMul');var _Object9=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object10=_slicedToArray(_Object9,2);$a=_Object10[0];$b=_Object10[1];util[\"assert\"]($a.rank>=2&&$b.rank>=2&&$a.rank===$b.rank,function(){return\"Error in matMul: inputs must have the same rank of at least 2, \"+\"got ranks \".concat($a.rank,\" and \").concat($b.rank,\".\");});var innerShapeA=transposeA?$a.shape[$a.rank-2]:$a.shape[$a.rank-1];var innerShapeB=transposeB?$b.shape[$b.rank-1]:$b.shape[$b.rank-2];var outerShapeA=transposeA?$a.shape[$a.rank-1]:$a.shape[$a.rank-2];var outerShapeB=transposeB?$b.shape[$b.rank-2]:$b.shape[$b.rank-1];var outerDimsA=$a.shape.slice(0,-2);var outerDimsB=$b.shape.slice(0,-2);var batchDimA=util[\"sizeFromShape\"](outerDimsA);var batchDimB=util[\"sizeFromShape\"](outerDimsB);util[\"assert\"](util[\"arraysEqual\"](outerDimsA,outerDimsB),function(){return\"Error in matMul: outer dimensions (\".concat(outerDimsA,\") and (\")+\"\".concat(outerDimsB,\") of Tensors with shapes \").concat($a.shape,\" and \")+\"\".concat($b.shape,\" must match.\");});util[\"assert\"](innerShapeA===innerShapeB,function(){return\"Error in matMul: inner shapes (\".concat(innerShapeA,\") and (\")+\"\".concat(innerShapeB,\") of Tensors with shapes \").concat($a.shape,\" and \")+\"\".concat($b.shape,\" and transposeA=\").concat(transposeA)+\" and transposeB=\".concat(transposeB,\" must match.\");});var outShape=$a.shape.slice(0,-2).concat([outerShapeA,outerShapeB]);var a3D=transposeA?reshape($a,[batchDimA,innerShapeA,outerShapeA]):reshape($a,[batchDimA,outerShapeA,innerShapeA]);var b3D=transposeB?reshape($b,[batchDimB,outerShapeB,innerShapeB]):reshape($b,[batchDimB,innerShapeB,outerShapeB]);var forward=function forward(backend,save){save([a3D,b3D]);return backend.batchMatMul(a3D,b3D,transposeA,transposeB);};var inputs={a:a3D,b:b3D};var attrs={transposeA:transposeA,transposeB:transposeB};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"h\"/* BatchMatMul */],attrs);return reshape(res,outShape);}var matMul=Object(operation[\"a\"/* op */])({matMul_:matMul_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var batchMatMulGradConfig={kernelName:kernel_names[\"h\"/* BatchMatMul */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved,attrs){var _saved31=_slicedToArray(saved,2),a=_saved31[0],b=_saved31[1];var transposeA=attrs.transposeA,transposeB=attrs.transposeB;if(!transposeA&&!transposeB){return{a:function a(){return matMul(dy,b,false,true);},b:function b(){return matMul(a,dy,true,false);}};}else if(!transposeA&&transposeB){return{a:function a(){return matMul(dy,b,false,false);},b:function b(){return matMul(dy,a,true,false);}};}else if(transposeA&&!transposeB){return{a:function a(){return matMul(b,dy,false,true);},b:function b(){return matMul(a,dy,false,false);}};}else{return{a:function a(){return matMul(b,dy,true,true);},b:function b(){return matMul(dy,a,true,true);}};}}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\r\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\r\n * the \"batch\" dimension (0) such that in the output, the spatial\r\n * dimensions `[1, ..., M]` correspond to the position within the grid,\r\n * and the batch dimension combines both the position within a spatial block\r\n * and the original batch position. Prior to division into blocks,\r\n * the spatial dimensions of the input are optionally zero padded\r\n * according to `paddings`. See below for a precise description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\r\n * const blockShape = [2, 2];\r\n * const paddings = [[0, 0], [0, 0]];\r\n *\r\n * x.spaceToBatchND(blockShape, paddings).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\r\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\r\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\r\n * is required that\r\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\r\n * according to `paddings` to produce `padded` of shape paddedShape.\r\n *\r\n * 2. Reshape `padded` to `reshapedPadded` of shape:\r\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\r\n *\r\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\r\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\r\n *\r\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\r\n * batch dimension, producing an output tensor of shape:\r\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function spaceToBatchND_(x,blockShape,paddings){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','spaceToBatchND');util[\"assert\"]($x.rank>=1+blockShape.length,function(){return\"input rank \".concat($x.rank,\" should be > than [blockShape] \").concat(blockShape.length);});util[\"assert\"](paddings.length===blockShape.length,function(){return\"paddings.shape[0] \".concat(paddings.length,\" must be equal to [blockShape] \").concat(blockShape.length);});util[\"assert\"]($x.shape.reduce(function(a,b,i){if(i>0&&i<=blockShape.length){return a&&(b+paddings[i-1][0]+paddings[i-1][1])%blockShape[i-1]===0;}return a;},true),function(){return\"input spatial dimensions \".concat($x.shape.slice(1),\" with paddings \").concat(paddings.toString(),\" must be divisible by blockShapes \").concat(blockShape.toString());});var forward=function forward(backend){return backend.spaceToBatchND($x,blockShape,paddings);};var inputs={x:$x};var attrs={blockShape:blockShape,paddings:paddings};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"mb\"/* SpaceToBatchND */],attrs);}var spaceToBatchND=Object(operation[\"a\"/* op */])({spaceToBatchND_:spaceToBatchND_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var batchToSpaceNDGradConfig={kernelName:kernel_names[\"i\"/* BatchToSpaceND */],gradFunc:function gradFunc(dy,saved,attrs){var blockShape=attrs.blockShape,crops=attrs.crops;return{x:function x(){return spaceToBatchND(dy,blockShape,crops);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var broadcastToGradConfig={kernelName:kernel_names[\"j\"/* BroadcastTo */],gradFunc:function gradFunc(dy,saved,attrs){var broadCastToAttrs=attrs;var inputShape=broadCastToAttrs.inputShape;var outputShape=broadCastToAttrs.shape;var reps=Array.from(outputShape);for(var i=inputShape.length-1;i>=0;i--){if(inputShape[i]===outputShape[i]){reps[i]=1;}else if(inputShape[i]!==1){throw new Error(\"broadcastTo(): [\".concat(inputShape,\"] cannot be broadcast to [\").concat(outputShape,\"].\"));}}var axes=[];for(var _i2=0;_i2<reps.length;_i2++){if(reps[_i2]>1){axes.push(_i2);}}return{x:function x(){return sum(dy,axes,true/* keepDims */);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/split.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Splits a `tf.Tensor` into sub tensors.\r\n *\r\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\r\n * into `numOrSizeSplits` smaller tensors.\r\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\r\n *\r\n * If `numOrSizeSplits` is a number array, splits `x` into\r\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\r\n * same size as `x` except along dimension `axis` where the size is\r\n * `numOrSizeSplits[i]`.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\r\n * const [a, b] = tf.split(x, 2, 1);\r\n * a.print();\r\n * b.print();\r\n *\r\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\r\n * c.print();\r\n * d.print();\r\n * e.print();\r\n * ```\r\n *\r\n * @param x The input tensor to split.\r\n * @param numOrSizeSplits Either an integer indicating the number of\r\n * splits along the axis or an array of integers containing the sizes of\r\n * each output tensor along the axis. If a number then it must evenly divide\r\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\r\n * @param axis The dimension along which to split. Defaults to 0 (the first\r\n * dim).\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function split_(x,numOrSizeSplits){var axis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','split');var $axis=Object(util[\"parseAxisParam\"])(axis,$x.shape)[0];var splitSizes;if(typeof numOrSizeSplits==='number'){Object(util[\"assert\"])($x.shape[$axis]%numOrSizeSplits===0,function(){return'Number of splits must evenly divide the axis.';});splitSizes=new Array(numOrSizeSplits).fill($x.shape[$axis]/numOrSizeSplits);}else{Object(util[\"assert\"])($x.shape[$axis]===numOrSizeSplits.reduce(function(a,b){return a+b;}),function(){return'The sum of sizes must match the size of the axis dimension.';});splitSizes=numOrSizeSplits;}var forward=function forward(backend,_){return backend.split($x,splitSizes,$axis);};var inputs={x:$x};var attr={numOrSizeSplits:numOrSizeSplits,axis:axis};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"nb\"/* SplitV */],attr);}var split=Object(operation[\"a\"/* op */])({split_:split_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var concatGradConfig={kernelName:kernel_names[\"l\"/* Concat */],saveAllInputs:true,gradFunc:function gradFunc(dy,saved,attrs){var shapes=saved.map(function(t){return t.shape;});var axis=attrs.axis;var $axis=Object(util[\"parseAxisParam\"])(axis,saved[0].shape)[0];var sizeSplits=shapes.map(function(s){return s[$axis];});var derTensors=split(dy,sizeSplits,$axis);return derTensors.map(function(t){return function(){return t;};});}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the derivative of the filter of a 2D convolution.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\r\n * @param dy The dy image, of rank 4 or rank 3, of shape\r\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\r\n * @param filterShape The shape of the filter, length 4,\r\n *     [filterHeight, filterWidth, inDepth, outDepth].\r\n * @param strides The strides of the convolution: [strideHeight,\r\n * strideWidth].\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels].\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */function conv2DBackpropFilter_(x,dy,filterShape,strides,pad){var dataFormat=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'NHWC';var dimRoundingMode=arguments.length>6?arguments[6]:undefined;var x4D=x;if(x.rank===3){x4D=reshape(x,[1,x.shape[0],x.shape[1],x.shape[2]]);}var dy4D=dy;if(dy4D.rank===3){dy4D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2]]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in conv2dDerFilter: input must be rank 4, but got shape \"+\"\".concat(x4D.shape,\".\");});util[\"assert\"](dy4D.rank===4,function(){return\"Error in conv2dDerFilter: dy must be rank 4, but got shape \"+\"\".concat(dy4D.shape,\".\");});util[\"assert\"](filterShape.length===4,function(){return\"Error in conv2dDerFilter: filterShape must be length 4, but got \"+\"\".concat(filterShape,\".\");});var inDepth=dataFormat==='NHWC'?x4D.shape[3]:x4D.shape[1];var outDepth=dataFormat==='NHWC'?dy4D.shape[3]:dy4D.shape[1];util[\"assert\"](inDepth===filterShape[2],function(){return\"Error in conv2dDerFilter: depth of input \".concat(inDepth,\") must \")+\"match input depth in filter (\".concat(filterShape[2],\".\");});util[\"assert\"](outDepth===filterShape[3],function(){return\"Error in conv2dDerFilter: depth of dy (\".concat(outDepth,\") must \")+\"match output depth for filter (\".concat(filterShape[3],\").\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in conv2dDerFilter: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend){var dilations=1;var $dataFormat=convertConv2DDataFormat(dataFormat);var convInfo=computeConv2DInfo(x4D.shape,filterShape,strides,dilations,pad,dimRoundingMode,false,$dataFormat);return backend.conv2dDerFilter(x4D,dy4D,convInfo);};var inputs={x:x4D,dy:dy4D};var attrs={strides:strides,pad:pad,dataFormat:dataFormat,dimRoundingMode:dimRoundingMode};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"n\"/* Conv2DBackpropFilter */],attrs);}var conv2DBackpropFilter=Object(operation[\"a\"/* op */])({conv2DBackpropFilter_:conv2DBackpropFilter_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the derivative of the input of a 2D convolution.\r\n *\r\n * @param xShape The shape of the input: [batch, height, width, inDepth].\r\n * If length of 3, batch of 1 is assumed.\r\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\r\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm used:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels].\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */function conv2DBackpropInput_(xShape,dy,filter,strides,pad){var dataFormat=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'NHWC';var dimRoundingMode=arguments.length>6?arguments[6]:undefined;util[\"assert\"](xShape.length===dy.rank,function(){return\"Length of inShape \"+\"(\".concat(xShape.length,\") and rank of dy (\").concat(dy.rank,\") must match\");});var xShape4D=xShape;var dy4D=dy;var reshapedTo4D=false;if(dy.rank===3){reshapedTo4D=true;dy4D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2]]);xShape4D=[1,xShape[0],xShape[1],xShape[2]];}util[\"assert\"](xShape4D.length===4,function(){return\"Error in conv2dDerInput: inShape must be length 4, but got length \"+\"\".concat(xShape4D.length,\".\");});util[\"assert\"](dy4D.rank===4,function(){return\"Error in conv2dDerInput: dy must be rank 4, but got \"+\"rank \".concat(dy4D.rank);});util[\"assert\"](filter.rank===4,function(){return\"Error in conv2dDerInput: filter must be rank 4, but got \"+\"rank \".concat(filter.rank);});var inDepth=dataFormat==='NHWC'?xShape4D[3]:xShape4D[1];var outDepth=dataFormat==='NHWC'?dy4D.shape[3]:dy4D.shape[1];util[\"assert\"](inDepth===filter.shape[2],function(){return\"Error in conv2dDerInput: depth of input (\".concat(inDepth,\") must \")+\"match input depth for filter \".concat(filter.shape[2],\".\");});util[\"assert\"](outDepth===filter.shape[3],function(){return\"Error in conv2dDerInput: depth of output (\".concat(outDepth,\") must \")+\"match output depth for filter \".concat(filter.shape[3],\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in conv2dDerInput: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){var dilations=1;var $dataFormat=convertConv2DDataFormat(dataFormat);var convInfo=computeConv2DInfo(xShape4D,filter.shape,strides,dilations,pad,dimRoundingMode,false,$dataFormat);var res=backend.conv2dDerInput(dy4D,filter,convInfo);save([dy4D,filter]);return res;};var inputs={dy:dy4D,filter:filter};var attrs={strides:strides,pad:pad,dataFormat:dataFormat,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"o\"/* Conv2DBackpropInput */],attrs);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var conv2DBackpropInput=Object(operation[\"a\"/* op */])({conv2DBackpropInput_:conv2DBackpropInput_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var conv2DGradConfig={kernelName:kernel_names[\"m\"/* Conv2D */],inputsToSave:['x','filter'],gradFunc:function gradFunc(dy,saved,attrs){var _saved32=_slicedToArray(saved,2),x4D=_saved32[0],$filter=_saved32[1];var dilations=attrs.dilations,strides=attrs.strides,pad=attrs.pad,dataFormat=attrs.dataFormat;util[\"assert\"](tupleValuesAreOne(dilations),function(){return'Error in gradient of conv2D: dilation rates greater than 1 '+\"are not yet supported in gradients. Got dilations '\".concat(dilations,\"'\");});return{x:function x(){return conv2DBackpropInput(x4D.shape,dy,$filter,strides,pad,dataFormat);},filter:function filter(){return conv2DBackpropFilter(x4D,dy,$filter.shape,strides,pad,dataFormat);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes a 2D convolution over the input x.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels].\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function conv2d_(x,filter,strides,pad){var dataFormat=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'NHWC';var dilations=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[1,1];var dimRoundingMode=arguments.length>6?arguments[6]:undefined;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv2d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv2d');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in conv2d: input must be rank 4, but got rank \".concat(x4D.rank,\".\");});util[\"assert\"]($filter.rank===4,function(){return\"Error in conv2d: filter must be rank 4, but got rank \"+\"\".concat($filter.rank,\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in conv2d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var inDepth=dataFormat==='NHWC'?x4D.shape[3]:x4D.shape[1];util[\"assert\"](inDepth===$filter.shape[2],function(){return\"Error in conv2d: depth of input (\".concat(inDepth,\") must match \")+\"input depth for filter \".concat($filter.shape[2],\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in conv2D: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});var forward=function forward(backend,save){var $dataFormat=convertConv2DDataFormat(dataFormat);var convInfo=computeConv2DInfo(x4D.shape,$filter.shape,strides,dilations,pad,dimRoundingMode,false,$dataFormat);var res=backend.conv2d(x4D,$filter,convInfo);save([x4D,$filter]);return res;};var inputs={x:x4D,filter:$filter};var attrs={strides:strides,pad:pad,dataFormat:dataFormat,dilations:dilations,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"m\"/* Conv2D */],attrs);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var conv2d=Object(operation[\"a\"/* op */])({conv2d_:conv2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var conv2DBackpropInputGradConfig={kernelName:kernel_names[\"o\"/* Conv2DBackpropInput */],inputsToSave:['dy','filter'],gradFunc:function gradFunc(ddx,saved,attrs){var _saved33=_slicedToArray(saved,2),dy=_saved33[0],_filter=_saved33[1];var strides=attrs.strides,pad=attrs.pad,dataFormat=attrs.dataFormat,dimRoundingMode=attrs.dimRoundingMode;return{dy:function dy(){return conv2d(ddx,_filter,strides,pad,dataFormat,1/* dilations */,dimRoundingMode);},filter:function filter(){return conv2DBackpropFilter(ddx,dy,_filter.shape,strides,pad,dataFormat,dimRoundingMode);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the derivative of the filter of a 3D convolution.\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param dy The dy image, of rank 5 or rank 4, of shape\r\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param filterShape The shape of the filter, length 5,\r\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\r\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\r\n * strideWidth].\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */function conv3DBackpropFilter_(x,dy,filterShape,strides,pad){var x5D=x;if(x.rank===4){x5D=reshape(x,[1,x.shape[0],x.shape[1],x.shape[2],x.shape[3]]);}var dy5D=dy;if(dy5D.rank===4){dy5D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2],dy.shape[3]]);}util[\"assert\"](x5D.rank===5,function(){return\"Error in conv3dDerFilter: input must be rank 5, but got shape \"+\"\".concat(x5D.shape,\".\");});util[\"assert\"](dy5D.rank===5,function(){return\"Error in conv3dDerFilter: dy must be rank 5, but got shape \"+\"\".concat(dy5D.shape,\".\");});util[\"assert\"](filterShape.length===5,function(){return\"Error in conv3dDerFilter: filterShape must be length 5, but got \"+\"\".concat(filterShape,\".\");});util[\"assert\"](x5D.shape[4]===filterShape[3],function(){return\"Error in conv3dDerFilter: depth of input \".concat(x5D.shape[4],\") must \")+\"match input depth in filter (\".concat(filterShape[3],\".\");});util[\"assert\"](dy5D.shape[4]===filterShape[4],function(){return\"Error in conv3dDerFilter: depth of dy (\".concat(dy5D.shape[4],\") must \")+\"match output depth for filter (\".concat(filterShape[4],\").\");});var forward=function forward(backend){var dilations=1;var convInfo=computeConv3DInfo(x5D.shape,filterShape,strides,dilations,pad);return backend.conv3dDerFilter(x5D,dy5D,convInfo);};var inputs={x:x5D,y:dy5D};var attrs={strides:strides,pad:pad};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"q\"/* Conv3DBackpropFilterV2 */],attrs);}var conv3DBackpropFilter=Object(operation[\"a\"/* op */])({conv3DBackpropFilter_:conv3DBackpropFilter_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the derivative of the input of a 3D convolution.\r\n *\r\n * @param xShape The shape of the input: [batch, depth, height, width,\r\n * in_channels]. If length of 4, batch of 1 is assumed.\r\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\r\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\r\n * If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 5, of shape\r\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm used:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n */function conv3DBackpropInput_(xShape,dy,filter,strides,pad){util[\"assert\"](xShape.length===dy.rank,function(){return\"Length of inShape \"+\"(\".concat(xShape.length,\") and rank of dy (\").concat(dy.rank,\") must match\");});var xShape5D=xShape;var dy5D=dy;var reshapedTo5D=false;if(dy.rank===4){reshapedTo5D=true;dy5D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2],dy.shape[3]]);xShape5D=[1,xShape[0],xShape[1],xShape[2],xShape[3]];}var inDepth=xShape5D[4];var outDepth=dy5D.shape[4];util[\"assert\"](xShape5D.length===5,function(){return\"Error in conv3dDerInput: inShape must be length 5, but got length \"+\"\".concat(xShape5D.length,\".\");});util[\"assert\"](dy5D.rank===5,function(){return\"Error in conv3dDerInput: dy must be rank 5, but got \"+\"rank \".concat(dy5D.rank);});util[\"assert\"](filter.rank===5,function(){return\"Error in conv3dDerInput: filter must be rank 5, but got \"+\"rank \".concat(filter.rank);});util[\"assert\"](inDepth===filter.shape[3],function(){return\"Error in conv3dDerInput: depth of input (\".concat(inDepth,\") must \")+\"match input depth for filter \".concat(filter.shape[3],\".\");});util[\"assert\"](outDepth===filter.shape[4],function(){return\"Error in conv3dDerInput: depth of output (\".concat(outDepth,\") must \")+\"match output depth for filter \".concat(filter.shape[4],\".\");});var forward=function forward(backend){var dilations=1;var convInfo=computeConv3DInfo(xShape5D,filter.shape,strides,dilations,pad);return backend.conv3dDerInput(dy5D,filter,convInfo);};var inputs={dy:dy5D};var attrs={pad:pad};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"r\"/* Conv3DBackpropInputV2 */],attrs);if(reshapedTo5D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3],res.shape[4]]);}return res;}var conv3DBackpropInput=Object(operation[\"a\"/* op */])({conv3DBackpropInput_:conv3DBackpropInput_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var conv3DGradConfig={kernelName:kernel_names[\"p\"/* Conv3D */],inputsToSave:['x','filter'],gradFunc:function gradFunc(dy,saved,attrs){var dilations=attrs.dilations,strides=attrs.strides,pad=attrs.pad;util[\"assert\"](tupleValuesAreOne(dilations),function(){return'Error in gradient of conv3D: dilation rates greater than 1 are '+\"not yet supported in gradients. Got dilations '\".concat(dilations,\"'\");});var _saved34=_slicedToArray(saved,2),x5D=_saved34[0],$filter=_saved34[1];return{x:function x(){return conv3DBackpropInput(x5D.shape,dy,$filter,strides,pad);},filter:function filter(){return conv3DBackpropFilter(x5D,dy,$filter.shape,strides,pad);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\r\n *\r\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\r\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\r\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\r\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\r\n *\r\n * a.transpose().print();  // or tf.transpose(a)\r\n * ```\r\n *\r\n * @param x The tensor to transpose.\r\n * @param perm The permutation of the dimensions of a.\r\n */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */function transpose_(x,perm){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','transpose');if(perm==null){perm=$x.shape.map(function(s,i){return i;}).reverse();}util[\"assert\"]($x.rank===perm.length,function(){return\"Error in transpose: rank of input \".concat($x.rank,\" \")+\"must match length of perm \".concat(perm,\".\");});perm.forEach(function(axis){util[\"assert\"](axis>=0&&axis<$x.rank,function(){return\"All entries in 'perm' must be between 0 and \".concat($x.rank-1)+\" but got \".concat(perm);});});if($x.rank<=1){return $x.clone();}var attrs={perm:perm};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.transpose($x,perm);},{x:$x},null/* gradient */,'Transpose',attrs);}var transpose=Object(operation[\"a\"/* op */])({transpose_:transpose_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2, 3, 4]);\r\n * x.cumsum().print();\r\n * ```\r\n * ```js\r\n * const x = tf.tensor([[1, 2], [3, 4]]);\r\n * x.cumsum().print();\r\n * ```\r\n *\r\n * @param x The input tensor to be summed.\r\n * @param axis The axis along which to sum. Optional. Defaults to 0.\r\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\r\n *     Defaults to false. If set to true then the sum of each tensor entry\r\n *     does not include its own value, but only the values previous to it\r\n *     along the specified axis.\r\n * @param reverse Whether to sum in the opposite direction. Optional.\r\n *     Defaults to false.\r\n */ /** @doc {heading: 'Operations', subheading: 'Scan'} */function cumsum_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var exclusive=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var reverse=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','cumsum');var forward=function forward(backend,save){var permutation=getAxesPermutation([axis],$x.rank);var permutedX=$x;if(permutation!=null){permutedX=transpose($x,permutation);}var permutedAxis=getInnerMostAxes(1,$x.rank)[0];var value=backend.cumsum(permutedX,permutedAxis,exclusive,reverse);save([$x]);if(permutation!=null){value=transpose(value,permutation);}return value;};var inputs={x:$x};var attrs={axis:axis,exclusive:exclusive,reverse:reverse};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"s\"/* Cumsum */],attrs);}var cumsum=Object(operation[\"a\"/* op */])({cumsum_:cumsum_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var cumsumGradConfig={kernelName:kernel_names[\"s\"/* Cumsum */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved,attrs){var _saved35=_slicedToArray(saved,1),_x5=_saved35[0];var axis=attrs.axis,exclusive=attrs.exclusive,reverse=attrs.reverse;return{x:function x(){var permutation=getAxesPermutation([axis],_x5.rank);var out=cumsum(dy,axis,exclusive,!reverse);if(permutation!=null){out=transpose(out,permutation);}return out;}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function depthwiseConv2dNativeBackpropFilter_(x,dy,filterShape,convInfo){var x4D=x;if(x.rank===3){x4D=reshape(x,[1,x.shape[0],x.shape[1],x.shape[2]]);}var dy4D=dy;if(dy4D.rank===3){dy4D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2]]);}var forward=function forward(backend){return backend.depthwiseConv2DDerFilter(x4D,dy4D,convInfo);};var inputs={x:x4D,dy:dy4D};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"v\"/* DepthwiseConv2dNativeBackpropFilter */]);}var depthwiseConv2dNativeBackpropFilter=Object(operation[\"a\"/* op */])({depthwiseConv2dNativeBackpropFilter_:depthwiseConv2dNativeBackpropFilter_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function depthwiseConv2dNativeBackpropInput_(xShape,dy,filter,convInfo){var dy4D=dy;var reshapedTo4D=false;if(dy.rank===3){reshapedTo4D=true;dy4D=reshape(dy,[1,dy.shape[0],dy.shape[1],dy.shape[2]]);}var forward=function forward(backend){return backend.depthwiseConv2DDerInput(dy4D,filter,convInfo);};var inputs={dy:dy4D};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"w\"/* DepthwiseConv2dNativeBackpropInput */]);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var depthwiseConv2dNativeBackpropInput=Object(operation[\"a\"/* op */])({depthwiseConv2dNativeBackpropInput_:depthwiseConv2dNativeBackpropInput_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var depthwiseConv2dNativeGradConfig={kernelName:kernel_names[\"u\"/* DepthwiseConv2dNative */],inputsToSave:['x','filter'],gradFunc:function gradFunc(dy,saved,attrs){var dilations=attrs.dilations,strides=attrs.strides,pad=attrs.pad,dimRoundingMode=attrs.dimRoundingMode;var $dilations=dilations==null?[1,1]:dilations;util[\"assert\"](tupleValuesAreOne($dilations),function(){return'Error in gradient of depthwiseConv2dNative: dilation rates '+\"greater than 1 are not yet supported. Got dilations \"+\"'\".concat($dilations,\"'\");});var _saved36=_slicedToArray(saved,2),_x6=_saved36[0],_filter2=_saved36[1];util[\"assert\"](_x6.rank===4,function(){return\"Error in gradient of depthwiseConv2dNative: input must be \"+\"rank 4, but got rank \".concat(_x6.rank,\".\");});util[\"assert\"](_filter2.rank===4,function(){return\"Error in gradient of depthwiseConv2dNative: filter must be \"+\"rank 4, but got rank \".concat(_filter2.rank,\".\");});util[\"assert\"](_x6.shape[3]===_filter2.shape[2],function(){return\"Error in gradient of depthwiseConv2d: number of input \"+\"channels (\".concat(_x6.shape[3],\") must match the inChannels dimension \")+\"in filter \".concat(_filter2.shape[2],\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,$dilations),function(){return'Error in gradient of depthwiseConv2d: Either strides or '+\"dilations must be  1. Got strides \".concat(strides,\" and dilations \")+\"'\".concat($dilations,\"'.\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in depthwiseConv2d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var convInfo=computeConv2DInfo(_x6.shape,_filter2.shape,strides,$dilations,pad,dimRoundingMode,true/* depthwise */);return{x:function x(){return depthwiseConv2dNativeBackpropInput(_x6.shape,dy,_filter2,convInfo);},filter:function filter(){return depthwiseConv2dNativeBackpropFilter(_x6,dy,_filter2.shape,convInfo);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var divGradConfig={kernelName:kernel_names[\"y\"/* Div */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved37=_slicedToArray(saved,2),a=_saved37[0],b=_saved37[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var res=div(dy,b.toFloat());var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){return sum(res,reduceAxes).reshape(a.shape);}return res;};var derB=function derB(){var res=mul(dy,a.toFloat());var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){res=reshape(sum(res,reduceAxes),b.shape);}var tmp=square(b);return neg(div(res,tmp.toFloat()));};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var eluGradConfig={kernelName:kernel_names[\"z\"/* Elu */],outputsToSave:[true],gradFunc:function gradFunc(dy,saved){var _saved38=_slicedToArray(saved,1),y=_saved38[0];var backPropKernelFunc=function backPropKernelFunc(backend){return backend.eluDer(dy,y);};var inputs={dy:dy,y:y};return{x:function x(){return engine[\"a\"/* ENGINE */].runKernelFunc(backPropKernelFunc,inputs,null/* grad */,kernel_names[\"A\"/* EluGrad */]);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var floorDivGradConfig={kernelName:kernel_names[\"D\"/* FloorDiv */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved39=_slicedToArray(saved,2),a=_saved39[0],b=_saved39[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var res=dy.div(b.toFloat());var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){return res.sum(reduceAxes).reshape(a.shape);}return res;};var derB=function derB(){var res=dy.mul(a.toFloat());var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){res=res.sum(reduceAxes).reshape(b.shape);}var tmp=b.square();return res.div(tmp.toFloat()).neg();};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([10, 20, 30, 40]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * a.sub(b).print();  // or tf.sub(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast subtract a with b.\r\n * const a = tf.tensor1d([10, 20, 30, 40]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.sub(b).print();  // or tf.sub(a, b)\r\n * ```\r\n * @param a The first `tf.Tensor` to subtract from.\r\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\r\n * `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function sub_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','sub');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','sub');var _Object11=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object12=_slicedToArray(_Object11,2);$a=_Object12[0];$b=_Object12[1];var forward=function forward(backend,save){var res=backend.subtract($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"qb\"/* Sub */]);}var sub=Object(operation[\"a\"/* op */])({sub_:sub_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Construct a tensor by repeating it the number of times given by reps.\r\n *\r\n * This operation creates a new tensor by replicating `input` `reps`\r\n * times. The output tensor's i'th dimension has `input.shape[i] *\r\n * reps[i]` elements, and the values of `input` are replicated\r\n * `reps[i]` times along the i'th dimension. For example, tiling\r\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n *\r\n * a.tile([2]).print();    // or a.tile([2])\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\r\n * ```\r\n * @param x The tensor to tile.\r\n * @param reps Determines the number of replications per dimension.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function tile_(x,reps){var parseAs=null;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','tile',parseAs);util[\"assert\"]($x.rank===reps.length,function(){return\"Error in transpose: rank of input \".concat($x.rank,\" \")+\"must match length of reps \".concat(reps,\".\");});var forward=function forward(backend,save){var res=backend.tile($x,reps);save([$x]);return res;};var inputsToSave=[$x];var inputs={x:$x};var attrs={reps:reps};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"rb\"/* Tile */],attrs,inputsToSave);}var tile=Object(operation[\"a\"/* op */])({tile_:tile_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var fusedBatchNormGradConfig={kernelName:kernel_names[\"F\"/* FusedBatchNorm */],inputsToSave:['x','mean','variance','scale'],gradFunc:function gradFunc(dy,saved,attrs){var varianceEpsilon=attrs.varianceEpsilon;var _saved40=_slicedToArray(saved,4),x=_saved40[0],mean=_saved40[1],variance=_saved40[2],scale=_saved40[3];var scaleValue=scale==null?Object(tensor_ops[\"e\"/* scalar */])(1):scale;var reductionAxes=getReductionAxes(mean.shape,x.shape);var tileShape=[];if(mean.rank===1){for(var i=0;i<x.shape.length-1;++i){tileShape.push(x.shape[i]);}tileShape.push(1);}var xMinusMean=sub(x,mean);var dyTimesScaleValue=mul(dy,scaleValue);var oneOverSqrtVariance=rsqrt(add(variance,Object(tensor_ops[\"e\"/* scalar */])(varianceEpsilon)));var minusHalfRCube=mul(mul(mul(oneOverSqrtVariance,oneOverSqrtVariance),oneOverSqrtVariance),Object(tensor_ops[\"e\"/* scalar */])(-0.5));var derX=function derX(){if(mean.rank===1){return reshape(mul(mul(dy,tile(oneOverSqrtVariance.as4D(1,1,1,mean.shape[0]),tileShape)),scaleValue),x.shape);}else{return reshape(mul(mul(dy,oneOverSqrtVariance),scaleValue),x.shape);}};var derMean=function derMean(){var meanDer=mul(mul(oneOverSqrtVariance,Object(tensor_ops[\"e\"/* scalar */])(-1)),dyTimesScaleValue);if(mean.rank===1){meanDer=sum(meanDer,reductionAxes);}return reshape(meanDer,mean.shape);};var derVariance=function derVariance(){var varianceDer=mul(mul(minusHalfRCube,xMinusMean),dyTimesScaleValue);if(mean.rank===1){varianceDer=sum(varianceDer,reductionAxes);}return reshape(varianceDer,mean.shape);};var derScale=function derScale(){var xMinusMean2TimesRsqrt=mul(xMinusMean,oneOverSqrtVariance);var scaleDer=mul(dy,xMinusMean2TimesRsqrt);if(mean.rank===1){scaleDer=sum(scaleDer,reductionAxes);}return reshape(scaleDer,mean.shape);};var derOffset=function derOffset(){var offsetDer=dy;if(mean.rank===1){offsetDer=sum(offsetDer,reductionAxes);}return reshape(offsetDer,mean.shape);};return{x:derX,mean:derMean,variance:derVariance,scale:derScale,offset:derOffset};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var greaterEqualGradConfig={kernelName:kernel_names[\"I\"/* GreaterEqual */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved41=_slicedToArray(saved,2),_a2=_saved41[0],_b=_saved41[1];return{a:function a(){return Object(tensor_ops[\"o\"/* zerosLike */])(_a2);},b:function b(){return Object(tensor_ops[\"o\"/* zerosLike */])(_b);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var identityGradConfig={kernelName:kernel_names[\"J\"/* Identity */],gradFunc:function gradFunc(dy){return{x:function x(){return dy.toFloat();}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function localResponseNormalizationBackprop_(x,y,dy){var depthRadius=arguments.length>3&&arguments[3]!==undefined?arguments[3]:5;var bias=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;var alpha=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1;var beta=arguments.length>6&&arguments[6]!==undefined?arguments[6]:0.5;var forward=function forward(backend){return backend.LRNGrad(dy,x,y,depthRadius,bias,alpha,beta);};var inputs={x:x,y:y,dy:dy};var attrs={depthRadius:depthRadius,bias:bias,alpha:alpha,beta:beta};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"M\"/* LRNBackprop */],attrs);}var localResponseNormalizationBackprop=Object(operation[\"a\"/* op */])({localResponseNormalizationBackprop_:localResponseNormalizationBackprop_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var lrnGradConfig={kernelName:kernel_names[\"L\"/* LRN */],inputsToSave:['x'],outputsToSave:[true],gradFunc:function gradFunc(dy,saved,attrs){var _saved42=_slicedToArray(saved,2),_x7=_saved42[0],y=_saved42[1];var depthRadius=attrs.depthRadius,bias=attrs.bias,alpha=attrs.alpha,beta=attrs.beta;return{x:function x(){return localResponseNormalizationBackprop(_x7,y,dy,depthRadius,bias,alpha,beta);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxGradConfig={kernelName:kernel_names[\"P\"/* Max */],inputsToSave:['x'],outputsToSave:[true],gradFunc:function gradFunc(dy,saved,attrs){var maxAttrs=attrs;var reductionIndices=maxAttrs.reductionIndices;var _saved43=_slicedToArray(saved,2),x=_saved43[0],y=_saved43[1];var origAxes=util[\"parseAxisParam\"](reductionIndices,x.shape);var permutedAxes=getAxesPermutation(origAxes,x.rank);var maxGrad=gradForMinAndMax(dy,y,x,origAxes,permutedAxes);return{x:function x(){var out=maxGrad['x']();if(permutedAxes!=null){out=transpose(out);}return out;}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.greaterEqual(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function greaterEqual_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','greaterEqual');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','greaterEqual');var _Object13=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object14=_slicedToArray(_Object13,2);$a=_Object14[0];$b=_Object14[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend,save){var res=backend.greaterEqual($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"I\"/* GreaterEqual */]);}var greaterEqual=Object(operation[\"a\"/* op */])({greaterEqual_:greaterEqual_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/less.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.less(b).print();\r\n * ```\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function less_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','less');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','less');var _Object15=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object16=_slicedToArray(_Object15,2);$a=_Object16[0];$b=_Object16[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend){return backend.less($a,$b);};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"N\"/* Less */]);}var less=Object(operation[\"a\"/* op */])({less_:less_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maximumGradConfig={kernelName:kernel_names[\"V\"/* Maximum */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved44=_slicedToArray(saved,2),a=_saved44[0],b=_saved44[1];var derA=function derA(){return mul(dy,cast(greaterEqual(a,b),'float32'));};var derB=function derB(){return mul(dy,cast(less(a,b),'float32'));};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the backprop of a 3d max pool.\r\n *\r\n * @param dy The dy error, of rank 5 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * assumed.\r\n * @param input The original input image, of rank 5 or rank 4 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * @param output The original output image, of rank 5 of shape\r\n *     [batchSize, outDepth, outHeight, outWidth, channels].\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */function maxPool3dBackprop_(dy,input,output,filterSize,strides){var dilations=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[1,1,1];var pad=arguments.length>6?arguments[6]:undefined;var dimRoundingMode=arguments.length>7?arguments[7]:undefined;var $dy=Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','maxPool3dBackprop');var $input=Object(tensor_util_env[\"a\"/* convertToTensor */])(input,'input','maxPool3dBackprop');var $output=Object(tensor_util_env[\"a\"/* convertToTensor */])(output,'output','maxPool3dBackprop');var dy5D=$dy;var input5D=$input;var output5D=$output;var reshapedTo5D=false;if($input.rank===4){reshapedTo5D=true;dy5D=reshape($dy,[1,$dy.shape[0],$dy.shape[1],$dy.shape[2],$dy.shape[3]]);input5D=reshape($input,[1,$input.shape[0],$input.shape[1],$input.shape[2],$input.shape[3]]);output5D=reshape($output,[1,$output.shape[0],$output.shape[1],$output.shape[2],$output.shape[3]]);}util[\"assert\"](dy5D.rank===5,function(){return\"Error in maxPool3dBackprop: dy must be rank 5 but got rank \"+\"\".concat(dy5D.rank,\".\");});util[\"assert\"](input5D.rank===5,function(){return\"Error in maxPool3dBackprop: input must be rank 5 but got rank \"+\"\".concat(input5D.rank,\".\");});util[\"assert\"](output5D.rank===5,function(){return\"Error in maxPool3dBackprop: output must be rank 5 but got rank \"+\"\".concat(output5D.rank,\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in maxPool3dBackprop: Either strides or dilations '+\"must be 1. Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in maxPool3dBackprop: pad must be an integer when \"+\"using, dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend){var convInfo=computePool3DInfo(input5D.shape,filterSize,strides,dilations,pad,dimRoundingMode);return backend.maxPool3dBackprop(dy5D,input5D,output5D,convInfo);};var inputs={dy:dy5D,input:input5D,output:output5D};var attrs={filterSize:filterSize,strides:strides,dilations:dilations,pad:pad,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"S\"/* MaxPool3DBackprop */],attrs);if(reshapedTo5D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3],res.shape[4]]);}return res;}var maxPool3dBackprop=Object(operation[\"a\"/* op */])({maxPool3dBackprop_:maxPool3dBackprop_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxPool3DGradConfig={kernelName:kernel_names[\"R\"/* MaxPool3D */],inputsToSave:['x'],outputsToSave:[true],gradFunc:function gradFunc(dy,saved,attrs){var _saved45=_slicedToArray(saved,2),_x8=_saved45[0],y=_saved45[1];var filterSize=attrs.filterSize,strides=attrs.strides,dilations=attrs.dilations,pad=attrs.pad,dimRoundingMode=attrs.dimRoundingMode;var $dilations=dilations==null?[1,1,1]:dilations;return{x:function x(){return maxPool3dBackprop(dy,_x8,y,filterSize,strides,$dilations,pad,dimRoundingMode);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the backprop of a 2D max pool.\r\n *\r\n * @param dy The dy error, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param input The original input image, of rank 4, of shape\r\n *     [batchSize, height, width, channels].\r\n * @param output The original output image, of rank 4, of shape\r\n *     [batchSize, outHeight, outWidth, channels].\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */function maxPoolBackprop_(dy,input,output,filterSize,strides,pad,dimRoundingMode){var $dy=Object(tensor_util_env[\"a\"/* convertToTensor */])(dy,'dy','maxPoolBackprop');var $input=Object(tensor_util_env[\"a\"/* convertToTensor */])(input,'input','maxPoolBackprop');var $output=Object(tensor_util_env[\"a\"/* convertToTensor */])(output,'output','maxPoolBackprop');util[\"assert\"]($input.rank===$dy.rank,function(){return\"Rank of input (\".concat($input.rank,\") does not match rank of dy \")+\"(\".concat($dy.rank,\")\");});util[\"assert\"]($dy.rank===4,function(){return\"Error in maxPoolBackprop: dy must be rank 4 but got rank \"+\"\".concat($dy.rank,\".\");});util[\"assert\"]($input.rank===4,function(){return\"Error in maxPoolBackprop: input must be rank 4 but got rank \"+\"\".concat($input.rank,\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in maxPoolBackprop: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend){var convInfo=computePool2DInfo($input.shape,filterSize,strides,1/* dilations */,pad,dimRoundingMode);return backend.maxPoolBackprop($dy,$input,$output,convInfo);};var inputs={dy:$dy,input:$input,output:$output};var attrs={filterSize:filterSize,strides:strides,pad:pad,dimRoundingMode:dimRoundingMode};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"T\"/* MaxPoolBackprop */],attrs);}var maxPoolBackprop=Object(operation[\"a\"/* op */])({maxPoolBackprop_:maxPoolBackprop_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxPoolGradConfig={kernelName:kernel_names[\"Q\"/* MaxPool */],inputsToSave:['x'],outputsToSave:[true],gradFunc:function gradFunc(dy,saved,attrs){var _saved46=_slicedToArray(saved,2),_x9=_saved46[0],y=_saved46[1];var filterSize=attrs.filterSize,strides=attrs.strides,pad=attrs.pad;return{x:function x(){return maxPoolBackprop(dy,_x9,y,filterSize,strides,pad);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.greater(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function greater_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','greater');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','greater');var _Object17=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object18=_slicedToArray(_Object17,2);$a=_Object18[0];$b=_Object18[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend){return backend.greater($a,$b);};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"H\"/* Greater */]);}var greater=Object(operation[\"a\"/* op */])({greater_:greater_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.lessEqual(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function lessEqual_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','lessEqual');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','lessEqual');var _Object19=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object20=_slicedToArray(_Object19,2);$a=_Object20[0];$b=_Object20[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend,save){var res=backend.lessEqual($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"O\"/* LessEqual */]);}var lessEqual=Object(operation[\"a\"/* op */])({lessEqual_:lessEqual_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var minimumGradConfig={kernelName:kernel_names[\"W\"/* Minimum */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved47=_slicedToArray(saved,2),a=_saved47[0],b=_saved47[1];var derA=function derA(){return mul(dy,cast(lessEqual(a,b),'float32'));};var derB=function derB(){return mul(dy,cast(greater(a,b),'float32'));};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var modGradConfig={kernelName:kernel_names[\"X\"/* Mod */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved48=_slicedToArray(saved,2),a=_saved48[0],b=_saved48[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){return reshape(sum(dy,reduceAxes),a.shape);}return dy;};var derB=function derB(){var res=mul(dy,neg(floor(div(a,b))));var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){return reshape(sum(res,reduceAxes),b.shape);}return res;};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var multiplyGradConfig={kernelName:kernel_names[\"Y\"/* Multiply */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved49=_slicedToArray(saved,2),a=_saved49[0],b=_saved49[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var res=mul(dy,cast(b,'float32'));var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){return reshape(sum(res,reduceAxes),a.shape);}return res;};var derB=function derB(){var res=mul(dy,cast(a,'float32'));var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){return reshape(sum(res,reduceAxes),b.shape);}return res;};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var oneHotGradConfig={kernelName:kernel_names[\"cb\"/* OneHot */],inputsToSave:['indices'],gradFunc:function gradFunc(dy,saved){var _indices=saved[0];return{indices:function indices(){return Object(tensor_ops[\"n\"/* zeros */])(_indices.shape,'float32');}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var padV2GradConfig={kernelName:kernel_names[\"db\"/* PadV2 */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved,attrs){// Pad introduces values around the original tensor, so the gradient\n// slices the original shape out of the gradient.\nvar _x10=saved[0];var paddings=attrs.paddings;var begin=paddings.map(function(p){return p[0];});return{x:function x(){return dy.slice(begin,_x10.shape);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** An implementation of the Where kernel shared between cpu and webgl */function whereImpl(condShape,condVals){var indices=[];for(var i=0;i<condVals.length;i++){if(condVals[i]){indices.push(i);}}var inBuffer=array_ops_buffer(condShape,'int32');var out=array_ops_buffer([indices.length,condShape.length],'int32');for(var _i3=0;_i3<indices.length;_i3++){var loc=inBuffer.indexToLoc(indices[_i3]);var offset=_i3*condShape.length;out.values.set(loc,offset);}return out.toTensor();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of `NOT x` element-wise.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, true], 'bool');\r\n *\r\n * a.logicalNot().print();\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype 'bool'.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function logicalNot_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','logicalNot','bool');return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.logicalNot($x);},{$x:$x});}/**\r\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalAnd(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function logicalAnd_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','logicalAnd','bool');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','logicalAnd','bool');assertAndGetBroadcastShape($a.shape,$b.shape);return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.logicalAnd($a,$b);},{a:$a,b:$b},null/* grad */,'LogicalAnd');}/**\r\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalOr(b).print();\r\n * ```\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function logicalOr_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','logicalOr','bool');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','logicalOr','bool');assertAndGetBroadcastShape($a.shape,$b.shape);return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.logicalOr($a,$b);},{$a:$a,$b:$b});}/**\r\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalXor(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function logicalXor_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','logicalXor','bool');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','logicalXor','bool');assertAndGetBroadcastShape($a.shape,$b.shape);// x ^ y = (x | y) & ~(x & y)\nreturn logicalOr(a,b).logicalAnd(logicalAnd(a,b).logicalNot());}/**\r\n * Returns the elements, either `a` or `b` depending on the `condition`.\r\n *\r\n * If the condition is true, select from `a`, otherwise select from `b`.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const a = tf.tensor1d([1 , 2, 3]);\r\n * const b = tf.tensor1d([-1, -2, -3]);\r\n *\r\n * a.where(cond, b).print();\r\n * ```\r\n *\r\n * @param condition The input condition. Must be of dtype bool.\r\n * @param a If `condition` is rank 1, `a` may have a higher rank but\r\n *     its first dimension must match the size of `condition`.\r\n * @param b A tensor with the same shape and type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function where_(condition,a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','where');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','where');var $condition=Object(tensor_util_env[\"a\"/* convertToTensor */])(condition,'condition','where','bool');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in where: ');if($condition.rank===1){// If condition rank is 1, then the first dimension must match the size of\n// condition.\nObject(util[\"assert\"])($condition.shape[0]===$a.shape[0],function(){return'The first dimension of `a` must match the size of `condition`.';});}else{// A must have the same shape as condition.\nObject(util[\"assertShapesMatch\"])($condition.shape,$b.shape,'Error in where: ');}// TODO(julianoks): Return null for condition gradient\n// when backprop supports it.\nvar grad=function grad(dy,saved){var _saved50=_slicedToArray(saved,1),$condition=_saved50[0];return{condition:function condition(){return Object(tensor_ops[\"o\"/* zerosLike */])($condition).toFloat();},t:function t(){return dy.mul($condition.cast(dy.dtype));},e:function e(){return dy.mul($condition.logicalNot().cast(dy.dtype));}};};var inputs={condition:$condition,t:$a,e:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.select($condition,$a,$b);save([$condition]);return res;},inputs,grad,kernel_names[\"kb\"/* SelectV2 */]);}/**\r\n * Returns the coordinates of true elements of condition.\r\n *\r\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\r\n * represents the number of true elements, and the second dimension (columns)\r\n * represents the coordinates of the true elements. Keep in mind, the shape of\r\n * the output tensor can vary depending on how many true values there are in\r\n * input. Indices are output in row-major order. The resulting tensor has the\r\n * shape `[numTrueElems, condition.rank]`.\r\n *\r\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const result = await tf.whereAsync(cond);\r\n * result.print();\r\n * ```\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function whereAsync_(_x11){return _whereAsync_.apply(this,arguments);}function _whereAsync_(){_whereAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee36(condition){var $condition,vals,res;return regeneratorRuntime.wrap(function _callee36$(_context36){while(1){switch(_context36.prev=_context36.next){case 0:$condition=Object(tensor_util_env[\"a\"/* convertToTensor */])(condition,'condition','whereAsync','bool');_context36.next=3;return $condition.data();case 3:vals=_context36.sent;res=whereImpl($condition.shape,vals);if(condition!==$condition){$condition.dispose();}return _context36.abrupt(\"return\",res);case 7:case\"end\":return _context36.stop();}}},_callee36);}));return _whereAsync_.apply(this,arguments);}var logicalAnd=Object(operation[\"a\"/* op */])({logicalAnd_:logicalAnd_});var logicalNot=Object(operation[\"a\"/* op */])({logicalNot_:logicalNot_});var logicalOr=Object(operation[\"a\"/* op */])({logicalOr_:logicalOr_});var logicalXor=Object(operation[\"a\"/* op */])({logicalXor_:logicalXor_});var where=Object(operation[\"a\"/* op */])({where_:where_});var whereAsync=whereAsync_;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\r\n *\r\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\r\n * corresponding elements in x and y. The result's dtype will be the upcasted\r\n * type of the `base` and `exp` dtypes.\r\n *\r\n * ```js\r\n * const a = tf.tensor([[2, 3], [4, 5]])\r\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\r\n *\r\n * a.pow(b).print();  // or tf.pow(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor([[1, 2], [3, 4]])\r\n * const b = tf.tensor(2).toInt();\r\n *\r\n * a.pow(b).print();  // or tf.pow(a, b)\r\n * ```\r\n * We also expose `powStrict` which has the same signature as this op and\r\n * asserts that `base` and `exp` are the same shape (does not broadcast).\r\n *\r\n * @param base The base `tf.Tensor` to pow element-wise.\r\n * @param exp The exponent `tf.Tensor` to pow element-wise.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function pow_(base,exp){var $base=Object(tensor_util_env[\"a\"/* convertToTensor */])(base,'base','pow');var $exp=Object(tensor_util_env[\"a\"/* convertToTensor */])(exp,'exp','pow');var _Object21=Object(tensor_util[\"makeTypesMatch\"])($base,$exp);var _Object22=_slicedToArray(_Object21,2);$base=_Object22[0];$exp=_Object22[1];var inputs={a:$base,b:$exp};var forward=function forward(backend,save){var y=backend.pow($base,$exp);save([$base,$exp,y]);return y;};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"fb\"/* Pow */]);}var pow=Object(operation[\"a\"/* op */])({pow_:pow_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var powGradConfig={kernelName:kernel_names[\"fb\"/* Pow */],inputsToSave:['a','b'],outputsToSave:[true],gradFunc:function gradFunc(dy,saved){var _saved51=_slicedToArray(saved,3),a=_saved51[0],b=_saved51[1],y=_saved51[2];var base=a;var exp=b;var outShape=assertAndGetBroadcastShape(base.shape,exp.shape);var derBase=function derBase(){var expFloat=cast(exp,'float32');var res=mul(dy,mul(expFloat,pow(base,sub(expFloat,Object(tensor_ops[\"e\"/* scalar */])(1)))));var reduceAxes=getReductionAxes(base.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,base.shape);};var derExp=function derExp(){var condition=greater(base,0);var logBase=where(condition,log(base),Object(tensor_ops[\"o\"/* zerosLike */])(base));var res=mul(dy,mul(y,logBase));var reduceAxes=getReductionAxes(exp.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,exp.shape);};return{a:derBase,b:derExp};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var preluGradConfig={kernelName:kernel_names[\"gb\"/* Prelu */],inputsToSave:['x','alpha'],gradFunc:function gradFunc(dy,saved){var _saved52=_slicedToArray(saved,2),x=_saved52[0],_alpha=_saved52[1];var mask=greater(x,0);return{x:function x(){return where(mask,dy,mul(dy,_alpha));},alpha:function alpha(){var res=where(mask,Object(tensor_ops[\"o\"/* zerosLike */])(dy),mul(dy,x));var reduceAxes=getReductionAxes(_alpha.shape,dy.shape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,_alpha.shape);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var relu6GradConfig={kernelName:kernel_names[\"jb\"/* Relu6 */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved){var _saved53=_slicedToArray(saved,1),x=_saved53[0];var mask=mul(lessEqual(x,6),unary_ops_step(x));return{x:function x(){return mul(dy,cast(mask,'float32'));}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var reluGradConfig={kernelName:kernel_names[\"ib\"/* Relu */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved){var _saved54=_slicedToArray(saved,1),_x12=_saved54[0];return{x:function x(){return mul(dy,cast(unary_ops_step(_x12),'float32'));}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var SELU_SCALEALPHA=1.7580993408473768599402175208123;var SELU_SCALE=1.0507009873554804934193349852946;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var seluGradConfig={kernelName:kernel_names[\"lb\"/* Selu */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved){var _saved55=_slicedToArray(saved,1),_x13=_saved55[0];return{x:function x(){var mask=greater(_x13,Object(tensor_ops[\"e\"/* scalar */])(0));var scaleAlpha=Object(tensor_ops[\"e\"/* scalar */])(SELU_SCALEALPHA);var scale=Object(tensor_ops[\"e\"/* scalar */])(SELU_SCALE);var greaterThanZeroDer=mul(dy,scale);var lessEqualZeroDer=mul(mul(dy,scaleAlpha),unary_ops_exp(cast(_x13,'float32')));return where(mask,greaterThanZeroDer,lessEqualZeroDer);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\r\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\r\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\r\n * the same rank as the input. The spatial dimensions of this intermediate\r\n * result are then optionally cropped according to `crops` to produce the\r\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\r\n * description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\r\n * const blockShape = [2, 2];\r\n * const crops = [[0, 0], [0, 0]];\r\n *\r\n * x.batchToSpaceND(blockShape, crops).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\r\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\r\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\r\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\r\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\r\n * x.shape[N-1]]`\r\n *\r\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\r\n * according to `crops` to produce the output of shape: `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\r\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\r\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function batchToSpaceND_(x,blockShape,crops){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','batchToSpaceND');var prod=blockShape.reduce(function(a,b){return a*b;});util[\"assert\"]($x.rank>=1+blockShape.length,function(){return\"input rank is \".concat($x.rank,\" but should be > than blockShape.length \").concat(blockShape.length);});util[\"assert\"](crops.length===blockShape.length,function(){return\"crops.length is \".concat(crops.length,\" but should be equal to blockShape.length  \").concat(blockShape.length);});util[\"assert\"]($x.shape[0]%prod===0,function(){return\"input tensor batch is \".concat($x.shape[0],\" but is not divisible by the product of \")+\"the elements of blockShape \".concat(blockShape.join(' * '),\" === \").concat(prod);});var forward=function forward(backend){return backend.batchToSpaceND($x,blockShape,crops);};var inputs={x:$x};var attrs={blockShape:blockShape,crops:crops};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"i\"/* BatchToSpaceND */],attrs);}var batchToSpaceND=Object(operation[\"a\"/* op */])({batchToSpaceND_:batchToSpaceND_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var spaceToBatchNDGradConfig={kernelName:kernel_names[\"mb\"/* SpaceToBatchND */],gradFunc:function gradFunc(dy,saved,attrs){var blockShape=attrs.blockShape,paddings=attrs.paddings;return{x:function x(){return batchToSpaceND(dy,blockShape,paddings);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var splitVGradConfig={kernelName:kernel_names[\"nb\"/* SplitV */],gradFunc:function gradFunc(dy,saved,attrs){var axis=attrs.axis;return{x:function x(){return concat(dy,axis);}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squareGradConfig={kernelName:kernel_names[\"ob\"/* Square */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved){var _saved56=_slicedToArray(saved,1),_x14=_saved56[0];return{x:function x(){return mul(dy,mul(_x14.toFloat(),2));}};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squaredDifferenceGradConfig={kernelName:kernel_names[\"pb\"/* SquaredDifference */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved57=_slicedToArray(saved,2),a=_saved57[0],b=_saved57[1];var two=Object(tensor_ops[\"e\"/* scalar */])(2);var derA=function derA(){return mul(dy,mul(two,sub(a,b)));};var derB=function derB(){return mul(dy,mul(two,sub(b,a)));};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var subGradConfig={kernelName:kernel_names[\"qb\"/* Sub */],inputsToSave:['a','b'],gradFunc:function gradFunc(dy,saved){var _saved58=_slicedToArray(saved,2),a=_saved58[0],b=_saved58[1];var outShape=assertAndGetBroadcastShape(a.shape,b.shape);var derA=function derA(){var res=dy;var reduceAxes=getReductionAxes(a.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(res,a.shape);};var derB=function derB(){var res=dy;var reduceAxes=getReductionAxes(b.shape,outShape);if(reduceAxes.length>0){res=sum(res,reduceAxes);}return reshape(neg(res),b.shape);};return{a:derA,b:derB};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Pads a `tf.Tensor` with a given value and paddings.\r\n *\r\n * This operation currently only implements the `CONSTANT` mode.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `paddings` is of given length.\r\n *   - `tf.pad1d`\r\n *   - `tf.pad2d`\r\n *   - `tf.pad3d`\r\n *   - `tf.pad4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.pad([[1, 2]]).print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * @param constantValue The pad value to use. Defaults to 0.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function pad_(x,paddings){var constantValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','pad');if($x.rank===0){throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');}var forward=function forward(backend,save){save([$x]);return backend.pad($x,paddings,constantValue);};var attrs={paddings:paddings,constantValue:constantValue};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"db\"/* PadV2 */],attrs);}var pad_pad=Object(operation[\"a\"/* op */])({pad_:pad_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function assertParamsValid(input,begin,size){util[\"assert\"](input.rank===begin.length,function(){return\"Error in slice\".concat(input.rank,\"D: Length of begin \").concat(begin,\" must \")+\"match the rank of the array (\".concat(input.rank,\").\");});util[\"assert\"](input.rank===size.length,function(){return\"Error in slice\".concat(input.rank,\"D: Length of size \").concat(size,\" must \")+\"match the rank of the array (\".concat(input.rank,\").\");});var _loop=function _loop(i){util[\"assert\"](begin[i]+size[i]<=input.shape[i],function(){return\"Error in slice\".concat(input.rank,\"D: begin[\").concat(i,\"] + size[\").concat(i,\"] \")+\"(\".concat(begin[i]+size[i],\") would overflow input.shape[\").concat(i,\"] (\").concat(input.shape[i],\")\");});};for(var i=0;i<input.rank;++i){_loop(i);}}/** Converts a binary mask to an array of axes. Used in stridedSlice(). */function maskToAxes(mask){var axes=[];var axis=0;while(mask>0){if(mask&1){axes.push(axis);}mask/=2;axis++;}return axes;}/** Computes the output shape given the strided slice params. */function slice_util_computeOutShape(begin,end,strides){var size=[];for(var axis=0;axis<begin.length;axis++){size[axis]=Math.ceil((end[axis]-begin[axis])/strides[axis]);}return size;}// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nfunction stridesWithElidedDims(strides,ellipsisInsertionIndex,numElidedAxes){var newStrides=_toConsumableArray2(strides);for(var i=0;i<numElidedAxes;i++){if(i===0){newStrides[ellipsisInsertionIndex]=1;}else{newStrides.splice(ellipsisInsertionIndex,0/* num elements to delete */,1/* element to add */);newStrides.pop();}}return newStrides;}// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nfunction startIndicesWithElidedDims(startIndices,ellipsisInsertionIndex,numElidedAxes){var newIndices=_toConsumableArray2(startIndices);for(var i=0;i<numElidedAxes;i++){if(i===0){newIndices[ellipsisInsertionIndex]=0;}else{newIndices.splice(ellipsisInsertionIndex,0/* num elements to delete */,0/* element to add */);newIndices.pop();}}return newIndices;}// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nfunction stopIndicesWithElidedDims(stopIndices,ellipsisInsertionIndex,numElidedAxes,inputShape){var newIndices=_toConsumableArray2(stopIndices);for(var i=0;i<numElidedAxes;i++){if(i===0){newIndices[ellipsisInsertionIndex]=Number.MAX_SAFE_INTEGER;}else{newIndices.splice(ellipsisInsertionIndex,0/* num elements to delete */,Number.MAX_SAFE_INTEGER/* element to add */);newIndices.pop();}}for(var _i4=0;_i4<newIndices.length;_i4++){newIndices[_i4]=util[\"clamp\"](0,newIndices[_i4],inputShape[_i4]);}return newIndices;}function stridesForAxis(strides,axis,ellipsisMask){var stride=strides[axis];if(ellipsisMask&1<<axis||stride==null){stride=1;}return stride;}function startForAxis(beginMask,startIndices,strides,inputShape,axis,ellipsisMask){// Begin with the specified index\nvar start=startIndices[axis];var stride=strides[axis]||1;// Check the axis bit from right of masked axes, or the begin index is not set\n// for the axis.\nif(beginMask&1<<axis||ellipsisMask&1<<axis||start==null){if(stride>0){// Forward iteration - use the first element. These values will get\n// clamped below (Note: We could have set them to 0 and axis_size-1, but\n// use lowest() and max() to maintain symmetry with StopForAxis())\nstart=Number.MIN_SAFE_INTEGER;}else{// Backward iteration - use the last element.\nstart=Number.MAX_SAFE_INTEGER;}}// Handle negative indices\nvar axisSize=inputShape[axis];if(start<0){start+=axisSize;}// Clamping\nstart=util[\"clamp\"](0,start,axisSize-1);return start;}function stopForAxis(endMask,stopIndices,strides,inputShape,axis,ellipsisMask){// Begin with the specified index\nvar stop=stopIndices[axis];var stride=strides[axis]||1;// Check the axis bit from right of masked axes, or if the stop index is not\n// set for this axis.\nif(endMask&1<<axis||ellipsisMask&1<<axis||stop==null){if(stride>0){// Forward iteration - use the last element. These values will get\n// clamped below\nstop=Number.MAX_SAFE_INTEGER;}else{// Backward iteration - use the first element.\nstop=Number.MIN_SAFE_INTEGER;}}// Handle negative indices\nvar axisSize=inputShape[axis];if(stop<0){stop+=axisSize;}// Clamping\n// Because the end index points one past the last element, we need slightly\n// different clamping ranges depending on the direction.\nif(stride>0){// Forward iteration\nstop=util[\"clamp\"](0,stop,axisSize);}else{// Backward iteration\nstop=util[\"clamp\"](-1,stop,axisSize-1);}return stop;}/**\r\n * Returns true if the slice occupies a continous set of elements in the\r\n * 'flat' space.\r\n */function isSliceContinous(shape,begin,size){// Index of the first axis that has size > 1.\nvar firstNonOneAxis=size.length;for(var i=0;i<size.length;i++){if(size[i]>1){firstNonOneAxis=i;break;}}for(var _i5=firstNonOneAxis+1;_i5<size.length;_i5++){if(begin[_i5]>0||size[_i5]!==shape[_i5]){return false;}}return true;}function computeFlatOffset(begin,strides){var flatOffset=begin.length>0?begin[begin.length-1]:1;for(var i=0;i<begin.length-1;i++){flatOffset+=begin[i]*strides[i];}return flatOffset;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\r\n * of length `size`. See `slice` for details.\r\n */function slice1d_(x,begin,size){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','slice1d');util[\"assert\"]($x.rank===1,function(){return\"slice1d expects a rank-1 tensor, but got a rank-\".concat($x.rank,\" tensor\");});return slice($x,[begin],[size]);}/**\r\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\r\n * is of size `size`. See `slice` for details.\r\n */function slice2d_(x,begin,size){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','slice2d');util[\"assert\"]($x.rank===2,function(){return\"slice2d expects a rank-2 tensor, but got a rank-\".concat($x.rank,\" tensor\");});return slice($x,begin,size);}/**\r\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\r\n * is of size `size`. See `slice` for details.\r\n */function slice3d_(x,begin,size){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','slice3d');util[\"assert\"]($x.rank===3,function(){return\"slice3d expects a rank-3 tensor, but got a rank-\".concat($x.rank,\" tensor\");});return slice($x,begin,size);}/**\r\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\r\n * is of size `size`. See `slice` for details.\r\n */function slice4d_(x,begin,size){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','slice4d');util[\"assert\"]($x.rank===4,function(){return\"slice4d expects a rank-4 tensor, but got a rank-\".concat($x.rank,\" tensor\");});return slice($x,begin,size);}/**\r\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\r\n * and is of size `size`.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `x` is of the given rank:\r\n *   - `tf.slice1d`\r\n *   - `tf.slice2d`\r\n *   - `tf.slice3d`\r\n *   - `tf.slice4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.slice([1], [2]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * x.slice([1, 0], [1, 2]).print();\r\n * ```\r\n * @param x The input `tf.Tensor` to slice from.\r\n * @param begin The coordinates to start the slice from. The length can be\r\n *     less than the rank of x - the rest of the axes will have implicit 0 as\r\n *     start. Can also be a single number, in which case it specifies the\r\n *     first axis.\r\n * @param size The size of the slice. The length can be less than the rank of\r\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\r\n *     the rest of the dimensions in the axis. Can also be a single number,\r\n *     in which case it specifies the size of the first axis.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function slice_(x,begin,size){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','slice');if($x.rank===0){throw new Error('Slicing scalar is not possible');}// The following logic allows for more ergonomic calls.\nvar begin_;if(typeof begin==='number'){begin_=[begin].concat(_toConsumableArray2(new Array($x.rank-1).fill(0)));}else if(begin.length<$x.rank){begin_=begin.concat(new Array($x.rank-begin.length).fill(0));}else{begin_=begin.slice();}begin_.forEach(function(d){util[\"assert\"](d!==-1,function(){return'slice() does not support negative begin indexing.';});});var size_;if(size==null){size_=new Array($x.rank).fill(-1);}else if(typeof size==='number'){size_=[size].concat(_toConsumableArray2(new Array($x.rank-1).fill(-1)));}else if(size.length<$x.rank){size_=size.concat(new Array($x.rank-size.length).fill(-1));}else{size_=size;}size_=size_.map(function(d,i){if(d>=0){return d;}else{util[\"assert\"](d===-1,function(){return\"Negative size values should be exactly -1 but got \"+\"\".concat(d,\" for the slice() size at index \").concat(i,\".\");});return $x.shape[i]-begin_[i];}});assertParamsValid($x,begin_,size_);var inputShape=$x.shape;var grad=function grad(dy){// Create an Nx2 padding where the first column represents how many\n// zeros are prepended (at start) for each dimension, and the second\n// column indicates how many zeros are appended (at end).\n// The number of zeros to append is the shape of the input\n// elementwise-subtracted by both the begin vector and sizes vector.\nvar paddings=[];for(var i=0;i<dy.rank;i++){paddings.push([begin_[i],inputShape[i]-begin_[i]-size_[i]]);}return{x:function x(){return pad_pad(dy,paddings);}};};var attrs={begin:begin_,size:size_};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.slice($x,begin_,size_);},{x:$x},grad,'Slice',attrs);}var slice=Object(operation[\"a\"/* op */])({slice_:slice_});var slice1d=Object(operation[\"a\"/* op */])({slice1d_:slice1d_});var slice2d=Object(operation[\"a\"/* op */])({slice2d_:slice2d_});var slice3d=Object(operation[\"a\"/* op */])({slice3d_:slice3d_});var slice4d=Object(operation[\"a\"/* op */])({slice4d_:slice4d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var tileGradConfig={kernelName:kernel_names[\"rb\"/* Tile */],inputsToSave:['x'],gradFunc:function gradFunc(dy,saved,attrs){var _saved59=_slicedToArray(saved,1),x=_saved59[0];var reps=attrs.reps;var derX=function derX(){var xGrad=Object(tensor_ops[\"o\"/* zerosLike */])(x);// TODO(cais): Maybe reduce memory footprint by avoiding repeated\n// slicing.\nif(x.rank===1){for(var i=0;i<reps[0];++i){xGrad=add(xGrad,slice(dy,[i*x.shape[0]],[x.shape[0]]));}}else if(x.rank===2){for(var _i6=0;_i6<reps[0];++_i6){for(var j=0;j<reps[1];++j){xGrad=add(xGrad,slice(dy,[_i6*x.shape[0],j*x.shape[1]],[x.shape[0],x.shape[1]]));}}}else if(x.rank===3){for(var _i7=0;_i7<reps[0];++_i7){for(var _j3=0;_j3<reps[1];++_j3){for(var k=0;k<reps[2];++k){xGrad=add(xGrad,slice(dy,[_i7*x.shape[0],_j3*x.shape[1],k*x.shape[2]],[x.shape[0],x.shape[1],x.shape[2]]));}}}}else if(x.rank===4){for(var _i8=0;_i8<reps[0];++_i8){for(var _j4=0;_j4<reps[1];++_j4){for(var _k3=0;_k3<reps[2];++_k3){for(var l=0;l<reps[3];++l){xGrad=add(xGrad,slice(dy,[_i8*x.shape[0],_j4*x.shape[1],_k3*x.shape[2],l*x.shape[3]],[x.shape[0],x.shape[1],x.shape[2],x.shape[3]]));}}}}}else{throw new Error(\"Gradient for tile operation is not implemented for rank-\"+\"\".concat(x.rank,\" tensors yet.\"));}return xGrad;};return{x:derX};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transposeGradConfig={kernelName:kernel_names[\"sb\"/* Transpose */],gradFunc:function gradFunc(dy,saved,attrs){var transposeAttrs=attrs;var perm=transposeAttrs.perm;var undoPerm=getUndoAxesPermutation(perm);return{x:function x(){return transpose(dy,undoPerm);}};}};// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js\nvar kernel_registry=__webpack_require__(17);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Export all kernel configs here so that the package can auto register them\nvar gradConfigs=[addGradConfig,addNGradConfig,atan2GradConfig,avgPoolGradConfig,avgPool3DGradConfig,batchMatMulGradConfig,batchToSpaceNDGradConfig,broadcastToGradConfig,concatGradConfig,conv2DGradConfig,conv2DBackpropInputGradConfig,conv3DGradConfig,cumsumGradConfig,depthwiseConv2dNativeGradConfig,divGradConfig,eluGradConfig,floorDivGradConfig,fusedBatchNormGradConfig,greaterEqualGradConfig,identityGradConfig,lrnGradConfig,oneHotGradConfig,padV2GradConfig,splitVGradConfig,maxGradConfig,spaceToBatchNDGradConfig,maxGradConfig,maximumGradConfig,maxPoolGradConfig,maxPool3DGradConfig,minimumGradConfig,modGradConfig,multiplyGradConfig,oneHotGradConfig,padV2GradConfig,powGradConfig,preluGradConfig,reluGradConfig,relu6GradConfig,seluGradConfig,spaceToBatchNDGradConfig,splitVGradConfig,squareGradConfig,squaredDifferenceGradConfig,tileGradConfig,transposeGradConfig,subGradConfig];for(var _i9=0,_gradConfigs=gradConfigs;_i9<_gradConfigs.length;_i9++){var gradientConfig=_gradConfigs[_i9];Object(kernel_registry[\"d\"/* registerGradient */])(gradientConfig);}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/environment.js\nvar environment=__webpack_require__(10);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var PlatformBrowser=/*#__PURE__*/function(){function PlatformBrowser(){_classCallCheck2(this,PlatformBrowser);}_createClass(PlatformBrowser,[{key:\"fetch\",value:function(_fetch){function fetch(_x15,_x16){return _fetch.apply(this,arguments);}fetch.toString=function(){return _fetch.toString();};return fetch;}(function(path,init){return fetch(path,init);})},{key:\"now\",value:function now(){return performance.now();}},{key:\"encode\",value:function encode(text,encoding){if(encoding!=='utf-8'&&encoding!=='utf8'){throw new Error(\"Browser's encoder only supports utf-8, but got \".concat(encoding));}if(this.textEncoder==null){this.textEncoder=new TextEncoder();}return this.textEncoder.encode(text);}},{key:\"decode\",value:function decode(bytes,encoding){return new TextDecoder(encoding).decode(bytes);}}]);return PlatformBrowser;}();if(Object(environment[\"c\"/* env */])().get('IS_BROWSER')){Object(environment[\"c\"/* env */])().setPlatform('browser',new PlatformBrowser());}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js\nvar platform_node=__webpack_require__(62);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js\nvar io_utils=__webpack_require__(13);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var IORouterRegistry=/*#__PURE__*/function(){function IORouterRegistry(){_classCallCheck2(this,IORouterRegistry);this.saveRouters=[];this.loadRouters=[];}_createClass(IORouterRegistry,null,[{key:\"getInstance\",value:function getInstance(){if(IORouterRegistry.instance==null){IORouterRegistry.instance=new IORouterRegistry();}return IORouterRegistry.instance;}/**\r\n     * Register a save-handler router.\r\n     *\r\n     * @param saveRouter A function that maps a URL-like string onto an instance\r\n     * of `IOHandler` with the `save` method defined or `null`.\r\n     */},{key:\"registerSaveRouter\",value:function registerSaveRouter(saveRouter){IORouterRegistry.getInstance().saveRouters.push(saveRouter);}/**\r\n     * Register a load-handler router.\r\n     *\r\n     * @param loadRouter A function that maps a URL-like string onto an instance\r\n     * of `IOHandler` with the `load` method defined or `null`.\r\n     */},{key:\"registerLoadRouter\",value:function registerLoadRouter(loadRouter){IORouterRegistry.getInstance().loadRouters.push(loadRouter);}/**\r\n     * Look up IOHandler for saving, given a URL-like string.\r\n     *\r\n     * @param url\r\n     * @returns If only one match is found, an instance of IOHandler with the\r\n     * `save` method defined. If no match is found, `null`.\r\n     * @throws Error, if more than one match is found.\r\n     */},{key:\"getSaveHandlers\",value:function getSaveHandlers(url){return IORouterRegistry.getHandlers(url,'save');}/**\r\n     * Look up IOHandler for loading, given a URL-like string.\r\n     *\r\n     * @param url\r\n     * @param loadOptions Optional, custom load options.\r\n     * @returns All valid handlers for `url`, given the currently registered\r\n     *   handler routers.\r\n     */},{key:\"getLoadHandlers\",value:function getLoadHandlers(url,loadOptions){return IORouterRegistry.getHandlers(url,'load',loadOptions);}},{key:\"getHandlers\",value:function getHandlers(url,handlerType,loadOptions){var validHandlers=[];var routers=handlerType==='load'?IORouterRegistry.getInstance().loadRouters:IORouterRegistry.getInstance().saveRouters;routers.forEach(function(router){var handler=router(url,loadOptions);if(handler!==null){validHandlers.push(handler);}});return validHandlers;}}]);return IORouterRegistry;}();var registerSaveRouter=function registerSaveRouter(loudRouter){return IORouterRegistry.registerSaveRouter(loudRouter);};var registerLoadRouter=function registerLoadRouter(loudRouter){return IORouterRegistry.registerLoadRouter(loudRouter);};var getSaveHandlers=function getSaveHandlers(url){return IORouterRegistry.getSaveHandlers(url);};var getLoadHandlers=function getLoadHandlers(url,loadOptions){return IORouterRegistry.getLoadHandlers(url,loadOptions);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Classes and functions for model management across multiple storage mediums.\r\n *\r\n * Supported client actions:\r\n * - Listing models on all registered storage mediums.\r\n * - Remove model by URL from any registered storage mediums, by using URL\r\n *   string.\r\n * - Moving or copying model from one path to another in the same medium or from\r\n *   one medium to another, by using URL strings.\r\n */var URL_SCHEME_SUFFIX='://';var model_management_ModelStoreManagerRegistry=/*#__PURE__*/function(){function model_management_ModelStoreManagerRegistry(){_classCallCheck2(this,model_management_ModelStoreManagerRegistry);this.managers={};}_createClass(model_management_ModelStoreManagerRegistry,null,[{key:\"getInstance\",value:function getInstance(){if(model_management_ModelStoreManagerRegistry.instance==null){model_management_ModelStoreManagerRegistry.instance=new model_management_ModelStoreManagerRegistry();}return model_management_ModelStoreManagerRegistry.instance;}/**\r\n     * Register a save-handler router.\r\n     *\r\n     * @param saveRouter A function that maps a URL-like string onto an instance\r\n     * of `IOHandler` with the `save` method defined or `null`.\r\n     */},{key:\"registerManager\",value:function registerManager(scheme,manager){Object(util[\"assert\"])(scheme!=null,function(){return'scheme must not be undefined or null.';});if(scheme.endsWith(URL_SCHEME_SUFFIX)){scheme=scheme.slice(0,scheme.indexOf(URL_SCHEME_SUFFIX));}Object(util[\"assert\"])(scheme.length>0,function(){return'scheme must not be an empty string.';});var registry=model_management_ModelStoreManagerRegistry.getInstance();Object(util[\"assert\"])(registry.managers[scheme]==null,function(){return\"A model store manager is already registered for scheme '\".concat(scheme,\"'.\");});registry.managers[scheme]=manager;}},{key:\"getManager\",value:function getManager(scheme){var manager=this.getInstance().managers[scheme];if(manager==null){throw new Error(\"Cannot find model manager for scheme '\".concat(scheme,\"'\"));}return manager;}},{key:\"getSchemes\",value:function getSchemes(){return Object.keys(this.getInstance().managers);}}]);return model_management_ModelStoreManagerRegistry;}();/**\r\n * Helper method for parsing a URL string into a scheme and a path.\r\n *\r\n * @param url E.g., 'localstorage://my-model'\r\n * @returns A dictionary with two fields: scheme and path.\r\n *   Scheme: e.g., 'localstorage' in the example above.\r\n *   Path: e.g., 'my-model' in the example above.\r\n */function parseURL(url){if(url.indexOf(URL_SCHEME_SUFFIX)===-1){throw new Error(\"The url string provided does not contain a scheme. \"+\"Supported schemes are: \"+\"\".concat(model_management_ModelStoreManagerRegistry.getSchemes().join(',')));}return{scheme:url.split(URL_SCHEME_SUFFIX)[0],path:url.split(URL_SCHEME_SUFFIX)[1]};}function cloneModelInternal(_x17,_x18){return _cloneModelInternal.apply(this,arguments);}/**\r\n * List all models stored in registered storage mediums.\r\n *\r\n * For a web browser environment, the registered mediums are Local Storage and\r\n * IndexedDB.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\r\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\r\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\r\n * model's topology, byte sizes of the topology, weights, etc.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function _cloneModelInternal(){_cloneModelInternal=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee37(sourceURL,destURL){var deleteSource,loadHandlers,loadHandler,saveHandlers,saveHandler,sourceScheme,sourcePath,sameMedium,modelArtifacts,saveResult,_args38=arguments;return regeneratorRuntime.wrap(function _callee37$(_context37){while(1){switch(_context37.prev=_context37.next){case 0:deleteSource=_args38.length>2&&_args38[2]!==undefined?_args38[2]:false;Object(util[\"assert\"])(sourceURL!==destURL,function(){return\"Old path and new path are the same: '\".concat(sourceURL,\"'\");});loadHandlers=IORouterRegistry.getLoadHandlers(sourceURL);Object(util[\"assert\"])(loadHandlers.length>0,function(){return\"Copying failed because no load handler is found for source URL \".concat(sourceURL,\".\");});Object(util[\"assert\"])(loadHandlers.length<2,function(){return\"Copying failed because more than one (\".concat(loadHandlers.length,\") \")+\"load handlers for source URL \".concat(sourceURL,\".\");});loadHandler=loadHandlers[0];saveHandlers=IORouterRegistry.getSaveHandlers(destURL);Object(util[\"assert\"])(saveHandlers.length>0,function(){return\"Copying failed because no save handler is found for destination \"+\"URL \".concat(destURL,\".\");});Object(util[\"assert\"])(saveHandlers.length<2,function(){return\"Copying failed because more than one (\".concat(loadHandlers.length,\") \")+\"save handlers for destination URL \".concat(destURL,\".\");});saveHandler=saveHandlers[0];sourceScheme=parseURL(sourceURL).scheme;sourcePath=parseURL(sourceURL).path;sameMedium=sourceScheme===parseURL(sourceURL).scheme;_context37.next=15;return loadHandler.load();case 15:modelArtifacts=_context37.sent;if(!(deleteSource&&sameMedium)){_context37.next=19;break;}_context37.next=19;return model_management_ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);case 19:_context37.next=21;return saveHandler.save(modelArtifacts);case 21:saveResult=_context37.sent;if(!(deleteSource&&!sameMedium)){_context37.next=25;break;}_context37.next=25;return model_management_ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);case 25:return _context37.abrupt(\"return\",saveResult.modelArtifactsInfo);case 26:case\"end\":return _context37.stop();}}},_callee37);}));return _cloneModelInternal.apply(this,arguments);}function listModels(){return _listModels.apply(this,arguments);}/**\r\n * Remove a model specified by URL from a reigstered storage medium.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\r\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\r\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\r\n *   is successful).\r\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function _listModels(){_listModels=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee38(){var schemes,out,_iterator4,_step4,scheme,schemeOut,path,url;return regeneratorRuntime.wrap(function _callee38$(_context38){while(1){switch(_context38.prev=_context38.next){case 0:schemes=model_management_ModelStoreManagerRegistry.getSchemes();out={};_iterator4=_createForOfIteratorHelper(schemes);_context38.prev=3;_iterator4.s();case 5:if((_step4=_iterator4.n()).done){_context38.next=13;break;}scheme=_step4.value;_context38.next=9;return model_management_ModelStoreManagerRegistry.getManager(scheme).listModels();case 9:schemeOut=_context38.sent;for(path in schemeOut){url=scheme+URL_SCHEME_SUFFIX+path;out[url]=schemeOut[path];}case 11:_context38.next=5;break;case 13:_context38.next=18;break;case 15:_context38.prev=15;_context38.t0=_context38[\"catch\"](3);_iterator4.e(_context38.t0);case 18:_context38.prev=18;_iterator4.f();return _context38.finish(18);case 21:return _context38.abrupt(\"return\",out);case 22:case\"end\":return _context38.stop();}}},_callee38,null,[[3,15,18,21]]);}));return _listModels.apply(this,arguments);}function removeModel(_x19){return _removeModel.apply(this,arguments);}/**\r\n * Copy a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Copying within a storage medium, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Copying between two storage mediums, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Copy the model, from Local Storage to IndexedDB.\r\n * await tf.io.copyModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove both models.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of copying.\r\n * @param destURL Destination URL of copying.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function _removeModel(){_removeModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee39(url){var schemeAndPath,manager;return regeneratorRuntime.wrap(function _callee39$(_context39){while(1){switch(_context39.prev=_context39.next){case 0:schemeAndPath=parseURL(url);manager=model_management_ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);return _context39.abrupt(\"return\",manager.removeModel(schemeAndPath.path));case 3:case\"end\":return _context39.stop();}}},_callee39);}));return _removeModel.apply(this,arguments);}function copyModel(_x20,_x21){return _copyModel.apply(this,arguments);}/**\r\n * Move a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Moving within a storage medium, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Moving between two storage mediums, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Move the model, from Local Storage to IndexedDB.\r\n * await tf.io.moveModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove the moved model.\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of moving.\r\n * @param destURL Destination URL of moving.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function _copyModel(){_copyModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee40(sourceURL,destURL){var deleteSource;return regeneratorRuntime.wrap(function _callee40$(_context40){while(1){switch(_context40.prev=_context40.next){case 0:deleteSource=false;return _context40.abrupt(\"return\",cloneModelInternal(sourceURL,destURL,deleteSource));case 2:case\"end\":return _context40.stop();}}},_callee40);}));return _copyModel.apply(this,arguments);}function moveModel(_x22,_x23){return _moveModel.apply(this,arguments);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function _moveModel(){_moveModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee41(sourceURL,destURL){var deleteSource;return regeneratorRuntime.wrap(function _callee41$(_context41){while(1){switch(_context41.prev=_context41.next){case 0:deleteSource=true;return _context41.abrupt(\"return\",cloneModelInternal(sourceURL,destURL,deleteSource));case 2:case\"end\":return _context41.stop();}}},_callee41);}));return _moveModel.apply(this,arguments);}var DATABASE_NAME='tensorflowjs';var DATABASE_VERSION=1;// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nvar MODEL_STORE_NAME='models_store';// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nvar INFO_STORE_NAME='model_info_store';/**\r\n * Delete the entire database for tensorflow.js, including the models store.\r\n */function deleteDatabase(){return _deleteDatabase.apply(this,arguments);}function _deleteDatabase(){_deleteDatabase=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee42(){var idbFactory;return regeneratorRuntime.wrap(function _callee42$(_context42){while(1){switch(_context42.prev=_context42.next){case 0:idbFactory=getIndexedDBFactory();return _context42.abrupt(\"return\",new Promise(function(resolve,reject){var deleteRequest=idbFactory.deleteDatabase(DATABASE_NAME);deleteRequest.onsuccess=function(){return resolve();};deleteRequest.onerror=function(error){return reject(error);};}));case 2:case\"end\":return _context42.stop();}}},_callee42);}));return _deleteDatabase.apply(this,arguments);}function getIndexedDBFactory(){if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){// TODO(cais): Add more info about what IOHandler subtypes are available.\n//   Maybe point to a doc page on the web and/or automatically determine\n//   the available IOHandlers and print them in the error message.\nthrow new Error('Failed to obtain IndexedDB factory because the current environment'+'is not a web browser.');}// tslint:disable-next-line:no-any\nvar theWindow=typeof window==='undefined'?self:window;var factory=theWindow.indexedDB||theWindow.mozIndexedDB||theWindow.webkitIndexedDB||theWindow.msIndexedDB||theWindow.shimIndexedDB;if(factory==null){throw new Error('The current browser does not appear to support IndexedDB.');}return factory;}function setUpDatabase(openRequest){var db=openRequest.result;db.createObjectStore(MODEL_STORE_NAME,{keyPath:'modelPath'});db.createObjectStore(INFO_STORE_NAME,{keyPath:'modelPath'});}/**\r\n * IOHandler subclass: Browser IndexedDB.\r\n *\r\n * See the doc string of `browserIndexedDB` for more details.\r\n */var indexed_db_BrowserIndexedDB=/*#__PURE__*/function(){function indexed_db_BrowserIndexedDB(modelPath){_classCallCheck2(this,indexed_db_BrowserIndexedDB);this.indexedDB=getIndexedDBFactory();if(modelPath==null||!modelPath){throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');}this.modelPath=modelPath;}_createClass(indexed_db_BrowserIndexedDB,[{key:\"save\",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(modelArtifacts){return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(modelArtifacts.modelTopology instanceof ArrayBuffer)){_context.next=2;break;}throw new Error('BrowserLocalStorage.save() does not support saving model topology '+'in binary formats yet.');case 2:return _context.abrupt(\"return\",this.databaseAction(this.modelPath,modelArtifacts));case 3:case\"end\":return _context.stop();}}},_callee,this);}));function save(_x24){return _save.apply(this,arguments);}return save;}()},{key:\"load\",value:function(){var _load=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(){return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",this.databaseAction(this.modelPath));case 1:case\"end\":return _context2.stop();}}},_callee2,this);}));function load(){return _load.apply(this,arguments);}return load;}()/**\r\n     * Perform database action to put model artifacts into or read model artifacts\r\n     * from IndexedDB object store.\r\n     *\r\n     * Whether the action is put or get depends on whether `modelArtifacts` is\r\n     * specified. If it is specified, the action will be put; otherwise the action\r\n     * will be get.\r\n     *\r\n     * @param modelPath A unique string path for the model.\r\n     * @param modelArtifacts If specified, it will be the model artifacts to be\r\n     *   stored in IndexedDB.\r\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\r\n     *   of `ModelArtifacts`, if the action is get.\r\n     */},{key:\"databaseAction\",value:function databaseAction(modelPath,modelArtifacts){var _this=this;return new Promise(function(resolve,reject){var openRequest=_this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);openRequest.onupgradeneeded=function(){return setUpDatabase(openRequest);};openRequest.onsuccess=function(){var db=openRequest.result;if(modelArtifacts==null){// Read model out from object store.\nvar modelTx=db.transaction(MODEL_STORE_NAME,'readonly');var modelStore=modelTx.objectStore(MODEL_STORE_NAME);var getRequest=modelStore.get(_this.modelPath);getRequest.onsuccess=function(){if(getRequest.result==null){db.close();return reject(new Error(\"Cannot find model with path '\".concat(_this.modelPath,\"' \")+\"in IndexedDB.\"));}else{resolve(getRequest.result.modelArtifacts);}};getRequest.onerror=function(error){db.close();return reject(getRequest.error);};modelTx.oncomplete=function(){return db.close();};}else{// Put model into object store.\nvar modelArtifactsInfo=Object(io_utils[\"g\"/* getModelArtifactsInfoForJSON */])(modelArtifacts);// First, put ModelArtifactsInfo into info store.\nvar infoTx=db.transaction(INFO_STORE_NAME,'readwrite');var infoStore=infoTx.objectStore(INFO_STORE_NAME);var putInfoRequest=infoStore.put({modelPath:_this.modelPath,modelArtifactsInfo:modelArtifactsInfo});var _modelTx;putInfoRequest.onsuccess=function(){// Second, put model data into model store.\n_modelTx=db.transaction(MODEL_STORE_NAME,'readwrite');var modelStore=_modelTx.objectStore(MODEL_STORE_NAME);var putModelRequest=modelStore.put({modelPath:_this.modelPath,modelArtifacts:modelArtifacts,modelArtifactsInfo:modelArtifactsInfo});putModelRequest.onsuccess=function(){return resolve({modelArtifactsInfo:modelArtifactsInfo});};putModelRequest.onerror=function(error){// If the put-model request fails, roll back the info entry as\n// well.\ninfoStore=infoTx.objectStore(INFO_STORE_NAME);var deleteInfoRequest=infoStore.delete(_this.modelPath);deleteInfoRequest.onsuccess=function(){db.close();return reject(putModelRequest.error);};deleteInfoRequest.onerror=function(error){db.close();return reject(putModelRequest.error);};};};putInfoRequest.onerror=function(error){db.close();return reject(putInfoRequest.error);};infoTx.oncomplete=function(){if(_modelTx==null){db.close();}else{_modelTx.oncomplete=function(){return db.close();};}};}};openRequest.onerror=function(error){return reject(openRequest.error);};});}}]);return indexed_db_BrowserIndexedDB;}();indexed_db_BrowserIndexedDB.URL_SCHEME='indexeddb://';var indexedDBRouter=function indexedDBRouter(url){if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){return null;}else{if(!Array.isArray(url)&&url.startsWith(indexed_db_BrowserIndexedDB.URL_SCHEME)){return browserIndexedDB(url.slice(indexed_db_BrowserIndexedDB.URL_SCHEME.length));}else{return null;}}};IORouterRegistry.registerSaveRouter(indexedDBRouter);IORouterRegistry.registerLoadRouter(indexedDBRouter);/**\r\n * Creates a browser IndexedDB IOHandler for saving and loading models.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save('indexeddb://MyModel'));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\r\n *   which can be used with, e.g., `tf.Model.save`.\r\n */function browserIndexedDB(modelPath){return new indexed_db_BrowserIndexedDB(modelPath);}function maybeStripScheme(key){return key.startsWith(indexed_db_BrowserIndexedDB.URL_SCHEME)?key.slice(indexed_db_BrowserIndexedDB.URL_SCHEME.length):key;}var BrowserIndexedDBManager=/*#__PURE__*/function(){function BrowserIndexedDBManager(){_classCallCheck2(this,BrowserIndexedDBManager);this.indexedDB=getIndexedDBFactory();}_createClass(BrowserIndexedDBManager,[{key:\"listModels\",value:function(){var _listModels2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(){var _this2=this;return regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",new Promise(function(resolve,reject){var openRequest=_this2.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);openRequest.onupgradeneeded=function(){return setUpDatabase(openRequest);};openRequest.onsuccess=function(){var db=openRequest.result;var tx=db.transaction(INFO_STORE_NAME,'readonly');var store=tx.objectStore(INFO_STORE_NAME);// tslint:disable:max-line-length\n// Need to cast `store` as `any` here because TypeScript's DOM\n// library does not have the `getAll()` method even though the\n// method is supported in the latest version of most mainstream\n// browsers:\n// https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n// tslint:enable:max-line-length\n// tslint:disable-next-line:no-any\nvar getAllInfoRequest=store.getAll();getAllInfoRequest.onsuccess=function(){var out={};var _iterator=_createForOfIteratorHelper(getAllInfoRequest.result),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var item=_step.value;out[item.modelPath]=item.modelArtifactsInfo;}}catch(err){_iterator.e(err);}finally{_iterator.f();}resolve(out);};getAllInfoRequest.onerror=function(error){db.close();return reject(getAllInfoRequest.error);};tx.oncomplete=function(){return db.close();};};openRequest.onerror=function(error){return reject(openRequest.error);};}));case 1:case\"end\":return _context3.stop();}}},_callee3);}));function listModels(){return _listModels2.apply(this,arguments);}return listModels;}()},{key:\"removeModel\",value:function(){var _removeModel2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(path){var _this3=this;return regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:path=maybeStripScheme(path);return _context4.abrupt(\"return\",new Promise(function(resolve,reject){var openRequest=_this3.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);openRequest.onupgradeneeded=function(){return setUpDatabase(openRequest);};openRequest.onsuccess=function(){var db=openRequest.result;var infoTx=db.transaction(INFO_STORE_NAME,'readwrite');var infoStore=infoTx.objectStore(INFO_STORE_NAME);var getInfoRequest=infoStore.get(path);var modelTx;getInfoRequest.onsuccess=function(){if(getInfoRequest.result==null){db.close();return reject(new Error(\"Cannot find model with path '\".concat(path,\"' \")+\"in IndexedDB.\"));}else{// First, delete the entry in the info store.\nvar deleteInfoRequest=infoStore.delete(path);var deleteModelData=function deleteModelData(){// Second, delete the entry in the model store.\nmodelTx=db.transaction(MODEL_STORE_NAME,'readwrite');var modelStore=modelTx.objectStore(MODEL_STORE_NAME);var deleteModelRequest=modelStore.delete(path);deleteModelRequest.onsuccess=function(){return resolve(getInfoRequest.result.modelArtifactsInfo);};deleteModelRequest.onerror=function(error){return reject(getInfoRequest.error);};};// Proceed with deleting model data regardless of whether deletion\n// of info data succeeds or not.\ndeleteInfoRequest.onsuccess=deleteModelData;deleteInfoRequest.onerror=function(error){deleteModelData();db.close();return reject(getInfoRequest.error);};}};getInfoRequest.onerror=function(error){db.close();return reject(getInfoRequest.error);};infoTx.oncomplete=function(){if(modelTx==null){db.close();}else{modelTx.oncomplete=function(){return db.close();};}};};openRequest.onerror=function(error){return reject(openRequest.error);};}));case 2:case\"end\":return _context4.stop();}}},_callee4);}));function removeModel(_x25){return _removeModel2.apply(this,arguments);}return removeModel;}()}]);return BrowserIndexedDBManager;}();if(Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){// Wrap the construction and registration, to guard against browsers that\n// don't support Local Storage.\ntry{model_management_ModelStoreManagerRegistry.registerManager(indexed_db_BrowserIndexedDB.URL_SCHEME,new BrowserIndexedDBManager());}catch(err){}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var PATH_SEPARATOR='/';var PATH_PREFIX='tensorflowjs_models';var INFO_SUFFIX='info';var MODEL_TOPOLOGY_SUFFIX='model_topology';var WEIGHT_SPECS_SUFFIX='weight_specs';var WEIGHT_DATA_SUFFIX='weight_data';var MODEL_METADATA_SUFFIX='model_metadata';/**\r\n * Purge all tensorflow.js-saved model artifacts from local storage.\r\n *\r\n * @returns Paths of the models purged.\r\n */function purgeLocalStorageArtifacts(){if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')||typeof window==='undefined'||typeof window.localStorage==='undefined'){throw new Error('purgeLocalStorageModels() cannot proceed because local storage is '+'unavailable in the current environment.');}var LS=window.localStorage;var purgedModelPaths=[];for(var i=0;i<LS.length;++i){var key=LS.key(i);var prefix=PATH_PREFIX+PATH_SEPARATOR;if(key.startsWith(prefix)&&key.length>prefix.length){LS.removeItem(key);var modelName=getModelPathFromKey(key);if(purgedModelPaths.indexOf(modelName)===-1){purgedModelPaths.push(modelName);}}}return purgedModelPaths;}function getModelKeys(path){return{info:[PATH_PREFIX,path,INFO_SUFFIX].join(PATH_SEPARATOR),topology:[PATH_PREFIX,path,MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),weightSpecs:[PATH_PREFIX,path,WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),weightData:[PATH_PREFIX,path,WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),modelMetadata:[PATH_PREFIX,path,MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)};}/**\r\n * Get model path from a local-storage key.\r\n *\r\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\r\n *\r\n * @param key\r\n */function getModelPathFromKey(key){var items=key.split(PATH_SEPARATOR);if(items.length<3){throw new Error(\"Invalid key format: \".concat(key));}return items.slice(1,items.length-1).join(PATH_SEPARATOR);}function local_storage_maybeStripScheme(key){return key.startsWith(local_storage_BrowserLocalStorage.URL_SCHEME)?key.slice(local_storage_BrowserLocalStorage.URL_SCHEME.length):key;}/**\r\n * IOHandler subclass: Browser Local Storage.\r\n *\r\n * See the doc string to `browserLocalStorage` for more details.\r\n */var local_storage_BrowserLocalStorage=/*#__PURE__*/function(){function local_storage_BrowserLocalStorage(modelPath){_classCallCheck2(this,local_storage_BrowserLocalStorage);if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')||typeof window==='undefined'||typeof window.localStorage==='undefined'){// TODO(cais): Add more info about what IOHandler subtypes are\n// available.\n//   Maybe point to a doc page on the web and/or automatically determine\n//   the available IOHandlers and print them in the error message.\nthrow new Error('The current environment does not support local storage.');}this.LS=window.localStorage;if(modelPath==null||!modelPath){throw new Error('For local storage, modelPath must not be null, undefined or empty.');}this.modelPath=modelPath;this.keys=getModelKeys(this.modelPath);}/**\r\n     * Save model artifacts to browser local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @param modelArtifacts The model artifacts to be stored.\r\n     * @returns An instance of SaveResult.\r\n     */_createClass(local_storage_BrowserLocalStorage,[{key:\"save\",value:function(){var _save2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5(modelArtifacts){var topology,weightSpecs,modelArtifactsInfo;return regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(modelArtifacts.modelTopology instanceof ArrayBuffer)){_context5.next=4;break;}throw new Error('BrowserLocalStorage.save() does not support saving model topology '+'in binary formats yet.');case 4:topology=JSON.stringify(modelArtifacts.modelTopology);weightSpecs=JSON.stringify(modelArtifacts.weightSpecs);modelArtifactsInfo=Object(io_utils[\"g\"/* getModelArtifactsInfoForJSON */])(modelArtifacts);_context5.prev=7;this.LS.setItem(this.keys.info,JSON.stringify(modelArtifactsInfo));this.LS.setItem(this.keys.topology,topology);this.LS.setItem(this.keys.weightSpecs,weightSpecs);this.LS.setItem(this.keys.weightData,Object(io_utils[\"a\"/* arrayBufferToBase64String */])(modelArtifacts.weightData));this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:modelArtifacts.format,generatedBy:modelArtifacts.generatedBy,convertedBy:modelArtifacts.convertedBy,userDefinedMetadata:modelArtifacts.userDefinedMetadata}));return _context5.abrupt(\"return\",{modelArtifactsInfo:modelArtifactsInfo});case 16:_context5.prev=16;_context5.t0=_context5[\"catch\"](7);// If saving failed, clean up all items saved so far.\nthis.LS.removeItem(this.keys.info);this.LS.removeItem(this.keys.topology);this.LS.removeItem(this.keys.weightSpecs);this.LS.removeItem(this.keys.weightData);this.LS.removeItem(this.keys.modelMetadata);throw new Error(\"Failed to save model '\".concat(this.modelPath,\"' to local storage: \")+\"size quota being exceeded is a possible cause of this failure: \"+\"modelTopologyBytes=\".concat(modelArtifactsInfo.modelTopologyBytes,\", \")+\"weightSpecsBytes=\".concat(modelArtifactsInfo.weightSpecsBytes,\", \")+\"weightDataBytes=\".concat(modelArtifactsInfo.weightDataBytes,\".\"));case 24:case\"end\":return _context5.stop();}}},_callee5,this,[[7,16]]);}));function save(_x26){return _save2.apply(this,arguments);}return save;}()/**\r\n     * Load a model from local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model (if loading succeeds).\r\n     */},{key:\"load\",value:function(){var _load2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6(){var info,out,topology,weightSpecs,metadataString,metadata,weightDataBase64;return regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:info=JSON.parse(this.LS.getItem(this.keys.info));if(!(info==null)){_context6.next=3;break;}throw new Error(\"In local storage, there is no model with name '\".concat(this.modelPath,\"'\"));case 3:if(!(info.modelTopologyType!=='JSON')){_context6.next=5;break;}throw new Error('BrowserLocalStorage does not support loading non-JSON model '+'topology yet.');case 5:out={};// Load topology.\ntopology=JSON.parse(this.LS.getItem(this.keys.topology));if(!(topology==null)){_context6.next=9;break;}throw new Error(\"In local storage, the topology of model '\".concat(this.modelPath,\"' \")+\"is missing.\");case 9:out.modelTopology=topology;// Load weight specs.\nweightSpecs=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(!(weightSpecs==null)){_context6.next=13;break;}throw new Error(\"In local storage, the weight specs of model '\".concat(this.modelPath,\"' \")+\"are missing.\");case 13:out.weightSpecs=weightSpecs;// Load meta-data fields.\nmetadataString=this.LS.getItem(this.keys.modelMetadata);if(metadataString!=null){metadata=JSON.parse(metadataString);out.format=metadata['format'];out.generatedBy=metadata['generatedBy'];out.convertedBy=metadata['convertedBy'];out.userDefinedMetadata=metadata['userDefinedMetadata'];}// Load weight data.\nweightDataBase64=this.LS.getItem(this.keys.weightData);if(!(weightDataBase64==null)){_context6.next=19;break;}throw new Error(\"In local storage, the binary weight values of model \"+\"'\".concat(this.modelPath,\"' are missing.\"));case 19:out.weightData=Object(io_utils[\"b\"/* base64StringToArrayBuffer */])(weightDataBase64);return _context6.abrupt(\"return\",out);case 21:case\"end\":return _context6.stop();}}},_callee6,this);}));function load(){return _load2.apply(this,arguments);}return load;}()}]);return local_storage_BrowserLocalStorage;}();local_storage_BrowserLocalStorage.URL_SCHEME='localstorage://';var localStorageRouter=function localStorageRouter(url){if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){return null;}else{if(!Array.isArray(url)&&url.startsWith(local_storage_BrowserLocalStorage.URL_SCHEME)){return browserLocalStorage(url.slice(local_storage_BrowserLocalStorage.URL_SCHEME.length));}else{return null;}}};IORouterRegistry.registerSaveRouter(localStorageRouter);IORouterRegistry.registerLoadRouter(localStorageRouter);/**\r\n * Factory function for local storage IOHandler.\r\n *\r\n * This `IOHandler` supports both `save` and `load`.\r\n *\r\n * For each model's saved artifacts, four items are saved to local storage.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\r\n *     model, such as date saved, type of the topology, size in bytes, etc.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\r\n *     style models, this is a stringized JSON.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\r\n *     model, can be used to decode the saved binary weight values (see\r\n *     item below).\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\r\n *     weight values, stored as a base64-encoded string.\r\n *\r\n * Saving may throw an `Error` if the total size of the artifacts exceed the\r\n * browser-specific quota.\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\r\n *   `tf.Model.save`.\r\n */function browserLocalStorage(modelPath){return new local_storage_BrowserLocalStorage(modelPath);}var local_storage_BrowserLocalStorageManager=/*#__PURE__*/function(){function local_storage_BrowserLocalStorageManager(){_classCallCheck2(this,local_storage_BrowserLocalStorageManager);Object(util[\"assert\"])(Object(environment[\"c\"/* env */])().getBool('IS_BROWSER'),function(){return'Current environment is not a web browser';});Object(util[\"assert\"])(typeof window==='undefined'||typeof window.localStorage!=='undefined',function(){return'Current browser does not appear to support localStorage';});this.LS=window.localStorage;}_createClass(local_storage_BrowserLocalStorageManager,[{key:\"listModels\",value:function(){var _listModels3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(){var out,prefix,suffix,i,key,modelPath;return regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:out={};prefix=PATH_PREFIX+PATH_SEPARATOR;suffix=PATH_SEPARATOR+INFO_SUFFIX;for(i=0;i<this.LS.length;++i){key=this.LS.key(i);if(key.startsWith(prefix)&&key.endsWith(suffix)){modelPath=getModelPathFromKey(key);out[modelPath]=JSON.parse(this.LS.getItem(key));}}return _context7.abrupt(\"return\",out);case 5:case\"end\":return _context7.stop();}}},_callee7,this);}));function listModels(){return _listModels3.apply(this,arguments);}return listModels;}()},{key:\"removeModel\",value:function(){var _removeModel3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee8(path){var keys,info;return regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:path=local_storage_maybeStripScheme(path);keys=getModelKeys(path);if(!(this.LS.getItem(keys.info)==null)){_context8.next=4;break;}throw new Error(\"Cannot find model at path '\".concat(path,\"'\"));case 4:info=JSON.parse(this.LS.getItem(keys.info));this.LS.removeItem(keys.info);this.LS.removeItem(keys.topology);this.LS.removeItem(keys.weightSpecs);this.LS.removeItem(keys.weightData);return _context8.abrupt(\"return\",info);case 10:case\"end\":return _context8.stop();}}},_callee8,this);}));function removeModel(_x27){return _removeModel3.apply(this,arguments);}return removeModel;}()}]);return local_storage_BrowserLocalStorageManager;}();if(Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){// Wrap the construction and registration, to guard against browsers that\n// don't support Local Storage.\ntry{model_management_ModelStoreManagerRegistry.registerManager(local_storage_BrowserLocalStorage.URL_SCHEME,new local_storage_BrowserLocalStorageManager());}catch(err){}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * IOHandlers related to files, such as browser-triggered file downloads,\r\n * user-selected files in browser.\r\n */var DEFAULT_FILE_NAME_PREFIX='model';var DEFAULT_JSON_EXTENSION_NAME='.json';var DEFAULT_WEIGHT_DATA_EXTENSION_NAME='.weights.bin';function defer(f){return new Promise(function(resolve){return setTimeout(resolve);}).then(f);}var browser_files_BrowserDownloads=/*#__PURE__*/function(){function browser_files_BrowserDownloads(fileNamePrefix){_classCallCheck2(this,browser_files_BrowserDownloads);if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){// TODO(cais): Provide info on what IOHandlers are available under the\n//   current environment.\nthrow new Error('browserDownloads() cannot proceed because the current environment '+'is not a browser.');}if(fileNamePrefix.startsWith(browser_files_BrowserDownloads.URL_SCHEME)){fileNamePrefix=fileNamePrefix.slice(browser_files_BrowserDownloads.URL_SCHEME.length);}if(fileNamePrefix==null||fileNamePrefix.length===0){fileNamePrefix=DEFAULT_FILE_NAME_PREFIX;}this.modelTopologyFileName=fileNamePrefix+DEFAULT_JSON_EXTENSION_NAME;this.weightDataFileName=fileNamePrefix+DEFAULT_WEIGHT_DATA_EXTENSION_NAME;}_createClass(browser_files_BrowserDownloads,[{key:\"save\",value:function(){var _save3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee9(modelArtifacts){var weightsURL,weightsManifest,modelTopologyAndWeightManifest,modelTopologyAndWeightManifestURL,jsonAnchor,weightDataAnchor;return regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:if(!(typeof document==='undefined')){_context9.next=2;break;}throw new Error('Browser downloads are not supported in '+'this environment since `document` is not present');case 2:weightsURL=window.URL.createObjectURL(new Blob([modelArtifacts.weightData],{type:'application/octet-stream'}));if(!(modelArtifacts.modelTopology instanceof ArrayBuffer)){_context9.next=7;break;}throw new Error('BrowserDownloads.save() does not support saving model topology '+'in binary formats yet.');case 7:weightsManifest=[{paths:['./'+this.weightDataFileName],weights:modelArtifacts.weightSpecs}];modelTopologyAndWeightManifest={modelTopology:modelArtifacts.modelTopology,format:modelArtifacts.format,generatedBy:modelArtifacts.generatedBy,convertedBy:modelArtifacts.convertedBy,weightsManifest:weightsManifest};modelTopologyAndWeightManifestURL=window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)],{type:'application/json'}));// If anchor elements are not provided, create them without attaching them\n// to parents, so that the downloaded file names can be controlled.\njsonAnchor=this.jsonAnchor==null?document.createElement('a'):this.jsonAnchor;jsonAnchor.download=this.modelTopologyFileName;jsonAnchor.href=modelTopologyAndWeightManifestURL;// Trigger downloads by evoking a click event on the download anchors.\n// When multiple downloads are started synchronously, Firefox will only\n// save the last one.\n_context9.next=15;return defer(function(){return jsonAnchor.dispatchEvent(new MouseEvent('click'));});case 15:if(!(modelArtifacts.weightData!=null)){_context9.next=21;break;}weightDataAnchor=this.weightDataAnchor==null?document.createElement('a'):this.weightDataAnchor;weightDataAnchor.download=this.weightDataFileName;weightDataAnchor.href=weightsURL;_context9.next=21;return defer(function(){return weightDataAnchor.dispatchEvent(new MouseEvent('click'));});case 21:return _context9.abrupt(\"return\",{modelArtifactsInfo:Object(io_utils[\"g\"/* getModelArtifactsInfoForJSON */])(modelArtifacts)});case 22:case\"end\":return _context9.stop();}}},_callee9,this);}));function save(_x28){return _save3.apply(this,arguments);}return save;}()}]);return browser_files_BrowserDownloads;}();browser_files_BrowserDownloads.URL_SCHEME='downloads://';var browser_files_BrowserFiles=/*#__PURE__*/function(){function browser_files_BrowserFiles(files){_classCallCheck2(this,browser_files_BrowserFiles);if(files==null||files.length<1){throw new Error(\"When calling browserFiles, at least 1 file is required, \"+\"but received \".concat(files));}this.files=files;}_createClass(browser_files_BrowserFiles,[{key:\"load\",value:function(){var _load3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee10(){var _this4=this;var jsonFile,weightFiles;return regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:jsonFile=this.files[0];weightFiles=this.files.slice(1);return _context10.abrupt(\"return\",new Promise(function(resolve,reject){var jsonReader=new FileReader();jsonReader.onload=function(event){// tslint:disable-next-line:no-any\nvar modelJSON=JSON.parse(event.target.result);var modelTopology=modelJSON.modelTopology;if(modelTopology==null){reject(new Error(\"modelTopology field is missing from file \".concat(jsonFile.name)));return;}if(weightFiles.length===0){resolve({modelTopology:modelTopology});}var weightsManifest=modelJSON.weightsManifest;if(weightsManifest==null){reject(new Error(\"weightManifest field is missing from file \".concat(jsonFile.name)));return;}var pathToFile;try{pathToFile=_this4.checkManifestAndWeightFiles(weightsManifest,weightFiles);}catch(err){reject(err);return;}var weightSpecs=[];var paths=[];var perFileBuffers=[];weightsManifest.forEach(function(weightsGroup){weightsGroup.paths.forEach(function(path){paths.push(path);perFileBuffers.push(null);});weightSpecs.push.apply(weightSpecs,_toConsumableArray2(weightsGroup.weights));});weightsManifest.forEach(function(weightsGroup){weightsGroup.paths.forEach(function(path){var weightFileReader=new FileReader();weightFileReader.onload=function(event){// tslint:disable-next-line:no-any\nvar weightData=event.target.result;var index=paths.indexOf(path);perFileBuffers[index]=weightData;if(perFileBuffers.indexOf(null)===-1){resolve({modelTopology:modelTopology,weightSpecs:weightSpecs,weightData:Object(io_utils[\"d\"/* concatenateArrayBuffers */])(perFileBuffers),format:modelJSON.format,generatedBy:modelJSON.generatedBy,convertedBy:modelJSON.convertedBy,userDefinedMetadata:modelJSON.userDefinedMetadata});}};weightFileReader.onerror=function(error){return reject(\"Failed to weights data from file of path '\".concat(path,\"'.\"));};weightFileReader.readAsArrayBuffer(pathToFile[path]);});});};jsonReader.onerror=function(error){return reject(\"Failed to read model topology and weights manifest JSON \"+\"from file '\".concat(jsonFile.name,\"'. BrowserFiles supports loading \")+\"Keras-style tf.Model artifacts only.\");};jsonReader.readAsText(jsonFile);}));case 3:case\"end\":return _context10.stop();}}},_callee10,this);}));function load(){return _load3.apply(this,arguments);}return load;}()/**\r\n     * Check the compatibility between weights manifest and weight files.\r\n     */},{key:\"checkManifestAndWeightFiles\",value:function checkManifestAndWeightFiles(manifest,files){var basenames=[];var fileNames=files.map(function(file){return Object(io_utils[\"c\"/* basename */])(file.name);});var pathToFile={};var _iterator2=_createForOfIteratorHelper(manifest),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var group=_step2.value;group.paths.forEach(function(path){var pathBasename=Object(io_utils[\"c\"/* basename */])(path);if(basenames.indexOf(pathBasename)!==-1){throw new Error(\"Duplicate file basename found in weights manifest: \"+\"'\".concat(pathBasename,\"'\"));}basenames.push(pathBasename);if(fileNames.indexOf(pathBasename)===-1){throw new Error(\"Weight file with basename '\".concat(pathBasename,\"' is not provided.\"));}else{pathToFile[path]=files[fileNames.indexOf(pathBasename)];}});}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}if(basenames.length!==files.length){throw new Error(\"Mismatch in the number of files in weights manifest \"+\"(\".concat(basenames.length,\") and the number of weight files provided \")+\"(\".concat(files.length,\").\"));}return pathToFile;}}]);return browser_files_BrowserFiles;}();var browserDownloadsRouter=function browserDownloadsRouter(url){if(!Object(environment[\"c\"/* env */])().getBool('IS_BROWSER')){return null;}else{if(!Array.isArray(url)&&url.startsWith(browser_files_BrowserDownloads.URL_SCHEME)){return browserDownloads(url.slice(browser_files_BrowserDownloads.URL_SCHEME.length));}else{return null;}}};IORouterRegistry.registerSaveRouter(browserDownloadsRouter);/**\r\n * Creates an IOHandler that triggers file downloads from the browser.\r\n *\r\n * The returned `IOHandler` instance can be used as model exporting methods such\r\n * as `tf.Model.save` and supports only saving.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * const saveResult = await model.save('downloads://mymodel');\r\n * // This will trigger downloading of two files:\r\n * //   'mymodel.json' and 'mymodel.weights.bin'.\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\r\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\r\n *   formats:\r\n *   1. `null` or `undefined`, in which case the default file\r\n *      names will be used:\r\n *      - 'model.json' for the JSON file containing the model topology and\r\n *        weights manifest.\r\n *      - 'model.weights.bin' for the binary file containing the binary weight\r\n *        values.\r\n *   2. A single string or an Array of a single string, as the file name prefix.\r\n *      For example, if `'foo'` is provided, the downloaded JSON\r\n *      file and binary weights file will be named 'foo.json' and\r\n *      'foo.weights.bin', respectively.\r\n * @param config Additional configuration for triggering downloads.\r\n * @returns An instance of `BrowserDownloads` `IOHandler`.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function browserDownloads(){var fileNamePrefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'model';return new browser_files_BrowserDownloads(fileNamePrefix);}/**\r\n * Creates an IOHandler that loads model artifacts from user-selected files.\r\n *\r\n * This method can be used for loading from files such as user-selected files\r\n * in the browser.\r\n * When used in conjunction with `tf.loadLayersModel`, an instance of\r\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\r\n *\r\n * ```js\r\n * // Note: This code snippet won't run properly without the actual file input\r\n * //   elements in the HTML DOM.\r\n *\r\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\r\n * // elements.\r\n * const uploadJSONInput = document.getElementById('upload-json');\r\n * const uploadWeightsInput = document.getElementById('upload-weights');\r\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\r\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n * ```\r\n *\r\n * @param files `File`s to load from. Currently, this function supports only\r\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\r\n *   which an `Array` of `File`s is expected (in that order):\r\n *   - A JSON file containing the model topology and weight manifest.\r\n *   - Optionally, One or more binary files containing the binary weights.\r\n *     These files must have names that match the paths in the `weightsManifest`\r\n *     contained by the aforementioned JSON file, or errors will be thrown\r\n *     during loading. These weights files have the same format as the ones\r\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\r\n *     Python PIP package. If no weights files are provided, only the model\r\n *     topology will be loaded from the JSON file above.\r\n * @returns An instance of `Files` `IOHandler`.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function browserFiles(files){return new browser_files_BrowserFiles(files);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/progress.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Monitor Promise.all progress, fire onProgress callback function.\r\n *\r\n * @param promises Promise list going to be monitored\r\n * @param onProgress Callback function. Fired when a promise resolved.\r\n * @param startFraction Optional fraction start. Default to 0.\r\n * @param endFraction Optional fraction end. Default to 1.\r\n */function monitorPromisesProgress(promises,onProgress,startFraction,endFraction){checkPromises(promises);startFraction=startFraction==null?0:startFraction;endFraction=endFraction==null?1:endFraction;checkFraction(startFraction,endFraction);var resolvedPromise=0;var registerMonitor=function registerMonitor(promise){promise.then(function(value){var fraction=startFraction+ ++resolvedPromise/promises.length*(endFraction-startFraction);// pass fraction as parameter to callback function.\nonProgress(fraction);return value;});return promise;};function checkPromises(promises){Object(util[\"assert\"])(promises!=null&&Array.isArray(promises)&&promises.length>0,function(){return'promises must be a none empty array';});}function checkFraction(startFraction,endFraction){Object(util[\"assert\"])(startFraction>=0&&startFraction<=1,function(){return\"Progress fraction must be in range [0, 1], but \"+\"got startFraction \".concat(startFraction);});Object(util[\"assert\"])(endFraction>=0&&endFraction<=1,function(){return\"Progress fraction must be in range [0, 1], but \"+\"got endFraction \".concat(endFraction);});Object(util[\"assert\"])(endFraction>=startFraction,function(){return\"startFraction must be no more than endFraction, but \"+\"got startFraction \".concat(startFraction,\" and endFraction \")+\"\".concat(endFraction);});}return Promise.all(promises.map(registerMonitor));}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/types.js\nvar types=__webpack_require__(34);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Reads binary weights data from a number of URLs.\r\n *\r\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\r\n * @param requestOptions RequestInit (options) for the HTTP requests.\r\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\r\n * @param onProgress Optional, progress callback function, fired periodically\r\n *   before the load is completed.\r\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\r\n *   length as `fetchURLs`.\r\n */function loadWeightsAsArrayBuffer(_x29,_x30){return _loadWeightsAsArrayBuffer.apply(this,arguments);}/**\r\n * Reads a weights manifest JSON configuration, fetches the weights and\r\n * returns them as `Tensor`s.\r\n *\r\n * @param manifest The weights manifest JSON.\r\n * @param filePathPrefix The path prefix for filenames given in the manifest.\r\n *     Defaults to the empty string.\r\n * @param weightNames The names of the weights to be fetched.\r\n */function _loadWeightsAsArrayBuffer(){_loadWeightsAsArrayBuffer=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee43(fetchURLs,loadOptions){var fetchFunc,requests,fetchStartFraction,fetchEndFraction,responses,bufferPromises,bufferStartFraction,bufferEndFraction,buffers;return regeneratorRuntime.wrap(function _callee43$(_context43){while(1){switch(_context43.prev=_context43.next){case 0:if(loadOptions==null){loadOptions={};}fetchFunc=loadOptions.fetchFunc==null?Object(environment[\"c\"/* env */])().platform.fetch:loadOptions.fetchFunc;// Create the requests for all of the weights in parallel.\nrequests=fetchURLs.map(function(fetchURL){return fetchFunc(fetchURL,loadOptions.requestInit,{isBinary:true});});fetchStartFraction=0;fetchEndFraction=0.5;if(!(loadOptions.onProgress==null)){_context43.next=11;break;}_context43.next=8;return Promise.all(requests);case 8:_context43.t0=_context43.sent;_context43.next=14;break;case 11:_context43.next=13;return monitorPromisesProgress(requests,loadOptions.onProgress,fetchStartFraction,fetchEndFraction);case 13:_context43.t0=_context43.sent;case 14:responses=_context43.t0;bufferPromises=responses.map(function(response){return response.arrayBuffer();});bufferStartFraction=0.5;bufferEndFraction=1;if(!(loadOptions.onProgress==null)){_context43.next=24;break;}_context43.next=21;return Promise.all(bufferPromises);case 21:_context43.t1=_context43.sent;_context43.next=27;break;case 24:_context43.next=26;return monitorPromisesProgress(bufferPromises,loadOptions.onProgress,bufferStartFraction,bufferEndFraction);case 26:_context43.t1=_context43.sent;case 27:buffers=_context43.t1;return _context43.abrupt(\"return\",buffers);case 29:case\"end\":return _context43.stop();}}},_callee43);}));return _loadWeightsAsArrayBuffer.apply(this,arguments);}function loadWeights(_x31){return _loadWeights.apply(this,arguments);}/**\r\n * Creates a function, which reads a weights manifest JSON configuration,\r\n * fetches the weight files using the specified function and returns them as\r\n * `Tensor`s.\r\n *\r\n * ```js\r\n * // example for creating a nodejs weight loader, which reads the weight files\r\n * // from disk using fs.readFileSync\r\n *\r\n * import * as fs from 'fs'\r\n *\r\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\r\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\r\n *\r\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\r\n *\r\n * const manifest = JSON.parse(\r\n *   fs.readFileSync('./my_model-weights_manifest').toString()\r\n * )\r\n * const weightMap = await loadWeights(manifest, './')\r\n * ```\r\n * @param fetchWeightsFunction The function used for fetching the weight files.\r\n * @returns Weight loading function.\r\n */function _loadWeights(){_loadWeights=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee44(manifest){var filePathPrefix,weightNames,requestInit,fetchWeights,loadWeights,_args45=arguments;return regeneratorRuntime.wrap(function _callee44$(_context44){while(1){switch(_context44.prev=_context44.next){case 0:filePathPrefix=_args45.length>1&&_args45[1]!==undefined?_args45[1]:'';weightNames=_args45.length>2?_args45[2]:undefined;requestInit=_args45.length>3?_args45[3]:undefined;// TODO(nsthorat): Groups are currently fetched atomically. If you need a\n// single weight from a group, the whole group will be fetched. At a future\n// date, we should support fetching only the individual shards within a\n// group that are needed to reconstruct the requested weight.\n// TODO(cais): Use `decodeWeights` for implementation.\nfetchWeights=function fetchWeights(fetchUrls){return loadWeightsAsArrayBuffer(fetchUrls,{requestInit:requestInit});};loadWeights=weightsLoaderFactory(fetchWeights);return _context44.abrupt(\"return\",loadWeights(manifest,filePathPrefix,weightNames));case 6:case\"end\":return _context44.stop();}}},_callee44);}));return _loadWeights.apply(this,arguments);}function weightsLoaderFactory(fetchWeightsFunction){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee11(manifest){var filePathPrefix,weightNames,groupIndicesToFetchMap,groupWeightsToFetch,weightsFound,allManifestWeightNames,weightsNotFound,groupIndicesToFetch,fetchUrls,buffers,weightsTensorMap,bufferIndexOffset,_args12=arguments;return regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:filePathPrefix=_args12.length>1&&_args12[1]!==undefined?_args12[1]:'';weightNames=_args12.length>2?_args12[2]:undefined;// Collect all the groups, weights, and their relative offsets to be\n// fetched.\ngroupIndicesToFetchMap=manifest.map(function(){return false;});groupWeightsToFetch={};weightsFound=weightNames!=null?weightNames.map(function(){return false;}):[];allManifestWeightNames=[];manifest.forEach(function(manifestGroupConfig,groupIndex){var groupOffset=0;manifestGroupConfig.weights.forEach(function(weightsEntry){var rawDtype='quantization'in weightsEntry?weightsEntry.quantization.dtype:weightsEntry.dtype;var weightsBytes=types[\"a\"/* DTYPE_VALUE_SIZE_MAP */][rawDtype]*util[\"sizeFromShape\"](weightsEntry.shape);var enqueueWeightsForFetchingFn=function enqueueWeightsForFetchingFn(){groupIndicesToFetchMap[groupIndex]=true;if(groupWeightsToFetch[groupIndex]==null){groupWeightsToFetch[groupIndex]=[];}groupWeightsToFetch[groupIndex].push({manifestEntry:weightsEntry,groupOffset:groupOffset,sizeBytes:weightsBytes});};if(weightNames!=null){weightNames.forEach(function(weightName,weightIndex){if(weightName===weightsEntry.name){enqueueWeightsForFetchingFn();weightsFound[weightIndex]=true;}});}else{enqueueWeightsForFetchingFn();}allManifestWeightNames.push(weightsEntry.name);groupOffset+=weightsBytes;});});if(weightsFound.every(function(found){return found;})){_context11.next=10;break;}weightsNotFound=weightNames.filter(function(_,i){return!weightsFound[i];});throw new Error(\"Could not find weights in manifest with names: \"+\"\".concat(weightsNotFound.join(', '),\". \\n\")+\"Manifest JSON has weights with names: \"+\"\".concat(allManifestWeightNames.join(', '),\".\"));case 10:// Convert the one-hot boolean groupId => shouldFetch map to a list of group\n// IDs.\ngroupIndicesToFetch=groupIndicesToFetchMap.reduce(function(accumulator,shouldFetch,i){if(shouldFetch){accumulator.push(i);}return accumulator;},[]);fetchUrls=[];groupIndicesToFetch.forEach(function(i){manifest[i].paths.forEach(function(filepath){var fetchUrl=filePathPrefix+(!filePathPrefix.endsWith('/')?'/':'')+filepath;fetchUrls.push(fetchUrl);});});_context11.next=15;return fetchWeightsFunction(fetchUrls);case 15:buffers=_context11.sent;weightsTensorMap={};bufferIndexOffset=0;groupIndicesToFetch.forEach(function(i){var numBuffers=manifest[i].paths.length;var groupBytes=0;for(var _i10=0;_i10<numBuffers;_i10++){groupBytes+=buffers[bufferIndexOffset+_i10].byteLength;}// Create a buffer for the whole group.\nvar groupBuffer=new ArrayBuffer(groupBytes);var groupByteBuffer=new Uint8Array(groupBuffer);var groupBufferOffset=0;for(var _i11=0;_i11<numBuffers;_i11++){var buffer=new Uint8Array(buffers[bufferIndexOffset+_i11]);groupByteBuffer.set(buffer,groupBufferOffset);groupBufferOffset+=buffer.byteLength;}var weightsEntries=groupWeightsToFetch[i];weightsEntries.forEach(function(weightsEntry){var byteBuffer=groupBuffer.slice(weightsEntry.groupOffset,weightsEntry.groupOffset+weightsEntry.sizeBytes);var nameToTensorMap=Object(io_utils[\"e\"/* decodeWeights */])(byteBuffer,[weightsEntry.manifestEntry]);for(var name in nameToTensorMap){weightsTensorMap[name]=nameToTensorMap[name];}});bufferIndexOffset+=numBuffers;});return _context11.abrupt(\"return\",weightsTensorMap);case 20:case\"end\":return _context11.stop();}}},_callee11);}));return function(_x32){return _ref.apply(this,arguments);};}();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/http.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * IOHandler implementations based on HTTP requests in the web browser.\r\n *\r\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n */var OCTET_STREAM_MIME_TYPE='application/octet-stream';var JSON_TYPE='application/json';var http_HTTPRequest=/*#__PURE__*/function(){function http_HTTPRequest(path,loadOptions){_classCallCheck2(this,http_HTTPRequest);this.DEFAULT_METHOD='POST';if(loadOptions==null){loadOptions={};}this.weightPathPrefix=loadOptions.weightPathPrefix;this.onProgress=loadOptions.onProgress;if(loadOptions.fetchFunc!=null){Object(util[\"assert\"])(typeof loadOptions.fetchFunc==='function',function(){return'Must pass a function that matches the signature of '+'`fetch` (see '+'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)';});this.fetch=loadOptions.fetchFunc;}else{this.fetch=Object(environment[\"c\"/* env */])().platform.fetch;}Object(util[\"assert\"])(path!=null&&path.length>0,function(){return'URL path for http must not be null, undefined or '+'empty.';});if(Array.isArray(path)){Object(util[\"assert\"])(path.length===2,function(){return'URL paths for http must have a length of 2, '+\"(actual length is \".concat(path.length,\").\");});}this.path=path;if(loadOptions.requestInit!=null&&loadOptions.requestInit.body!=null){throw new Error('requestInit is expected to have no pre-existing body, but has one.');}this.requestInit=loadOptions.requestInit||{};}_createClass(http_HTTPRequest,[{key:\"save\",value:function(){var _save4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee12(modelArtifacts){var init,weightsManifest,modelTopologyAndWeightManifest,response;return regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:if(!(modelArtifacts.modelTopology instanceof ArrayBuffer)){_context12.next=2;break;}throw new Error('BrowserHTTPRequest.save() does not support saving model topology '+'in binary formats yet.');case 2:init=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);init.body=new FormData();weightsManifest=[{paths:['./model.weights.bin'],weights:modelArtifacts.weightSpecs}];modelTopologyAndWeightManifest={modelTopology:modelArtifacts.modelTopology,format:modelArtifacts.format,generatedBy:modelArtifacts.generatedBy,convertedBy:modelArtifacts.convertedBy,userDefinedMetadata:modelArtifacts.userDefinedMetadata,weightsManifest:weightsManifest};init.body.append('model.json',new Blob([JSON.stringify(modelTopologyAndWeightManifest)],{type:JSON_TYPE}),'model.json');if(modelArtifacts.weightData!=null){init.body.append('model.weights.bin',new Blob([modelArtifacts.weightData],{type:OCTET_STREAM_MIME_TYPE}),'model.weights.bin');}_context12.next=10;return this.fetch(this.path,init);case 10:response=_context12.sent;if(!response.ok){_context12.next=15;break;}return _context12.abrupt(\"return\",{modelArtifactsInfo:Object(io_utils[\"g\"/* getModelArtifactsInfoForJSON */])(modelArtifacts),responses:[response]});case 15:throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \"+\"\".concat(response.status,\".\"));case 16:case\"end\":return _context12.stop();}}},_callee12,this);}));function save(_x33){return _save4.apply(this,arguments);}return save;}()/**\r\n     * Load model artifacts via HTTP request(s).\r\n     *\r\n     * See the documentation to `tf.io.http` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model artifacts (if loading succeeds).\r\n     */},{key:\"load\",value:function(){var _load4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee13(){var modelConfigRequest,modelConfig,message,modelTopology,weightsManifest,generatedBy,convertedBy,format,userDefinedMetadata,weightSpecs,weightData,results,_results;return regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.next=2;return this.fetch(this.path,this.requestInit);case 2:modelConfigRequest=_context13.sent;if(modelConfigRequest.ok){_context13.next=5;break;}throw new Error(\"Request to \".concat(this.path,\" failed with status code \")+\"\".concat(modelConfigRequest.status,\". Please verify this URL points to \")+\"the model JSON of the model to load.\");case 5:_context13.prev=5;_context13.next=8;return modelConfigRequest.json();case 8:modelConfig=_context13.sent;_context13.next=16;break;case 11:_context13.prev=11;_context13.t0=_context13[\"catch\"](5);message=\"Failed to parse model JSON of response from \".concat(this.path,\".\");// TODO(nsthorat): Remove this after some time when we're comfortable that\n// .pb files are mostly gone.\nif(this.path.endsWith('.pb')){message+=' Your path contains a .pb file extension. '+'Support for .pb models have been removed in TensorFlow.js 1.0 '+'in favor of .json models. You can re-convert your Python '+'TensorFlow model using the TensorFlow.js 1.0 conversion scripts '+'or you can convert your.pb models with the \\'pb2json\\''+'NPM script in the tensorflow/tfjs-converter repository.';}else{message+=' Please make sure the server is serving valid '+'JSON for this request.';}throw new Error(message);case 16:modelTopology=modelConfig.modelTopology;weightsManifest=modelConfig.weightsManifest;generatedBy=modelConfig.generatedBy;convertedBy=modelConfig.convertedBy;format=modelConfig.format;userDefinedMetadata=modelConfig.userDefinedMetadata;// We do not allow both modelTopology and weightsManifest to be missing.\nif(!(modelTopology==null&&weightsManifest==null)){_context13.next=24;break;}throw new Error(\"The JSON from HTTP path \".concat(this.path,\" contains neither model \")+\"topology or manifest for weights.\");case 24:if(!(weightsManifest!=null)){_context13.next=31;break;}_context13.next=27;return this.loadWeights(weightsManifest);case 27:results=_context13.sent;_results=_slicedToArray(results,2);weightSpecs=_results[0];weightData=_results[1];case 31:return _context13.abrupt(\"return\",{modelTopology:modelTopology,weightSpecs:weightSpecs,weightData:weightData,userDefinedMetadata:userDefinedMetadata,generatedBy:generatedBy,convertedBy:convertedBy,format:format});case 32:case\"end\":return _context13.stop();}}},_callee13,this,[[5,11]]);}));function load(){return _load4.apply(this,arguments);}return load;}()},{key:\"loadWeights\",value:function(){var _loadWeights2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee14(weightsManifest){var weightPath,_parseUrl,_parseUrl2,prefix,suffix,pathPrefix,weightSpecs,_iterator3,_step3,entry,fetchURLs,buffers;return regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:weightPath=Array.isArray(this.path)?this.path[1]:this.path;_parseUrl=parseUrl(weightPath),_parseUrl2=_slicedToArray(_parseUrl,2),prefix=_parseUrl2[0],suffix=_parseUrl2[1];pathPrefix=this.weightPathPrefix||prefix;weightSpecs=[];_iterator3=_createForOfIteratorHelper(weightsManifest);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){entry=_step3.value;weightSpecs.push.apply(weightSpecs,_toConsumableArray2(entry.weights));}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}fetchURLs=[];weightsManifest.forEach(function(weightsGroup){weightsGroup.paths.forEach(function(path){fetchURLs.push(pathPrefix+path+suffix);});});_context14.next=10;return loadWeightsAsArrayBuffer(fetchURLs,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});case 10:buffers=_context14.sent;return _context14.abrupt(\"return\",[weightSpecs,Object(io_utils[\"d\"/* concatenateArrayBuffers */])(buffers)]);case 12:case\"end\":return _context14.stop();}}},_callee14,this);}));function loadWeights(_x34){return _loadWeights2.apply(this,arguments);}return loadWeights;}()}]);return http_HTTPRequest;}();http_HTTPRequest.URL_SCHEME_REGEX=/^https?:\\/\\//;/**\r\n * Extract the prefix and suffix of the url, where the prefix is the path before\r\n * the last file, and suffix is the search params after the last file.\r\n * ```\r\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\r\n * [prefix, suffix] = parseUrl(url)\r\n * // prefix = 'http://tfhub.dev/model/1/'\r\n * // suffix = '?tfjs-format=file'\r\n * ```\r\n * @param url the model url to be parsed.\r\n */function parseUrl(url){var lastSlash=url.lastIndexOf('/');var lastSearchParam=url.lastIndexOf('?');var prefix=url.substring(0,lastSlash);var suffix=lastSearchParam>lastSlash?url.substring(lastSearchParam):'';return[prefix+'/',suffix];}function isHTTPScheme(url){return url.match(http_HTTPRequest.URL_SCHEME_REGEX)!=null;}var httpRouter=function httpRouter(url,loadOptions){if(typeof fetch==='undefined'&&(loadOptions==null||loadOptions.fetchFunc==null)){// `http` uses `fetch` or `node-fetch`, if one wants to use it in\n// an environment that is not the browser or node they have to setup a\n// global fetch polyfill.\nreturn null;}else{var isHTTP=true;if(Array.isArray(url)){isHTTP=url.every(function(urlItem){return isHTTPScheme(urlItem);});}else{isHTTP=isHTTPScheme(url);}if(isHTTP){return http(url,loadOptions);}}return null;};IORouterRegistry.registerSaveRouter(httpRouter);IORouterRegistry.registerLoadRouter(httpRouter);/**\r\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\r\n *\r\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\r\n * `path` URL. The form data includes artifacts that represent the topology\r\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\r\n * blobs (files) exist in form-data:\r\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\r\n *   - A binary weights file consisting of the concatenated weight values.\r\n * These files are in the same format as the one generated by\r\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\r\n *\r\n * The following code snippet exemplifies the client-side code that uses this\r\n * function:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save(tf.io.http(\r\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * If the default `POST` method is to be used, without any custom parameters\r\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\r\n *\r\n * ```js\r\n * const saveResult = await model.save('http://model-server:5000/upload');\r\n * ```\r\n *\r\n * The following GitHub Gist\r\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\r\n * implements a server based on [flask](https://github.com/pallets/flask) that\r\n * can receive the request. Upon receiving the model artifacts via the requst,\r\n * this particular server reconsistutes instances of [Keras\r\n * Models](https://keras.io/models/model/) in memory.\r\n *\r\n *\r\n * @param path A URL path to the model.\r\n *   Can be an absolute HTTP path (e.g.,\r\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\r\n *   './model-upload').\r\n * @param requestInit Request configurations to be used when sending\r\n *    HTTP request to server using `fetch`. It can contain fields such as\r\n *    `method`, `credentials`, `headers`, `mode`, etc. See\r\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\n *    for more information. `requestInit` must not have a body, because the\r\n * body will be set by TensorFlow.js. File blobs representing the model\r\n * topology (filename: 'model.json') and the weights of the model (filename:\r\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\r\n * `body`, an Error will be thrown.\r\n * @param loadOptions Optional configuration for the loading. It includes the\r\n *   following fields:\r\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\r\n *     files, by default this is calculated from the path param.\r\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\r\n *     the `fetch` from node-fetch can be used here.\r\n *   - onProgress Optional, progress callback function, fired periodically\r\n *     before the load is completed.\r\n * @returns An instance of `IOHandler`.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */function http(path,loadOptions){return new http_HTTPRequest(path,loadOptions);}/**\r\n * Deprecated. Use `tf.io.http`.\r\n * @param path\r\n * @param loadOptions\r\n */function browserHTTPRequest(path,loadOptions){return http(path,loadOptions);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var PassthroughLoader=/*#__PURE__*/function(){function PassthroughLoader(modelArtifacts){_classCallCheck2(this,PassthroughLoader);this.modelArtifacts=modelArtifacts;}_createClass(PassthroughLoader,[{key:\"load\",value:function(){var _load5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee15(){return regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:return _context15.abrupt(\"return\",this.modelArtifacts);case 1:case\"end\":return _context15.stop();}}},_callee15,this);}));function load(){return _load5.apply(this,arguments);}return load;}()}]);return PassthroughLoader;}();var PassthroughSaver=/*#__PURE__*/function(){function PassthroughSaver(saveHandler){_classCallCheck2(this,PassthroughSaver);this.saveHandler=saveHandler;}_createClass(PassthroughSaver,[{key:\"save\",value:function(){var _save5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee16(modelArtifacts){return regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:return _context16.abrupt(\"return\",this.saveHandler(modelArtifacts));case 1:case\"end\":return _context16.stop();}}},_callee16,this);}));function save(_x35){return _save5.apply(this,arguments);}return save;}()}]);return PassthroughSaver;}();/**\r\n * Creates an IOHandler that loads model artifacts from memory.\r\n *\r\n * When used in conjunction with `tf.loadLayersModel`, an instance of\r\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\r\n *\r\n * ```js\r\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\r\n *     modelTopology, weightSpecs, weightData));\r\n * ```\r\n *\r\n * @param modelArtifacts a object containing model topology (i.e., parsed from\r\n *   the JSON format).\r\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\r\n *   names, shapes, types, and quantization of the weight data.\r\n * @param weightData A single `ArrayBuffer` containing the weight data,\r\n *   concatenated in the order described by the weightSpecs.\r\n * @param trainingConfig Model training configuration. Optional.\r\n *\r\n * @returns A passthrough `IOHandler` that simply loads the provided data.\r\n */function fromMemory(modelArtifacts,weightSpecs,weightData,trainingConfig){if(arguments.length===1){var isModelArtifacts=modelArtifacts.modelTopology!=null||modelArtifacts.weightSpecs!=null;if(isModelArtifacts){return new PassthroughLoader(modelArtifacts);}else{// Legacy support: with only modelTopology.\n// TODO(cais): Remove this deprecated API.\nconsole.warn('Please call tf.io.fromMemory() with only one argument. '+'The argument should be of type ModelArtifacts. '+'The multi-argument signature of tf.io.fromMemory() has been '+'deprecated and will be removed in a future release.');return new PassthroughLoader({modelTopology:modelArtifacts});}}else{// Legacy support.\n// TODO(cais): Remove this deprecated API.\nconsole.warn('Please call tf.io.fromMemory() with only one argument. '+'The argument should be of type ModelArtifacts. '+'The multi-argument signature of tf.io.fromMemory() has been '+'deprecated and will be removed in a future release.');return new PassthroughLoader({modelTopology:modelArtifacts,weightSpecs:weightSpecs,weightData:weightData,trainingConfig:trainingConfig});}}/**\r\n * Creates an IOHandler that passes saved model artifacts to a callback.\r\n *\r\n * ```js\r\n * function handleSave(artifacts) {\r\n *   // ... do something with the artifacts ...\r\n *   return {modelArtifactsInfo: {...}, ...};\r\n * }\r\n *\r\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\r\n * ```\r\n *\r\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\r\n *     `SaveResult`.\r\n */function withSaveHandler(saveHandler){return new PassthroughSaver(saveHandler);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/io/io.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Importing local_storage and indexed_db is necessary for the routers to be\n// registered.\n// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\r\n * value `onValue` (defaults to 1), while all other locations take value\r\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\r\n * `R+1` with the last axis of size `depth`.\r\n *\r\n * ```js\r\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\r\n * ```\r\n *\r\n * @param indices `tf.Tensor` of indices with dtype `int32`.\r\n * @param depth The depth of the one hot dimension.\r\n * @param onValue A number used to fill in the output when the index matches\r\n * the location.\r\n * @param offValue A number used to fill in the output when the index does\r\n *     not match the location.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function oneHot_(indices,depth){var onValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var offValue=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;if(depth<2){throw new Error(\"Error in oneHot: depth must be >=2, but it is \".concat(depth));}var $indices=Object(tensor_util_env[\"a\"/* convertToTensor */])(indices,'indices','oneHot','int32');var outShape=[].concat(_toConsumableArray2($indices.shape),[depth]);$indices=$indices.flatten();var forward=function forward(backend,save){save([$indices]);return reshape(backend.oneHot($indices,depth,onValue,offValue),outShape);};var inputs={indices:$indices};var attrs={depth:depth,onValue:onValue,offValue:offValue};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"cb\"/* OneHot */],attrs);}var oneHot=Object(operation[\"a\"/* op */])({oneHot_:oneHot_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the confusion matrix from true labels and predicted labels.\r\n *\r\n * ```js\r\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\r\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\r\n * const numClasses = 3;\r\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\r\n * out.print();\r\n * // Expected output matrix:\r\n * // [[2, 0, 0],\r\n * //  [0, 1, 1],\r\n * //  [0, 0, 1]]\r\n * ```\r\n *\r\n * @param labels The target labels, assumed to be 0-based integers\r\n *   for the classes. The shape is `[numExamples]`, where\r\n *   `numExamples` is the number of examples included.\r\n * @param predictions The predicted classes, assumed to be\r\n *   0-based integers for the classes. Must have the same shape as `labels`.\r\n * @param numClasses Number of all classes, as an integer.\r\n *   Its value must be larger than the largest element in `labels` and\r\n *   `predictions`.\r\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\r\n *   row `r` and column `c` is the number of times examples of actual class\r\n *   `r` were predicted as class `c`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */function confusionMatrix_(labels,predictions,numClasses){var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','confusionMatrix');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','confusionMatrix');util[\"assert\"](numClasses==null||numClasses>0&&Number.isInteger(numClasses),function(){return\"If provided, numClasses must be a positive integer, \"+\"but got \".concat(numClasses);});util[\"assert\"]($labels.rank===1,function(){return\"Expected the rank of labels to be 1, but got \".concat($labels.rank);});util[\"assert\"]($predictions.rank===1,function(){return\"Expected the rank of predictions to be 1, \"+\"but got \".concat($predictions.rank);});util[\"assert\"]($labels.shape[0]===$predictions.shape[0],function(){return\"Mismatch in the number of examples: \"+\"\".concat($labels.shape[0],\" vs. \").concat($predictions.shape[0],\". \")+\"Labels and predictions should have the same number of elements.\";});util[\"assert\"](numClasses>0&&Number.isInteger(numClasses),function(){return\"numClasses is required to be a positive integer, but got \"+\"\".concat(numClasses);});// TODO(cais): In the future, if oneHot supports tensors inputs for\n//   `numClasses`, `confusionMatrix` can make `numClasses` optional.\nvar oneHotLabels=oneHot($labels.asType('int32'),numClasses);var oneHotPredictions=oneHot($predictions.asType('int32'),numClasses);var oneHotLabelsT=oneHotLabels.transpose();return oneHotLabelsT.matMul(oneHotPredictions).asType('int32');}var confusionMatrix=Object(operation[\"a\"/* op */])({confusionMatrix_:confusionMatrix_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/math.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Exports under the tf.math.* namespace.\r\n */ // CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var fromPixels2DContext;/**\r\n * Creates a `tf.Tensor` from an image.\r\n *\r\n * ```js\r\n * const image = new ImageData(1, 1);\r\n * image.data[0] = 100;\r\n * image.data[1] = 150;\r\n * image.data[2] = 200;\r\n * image.data[3] = 255;\r\n *\r\n * tf.browser.fromPixels(image).print();\r\n * ```\r\n *\r\n * @param pixels The input image to construct the tensor from. The\r\n * supported image types are all 4-channel. You can also pass in an image\r\n * object with following attributes:\r\n * `{data: Uint8Array; width: number; height: number}`\r\n * @param numChannels The number of channels of the output tensor. A\r\n * numChannels value less than 4 allows you to ignore channels. Defaults to\r\n * 3 (ignores alpha channel of input image).\r\n */ /** @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true} */function fromPixels_(pixels){var numChannels=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;// Sanity checks.\nif(numChannels>4){throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');}if(pixels==null){throw new Error('pixels passed to tf.browser.fromPixels() can not be null');}var isPixelData=false;var isImageData=false;var isVideo=false;var isImage=false;var isCanvasLike=false;if(pixels.data instanceof Uint8Array){isPixelData=true;}else if(typeof ImageData!=='undefined'&&pixels instanceof ImageData){isImageData=true;}else if(typeof HTMLVideoElement!=='undefined'&&pixels instanceof HTMLVideoElement){isVideo=true;}else if(typeof HTMLImageElement!=='undefined'&&pixels instanceof HTMLImageElement){isImage=true;// tslint:disable-next-line: no-any\n}else if(pixels.getContext!=null){isCanvasLike=true;}else{throw new Error('pixels passed to tf.browser.fromPixels() must be either an '+\"HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData \"+\"in browser, or OffscreenCanvas, ImageData in webworker\"+\" or {data: Uint32Array, width: number, height: number}, \"+\"but was \".concat(pixels.constructor.name));}if(isVideo){var HAVE_CURRENT_DATA_READY_STATE=2;if(isVideo&&pixels.readyState<HAVE_CURRENT_DATA_READY_STATE){throw new Error('The video element has not loaded data yet. Please wait for '+'`loadeddata` event on the <video> element.');}}// If the current backend has 'FromPixels' registered, it has a more\n// efficient way of handling pixel uploads, so we call that.\nvar kernel=Object(kernel_registry[\"b\"/* getKernel */])(kernel_names[\"E\"/* FromPixels */],engine[\"a\"/* ENGINE */].backendName);if(kernel!=null){var inputs={pixels:pixels};var attrs={numChannels:numChannels};return engine[\"a\"/* ENGINE */].runKernel(kernel_names[\"E\"/* FromPixels */],inputs,attrs);}var _ref2=isVideo?[pixels.videoWidth,pixels.videoHeight]:[pixels.width,pixels.height],_ref3=_slicedToArray(_ref2,2),width=_ref3[0],height=_ref3[1];var vals;if(isCanvasLike){vals=// tslint:disable-next-line:no-any\npixels.getContext('2d').getImageData(0,0,width,height).data;}else if(isImageData||isPixelData){vals=pixels.data;}else if(isImage||isVideo){if(fromPixels2DContext==null){fromPixels2DContext=document.createElement('canvas').getContext('2d');}fromPixels2DContext.canvas.width=width;fromPixels2DContext.canvas.height=height;fromPixels2DContext.drawImage(pixels,0,0,width,height);vals=fromPixels2DContext.getImageData(0,0,width,height).data;}var values;if(numChannels===4){values=new Int32Array(vals);}else{var numPixels=width*height;values=new Int32Array(numPixels*numChannels);for(var i=0;i<numPixels;i++){for(var channel=0;channel<numChannels;++channel){values[i*numChannels+channel]=vals[i*4+channel];}}}var outShape=[height,width,numChannels];return Object(tensor_ops[\"i\"/* tensor3d */])(values,outShape,'int32');}/**\r\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\r\n * canvas.\r\n *\r\n * When the dtype of the input is 'float32', we assume values in the range\r\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\r\n * [0-255].\r\n *\r\n * Returns a promise that resolves when the canvas has been drawn to.\r\n *\r\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\r\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\r\n * grayscale. When depth of 3, we draw with the first three components of\r\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\r\n * 4, all four components of the depth dimension correspond to r, g, b, a.\r\n * @param canvas The canvas to draw to.\r\n */ /** @doc {heading: 'Browser', namespace: 'browser'} */function toPixels(_x36,_x37){return _toPixels.apply(this,arguments);}function _toPixels(){_toPixels=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee45(img,canvas){var $img,originalImgTensor,_$img$shape$slice,_$img$shape$slice2,height,width,depth,data,minTensor,maxTensor,vals,minVals,maxVals,min,max,multiplier,bytes,i,r,g,b,a,j,ctx,imageData;return regeneratorRuntime.wrap(function _callee45$(_context45){while(1){switch(_context45.prev=_context45.next){case 0:$img=Object(tensor_util_env[\"a\"/* convertToTensor */])(img,'img','toPixels');if(!(img instanceof dist_tensor[\"a\"/* Tensor */])){// Assume int32 if user passed a native array.\noriginalImgTensor=$img;$img=originalImgTensor.toInt();originalImgTensor.dispose();}if(!($img.rank!==2&&$img.rank!==3)){_context45.next=4;break;}throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \".concat($img.rank,\".\"));case 4:_$img$shape$slice=$img.shape.slice(0,2),_$img$shape$slice2=_slicedToArray(_$img$shape$slice,2),height=_$img$shape$slice2[0],width=_$img$shape$slice2[1];depth=$img.rank===2?1:$img.shape[2];if(!(depth>4||depth===2)){_context45.next=8;break;}throw new Error(\"toPixels only supports depth of size \"+\"1, 3 or 4 but got \".concat(depth));case 8:_context45.next=10;return $img.data();case 10:data=_context45.sent;minTensor=$img.min();maxTensor=$img.max();_context45.next=15;return Promise.all([minTensor.data(),maxTensor.data()]);case 15:vals=_context45.sent;minVals=vals[0];maxVals=vals[1];min=minVals[0];max=maxVals[0];minTensor.dispose();maxTensor.dispose();if(!($img.dtype==='float32')){_context45.next=27;break;}if(!(min<0||max>1)){_context45.next=25;break;}throw new Error(\"Tensor values for a float32 Tensor must be in the \"+\"range [0 - 1] but got range [\".concat(min,\" - \").concat(max,\"].\"));case 25:_context45.next=33;break;case 27:if(!($img.dtype==='int32')){_context45.next=32;break;}if(!(min<0||max>255)){_context45.next=30;break;}throw new Error(\"Tensor values for a int32 Tensor must be in the \"+\"range [0 - 255] but got range [\".concat(min,\" - \").concat(max,\"].\"));case 30:_context45.next=33;break;case 32:throw new Error(\"Unsupported type for toPixels: \".concat($img.dtype,\".\")+\" Please use float32 or int32 tensors.\");case 33:multiplier=$img.dtype==='float32'?255:1;bytes=new Uint8ClampedArray(width*height*4);for(i=0;i<height*width;++i){r=void 0,g=void 0,b=void 0,a=void 0;if(depth===1){r=data[i]*multiplier;g=data[i]*multiplier;b=data[i]*multiplier;a=255;}else if(depth===3){r=data[i*3]*multiplier;g=data[i*3+1]*multiplier;b=data[i*3+2]*multiplier;a=255;}else if(depth===4){r=data[i*4]*multiplier;g=data[i*4+1]*multiplier;b=data[i*4+2]*multiplier;a=data[i*4+3]*multiplier;}j=i*4;bytes[j+0]=Math.round(r);bytes[j+1]=Math.round(g);bytes[j+2]=Math.round(b);bytes[j+3]=Math.round(a);}if(canvas!=null){canvas.width=width;canvas.height=height;ctx=canvas.getContext('2d');imageData=new ImageData(bytes,width,height);ctx.putImageData(imageData,0,0);}if($img!==img){$img.dispose();}return _context45.abrupt(\"return\",bytes);case 39:case\"end\":return _context45.stop();}}},_callee45);}));return _toPixels.apply(this,arguments);}var fromPixels=Object(operation[\"a\"/* op */])({fromPixels_:fromPixels_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js\n/**\r\n * Validate gather nd inputs.\r\n *\r\n * @param tensor The tensor contains the source values.\r\n * @param indices The tensor contains the indices to slice the source.\r\n *\r\n * @returns [resultShape, numUpdates, sliceSize, strides]\r\n */function prepareAndValidate(tensor,indices){if(tensor.rank<1){throw new Error('tf.gatherND() expects the input to be rank 1 or higher,'+\" but the rank was \".concat(tensor.rank,\".\"));}if(indices.rank<1){throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,'+\" but the rank was \".concat(indices.rank,\".\"));}if(indices.dtype!=='int32'){throw new Error('tf.gatherND() expects the indices to be int32 type,'+\" but the dtype was \".concat(indices.dtype,\".\"));}if(indices.shape[indices.rank-1]>tensor.rank){throw new Error('index innermost dimension length must be <= tensor rank; saw: '+\"\".concat(indices.shape[indices.rank-1],\" vs. \").concat(tensor.rank));}if(tensor.size===0){throw new Error('Requested more than 0 entries, but input is empty.'+\" Input shape: \".concat(tensor.shape,\".\"));}var indicesShape=indices.shape;var sliceRank=indicesShape[indicesShape.length-1];// The result shape is\n//   indices.shape[:-1] + params.shape[indices.shape[-1]:]\nvar nResult=1;for(var i=0;i<indicesShape.length-1;++i){nResult*=indicesShape[i];}var inputShape=tensor.shape;var resultShape=indicesShape.slice();resultShape.pop();var sliceSize=1;for(var _i12=sliceRank;_i12<tensor.rank;++_i12){sliceSize*=inputShape[_i12];resultShape.push(inputShape[_i12]);}var strides=[].concat(_toConsumableArray2(Object(util[\"computeStrides\"])(tensor.shape).map(function(stride){return stride/sliceSize;})),[1]).slice(0,sliceRank);return[resultShape,nResult,sliceSize,strides];}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js\n/**\r\n * Check whether updates.shape = indices.shape[:batchDim] +\r\n * shape[sliceDim:]\r\n *\r\n * @param x The input tensor.\r\n */function validateUpdateShape(shape,indices,updates){var sliceDim=indices.rank>1?indices.shape[indices.rank-1]:1;var batchDim=indices.rank>1?indices.rank-1:1;var shapeError='Must have updates.shape = indices.shape[:batchDim] + '+\"shape[sliceDim:], got updates.shape: \".concat(updates.shape)+\", indices.shape: \".concat(indices.shape,\", shape: \").concat(shape)+\", sliceDim: \".concat(sliceDim,\", and batchDim: \").concat(batchDim,\".\");if(updates.rank<batchDim){throw new Error(shapeError+\" update.rank < \".concat(batchDim,\". \"));}if(shape.length<sliceDim+(updates.rank-batchDim)){throw new Error(shapeError+\" Output shape length < \".concat(sliceDim+(updates.rank-batchDim)));}if(updates.rank!==batchDim+shape.length-sliceDim){throw new Error(shapeError+\" update.rank != \".concat(batchDim+shape.length-sliceDim));}for(var d=0;d<batchDim;++d){if(updates.shape[d]!==indices.shape[d]){throw new Error(shapeError+\" updates.shape[\".concat(d,\"] (\").concat(updates.shape[d],\") != indices.shape[\").concat(d,\"] (\").concat(indices.shape[d],\").\"));}}for(var _d=0;_d<updates.rank-batchDim;++_d){if(updates.shape[_d+batchDim]!==shape[_d+sliceDim]){throw new Error(shapeError+\" updates.shape[\".concat(_d+batchDim,\"] (\").concat(updates.shape[_d+batchDim],\") != shape[\").concat(_d+batchDim,\"] (\").concat(shape[_d+batchDim],\")\"));}}}/**\r\n * Validate scatter nd inputs.\r\n *\r\n * @param update The tensor contains the update values.\r\n * @param indices The tensor contains the indices for the update values.\r\n * @param shape The shape of the output tensor.\r\n */function validateInput(updates,indices,shape){if(indices.rank<1){throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,'+\" but the rank was \".concat(indices.rank,\".\"));}if(updates.rank<1){throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,'+\" but the rank was \".concat(updates.rank,\".\"));}if(indices.dtype!=='int32'){throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \".concat(indices.dtype));}if(shape.length<1){throw new Error(\"Output rank must be greater or equal to 1, but got shape: \".concat(shape));}if(shape.length===0){if(indices.size===0){throw new Error(\"Indices specified for empty output. indices shape: \".concat(indices.shape));}if(updates.size===0){throw new Error(\"Updates specified for empty output. updates shape: \".concat(updates.shape));}}validateUpdateShape(shape,indices,updates);}/**\r\n * Calculate the shape information for the output.\r\n *\r\n * @param update The tensor contains the update values.\r\n * @param indices The tensor contains the indices for the update values.\r\n * @param shape The shape of the output tensor.\r\n *\r\n * @returns ScatterShapeInfo\r\n */function calculateShapes(updates,indices,shape){// Calculate the number of dimensions in indices\nvar indicesRank=indices.shape.length;var sliceRank=indicesRank>1?indices.shape[indicesRank-1]:1;// Calculate the number of elements that make up each slice of our updated\n// tensor. This allows us to work with flattened tensors and copy over whole\n// slices at a time.\nvar totalNd=shape.length;var sliceSize=1;for(var i=sliceRank;i<totalNd;++i){sliceSize*=shape[i];}var safeSliceDim=sliceRank<1?1:sliceRank;var numUpdates=Object(util[\"sizeFromShape\"])(indices.shape)/safeSliceDim;var strides=[].concat(_toConsumableArray2(Object(util[\"computeStrides\"])(shape.slice(0,sliceRank))),[1]);var outputSize=Object(util[\"sizeFromShape\"])(shape);return{sliceRank:sliceRank,numUpdates:numUpdates,sliceSize:sliceSize,strides:strides,outputSize:outputSize};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/serialization.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Serializable defines the serialization contract.\r\n *\r\n * TFJS requires serializable classes to return their className when asked\r\n * to avoid issues with minification.\r\n */var Serializable=/*#__PURE__*/function(){function Serializable(){_classCallCheck2(this,Serializable);}_createClass(Serializable,[{key:\"getClassName\",value:/**\r\n     * Return the class name for this class to use in serialization contexts.\r\n     *\r\n     * Generally speaking this will be the same thing that constructor.name\r\n     * would have returned.  However, the class name needs to be robust\r\n     * against minification for serialization/deserialization to work properly.\r\n     *\r\n     * There's also places such as initializers.VarianceScaling, where\r\n     * implementation details between different languages led to different\r\n     * class hierarchies and a non-leaf node is used for serialization purposes.\r\n     */function getClassName(){return this.constructor.className;}/**\r\n     * Creates an instance of T from a ConfigDict.\r\n     *\r\n     * This works for most descendants of serializable.  A few need to\r\n     * provide special handling.\r\n     * @param cls A Constructor for the class to instantiate.\r\n     * @param config The Configuration for the object.\r\n     */ /** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config);}}]);return Serializable;}();/**\r\n * Maps string keys to class constructors.\r\n *\r\n * Used during (de)serialization from the cross-language JSON format, which\r\n * requires the class name in the serialization format matches the class\r\n * names as used in Python, should it exist.\r\n */var SerializationMap=/*#__PURE__*/function(){function SerializationMap(){_classCallCheck2(this,SerializationMap);this.classNameMap={};}/**\r\n     * Returns the singleton instance of the map.\r\n     */_createClass(SerializationMap,null,[{key:\"getMap\",value:function getMap(){if(SerializationMap.instance==null){SerializationMap.instance=new SerializationMap();}return SerializationMap.instance;}/**\r\n     * Registers the class as serializable.\r\n     */},{key:\"register\",value:function register(cls){SerializationMap.getMap().classNameMap[cls.className]=[cls,cls.fromConfig];}}]);return SerializationMap;}();/**\r\n * Register a class with the serialization map of TensorFlow.js.\r\n *\r\n * This is often used for registering custom Layers, so they can be\r\n * serialized and deserialized.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * class MyCustomLayer extends tf.layers.Layer {\r\n *   static className = 'MyCustomLayer';\r\n *\r\n *   constructor(config) {\r\n *     super(config);\r\n *   }\r\n * }\r\n * tf.serialization.registerClass(MyCustomLayer);\r\n * ```\r\n *\r\n * @param cls The class to be registered. It must have a public static member\r\n *   called `className` defined and the value must be a non-empty string.\r\n */ /** @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true} */function registerClass(cls){Object(util[\"assert\"])(cls.className!=null,function(){return\"Class being registered does not have the static className \"+\"property defined.\";});Object(util[\"assert\"])(typeof cls.className==='string',function(){return\"className is required to be a string, but got type \"+_typeof2(cls.className);});Object(util[\"assert\"])(cls.className.length>0,function(){return\"Class being registered has an empty-string as its className, \"+\"which is disallowed.\";});SerializationMap.register(cls);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/test_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var TEST_EPSILON_FLOAT32=1e-3;var TEST_EPSILON_FLOAT16=1e-1;function expectArraysClose(actual,expected,epsilon){if(epsilon==null){epsilon=testEpsilon();}return expectArraysPredicate(actual,expected,function(a,b){return areClose(a,b,epsilon);});}function testEpsilon(){return engine[\"a\"/* ENGINE */].backend.floatPrecision()===32?TEST_EPSILON_FLOAT32:TEST_EPSILON_FLOAT16;}function expectArraysPredicate(actual,expected,predicate){var checkClassType=true;if(Object(util[\"isTypedArray\"])(actual)||Object(util[\"isTypedArray\"])(expected)){checkClassType=false;}if(Object(util[\"isTypedArray\"])(actual)&&Object(util[\"isTypedArray\"])(expected)){checkClassType=true;}if(checkClassType){var aType=actual.constructor.name;var bType=expected.constructor.name;if(aType!==bType){throw new Error(\"Arrays are of different type. Actual: \".concat(aType,\". \")+\"Expected: \".concat(bType));}}if(Array.isArray(actual)&&Array.isArray(expected)){var actualShape=Object(tensor_util_env[\"c\"/* inferShape */])(actual);var expectedShape=Object(tensor_util_env[\"c\"/* inferShape */])(expected);if(!Object(util[\"arraysEqual\"])(actualShape,expectedShape)){throw new Error(\"Arrays have different shapes. \"+\"Actual: [\".concat(actualShape,\"]. Expected: [\").concat(expectedShape,\"]\"));}}var actualFlat=Object(util[\"isTypedArray\"])(actual)?actual:Object(util[\"flatten\"])(actual);var expectedFlat=Object(util[\"isTypedArray\"])(expected)?expected:Object(util[\"flatten\"])(expected);if(actualFlat.length!==expectedFlat.length){throw new Error(\"Arrays have different lengths actual: \".concat(actualFlat.length,\" vs \")+\"expected: \".concat(expectedFlat.length,\".\\n\")+\"Actual:   \".concat(actualFlat,\".\\n\")+\"Expected: \".concat(expectedFlat,\".\"));}for(var i=0;i<expectedFlat.length;++i){var a=actualFlat[i];var e=expectedFlat[i];if(!predicate(a,e)){throw new Error(\"Arrays differ: actual[\".concat(i,\"] = \").concat(a,\", expected[\").concat(i,\"] = \").concat(e,\".\\n\")+\"Actual:   \".concat(actualFlat,\".\\n\")+\"Expected: \".concat(expectedFlat,\".\"));}}}function expectPromiseToFail(fn,done){fn().then(function(){return done.fail();},function(){return done();});}function expectArraysEqual(actual,expected){var exp=typeof expected==='string'||typeof expected==='number'||typeof expected==='boolean'?[expected]:expected;if(Object(util[\"isString\"])(actual)||Object(util[\"isString\"])(actual[0])||Object(util[\"isString\"])(expected)||Object(util[\"isString\"])(expected[0])){// tslint:disable-next-line: triple-equals\nreturn expectArraysPredicate(actual,exp,function(a,b){return a==b;});}return expectArraysPredicate(actual,expected,function(a,b){return areClose(a,b,0);});}function expectNumbersClose(a,e,epsilon){if(epsilon==null){epsilon=testEpsilon();}if(!areClose(a,e,epsilon)){throw new Error(\"Numbers differ: actual === \".concat(a,\", expected === \").concat(e));}}function areClose(a,e,epsilon){if(!isFinite(a)&&!isFinite(e)){return true;}if(isNaN(a)||isNaN(e)||Math.abs(a-e)>epsilon){return false;}return true;}function expectValuesInRange(actual,low,high){for(var i=0;i<actual.length;i++){if(actual[i]<low||actual[i]>high){throw new Error(\"Value out of range:\".concat(actual[i],\" low: \").concat(low,\", high: \").concat(high));}}}function expectArrayBuffersEqual(actual,expected){// Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n// a Float32Array solves this issue.\nexpect(new Float32Array(actual)).toEqual(new Float32Array(expected));}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nvar version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/globals.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Enables production mode which disables correctness checks in favor of\r\n * performance.\r\n */ /** @doc {heading: 'Environment'} */function enableProdMode(){Object(environment[\"c\"/* env */])().set('PROD',true);}/**\r\n * Enables debug mode which will log information about all executed kernels:\r\n * the elapsed time of the kernel execution, as well as the rank, shape, and\r\n * size of the output tensor.\r\n *\r\n * Debug mode will significantly slow down your application as it will\r\n * download the result of every operation to the CPU. This should not be used in\r\n * production. Debug mode does not affect the timing information of the kernel\r\n * execution as we do not measure download time in the kernel execution time.\r\n *\r\n * See also: `tf.profile`, `tf.memory`.\r\n */ /** @doc {heading: 'Environment'} */function enableDebugMode(){Object(environment[\"c\"/* env */])().set('DEBUG',true);}/** Globally disables deprecation warnings */function disableDeprecationWarnings(){Object(environment[\"c\"/* env */])().set('DEPRECATION_WARNINGS_ENABLED',false);console.warn(\"TensorFlow.js deprecation warnings have been disabled.\");}/** Warn users about deprecated functionality. */function deprecationWarn(msg){if(Object(environment[\"c\"/* env */])().getBool('DEPRECATION_WARNINGS_ENABLED')){console.warn(msg+' You can disable deprecation warnings with '+'tf.disableDeprecationWarnings().');}}Object(dist_tensor[\"d\"/* setDeprecationWarningFn */])(deprecationWarn);/**\r\n * Dispose all variables kept in backend engine.\r\n */ /** @doc {heading: 'Environment'} */function disposeVariables(){engine[\"a\"/* ENGINE */].disposeVariables();}/**\r\n * It returns the global engine that keeps track of all tensors and backends.\r\n */ /** @doc {heading: 'Environment'} */function globals_engine(){return engine[\"a\"/* ENGINE */];}/**\r\n * Returns memory info at the current time in the program. The result is an\r\n * object with the following properties:\r\n *\r\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\r\n * - `numTensors`: Number of unique tensors allocated.\r\n * - `numDataBuffers`: Number of unique data buffers allocated\r\n *   (undisposed) at this time, which is ≤ the number of tensors\r\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\r\n *   data buffer with `a`).\r\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\r\n *    `unreliable` is true.\r\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\r\n *    `unreliable` is true.\r\n *\r\n * WebGL Properties:\r\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\r\n *     this time.\r\n */ /** @doc {heading: 'Performance', subheading: 'Memory'} */function memory(){return engine[\"a\"/* ENGINE */].memory();}/**\r\n * Executes the provided function `f()` and returns a promise that resolves\r\n * with information about the function's memory use:\r\n * - `newBytes`: the number of new bytes allocated\r\n * - `newTensors`: the number of new tensors created\r\n * - `peakBytes`: the peak number of bytes allocated\r\n * - `kernels`: an array of objects for each kernel involved that reports\r\n * their input and output shapes, number of bytes used, and number of new\r\n * tensors created.\r\n *\r\n * ```js\r\n * const profile = await tf.profile(() => {\r\n *   const x = tf.tensor1d([1, 2, 3]);\r\n *   let x2 = x.square();\r\n *   x2.dispose();\r\n *   x2 = x.square();\r\n *   x2.dispose();\r\n *   return x;\r\n * });\r\n *\r\n * console.log(`newBytes: ${profile.newBytes}`);\r\n * console.log(`newTensors: ${profile.newTensors}`);\r\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\r\n * k.totalBytesSnapshot)}`);\r\n * ```\r\n *\r\n */ /** @doc {heading: 'Performance', subheading: 'Profile'} */function profile(f){return engine[\"a\"/* ENGINE */].profile(f);}/**\r\n * Executes the provided function `fn` and after it is executed, cleans up all\r\n * intermediate tensors allocated by `fn` except those returned by `fn`.\r\n * `fn` must not return a Promise (async functions not allowed). The returned\r\n * result can be a complex object.\r\n *\r\n * Using this method helps avoid memory leaks. In general, wrap calls to\r\n * operations in `tf.tidy` for automatic memory cleanup.\r\n *\r\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\r\n * dispose variables, please use `tf.disposeVariables` or call dispose()\r\n * directly on variables.\r\n *\r\n * ```js\r\n * // y = 2 ^ 2 + 1\r\n * const y = tf.tidy(() => {\r\n *   // a, b, and one will be cleaned up when the tidy ends.\r\n *   const one = tf.scalar(1);\r\n *   const a = tf.scalar(2);\r\n *   const b = a.square();\r\n *\r\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\r\n *\r\n *   // The value returned inside the tidy function will return\r\n *   // through the tidy, in this case to the variable y.\r\n *   return b.add(one);\r\n * });\r\n *\r\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\r\n * y.print();\r\n * ```\r\n *\r\n * @param nameOrFn The name of the closure, or the function to execute.\r\n *     If a name is provided, the 2nd argument should be the function.\r\n *     If debug mode is on, the timing and the memory usage of the function\r\n *     will be tracked and displayed on the console using the provided name.\r\n * @param fn The function to execute.\r\n */ /** @doc {heading: 'Performance', subheading: 'Memory'} */function tidy(nameOrFn,fn){return engine[\"a\"/* ENGINE */].tidy(nameOrFn,fn);}/**\r\n * Disposes any `tf.Tensor`s found within the provided object.\r\n *\r\n * @param container an object that may be a `tf.Tensor` or may directly\r\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\r\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\r\n *     happens. In general it is safe to pass any object here, except that\r\n *     `Promise`s are not supported.\r\n */ /** @doc {heading: 'Performance', subheading: 'Memory'} */function _dispose(container){var tensors=Object(tensor_util[\"getTensorsInContainer\"])(container);tensors.forEach(function(tensor){return tensor.dispose();});}/**\r\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\r\n * automatically.\r\n *\r\n * ```js\r\n * let b;\r\n * const y = tf.tidy(() => {\r\n *   const one = tf.scalar(1);\r\n *   const a = tf.scalar(2);\r\n *\r\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\r\n *   // when the tidy ends.\r\n *   b = tf.keep(a.square());\r\n *\r\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\r\n *\r\n *   // The value returned inside the tidy function will return\r\n *   // through the tidy, in this case to the variable y.\r\n *   return b.add(one);\r\n * });\r\n *\r\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\r\n * console.log('y:');\r\n * y.print();\r\n * console.log('b:');\r\n * b.print();\r\n * ```\r\n *\r\n * @param result The tensor to keep from being disposed.\r\n */ /** @doc {heading: 'Performance', subheading: 'Memory'} */function keep(result){return engine[\"a\"/* ENGINE */].keep(result);}/**\r\n * Executes `f()` and returns a promise that resolves with timing\r\n * information.\r\n *\r\n * The result is an object with the following properties:\r\n *\r\n * - `wallMs`: Wall execution time.\r\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\r\n * WebGL backend and the query timer extension is not available, this will\r\n * return an error object.\r\n * - On `WebGL` The following additional properties exist:\r\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\r\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\r\n *\r\n * ```js\r\n * const x = tf.randomNormal([20, 20]);\r\n * const time = await tf.time(() => x.matMul(x));\r\n *\r\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\r\n * ```\r\n *\r\n * @param f The function to execute and time.\r\n */ /** @doc {heading: 'Performance', subheading: 'Timing'} */function time(f){return engine[\"a\"/* ENGINE */].time(f);}/**\r\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\r\n * executing operations on those tensors. Returns a promise that resolves\r\n * to a boolean if the backend initialization was successful.\r\n *\r\n * Note this disposes the current backend, if any, as well as any tensors\r\n * associated with it. A new backend is initialized, even if it is of the\r\n * same type as the previous one.\r\n *\r\n * @param backendName The name of the backend. Currently supports\r\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\r\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\r\n */ /** @doc {heading: 'Backends'} */function setBackend(backendName){return engine[\"a\"/* ENGINE */].setBackend(backendName);}/**\r\n * Returns a promise that resolves when the currently selected backend (or the\r\n * highest priority one) has initialized. Await this promise when you are using\r\n * a backend that has async initialization.\r\n */ /** @doc {heading: 'Backends'} */function ready(){return engine[\"a\"/* ENGINE */].ready();}/**\r\n * Returns the current backend name (cpu, webgl, etc). The backend is\r\n * responsible for creating tensors and executing operations on those tensors.\r\n */ /** @doc {heading: 'Backends'} */function getBackend(){return engine[\"a\"/* ENGINE */].backendName;}/**\r\n * Removes a backend and the registered factory.\r\n */ /** @doc {heading: 'Backends'} */function removeBackend(name){engine[\"a\"/* ENGINE */].removeBackend(name);}/**\r\n * Finds the backend registered under the provided name. Returns null if the\r\n * name is not in the registry, or the registration hasn't finished yet.\r\n */function findBackend(name){return engine[\"a\"/* ENGINE */].findBackend(name);}/**\r\n * Finds the backend factory registered under the provided name. Returns a\r\n * function that produces a new backend when called. Returns null if the name\r\n * is not in the registry.\r\n */function findBackendFactory(name){return engine[\"a\"/* ENGINE */].findBackendFactory(name);}/**\r\n * Registers a global backend. The registration should happen when importing\r\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\r\n * modular builds (e.g. custom tfjs bundle with only webgl support).\r\n *\r\n * @param factory The backend factory function. When called, it should\r\n * return a backend instance, or a promise of an instance.\r\n * @param priority The priority of the backend (higher = more important).\r\n *     In case multiple backends are registered, the priority is used to find\r\n *     the best backend. Defaults to 1.\r\n * @return False if there is already a registered backend under this name, true\r\n *     if not.\r\n */ /** @doc {heading: 'Backends'} */function registerBackend(name,factory){var priority=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;return engine[\"a\"/* ENGINE */].registerBackend(name,factory,priority);}/**\r\n * Gets the current backend. If no backends have been initialized, this will\r\n * attempt to initialize the best backend. Will throw an error if the highest\r\n * priority backend has async initialization, in which case, you should call\r\n * 'await tf.ready()' before running other code.\r\n */ /** @doc {heading: 'Backends'} */function globals_backend(){return engine[\"a\"/* ENGINE */].backend;}/**\r\n * Sets the global platform.\r\n *\r\n * @param platformName The name of this platform.\r\n * @param platform A platform implementation.\r\n */function setPlatform(platformName,platform){Object(environment[\"c\"/* env */])().setPlatform(platformName,platform);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n *\r\n * tf.addN([a, b, c]).print();\r\n * ```\r\n * @param tensors A list of tensors with the same shape and dtype.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function addN_(tensors){util[\"assert\"](Array.isArray(tensors),function(){return'The argument passed to tf.addN() must be a list of tensors';});util[\"assert\"](tensors.length>=1,function(){return\"Must pass at least one tensor to tf.addN(), but got \"+\"\".concat(tensors.length);});var $tensors=tensors.map(function(t,i){return Object(tensor_util_env[\"a\"/* convertToTensor */])(t,\"tensors\".concat(i),'addN');});var firstTensor=$tensors[0];$tensors.forEach(function(t){if(t.dtype!==firstTensor.dtype){throw new Error('All tensors passed to tf.addN() must have the same dtype');}});$tensors.forEach(function(t){if(!util[\"arraysEqual\"](t.shape,firstTensor.shape)){throw new Error('All tensors passed to tf.addN() must have the same shape');}});var forward=function forward(backend,save){var res=backend.addN($tensors);save($tensors);return res;};var inputs=$tensors;return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"b\"/* AddN */]);}var addN=Object(operation[\"a\"/* op */])({addN_:addN_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\r\n * Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\r\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\r\n *\r\n * tf.atan2(a, b).print()\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same dtype as `a`.\r\n *\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function atan2_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','atan2');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','atan2');var _Object23=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object24=_slicedToArray(_Object23,2);$a=_Object24[0];$b=_Object24[1];var forward=function forward(backend,save){var res=backend.atan2($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"c\"/* Atan2 */]);}var atan2=Object(operation[\"a\"/* op */])({atan2_:atan2_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the 2D average pooling of an image.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */function avgPool_(x,filterSize,strides,pad,dimRoundingMode){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','avgPool','float32');var dilations=1;util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in avgPool: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in avgPool: x must be rank 4 but got rank \".concat(x4D.rank,\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in avgPool: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){var convInfo=computePool2DInfo(x4D.shape,filterSize,strides,1/* dilations */,pad,dimRoundingMode);save([x4D]);if(convInfo.filterWidth===1&&convInfo.filterHeight===1&&util[\"arraysEqual\"](convInfo.inShape,convInfo.outShape)){return x4D.clone();}return backend.avgPool(x4D,convInfo);};var inputs={x:x4D};var attrs={filterSize:filterSize,strides:strides,pad:pad,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"d\"/* AvgPool */],attrs);res=cast(res,$x.dtype);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}var avgPool=Object(operation[\"a\"/* op */])({avgPool_:avgPool_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the 3D average pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates:\r\n *     `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function avgPool3d_(x,filterSize,strides,pad,dimRoundingMode){var dataFormat=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'NDHWC';var dilations=arguments.length>6?arguments[6]:undefined;if(dilations==null){dilations=[1,1,1];}else{deprecationWarn('dilations is deprecated, this field will be gone in '+'v3.0.0.');}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','avgPool3d','float32');var x5D=$x;var reshapedTo5D=false;if($x.rank===4){reshapedTo5D=true;x5D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2],$x.shape[3]]);}util[\"assert\"](x5D.rank===5,function(){return\"Error in avgPool3d: x must be rank 5 but got rank \".concat(x5D.rank,\".\");});util[\"assert\"](dataFormat==='NDHWC',function(){return\"Error in avgPool3d: Only NDHWC is currently supported, \"+\"but got dataFormat of \".concat(dataFormat);});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in avgPool3d: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in avgPool3d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){if(dilations==null){dilations=[1,1,1];}var convInfo=computePool3DInfo(x5D.shape,filterSize,strides,dilations,pad,dimRoundingMode,dataFormat);save([x5D]);return backend.avgPool3d(x5D,convInfo);};var inputs={x:x5D};var attrs={filterSize:filterSize,strides:strides,pad:pad,dimRoundingMode:dimRoundingMode,dataFormat:dataFormat,dilations:dilations};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"e\"/* AvgPool3D */],attrs);res=cast(res,x5D.dtype);if(reshapedTo5D){return res.as4D(res.shape[1],res.shape[2],res.shape[3],res.shape[4]);}return res;}var avgPool3d=Object(operation[\"a\"/* op */])({avgPool3d_:avgPool3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js\nfunction xAs4D(x){var x4D;if(x.rank===0||x.rank===1){x4D=x.as4D(1,1,1,x.size);}else if(x.rank===2){x4D=x.as4D(1,1,x.shape[0],x.shape[1]);}else if(x.rank===3){x4D=x.as4D(1,x.shape[0],x.shape[1],x.shape[2]);}else{x4D=x;}return x4D;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Batch normalization.\r\n *\r\n * As described in\r\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\r\n *\r\n * Mean, variance, scale, and offset can be of two shapes:\r\n *   - The same shape as the input.\r\n *   - In the common case, the depth dimension is the last dimension of x, so\r\n *     the values would be an `tf.Tensor1D` of shape [depth].\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that parameters passed are of given rank\r\n *   - `tf.batchNorm2d`\r\n *   - `tf.batchNorm3d`\r\n *   - `tf.batchNorm4d`\r\n *\r\n * @param x The input Tensor.\r\n * @param mean A mean Tensor.\r\n * @param variance A variance Tensor.\r\n * @param offset An offset Tensor.\r\n * @param scale A scale Tensor.\r\n * @param varianceEpsilon A small float number to avoid dividing by 0.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function batchNorm_(x,mean,variance,offset,scale,varianceEpsilon){if(varianceEpsilon==null){varianceEpsilon=0.001;}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','batchNorm');var $mean=Object(tensor_util_env[\"a\"/* convertToTensor */])(mean,'mean','batchNorm');var $variance=Object(tensor_util_env[\"a\"/* convertToTensor */])(variance,'variance','batchNorm');var $scale;if(scale!=null){$scale=Object(tensor_util_env[\"a\"/* convertToTensor */])(scale,'scale','batchNorm');}var $offset;if(offset!=null){$offset=Object(tensor_util_env[\"a\"/* convertToTensor */])(offset,'offset','batchNorm');}util[\"assert\"]($mean.rank===$variance.rank,function(){return'Batch normalization gradient requires mean and variance to have '+'equal ranks.';});util[\"assert\"]($offset==null||$mean.rank===$offset.rank,function(){return'Batch normalization gradient requires mean and offset to have '+'equal ranks.';});util[\"assert\"]($scale==null||$mean.rank===$scale.rank,function(){return'Batch normalization gradient requires mean and scale to have '+'equal ranks.';});var x4D=xAs4D($x);var forward=function forward(backend,save){save([x4D,$mean,$variance,$scale]);return backend.batchNorm(x4D,as1DOr4D($mean),as1DOr4D($variance),as1DOr4D($offset),as1DOr4D($scale),varianceEpsilon);};var inputs={x:x4D,scale:$scale,offset:$offset,mean:$mean,variance:$variance};var attrs={varianceEpsilon:varianceEpsilon};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"F\"/* FusedBatchNorm */],attrs);return reshape(res,$x.shape);}function as1DOr4D(x){if(x==null){return null;}if(x.rank===0){return x.as1D();}else if(x.rank===1){return x;}else if(x.rank===2){return x.as4D(1,1,x.shape[0],x.shape[1]);}else if(x.rank===3){return x.as4D(1,x.shape[0],x.shape[1],x.shape[2]);}return x;}var batchNorm=Object(operation[\"a\"/* op */])({batchNorm_:batchNorm_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js\n/**\r\n * Batch normalization, strictly for 2D. For the more relaxed version, see\r\n * `tf.batchNorm`.\r\n *\r\n * @param x The input Tensor.\r\n * @param mean A mean Tensor.\r\n * @param variance A variance Tensor.\r\n * @param offset An offset Tensor.\r\n * @param scale A scale Tensor.\r\n * @param varianceEpsilon A small float number to avoid dividing by 0.\r\n */function batchNorm2d_(x,mean,variance,offset,scale,varianceEpsilon){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','batchNorm');var $mean=Object(tensor_util_env[\"a\"/* convertToTensor */])(mean,'mean','batchNorm');var $variance=Object(tensor_util_env[\"a\"/* convertToTensor */])(variance,'variance','batchNorm');var $scale;if(scale!=null){$scale=Object(tensor_util_env[\"a\"/* convertToTensor */])(scale,'scale','batchNorm');}var $offset;if(offset!=null){$offset=Object(tensor_util_env[\"a\"/* convertToTensor */])(offset,'offset','batchNorm');}util[\"assert\"]($x.rank===2,function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+\"\".concat($x.rank,\".\");});util[\"assert\"]($mean.rank===2||$mean.rank===1,function(){return\"Error in batchNorm2D: mean must be rank 2 or rank 1 but \"+\"got rank \".concat($mean.rank,\".\");});util[\"assert\"]($variance.rank===2||$variance.rank===1,function(){return\"Error in batchNorm2D: variance must be rank 2 or rank 1 \"+\"but got rank \".concat($variance.rank,\".\");});if($scale!=null){util[\"assert\"]($scale.rank===2||$scale.rank===1,function(){return\"Error in batchNorm2D: scale must be rank 2 or rank 1 \"+\"but got rank \".concat($scale.rank,\".\");});}if($offset!=null){util[\"assert\"]($offset.rank===2||$offset.rank===1,function(){return\"Error in batchNorm2D: offset must be rank 2 or rank 1 \"+\"but got rank \".concat($offset.rank,\".\");});}return batchNorm($x,$mean,$variance,$offset,$scale,varianceEpsilon);}var batchNorm2d=Object(operation[\"a\"/* op */])({batchNorm2d_:batchNorm2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js\n/**\r\n * Batch normalization, strictly for 3D. For the more relaxed version, see\r\n * `tf.batchNorm`.\r\n *\r\n * @param x The input Tensor.\r\n * @param mean A mean Tensor.\r\n * @param variance A variance Tensor.\r\n * @param offset An offset Tensor.\r\n * @param scale A scale Tensor.\r\n * @param varianceEpsilon A small float number to avoid dividing by 0.\r\n */function batchNorm3d_(x,mean,variance,offset,scale,varianceEpsilon){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','batchNorm');var $mean=Object(tensor_util_env[\"a\"/* convertToTensor */])(mean,'mean','batchNorm');var $variance=Object(tensor_util_env[\"a\"/* convertToTensor */])(variance,'variance','batchNorm');var $scale;if(scale!=null){$scale=Object(tensor_util_env[\"a\"/* convertToTensor */])(scale,'scale','batchNorm');}var $offset;if(offset!=null){$offset=Object(tensor_util_env[\"a\"/* convertToTensor */])(offset,'offset','batchNorm');}util[\"assert\"]($x.rank===3,function(){return\"Error in batchNorm3D: x must be rank 3 but got rank \"+\"\".concat($x.rank,\".\");});util[\"assert\"]($mean.rank===3||$mean.rank===1,function(){return\"Error in batchNorm3D: mean must be rank 3 or rank 1 but \"+\"got rank \".concat($mean.rank,\".\");});util[\"assert\"]($variance.rank===3||$variance.rank===1,function(){return\"Error in batchNorm3D: variance must be rank 3 or rank 1 \"+\"but got rank \".concat($variance.rank,\".\");});if($scale!=null){util[\"assert\"]($scale.rank===3||$scale.rank===1,function(){return\"Error in batchNorm3D: scale must be rank 3 or rank 1 \"+\"but got rank \".concat($scale.rank,\".\");});}if($offset!=null){util[\"assert\"]($offset.rank===3||$offset.rank===1,function(){return\"Error in batchNorm3D: offset must be rank 3 or rank 1 \"+\"but got rank \".concat($offset.rank,\".\");});}return batchNorm($x,$mean,$variance,$offset,$scale,varianceEpsilon);}var batchNorm3d=Object(operation[\"a\"/* op */])({batchNorm3d_:batchNorm3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js\n/**\r\n * Batch normalization, strictly for 4D. For the more relaxed version, see\r\n * `tf.batchNorm`.\r\n *\r\n * @param x The input Tensor.\r\n * @param mean A mean Tensor.\r\n * @param variance A variance Tensor.\r\n * @param offset An offset Tensor.\r\n * @param scale A scale Tensor.\r\n * @param varianceEpsilon A small float number to avoid dividing by 0.\r\n */function batchNorm4d_(x,mean,variance,offset,scale,varianceEpsilon){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','batchNorm');var $mean=Object(tensor_util_env[\"a\"/* convertToTensor */])(mean,'mean','batchNorm');var $variance=Object(tensor_util_env[\"a\"/* convertToTensor */])(variance,'variance','batchNorm');var $scale;if(scale!=null){$scale=Object(tensor_util_env[\"a\"/* convertToTensor */])(scale,'scale','batchNorm');}var $offset;if(offset!=null){$offset=Object(tensor_util_env[\"a\"/* convertToTensor */])(offset,'offset','batchNorm');}util[\"assert\"]($x.rank===4,function(){return\"Error in batchNorm4D: x must be rank 4 but got rank \"+\"\".concat($x.rank,\".\");});util[\"assert\"]($mean.rank===4||$mean.rank===1,function(){return\"Error in batchNorm4D: mean must be rank 4 or rank 1 but \"+\"got rank \".concat($mean.rank,\".\");});util[\"assert\"]($variance.rank===4||$variance.rank===1,function(){return\"Error in batchNorm4D: variance must be rank 4 or rank 1 \"+\"but got rank \".concat($variance.rank,\".\");});if($scale!=null){util[\"assert\"]($scale.rank===4||$scale.rank===1,function(){return\"Error in batchNorm4D: scale must be rank 4 or rank 1 \"+\"but got rank \".concat($scale.rank,\".\");});}if($offset!=null){util[\"assert\"]($offset.rank===4||$offset.rank===1,function(){return\"Error in batchNorm4D: offset must be rank 4 or rank 1 \"+\"but got rank \".concat($offset.rank,\".\");});}return batchNorm($x,$mean,$variance,$offset,$scale,varianceEpsilon);}var batchNorm4d=Object(operation[\"a\"/* op */])({batchNorm4d_:batchNorm4d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a new tensor with the same values and shape as the specified\r\n * tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2]);\r\n *\r\n * x.clone().print();\r\n * ```\r\n *\r\n * @param x The tensor to clone.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function clone_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','clone',null);var forward=function forward(){return engine[\"a\"/* ENGINE */].makeTensorFromDataId($x.dataId,$x.shape,$x.dtype);};// Note this op is called tf.identity in python. Hence the kernel name used\n// here.\nreturn engine[\"a\"/* ENGINE */].runKernelFunc(forward,{x:$x},null/* grad */,kernel_names[\"J\"/* Identity */]);}var clone=Object(operation[\"a\"/* op */])({clone_:clone_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Broadcast an array to a compatible shape NumPy-style.\r\n *\r\n * The tensor's shape is compared to the broadcast shape from end to beginning.\r\n * Ones are prepended to the tensor's shape until is has the same length as\r\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\r\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\r\n * the input tensor is tiled N times along that axis (using tf.tile).\r\n *\r\n * @param input The tensor that is to be broadcasted.\r\n * @param shape The input is to be broadcast to this shape.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function broadcastTo_(x,shape){var input=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'broadcastTo','x');var xShape=input.shape;if(shape.some(function(d){return!(d>0)||d%1!==0;})){throw new Error(\"broadcastTo(): Invalid broadcast shape [\".concat(shape,\"].\"));}if(shape.length<input.rank){throw new Error(\"broadcastTo(): shape.length=\".concat(shape.length,\" < input.rank=\").concat(input.rank,\".\"));}if(shape.length>input.rank){var newShape=input.shape.slice();while(newShape.length<shape.length){newShape.unshift(1);}input=reshape(input,newShape);}var inputShape=input.shape;var reps=Array.from(shape);for(var i=shape.length-1;i>=0;i--){if(inputShape[i]===shape[i]){reps[i]=1;}else if(input.shape[i]!==1){throw new Error(\"broadcastTo(): [\".concat(xShape,\"] cannot be broadcast to [\").concat(shape,\"].\"));}}var axes=reps.map(function(n,i){return n>1?i:-1;}).filter(function(i){return i>=0;});if(axes.length===0){return clone(input);}var forward=function forward(backend){return backend.tile(input,reps);};var inputs={x:input};var attrs={shape:shape,inputShape:inputShape};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"j\"/* BroadcastTo */],attrs);}var broadcastTo=Object(operation[\"a\"/* op */])({broadcastTo_:broadcastTo_});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js\nvar complex=__webpack_require__(18);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js\n/**\r\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\r\n *\r\n * For example, if:\r\n * A: shape(3) = |r1, g1, b1|\r\n * B: shape(2) = |r2, g2|\r\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\r\n *\r\n * @param tensors A list of`tf.Tensor`s to concatenate.\r\n * @return The concatenated array.\r\n */function concat1d_(tensors){return concat(tensors,0/* axis */);}var concat1d=Object(operation[\"a\"/* op */])({concat1d_:concat1d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js\n/**\r\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\r\n *\r\n * For example, if:\r\n * A: shape(2, 3) = | r1, g1, b1 |\r\n *                  | r2, g2, b2 |\r\n *\r\n * B: shape(2, 3) = | r3, g3, b3 |\r\n *                  | r4, g4, b4 |\r\n *\r\n * C = tf.concat2d([A, B], axis)\r\n *\r\n * if axis = 0:\r\n * C: shape(4, 3) = | r1, g1, b1 |\r\n *                  | r2, g2, b2 |\r\n *                  | r3, g3, b3 |\r\n *                  | r4, g4, b4 |\r\n *\r\n * if axis = 1:\r\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\r\n *                   | r2, g2, b2, r4, g4, b4 |\r\n *\r\n *\r\n * @param tensors A list of `tf.Tensor`s to concatenate.\r\n * @param axis The axis to concatenate along.\r\n * @return The concatenated array.\r\n */function concat2d_(tensors,axis){return concat(tensors,axis);}var concat2d=Object(operation[\"a\"/* op */])({concat2d_:concat2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js\n/**\r\n * Concatenates a list of `tf.Tensor3D`s along an axis.\r\n * See `concat` for details.\r\n *\r\n * For example, if:\r\n * A: shape(2, 1, 3) = | r1, g1, b1 |\r\n *                     | r2, g2, b2 |\r\n *\r\n * B: shape(2, 1, 3) = | r3, g3, b3 |\r\n *                     | r4, g4, b4 |\r\n *\r\n * C = tf.concat3d([A, B], axis)\r\n *\r\n * if axis = 0:\r\n * C: shape(4, 1, 3) = | r1, g1, b1 |\r\n *                     | r2, g2, b2 |\r\n *                     | r3, g3, b3 |\r\n *                     | r4, g4, b4 |\r\n *\r\n * if axis = 1:\r\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\r\n *                     | r2, g2, b2, r4, g4, b4 |\r\n *\r\n * if axis = 2:\r\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\r\n *                      | r2, g2, b2, r4, g4, b4 |\r\n *\r\n * @param tensors A list of`tf.Tensor`s to concatenate.\r\n * @param axis The axis to concate along.\r\n * @return The concatenated array.\r\n */function concat3d_(tensors,axis){return concat(tensors,axis);}var concat3d=Object(operation[\"a\"/* op */])({concat3d_:concat3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js\n/**\r\n * Concatenates a list of `tf.Tensor4D`s along an axis.\r\n * See `concat` for details.\r\n *\r\n * @param tensors A list of `tf.Tensor`s to concatenate.\r\n * @param axis The axis to concate along.\r\n * @return The concatenated array.\r\n */function concat4d_(tensors,axis){return concat(tensors,axis);}var concat4d=Object(operation[\"a\"/* op */])({concat4d_:concat4d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js\n/**\r\n * Computes a 1D convolution over the input x.\r\n *\r\n * @param x The input tensor, of rank 3 or rank 2, of shape\r\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\r\n * @param filter The filter, rank 3, of shape\r\n *     `[filterWidth, inDepth, outDepth]`.\r\n * @param stride The number of entries by which the filter is moved right at\r\n *     each step.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\r\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\r\n *     \"NWC\" is currently supported.\r\n * @param dilation The dilation rate in which we sample input values in\r\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\r\n *     stride must be `1`.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function conv1d_(x,filter,stride,pad){var dataFormat=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'NWC';var dilation=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1;var dimRoundingMode=arguments.length>6?arguments[6]:undefined;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv1d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv1d');var x3D=$x;var reshapedTo3D=false;if($x.rank===2){reshapedTo3D=true;x3D=reshape($x,[1,$x.shape[0],$x.shape[1]]);}util[\"assert\"](x3D.rank===3,function(){return\"Error in conv1d: input must be rank 3, but got rank \".concat(x3D.rank,\".\");});util[\"assert\"]($filter.rank===3,function(){return\"Error in conv1d: filter must be rank 3, but got rank \"+\"\".concat($filter.rank,\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in conv1d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}util[\"assert\"](x3D.shape[2]===$filter.shape[1],function(){return\"Error in conv1d: depth of input (\".concat(x3D.shape[2],\") must match \")+\"input depth for filter \".concat($filter.shape[1],\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(stride,dilation),function(){return'Error in conv1D: Either stride or dilation must be 1. '+\"Got stride \".concat(stride,\" and dilation '\").concat(dilation,\"'\");});util[\"assert\"](dataFormat==='NWC',function(){return\"Error in conv1d: got dataFormat of \".concat(dataFormat,\" but only NWC is currently supported.\");});var filter4D=reshape($filter,[1,$filter.shape[0],$filter.shape[1],$filter.shape[2]]);var input4D=reshape(x3D,[x3D.shape[0],1,x3D.shape[1],x3D.shape[2]]);var strides=[1,stride];var dilations=[1,dilation];var conv2dDataFormat='NHWC';var res=conv2d(input4D,filter4D,strides,pad,conv2dDataFormat,dilations,dimRoundingMode);if(reshapedTo3D){return reshape(res,[res.shape[2],res.shape[3]]);}return reshape(res,[res.shape[0],res.shape[2],res.shape[3]]);}var conv1d=Object(operation[\"a\"/* op */])({conv1d_:conv1d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js\n/**\r\n * Computes the transposed 2D convolution of an image, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 4 or rank 3, of shape\r\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 4 or rank 3:\r\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *    dimensions if pad is a number. If none is provided, it will not round\r\n *    and error if the output is of fractional size.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function conv2dTranspose_(x,filter,outputShape,strides,pad,dimRoundingMode){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv2dTranspose');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv2dTranspose');return conv2DBackpropInput(outputShape,$x,$filter,strides,pad,'NHWC',dimRoundingMode);}var conv2dTranspose=Object(operation[\"a\"/* op */])({conv2dTranspose_:conv2dTranspose_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes a 3D convolution over the input x.\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4, of shape\r\n *     `[batch, depth, height, width, channels]`. If rank 4,\r\n * batch of 1 is assumed.\r\n * @param filter The filter, rank 5, of shape\r\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\r\n *      inChannels must match between input and filter.\r\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\r\n *     dilationWidth]` in which we sample input values across the height\r\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\r\n *     If `dilations` is a single number, then\r\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\r\n *     than 1, then all values of `strides` must be 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function conv3d_(x,filter,strides,pad){var dataFormat=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'NDHWC';var dilations=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[1,1,1];var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv3d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv3d');var x5D=$x;var reshapedTo5D=false;if($x.rank===4){reshapedTo5D=true;x5D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2],$x.shape[3]]);}util[\"assert\"](x5D.rank===5,function(){return\"Error in conv3d: input must be rank 5, but got rank \".concat(x5D.rank,\".\");});util[\"assert\"]($filter.rank===5,function(){return\"Error in conv3d: filter must be rank 5, but got rank \"+\"\".concat($filter.rank,\".\");});util[\"assert\"](x5D.shape[4]===$filter.shape[3],function(){return\"Error in conv3d: depth of input (\".concat(x5D.shape[4],\") must match \")+\"input depth for filter \".concat($filter.shape[3],\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in conv3D: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});util[\"assert\"](dataFormat==='NDHWC',function(){return\"Error in conv3d: got dataFormat of \".concat(dataFormat,\" but only NDHWC is currently supported.\");});var forward=function forward(backend,save){var convInfo=computeConv3DInfo(x5D.shape,$filter.shape,strides,dilations,pad);var res=backend.conv3d(x5D,$filter,convInfo);save([x5D,$filter]);return res;};var inputs={x:x5D,filter:$filter};var attrs={strides:strides,pad:pad,dataFormat:dataFormat,dilations:dilations};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"p\"/* Conv3D */],attrs);if(reshapedTo5D){return res.as4D(res.shape[1],res.shape[2],res.shape[3],res.shape[4]);}return res;}var conv3d=Object(operation[\"a\"/* op */])({conv3d_:conv3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js\n/**\r\n * Computes the transposed 3D convolution of a volume, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 5 or rank 4, of shape\r\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 5 or rank 4:\r\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\r\n *    assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function conv3dTranspose_(x,filter,outputShape,strides,pad){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv3dTranspose');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv3dTranspose');return conv3DBackpropInput(outputShape,$x,$filter,strides,pad);}var conv3dTranspose=Object(operation[\"a\"/* op */])({conv3dTranspose_:conv3dTranspose_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Rearranges data from depth into blocks of spatial data. More specifically,\r\n * this op outputs a copy of the input tensor where values from the `depth`\r\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\r\n * The attr `blockSize` indicates the input block size and how the data is\r\n * moved.\r\n *\r\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\r\n * into non-overlapping blocks of size `blockSize x blockSize`\r\n *\r\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\r\n * height is `inputHeight * blockSize`\r\n *\r\n *  - The Y, X coordinates within each block of the output image are determined\r\n * by the high order component of the input channel index\r\n *\r\n *  - The depth of the input tensor must be divisible by `blockSize *\r\n * blockSize`\r\n *\r\n * The `dataFormat` attr specifies the layout of the input and output tensors\r\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\r\n * \"NCHW\": [ `batch, channels, height, width` ]\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\r\n * const blockSize = 2;\r\n * const dataFormat = \"NHWC\";\r\n *\r\n * tf.depthToSpace(x, blockSize, dataFormat).print();\r\n * ```\r\n *\r\n * @param x The input tensor of rank 4\r\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\r\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\r\n */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */function depthToSpace_(x,blockSize){var dataFormat=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'NHWC';var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','depthToSpace');var inputHeight=dataFormat==='NHWC'?$x.shape[1]:$x.shape[2];var inputWidth=dataFormat==='NHWC'?$x.shape[2]:$x.shape[3];var inputDepth=dataFormat==='NHWC'?$x.shape[3]:$x.shape[1];util[\"assert\"](inputHeight*blockSize>=0,function(){return\"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputHeight,\" and \").concat(blockSize,\"  for depthToSpace with input shape\\n    \").concat($x.shape);});util[\"assert\"](inputWidth*blockSize>=0,function(){return\"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputWidth,\" and \").concat(blockSize,\" for depthToSpace with input shape\\n        \").concat($x.shape);});util[\"assert\"](inputDepth%(blockSize*blockSize)===0,function(){return\"Dimension size must be evenly divisible by \".concat(blockSize*blockSize,\" but is \").concat(inputDepth,\" for depthToSpace with input shape \").concat($x.shape);});var forward=function forward(backend){return backend.depthToSpace($x,blockSize,dataFormat);};var inputs={x:$x};var attrs={blockSize:blockSize,dataFormat:dataFormat};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"t\"/* DepthToSpace */],attrs);}var depthToSpace=Object(operation[\"a\"/* op */])({depthToSpace_:depthToSpace_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Depthwise 2D convolution.\r\n *\r\n * Given a 4D `input` array and a `filter` array of shape\r\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\r\n * `inChannels` convolutional filters of depth 1, this op applies a\r\n * different filter to each input channel (expanding from 1 channel to\r\n * `channelMultiplier` channels for each), then concatenates the results\r\n * together. The output has `inChannels * channelMultiplier` channels.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function depthwiseConv2d_(x,filter,strides,pad){var dataFormat=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'NHWC';var dilations=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[1,1];var dimRoundingMode=arguments.length>6?arguments[6]:undefined;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','depthwiseConv2d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','depthwiseConv2d');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in depthwiseConv2d: input must be rank 4, but got \"+\"rank \".concat(x4D.rank,\".\");});util[\"assert\"]($filter.rank===4,function(){return\"Error in depthwiseConv2d: filter must be rank 4, but got rank \"+\"\".concat($filter.rank,\".\");});util[\"assert\"](x4D.shape[3]===$filter.shape[2],function(){return\"Error in depthwiseConv2d: number of input channels \"+\"(\".concat(x4D.shape[3],\") must match the inChannels dimension in \")+\"filter \".concat($filter.shape[2],\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in depthwiseConv2d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){if(dilations==null){dilations=[1,1];}util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in depthwiseConv2d: Either strides or dilations must be '+\"1. Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});var convInfo=computeConv2DInfo(x4D.shape,$filter.shape,strides,dilations,pad,dimRoundingMode,true/* depthwise */);var res=backend.depthwiseConv2D(x4D,$filter,convInfo);save([x4D,$filter]);return res;};var inputs={x:x4D,filter:$filter};var attrs={strides:strides,pad:pad,dataFormat:dataFormat,dilations:dilations,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"u\"/* DepthwiseConv2dNative */],attrs);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var depthwiseConv2d=Object(operation[\"a\"/* op */])({depthwiseConv2d_:depthwiseConv2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns a diagonal tensor with a given diagonal values.\r\n *\r\n * Given a diagonal, this operation returns a tensor with the diagonal and\r\n * everything else padded with zeros.\r\n *\r\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\r\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * tf.diag(x).print()\r\n * ```\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\r\n *\r\n * tf.diag(x).print()\r\n * ```\r\n * @param x The input tensor.\r\n */function diag_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','diag').flatten();var forward=function forward(backend){var result=backend.diag($x);var outShape=[].concat(_toConsumableArray2(x.shape),_toConsumableArray2(x.shape));return reshape(result,outShape);};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"x\"/* Diag */]);}var diag=Object(operation[\"a\"/* op */])({diag_:diag_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\r\n * if denominator is 0.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n * const c = tf.tensor1d([0, 0, 0, 0]);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n * const c = tf.scalar(0);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function divNoNan_(a,b){// TODO: Make this into its own kernel.\nvar $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','div');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','div');var _Object25=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object26=_slicedToArray(_Object25,2);$a=_Object26[0];$b=_Object26[1];var divResult=div($a,$b);var zeros=Object(tensor_ops[\"o\"/* zerosLike */])(divResult);var bEqualsZero=$b.equal(zeros);return where(bEqualsZero,zeros,divResult);}var divNoNan=Object(operation[\"a\"/* op */])({divNoNan_:divNoNan_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\r\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\r\n *\r\n * a.dot(b).print();  // or tf.dot(a, b)\r\n * b.dot(a).print();\r\n * b.dot(c).print();\r\n * ```\r\n * @param t1 The first tensor in the dot operation.\r\n * @param t2 The second tensor in the dot operation.\r\n */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */function dot_(t1,t2){var $t1=Object(tensor_util_env[\"a\"/* convertToTensor */])(t1,'t1','dot');var $t2=Object(tensor_util_env[\"a\"/* convertToTensor */])(t2,'t2','dot');util[\"assert\"](($t1.rank===1||$t1.rank===2)&&($t2.rank===1||$t2.rank===2),function(){return\"Error in dot: inputs must all be rank 1 or 2, but got ranks \"+\"\".concat($t1.rank,\" and \").concat($t2.rank,\".\");});var t1Inner=$t1.rank===1?$t1.size:$t1.shape[1];var t2Inner=$t2.rank===1?$t2.size:$t2.shape[0];util[\"assert\"](t1Inner===t2Inner,function(){return\"Error in dot: inner dimensions of inputs must match, but got \"+\"\".concat(t1Inner,\" and \").concat(t2Inner,\".\");});if($t1.rank===1&&$t2.rank===1){var t12D=reshape($t1,[1,-1]);var t22D=reshape($t2,[-1,1]);var t1t2=matMul(t12D,t22D);return reshape(t1t2,[]);}else if($t1.rank===1&&$t2.rank===2){var _t12D=reshape($t1,[1,-1]);var _t22D=reshape($t2,[$t2.shape[0],$t2.shape[1]]);var _t1t=matMul(_t12D,_t22D);return reshape(_t1t,[_t1t.size]);}else if($t1.rank===2&&$t2.rank===1){var _t22D2=reshape($t2,[-1,1]);var _t1t2=matMul($t1,_t22D2);return reshape(_t1t2,[_t1t2.size]);}else{var _t22D3=reshape($t2,[$t2.shape[0],$t2.shape[1]]);var _t1t3=matMul($t1,_t22D3);return _t1t3;}}var dot=Object(operation[\"a\"/* op */])({dot_:dot_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 1, -3, 2]);\r\n *\r\n * x.elu().print();  // or tf.elu(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function elu_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','elu');var forward=function forward(backend,save){var y=backend.elu($x);save([y]);return y;};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"z\"/* Elu */]);}var elu=Object(operation[\"a\"/* op */])({elu_:elu_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.equal(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function equal_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','equal');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','equal');var _Object27=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object28=_slicedToArray(_Object27,2);$a=_Object28[0];$b=_Object28[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend){return backend.equal($a,$b);};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null,kernel_names[\"B\"/* Equal */]);}var equal=Object(operation[\"a\"/* op */])({equal_:equal_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Create an identity matrix.\r\n *\r\n * @param numRows Number of rows.\r\n * @param numColumns Number of columns. Defaults to `numRows`.\r\n * @param batchShape If provided, will add the batch shape to the beginning\r\n *   of the shape of the returned `tf.Tensor` by repeating the identity\r\n *   matrix.\r\n * @param dtype Data type.\r\n * @returns Identity matrix of the specified size and data type, possibly\r\n *   with batch repetition if `batchShape` is specified.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function eye_(numRows,numColumns,batchShape){var dtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'float32';if(numColumns==null){numColumns=numRows;}var buff=array_ops_buffer([numRows,numColumns],dtype);var n=numRows<=numColumns?numRows:numColumns;for(var i=0;i<n;++i){buff.set(1,i,i);}var out=buff.toTensor().as2D(numRows,numColumns);if(batchShape==null){return out;}else{if(batchShape.length===1){return tile(expandDims(out,0),[batchShape[0],1,1]);}else if(batchShape.length===2){return tile(expandDims(expandDims(out,0),0),[batchShape[0],batchShape[1],1,1]);}else if(batchShape.length===3){return tile(expandDims(expandDims(expandDims(out,0),0),0),[batchShape[0],batchShape[1],batchShape[2],1,1]);}else{throw new Error(\"eye() currently supports only 1D and 2D \"+// tslint:disable-next-line:no-any\n\"batchShapes, but received \".concat(batchShape.length,\"D.\"));}}}var eye=Object(operation[\"a\"/* op */])({eye_:eye_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` filled with a scalar value.\r\n *\r\n * ```js\r\n * tf.fill([2, 2], 4).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param value The scalar value to fill the tensor with.\r\n * @param dtype The type of an element in the resulting tensor. Defaults to\r\n * 'float'.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function fill(shape,value,dtype){var attrs={shape:shape,value:value,dtype:dtype};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.fill(shape,value,dtype);},{},null,kernel_names[\"C\"/* Fill */],attrs);}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js\nvar imag=__webpack_require__(25);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\r\n * Supports broadcasting.\r\n *\r\n * We also expose `tf.maximumStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.maximum(b).print();  // or tf.maximum(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast maximum a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.maximum(b).print();  // or tf.maximum(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function maximum_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','maximum');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','maximum');var _Object29=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object30=_slicedToArray(_Object29,2);$a=_Object30[0];$b=_Object30[1];if($a.dtype==='bool'){$a=cast($a,'int32');$b=cast($b,'int32');}assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend,save){var res=backend.maximum($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"V\"/* Maximum */]);}var maximum=Object(operation[\"a\"/* op */])({maximum_:maximum_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes leaky rectified linear element-wise.\r\n *\r\n * See\r\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\r\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The scaling factor for negative values, defaults to 0.2.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function leakyRelu_(x){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.2;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','leakyRelu');return maximum(mul(Object(tensor_ops[\"e\"/* scalar */])(alpha),$x),$x);}var leakyRelu=Object(operation[\"a\"/* op */])({leakyRelu_:leakyRelu_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Normalizes the activation of a local neighborhood across or within\r\n * channels.\r\n *\r\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\r\n *     of 1D vectors (along the last dimension), and each vector is\r\n *     normalized independently.\r\n * @param depthRadius The number of adjacent channels in the 1D normalization\r\n *     window.\r\n * @param bias A constant bias term for the basis.\r\n * @param alpha A scale factor, usually positive.\r\n * @param beta An exponent.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function localResponseNormalization_(x){var depthRadius=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;var bias=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var alpha=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var beta=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0.5;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','localResponseNormalization');util[\"assert\"]($x.rank===4||$x.rank===3,function(){return\"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \".concat($x.rank,\".\");});util[\"assert\"](util[\"isInt\"](depthRadius),function(){return\"Error in localResponseNormalization: depthRadius must be an \"+\"integer but got depthRadius \".concat(depthRadius,\".\");});var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}var forward=function forward(backend,save){var y=backend.localResponseNormalization4D(x4D,depthRadius,bias,alpha,beta);save([x4D,y]);return y;};var inputs={x:x4D};var attrs={depthRadius:depthRadius,bias:bias,alpha:alpha,beta:beta};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"L\"/* LRN */],attrs);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}else{return res;}}var localResponseNormalization=Object(operation[\"a\"/* op */])({localResponseNormalization_:localResponseNormalization_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.max().print();  // or tf.max(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.max(axis).print();  // or tf.max(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */function max_(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','max');var forward=function forward(backend,save){var origAxes=util[\"parseAxisParam\"](axis,$x.shape);var axes=origAxes;var permutedAxes=getAxesPermutation(axes,$x.rank);var maxInput=$x;if(permutedAxes!=null){maxInput=transpose($x,permutedAxes);axes=getInnerMostAxes(axes.length,maxInput.rank);}var y=backend.max(maxInput,axes);save([$x,y]);if(permutedAxes!=null){backend.disposeData(maxInput.dataId);}return y;};var inputs={x:$x};var attrs={reductionIndices:axis,keepDims:keepDims};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"P\"/* Max */],attrs);if(keepDims){return reshape(res,expandShapeToKeepDim(res.shape,util[\"parseAxisParam\"](axis,$x.shape)));}return res;}var max_max=Object(operation[\"a\"/* op */])({max_:max_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the 2D max pooling of an image.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */function maxPool_(x,filterSize,strides,pad,dimRoundingMode){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','maxPool');var dilations=1;var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in maxPool: input must be rank 4 but got rank \".concat(x4D.rank,\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in maxPool: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in maxPool: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){var convInfo=computePool2DInfo(x4D.shape,filterSize,strides,1/* dilations */,pad,dimRoundingMode);var y;if(convInfo.filterWidth===1&&convInfo.filterHeight===1&&util[\"arraysEqual\"](convInfo.inShape,convInfo.outShape)){y=x4D.clone();}else{y=backend.maxPool(x4D,convInfo);}save([x4D,y]);return y;};var inputs={x:x4D};var attrs={filterSize:filterSize,strides:strides,pad:pad,dimRoundingMode:dimRoundingMode};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"Q\"/* MaxPool */],attrs);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}var maxPool=Object(operation[\"a\"/* op */])({maxPool_:maxPool_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the 3D max pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function maxPool3d_(x){var filterSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[1,1,1];var strides=arguments.length>2?arguments[2]:undefined;var pad=arguments.length>3?arguments[3]:undefined;var dimRoundingMode=arguments.length>4?arguments[4]:undefined;var dataFormat=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'NDHWC';var dilations=arguments.length>6?arguments[6]:undefined;if(dilations==null){dilations=[1,1,1];}else{deprecationWarn('dilations is deprecated, this field will be gone in '+'v3.0.0.');}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','maxPool3d');var x5D=$x;var reshapedTo5D=false;if($x.rank===4){reshapedTo5D=true;x5D=$x.as5D(1,$x.shape[0],$x.shape[1],$x.shape[2],$x.shape[3]);}util[\"assert\"](x5D.rank===5,function(){return\"Error in maxPool3d: x must be rank 5 but got rank \".concat(x5D.rank,\".\");});util[\"assert\"](dataFormat==='NDHWC',function(){return\"Error in maxPool3d: Only NDHWC is currently supported, \"+\"but got dataFormat of \".concat(dataFormat);});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in maxPool3d: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in maxPool3d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var forward=function forward(backend,save){if(dilations==null){dilations=[1,1,1];}var convInfo=computePool3DInfo(x5D.shape,filterSize,strides,dilations,pad,dimRoundingMode,dataFormat);var y=backend.maxPool3d(x5D,convInfo);save([x5D,y]);return y;};var inputs={x:x5D};var attrs={filterSize:filterSize,strides:strides,pad:pad,dimRoundingMode:dimRoundingMode,dataFormat:dataFormat,dilations:dilations};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"R\"/* MaxPool3D */],attrs);if(reshapedTo5D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3],res.shape[4]]);}return res;}var maxPool3d=Object(operation[\"a\"/* op */])({maxPool3d_:maxPool3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the 2D max pooling of an image with Argmax index.\r\n * The indices in argmax are flattened, so that a maximum value at position `[b,\r\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\r\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\r\n * +c` if include_batch_in_index is True.\r\n *\r\n * The indices returned are always in `[0, height) x [0, width)` before\r\n * flattening.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param includeBatchIndex Defaults to False. Whether to include batch\r\n *    dimension in flattened index of argmax.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function maxPoolWithArgmax_(x,filterSize,strides,pad){var includeBatchInIndex=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','maxPoolWithArgmax');var inputs={x:$x};var attrs={filterSize:filterSize,strides:strides,pad:pad,includeBatchInIndex:includeBatchInIndex};var result=engine[\"a\"/* ENGINE */].runKernel(kernel_names[\"U\"/* MaxPoolWithArgmax */],inputs,attrs);return{result:result[0],indexes:result[1]};}var maxPoolWithArgmax=Object(operation[\"a\"/* op */])({maxPoolWithArgmax_:maxPoolWithArgmax_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\r\n * Supports broadcasting.\r\n *\r\n * We also expose `minimumStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast minimum a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function minimum_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','minimum');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','minimum');var _Object31=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object32=_slicedToArray(_Object31,2);$a=_Object32[0];$b=_Object32[1];if($a.dtype==='bool'){$a=cast($a,'int32');$b=cast($b,'int32');}assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend,save){var res=backend.minimum($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"W\"/* Minimum */]);}var minimum=Object(operation[\"a\"/* op */])({minimum_:minimum_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the mod of a and b element-wise.\r\n * `floor(x / y) * y + mod(x, y) = x`\r\n * Supports broadcasting.\r\n *\r\n * We also expose `tf.modStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.mod(b).print();  // or tf.mod(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast a mod b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.mod(b).print();  // or tf.mod(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function mod_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','mod');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','mod');var _Object33=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object34=_slicedToArray(_Object33,2);$a=_Object34[0];$b=_Object34[1];var forward=function forward(backend,save){var res=backend.mod($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"X\"/* Mod */]);}var mod=Object(operation[\"a\"/* op */])({mod_:mod_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\r\n *\r\n * ```js\r\n * const probs = tf.tensor([.75, .25]);\r\n * tf.multinomial(probs, 3).print();\r\n * ```\r\n *\r\n * @param logits 1D array with unnormalized log-probabilities, or\r\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\r\n *     parameter.\r\n * @param numSamples Number of samples to draw for each row slice.\r\n * @param seed The seed number.\r\n * @param normalized Whether the provided `logits` are normalized true\r\n *     probabilities (sum to 1). Defaults to false.\r\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\r\n *     `[batchSize, numSamples]`, depending on the rank of the input.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Random'} */function multinomial_(logits,numSamples,seed){var normalized=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','multinomial');var numOutcomes=$logits.size;var origRank=$logits.rank;if(numOutcomes<2){throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \"+\"\".concat(numOutcomes,\".\"));}if(origRank>2){throw new Error(\"Rank of probabilities must be 1 or 2, but is \".concat(origRank));}seed=seed||Math.random();var logits2D=origRank===1?$logits.as2D(1,-1):$logits;var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.multinomial(logits2D,normalized,numSamples,seed);},{logits2D:logits2D});return origRank===1?res.as1D():res;}var multinomial=Object(operation[\"a\"/* op */])({multinomial_:multinomial_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([0, 2, 3]);\r\n *\r\n * a.notEqual(b).print();\r\n * ```\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Logical'} */function notEqual_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','notEqual');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','notEqual');var _Object35=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object36=_slicedToArray(_Object35,2);$a=_Object36[0];$b=_Object36[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend){return backend.notEqual($a,$b);};var inputs={a:$a,b:$b};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"bb\"/* NotEqual */]);}var notEqual=Object(operation[\"a\"/* op */])({notEqual_:notEqual_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js\n/**\r\n * Computes the outer product of two vectors, `v1` and `v2`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([3, 4, 5]);\r\n *\r\n * tf.outerProduct(a, b).print();\r\n * ```\r\n * @param v1 The first vector in the outer product operation.\r\n * @param v2 The second vector in the outer product operation.\r\n */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */function outerProduct_(v1,v2){var $v1=Object(tensor_util_env[\"a\"/* convertToTensor */])(v1,'v1','outerProduct');var $v2=Object(tensor_util_env[\"a\"/* convertToTensor */])(v2,'v2','outerProduct');util[\"assert\"]($v1.rank===1&&$v2.rank===1,function(){return\"Error in outerProduct: inputs must be rank 1, but got ranks \"+\"\".concat($v1.rank,\" and \").concat($v2.rank,\".\");});var v12D=reshape($v1,[-1,1]);var v22D=reshape($v2,[1,-1]);return matMul(v12D,v22D);}var outerProduct=Object(operation[\"a\"/* op */])({outerProduct_:outerProduct_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js\n/**\r\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\r\n */function pad1d_(x,paddings){var constantValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;Object(util[\"assert\"])(paddings.length===2,function(){return'Invalid number of paddings. Must be length of 2.';});return pad_pad(x,[paddings],constantValue);}var pad1d=Object(operation[\"a\"/* op */])({pad1d_:pad1d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js\n/**\r\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\r\n */function pad2d_(x,paddings){var constantValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;Object(util[\"assert\"])(paddings.length===2&&paddings[0].length===2&&paddings[1].length===2,function(){return'Invalid number of paddings. Must be length of 2 each.';});return pad_pad(x,paddings,constantValue);}var pad2d=Object(operation[\"a\"/* op */])({pad2d_:pad2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js\n/**\r\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\r\n */function pad3d_(x,paddings){var constantValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;Object(util[\"assert\"])(paddings.length===3&&paddings[0].length===2&&paddings[1].length===2&&paddings[2].length===2,function(){return'Invalid number of paddings. Must be length of 2 each.';});return pad_pad(x,paddings,constantValue);}var pad3d=Object(operation[\"a\"/* op */])({pad3d_:pad3d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js\n/**\r\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\r\n */function pad4d_(x,paddings){var constantValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;Object(util[\"assert\"])(paddings.length===4&&paddings[0].length===2&&paddings[1].length===2&&paddings[2].length===2&&paddings[3].length===2,function(){return'Invalid number of paddings. Must be length of 2 each.';});return pad_pad(x,paddings,constantValue);}var pad4d=Object(operation[\"a\"/* op */])({pad4d_:pad4d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Performs an N-D pooling operation\r\n *\r\n * @param input The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param poolingType The type of pooling, either 'max' or 'avg'.\r\n * @param pad The type of padding algorithm:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function pool_(input,windowShape,poolingType,pad,dilations,strides){if(dilations==null){dilations=[1,1];}if(strides==null){strides=1;}if(pad===0){pad='valid';}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(input,'x','maxPool');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=reshape($x,[1,$x.shape[0],$x.shape[1],$x.shape[2]]);}util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in pool: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});var convInfo=computePool2DInfo(x4D.shape,windowShape,strides,dilations,pad);var dilation=[convInfo.dilationHeight,convInfo.dilationWidth];// The following implementation does batchToSpace(pool(spaceToBatch(x)))\n// whenever dilation > 1 since the TF kernels do not support dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\nvar basePadding;if(pad==='same'){basePadding=withSpaceToBatchBasePaddings([convInfo.filterHeight,convInfo.filterWidth],dilation);}else{basePadding=[[0,0],[0,0]];}var isDilationOne=dilation[0]===1&&dilation[1]===1;var _requiredSpaceToBatch=requiredSpaceToBatchPaddings([convInfo.inHeight,convInfo.inWidth],dilation,basePadding),_requiredSpaceToBatch2=_slicedToArray(_requiredSpaceToBatch,2),adjustedPadding=_requiredSpaceToBatch2[0],adjustedCrops=_requiredSpaceToBatch2[1];var convertedPad=isDilationOne?pad:'valid';var convertedX=isDilationOne?x4D:spaceToBatchND(x4D,dilation,adjustedPadding);var forwardOp=poolingType==='avg'?function(){return avgPool(convertedX,windowShape,strides,convertedPad);}:function(){return maxPool(convertedX,windowShape,strides,convertedPad);};var y=forwardOp();var res=isDilationOne?y:batchToSpaceND(y,dilation,adjustedCrops);if(reshapedTo4D){return reshape(res,[res.shape[1],res.shape[2],res.shape[3]]);}return res;}// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(inputShape,blockShape,basePadding){var padStart=basePadding.map(function(b){return b[0];});var origPadEnd=basePadding.map(function(b){return b[1];});var fullInputShape=inputShape.concat(padStart,origPadEnd);var padEndExtra=blockShape.map(function(b,i){return(b-fullInputShape[i]%b)%b;});var padEnd=origPadEnd.map(function(s,i){return s+padEndExtra[i];});var paddings=blockShape.map(function(_,i){return[padStart[i],padEnd[i]];});var crops=blockShape.map(function(_,i){return[0,padEndExtra[i]];});return[paddings,crops];}// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(filterShape,dilation){// Spatial dimensions of the filters and the upsampled filters in which we\n// introduce (rate - 1) zeros between consecutive filter values.\nvar dilatedFilterShape=filterShape.map(function(s,i){return s+(s-1)*(dilation[i]-1);});var padExtraShape=dilatedFilterShape.map(function(s){return s-1;});// When padding is odd, we pad more at end, following the same\n// convention as conv2d.\nvar padExtraStart=padExtraShape.map(function(s){return Math.floor(s/2);});var padExtraEnd=padExtraShape.map(function(s,i){return s-padExtraStart[i];});return padExtraShape.map(function(_,i){return[padExtraStart[i],padExtraEnd[i]];});}var pool=Object(operation[\"a\"/* op */])({pool_:pool_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes leaky rectified linear element-wise with parametric alphas.\r\n *\r\n * `x < 0 ? alpha * x : f(x) = x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n * const alpha = tf.scalar(0.1);\r\n *\r\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha Scaling factor for negative values.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function prelu_(x,alpha){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','prelu');var $alpha=Object(tensor_util_env[\"a\"/* convertToTensor */])(alpha,'alpha','prelu');var forward=function forward(backend,save){var res=backend.prelu($x,$alpha);save([$x,$alpha]);return res;};var inputs={x:$x,alpha:$alpha};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"gb\"/* Prelu */]);}var prelu=Object(operation[\"a\"/* op */])({prelu_:prelu_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values sampled from a random number generator\r\n * function defined by the user.\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param randFunction A random number generator function which is called\r\n * for each element in the output tensor.\r\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\r\n */function rand_(shape,randFunction,dtype){var size=Object(util[\"sizeFromShape\"])(shape);var values=null;if(dtype==null||dtype==='float32'){values=new Float32Array(size);}else if(dtype==='int32'){values=new Int32Array(size);}else if(dtype==='bool'){values=new Uint8Array(size);}else{throw new Error(\"Unknown data type \".concat(dtype));}for(var i=0;i<size;i++){values[i]=randFunction();}return engine[\"a\"/* ENGINE */].makeTensor(values,shape,dtype);}var rand=Object(operation[\"a\"/* op */])({rand_:rand_});// EXTERNAL MODULE: ./node_modules/seedrandom/index.js\nvar seedrandom=__webpack_require__(20);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // https://en.wikipedia.org/wiki/Marsaglia_polar_method\nvar rand_util_MPRandGauss=/*#__PURE__*/function(){function rand_util_MPRandGauss(mean,stdDeviation,dtype,truncated,seed){_classCallCheck2(this,rand_util_MPRandGauss);this.mean=mean;this.stdDev=stdDeviation;this.dtype=dtype;this.nextVal=NaN;this.truncated=truncated;if(this.truncated){this.upper=this.mean+this.stdDev*2;this.lower=this.mean-this.stdDev*2;}var seedValue=seed?seed:Math.random();this.random=seedrandom[\"alea\"](seedValue.toString());}/** Returns next sample from a Gaussian distribution. */_createClass(rand_util_MPRandGauss,[{key:\"nextValue\",value:function nextValue(){if(!isNaN(this.nextVal)){var value=this.nextVal;this.nextVal=NaN;return value;}var resultX,resultY;var isValid=false;while(!isValid){var v1=void 0,v2=void 0,s=void 0;do{v1=2*this.random()-1;v2=2*this.random()-1;s=v1*v1+v2*v2;}while(s>=1||s===0);var _mul=Math.sqrt(-2.0*Math.log(s)/s);resultX=this.mean+this.stdDev*v1*_mul;resultY=this.mean+this.stdDev*v2*_mul;if(!this.truncated||this.isValidTruncated(resultX)){isValid=true;}}if(!this.truncated||this.isValidTruncated(resultY)){this.nextVal=this.convertValue(resultY);}return this.convertValue(resultX);}/** Handles proper rounding for non-floating-point numbers. */},{key:\"convertValue\",value:function convertValue(value){if(this.dtype==null||this.dtype==='float32'){return value;}return Math.round(value);}/** Returns true if less than 2-standard-deviations from the mean. */},{key:\"isValidTruncated\",value:function isValidTruncated(value){return value<=this.upper&&value>=this.lower;}}]);return rand_util_MPRandGauss;}();// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nvar rand_util_RandGamma=/*#__PURE__*/function(){function rand_util_RandGamma(alpha,beta,dtype,seed){_classCallCheck2(this,rand_util_RandGamma);this.alpha=alpha;this.beta=1/beta;// convert rate to scale parameter\nthis.dtype=dtype;var seedValue=seed?seed:Math.random();this.randu=seedrandom[\"alea\"](seedValue.toString());this.randn=new rand_util_MPRandGauss(0,1,dtype,false,this.randu());if(alpha<1){this.d=alpha+2/3;}else{this.d=alpha-1/3;}this.c=1/Math.sqrt(9*this.d);}/** Returns next sample from a gamma distribution. */_createClass(rand_util_RandGamma,[{key:\"nextValue\",value:function nextValue(){var x2,v0,v1,x,u,v;while(true){do{x=this.randn.nextValue();v=1+this.c*x;}while(v<=0);v*=v*v;x2=x*x;v0=1-0.331*x2*x2;v1=0.5*x2+this.d*(1-v+Math.log(v));u=this.randu();if(u<v0||Math.log(u)<v1){break;}}v=1/this.beta*this.d*v;if(this.alpha<1){v*=Math.pow(this.randu(),1/this.alpha);}return this.convertValue(v);}/** Handles proper rounding for non-floating-point numbers. */},{key:\"convertValue\",value:function convertValue(value){if(this.dtype==='float32'){return value;}return Math.round(value);}}]);return rand_util_RandGamma;}();var rand_util_UniformRandom=/*#__PURE__*/function(){function rand_util_UniformRandom(){var _this5=this;var min=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var max=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var dtype=arguments.length>2?arguments[2]:undefined;var seed=arguments.length>3?arguments[3]:undefined;_classCallCheck2(this,rand_util_UniformRandom);/** Handles proper rounding for non floating point numbers. */this.canReturnFloat=function(){return _this5.dtype==null||_this5.dtype==='float32';};this.min=min;this.range=max-min;this.dtype=dtype;if(seed==null){seed=Math.random();}if(typeof seed==='number'){seed=seed.toString();}if(!this.canReturnFloat()&&this.range<=1){throw new Error(\"The difference between \".concat(min,\" - \").concat(max,\" <= 1 and dtype is not float\"));}this.random=seedrandom[\"alea\"](seed);}_createClass(rand_util_UniformRandom,[{key:\"convertValue\",value:function convertValue(value){if(this.canReturnFloat()){return value;}return Math.round(value);}},{key:\"nextValue\",value:function nextValue(){return this.convertValue(this.min+this.range*this.random());}}]);return rand_util_UniformRandom;}();function jarqueBeraNormalityTest(values){// https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\nvar n=values.length;var s=skewness(values);var k=kurtosis(values);var jb=n/6*(Math.pow(s,2)+0.25*Math.pow(k-3,2));// JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\nvar CHI_SQUARE_2DEG=5.991;if(jb>CHI_SQUARE_2DEG){throw new Error(\"Invalid p-value for JB: \".concat(jb));}}function expectArrayInMeanStdRange(actual,expectedMean,expectedStdDev,epsilon){if(epsilon==null){epsilon=testEpsilon();}var actualMean=rand_util_mean(actual);expectNumbersClose(actualMean,expectedMean,epsilon);expectNumbersClose(standardDeviation(actual,actualMean),expectedStdDev,epsilon);}function rand_util_mean(values){var sum=0;for(var i=0;i<values.length;i++){sum+=values[i];}return sum/values.length;}function standardDeviation(values,mean){var squareDiffSum=0;for(var i=0;i<values.length;i++){var diff=values[i]-mean;squareDiffSum+=diff*diff;}return Math.sqrt(squareDiffSum/values.length);}function kurtosis(values){// https://en.wikipedia.org/wiki/Kurtosis\nvar valuesMean=rand_util_mean(values);var n=values.length;var sum2=0;var sum4=0;for(var i=0;i<n;i++){var v=values[i]-valuesMean;sum2+=Math.pow(v,2);sum4+=Math.pow(v,4);}return 1/n*sum4/Math.pow(1/n*sum2,2);}function skewness(values){// https://en.wikipedia.org/wiki/Skewness\nvar valuesMean=rand_util_mean(values);var n=values.length;var sum2=0;var sum3=0;for(var i=0;i<n;i++){var v=values[i]-valuesMean;sum2+=Math.pow(v,2);sum3+=Math.pow(v,3);}return 1/n*sum3/Math.pow(1/(n-1)*sum2,3/2);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\r\n *\r\n * ```js\r\n * tf.randomGamma([2, 2], 1).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param alpha The shape parameter of the gamma distribution.\r\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\r\n *     to 1.\r\n * @param dtype The data type of the output. Defaults to float32.\r\n * @param seed The seed for the random number generator.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Random'} */function randomGamma_(shape,alpha){var beta=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var dtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'float32';var seed=arguments.length>4?arguments[4]:undefined;if(beta==null){beta=1;}if(dtype==null){dtype='float32';}if(dtype!=='float32'&&dtype!=='int32'){throw new Error(\"Unsupported data type \".concat(dtype));}var rgamma=new rand_util_RandGamma(alpha,beta,dtype,seed);var res=array_ops_buffer(shape,dtype);for(var i=0;i<res.values.length;i++){res.values[i]=rgamma.nextValue();}return res.toTensor();}var randomGamma=Object(operation[\"a\"/* op */])({randomGamma_:randomGamma_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\r\n *\r\n * ```js\r\n * tf.randomNormal([2, 2]).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param mean The mean of the normal distribution.\r\n * @param stdDev The standard deviation of the normal distribution.\r\n * @param dtype The data type of the output.\r\n * @param seed The seed for the random number generator.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Random'} */function randomNormal_(shape){var mean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var stdDev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var dtype=arguments.length>3?arguments[3]:undefined;var seed=arguments.length>4?arguments[4]:undefined;if(dtype!=null&&dtype==='bool'){throw new Error(\"Unsupported data type \".concat(dtype));}var randGauss=new rand_util_MPRandGauss(mean,stdDev,dtype,false/* truncated */,seed);var res=array_ops_buffer(shape,dtype);for(var i=0;i<res.values.length;i++){res.values[i]=randGauss.nextValue();}return res.toTensor();}var randomNormal=Object(operation[\"a\"/* op */])({randomNormal_:randomNormal_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\r\n *\r\n * The generated values follow a uniform distribution in the range [minval,\r\n * maxval). The lower bound minval is included in the range, while the upper\r\n * bound maxval is excluded.\r\n *\r\n * ```js\r\n * tf.randomUniform([2, 2]).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param minval The lower bound on the range of random values to generate.\r\n *   Defaults to 0.\r\n * @param maxval The upper bound on the range of random values to generate.\r\n *   Defaults to 1.\r\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Random'} */function randomUniform_(shape){var minval=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var maxval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var dtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'float32';var seed=arguments.length>4?arguments[4]:undefined;var res=array_ops_buffer(shape,dtype);var random=new rand_util_UniformRandom(minval,maxval,null,seed);for(var i=0;i<res.values.length;i++){res.values[i]=random.nextValue();}return res.toTensor();}var randomUniform=Object(operation[\"a\"/* op */])({randomUniform_:randomUniform_});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/real.js\nvar real=__webpack_require__(22);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes rectified linear element-wise: `max(x, 0)`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.relu().print();  // or tf.relu(x)\r\n * ```\r\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\r\n *     `int32'.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function relu_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','relu');var forward=function forward(backend,save){save([$x]);if($x.dtype==='bool'){return $x.toInt();}return backend.relu($x);};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"ib\"/* Relu */]);}var relu=Object(operation[\"a\"/* op */])({relu_:relu_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 8]);\r\n *\r\n * x.relu6().print();  // or tf.relu6(x)\r\n * ```\r\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\r\n *     `int32'.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function relu6_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','relu6');var forward=function forward(backend,save){save([$x]);if($x.dtype==='bool'){return cast($x,'int32');}return backend.relu6($x);};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"jb\"/* Relu6 */]);}var relu6=Object(operation[\"a\"/* op */])({relu6_:relu6_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes scaled exponential linear element-wise.\r\n *\r\n * `x < 0 ? scale * alpha * (exp(x) - 1) : x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.selu().print();  // or tf.selu(x)\r\n * ```\r\n * @param x The input tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */function selu_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','selu');var forward=function forward(backend,save){var res=backend.selu($x);save([$x]);return res;};var inputs={x:$x};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"lb\"/* Selu */]);}var selu=Object(operation[\"a\"/* op */])({selu_:selu_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js\n/**\r\n * 2-D convolution with separable filters.\r\n *\r\n * Performs a depthwise convolution that acts separately on channels followed\r\n * by a pointwise convolution that mixes channels. Note that this is\r\n * separability between dimensions [1, 2] and 3, not spatial separability\r\n * between dimensions 1 and 2.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\r\n *     the filter used in the first step.\r\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\r\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\r\n *     the filter used in the second step.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */function separableConv2d_(x,depthwiseFilter,pointwiseFilter,strides,pad){var dilation=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[1,1];var dataFormat=arguments.length>6&&arguments[6]!==undefined?arguments[6]:'NHWC';var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','separableConv2d');var $depthwiseFilter=Object(tensor_util_env[\"a\"/* convertToTensor */])(depthwiseFilter,'depthwiseFilter','separableConv2d');var $pointwiseFilter=Object(tensor_util_env[\"a\"/* convertToTensor */])(pointwiseFilter,'pointwiseFilter','separableConv2d');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=$x.as4D(1,$x.shape[0],$x.shape[1],$x.shape[2]);}if(dataFormat==='NCHW'){throw new Error('separableConv2d currently does not support dataFormat NCHW; only '+'NHWC is supported');}util[\"assert\"](x4D.rank===4,function(){return\"Error in separableConv2d: input must be rank 4, but got \"+\"rank \".concat(x4D.rank,\".\");});util[\"assert\"]($depthwiseFilter.rank===4,function(){return\"Error in separableConv2d: depthwise filter must be rank 4, but \"+\"got rank \".concat($depthwiseFilter.rank,\".\");});util[\"assert\"]($pointwiseFilter.rank===4,function(){return\"Error in separableConv2d: pointwise filter must be rank 4, but \"+\"got rank \".concat($depthwiseFilter.rank,\".\");});util[\"assert\"]($pointwiseFilter.shape[0]===1,function(){return\"Error in separableConv2d: the first dimension of pointwise filter \"+\" must be 1, but got \".concat($pointwiseFilter.shape[0],\".\");});util[\"assert\"]($pointwiseFilter.shape[1]===1,function(){return\"Error in separableConv2d: the second dimension of pointwise \"+\"filter must be 1, but got \".concat($pointwiseFilter.shape[1],\".\");});var inChannels=$depthwiseFilter.shape[2];var channelMultiplier=$depthwiseFilter.shape[3];util[\"assert\"]($pointwiseFilter.shape[2]===inChannels*channelMultiplier,function(){return\"Error in separableConv2d: the third dimension of pointwise filter \"+\"must be \".concat(inChannels*channelMultiplier,\", \")+\"but got \".concat($pointwiseFilter.shape[2],\".\");});var depthwise=depthwiseConv2d(x4D,$depthwiseFilter,strides,pad,dataFormat,dilation);var pointwiseStride=1;var res=conv2d(depthwise,$pointwiseFilter,pointwiseStride,'valid',dataFormat);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}var separableConv2d=Object(operation[\"a\"/* op */])({separableConv2d_:separableConv2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns (a - b) * (a - b) element-wise.\r\n * Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast squared difference  a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */function squaredDifference_(a,b){var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','squaredDifference');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','squaredDifference');var _Object37=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object38=_slicedToArray(_Object37,2);$a=_Object38[0];$b=_Object38[1];assertAndGetBroadcastShape($a.shape,$b.shape);var forward=function forward(backend,save){var res=backend.squaredDifference($a,$b);save([$a,$b]);return res;};var inputs={a:$a,b:$b};var attrs={};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* grad */,kernel_names[\"pb\"/* SquaredDifference */],attrs);}var squaredDifference=Object(operation[\"a\"/* op */])({squaredDifference_:squaredDifference_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with values sampled from a truncated normal\r\n * distribution.\r\n *\r\n * ```js\r\n * tf.truncatedNormal([2, 2]).print();\r\n * ```\r\n *\r\n * The generated values follow a normal distribution with specified mean and\r\n * standard deviation, except that values whose magnitude is more than 2\r\n * standard deviations from the mean are dropped and re-picked.\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param mean The mean of the normal distribution.\r\n * @param stdDev The standard deviation of the normal distribution.\r\n * @param dtype The data type of the output tensor.\r\n * @param seed The seed for the random number generator.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function truncatedNormal_(shape){var mean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var stdDev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var dtype=arguments.length>3?arguments[3]:undefined;var seed=arguments.length>4?arguments[4]:undefined;if(dtype!=null&&dtype==='bool'){throw new Error(\"Unsupported data type $ { dtype }\");}var randGauss=new rand_util_MPRandGauss(mean,stdDev,dtype,true/* truncated */,seed);var res=array_ops_buffer(shape,dtype);for(var i=0;i<res.values.length;i++){res.values[i]=randGauss.nextValue();}return res.toTensor();}var truncatedNormal=Object(operation[\"a\"/* op */])({truncatedNormal_:truncatedNormal_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Inputs of size above this threshold will be parallelized by calling multiple\r\n * shader programs.\r\n */var PARALLELIZE_THRESHOLD=30;function computeOptimalWindowSize(inSize){if(inSize<=PARALLELIZE_THRESHOLD){return inSize;}return Object(util[\"nearestDivisor\"])(inSize,Math.floor(Math.sqrt(inSize)));}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function segOpComputeOptimalWindowSize(inSize,numSegments){var done=false;var res;if(inSize<=PARALLELIZE_THRESHOLD){res=inSize;done=true;}else{res=Object(util[\"nearestDivisor\"])(inSize,Math.floor(Math.sqrt(inSize)));}while(!done){if(res>numSegments||res===inSize){done=true;}else{res=Object(util[\"nearestDivisor\"])(inSize,res+1);}}return res;}function segment_util_computeOutShape(aShape,axis,numSegments){var outShape=[];var rank=aShape.length;for(var dim=0;dim<rank;dim++){if(dim!==axis){outShape.push(aShape[dim]);}else{outShape.push(numSegments);}}return outShape;}function collectGatherOpShapeInfo(x,indices,axis){var dimSize=x.shape[axis];var outputShape=[];var batchSize=1;var sliceSize=1;for(var i=0;i<axis;i++){outputShape.push(x.shape[i]);batchSize*=x.shape[i];}for(var _i13=0;_i13<indices.rank;_i13++){outputShape.push(indices.shape[_i13]);}for(var _i14=axis+1;_i14<x.rank;_i14++){outputShape.push(x.shape[_i14]);sliceSize*=x.shape[_i14];}return{batchSize:batchSize,sliceSize:sliceSize,dimSize:dimSize,outputShape:outputShape};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/segment_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the sum along segments of a `tf.Tensor`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\r\n * const numSegments = 3;\r\n *\r\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\r\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\r\n * ```\r\n * @param x The `tf.Tensor` that will be summed along its segments.\r\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\r\n * dimension along the `axis`.  Maps each element of `x` to a segment.\r\n * @param numSegments The number of distinct `segmentIds`.\r\n */ /** @doc {heading: 'Operations', subheading: 'Segment'} */function unsortedSegmentSum_(x,segmentIds,numSegments){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','unsortedSegmentSum');var $segmentIds=Object(tensor_util_env[\"a\"/* convertToTensor */])(segmentIds,'segmentIds','unsortedSegmentSum','int32');Object(util[\"assert\"])(Object(util[\"isInt\"])(numSegments),function(){return'numSegments must be of dtype int';});var gradFunc=function gradFunc(dy,saved){var _saved60=_slicedToArray(saved,1),$segmentIds=_saved60[0];var derX=function derX(){return gatherDropNegatives(dy,$segmentIds);};return{$x:derX};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.unsortedSegmentSum($x,$segmentIds,numSegments);save([$segmentIds]);return res;},{$x:$x},gradFunc);}/**\r\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n * @param x The input tensor whose slices to be gathered.\r\n * @param indices The indices of the values to extract.\r\n * @param axis The axis over which to select values. Defaults to 0.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function gather_(x,indices){var axis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','gather');var $indices=Object(tensor_util_env[\"a\"/* convertToTensor */])(indices,'indices','gather','int32');axis=Object(util[\"parseAxisParam\"])(axis,$x.shape)[0];var shapeInfo=collectGatherOpShapeInfo($x,$indices,axis);var grad=function grad(dy,saved){var _saved61=_slicedToArray(saved,1),$indices=_saved61[0];var derX=function derX(){var paramsShape=$x.shape;var indicesSize=$indices.size;var outerShape=paramsShape.slice(0,axis);var outerDims=outerShape.length;var innerShape=paramsShape.slice(axis,paramsShape.length).slice(1);var innerDims=innerShape.length;var outerAxesIndices=arrayRange(0,outerDims);var innerAxesIndices=arrayRange(outerDims+1,outerDims+1+innerDims);var valuesShape=arrayConcat([outerShape,[indicesSize],innerShape]);var values=dy.reshape(valuesShape);var reshapedIndices=$indices.reshape([indicesSize]);var transposeDims=arrayConcat([[outerDims],outerAxesIndices,innerAxesIndices]);var valuesTranspose=values.transpose(transposeDims);var paramsGrad=unsortedSegmentSum(valuesTranspose,reshapedIndices,$x.shape[axis]);var invertTransposeDims=getUndoAxesPermutation(transposeDims);paramsGrad=paramsGrad.transpose(invertTransposeDims);return paramsGrad;};return{x:derX,indices:function indices(){return $indices;}};};return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.gather($x,$indices.flatten(),axis);save([$indices]);return res;},{x:$x,indices:$indices},grad,'Gather',{axis:axis}).reshape(shapeInfo.outputShape);}function arrayRange(start,stop){var result=[];for(var i=start;i<stop;++i){result.push(i);}return result;}function arrayConcat(arrays){var result=[];for(var i=0;i<arrays.length;++i){for(var j=0;j<arrays[i].length;++j){result.push(arrays[i][j]);}}return result;}function gatherDropNegatives(x,indices){// Helper function for unsorted segment ops. Gathers params for\n// positive segment ids and gathers 0 for inputs with negative segment id.\n// Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\nvar zeroClippedIndices=maximum(indices,Object(tensor_ops[\"o\"/* zerosLike */])(indices));var gathered=gather(x,zeroClippedIndices);var isPositive=greaterEqual(indices,Object(tensor_ops[\"e\"/* scalar */])(0,'int32'));var numIters=gathered.rank-isPositive.rank;for(var i=0;i<numIters;++i){isPositive=expandDims(isPositive,i+1);}isPositive=logicalAnd(isPositive,Object(tensor_ops[\"b\"/* ones */])(gathered.shape,'bool'));var zeroSlice=Object(tensor_ops[\"o\"/* zerosLike */])(gathered);return where(isPositive,gathered,zeroSlice);}var gather=Object(operation[\"a\"/* op */])({gather_:gather_});var unsortedSegmentSum=Object(operation[\"a\"/* op */])({unsortedSegmentSum_:unsortedSegmentSum_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Apply boolean mask to tensor.\r\n *\r\n * ```js\r\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\r\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\r\n * const result = await tf.booleanMaskAsync(tensor, mask);\r\n * result.print();\r\n * ```\r\n *\r\n * @param tensor N-D tensor.\r\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\r\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\r\n *     By default, axis is 0 which will mask from the first dimension.\r\n *     Otherwise K + axis <= N.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function booleanMaskAsync_(_x38,_x39,_x40){return _booleanMaskAsync_.apply(this,arguments);}function _booleanMaskAsync_(){_booleanMaskAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee46(tensor,mask,axis){var $tensor,$mask,axisFrom,maskDim,tensorShape,leadingSize,i,targetTensorShape,reshapedTensor,reshapedMask,positivePositions,indices,res;return regeneratorRuntime.wrap(function _callee46$(_context46){while(1){switch(_context46.prev=_context46.next){case 0:$tensor=Object(tensor_util_env[\"a\"/* convertToTensor */])(tensor,'tensor','boolMask');$mask=Object(tensor_util_env[\"a\"/* convertToTensor */])(mask,'mask','boolMask','bool');axisFrom=axis==null?0:axis;maskDim=$mask.rank;tensorShape=$tensor.shape;util[\"assert\"](maskDim>0,function(){return'mask cannot be scalar';});util[\"assertShapesMatch\"](tensorShape.slice(axisFrom,axisFrom+maskDim),$mask.shape,\"mask's shape must match the first K dimensions of tensor's shape,\");leadingSize=1;for(i=axisFrom;i<axisFrom+maskDim;i++){leadingSize*=tensorShape[i];}targetTensorShape=tensorShape.slice(0,axisFrom).concat([leadingSize],tensorShape.slice(axisFrom+maskDim));reshapedTensor=$tensor.reshape(targetTensorShape);reshapedMask=$mask.reshape([-1]);_context46.next=14;return whereAsync(reshapedMask);case 14:positivePositions=_context46.sent;indices=positivePositions.squeeze([1]);res=gather(reshapedTensor,indices,axisFrom);// Ensure no memory leak.\nif(tensor!==$tensor){$tensor.dispose();}if(mask!==$mask){$mask.dispose();}indices.dispose();reshapedTensor.dispose();reshapedMask.dispose();positivePositions.dispose();return _context46.abrupt(\"return\",res);case 24:case\"end\":return _context46.stop();}}},_callee46);}));return _booleanMaskAsync_.apply(this,arguments);}var booleanMaskAsync=booleanMaskAsync_;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Reverses a `tf.Tensor1D`.\r\n *\r\n * @param x The input tensor.\r\n */function reverse1d_(x){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reverse');util[\"assert\"]($x.rank===1,function(){return\"Error in reverse1D: x must be rank 1 but got rank \".concat($x.rank,\".\");});return reverse_reverse($x,0);}/**\r\n * Reverses a `tf.Tensor2D` along a specified axis.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */function reverse2d_(x,axis){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reverse');util[\"assert\"]($x.rank===2,function(){return\"Error in reverse2D: x must be rank 2 but got rank \".concat($x.rank,\".\");});return reverse_reverse($x,axis);}/**\r\n * Reverses a `tf.Tensor3D` along a specified axis.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */function reverse3d_(x,axis){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reverse');util[\"assert\"]($x.rank===3,function(){return\"Error in reverse3D: x must be rank 3 but got rank \".concat($x.rank,\".\");});return reverse_reverse($x,axis);}/**\r\n * Reverses a `tf.Tensor4D` along a specified axis.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */function reverse4d_(x,axis){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reverse');util[\"assert\"]($x.rank===4,function(){return\"Error in reverse4D: x must be rank 4 but got rank \".concat($x.rank,\".\");});return reverse_reverse($x,axis);}/**\r\n * Reverses a `tf.Tensor` along a specified axis.\r\n *\r\n * Also available are stricter rank-specific methods that assert that `x` is\r\n * of the given rank:\r\n *   - `tf.reverse1d`\r\n *   - `tf.reverse2d`\r\n *   - `tf.reverse3d`\r\n *   - `tf.reverse4d`\r\n *\r\n * Except `tf.reverse1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.reverse().print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.reverse(axis).print();\r\n * ```\r\n * @param x The input tensor to be reversed.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */function reverse_(x,axis){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','reverse');if($x.rank===0){return $x.clone();}var axes=util[\"parseAxisParam\"](axis,$x.shape);var grad=function grad(dy){return{$x:function $x(){return dy.reverse(axes);}};};var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.reverse($x,axes);},{$x:$x},grad);return res.reshapeAs($x);}var reverse_reverse=Object(operation[\"a\"/* op */])({reverse_:reverse_});var reverse1d=Object(operation[\"a\"/* op */])({reverse1d_:reverse1d_});var reverse2d=Object(operation[\"a\"/* op */])({reverse2d_:reverse2d_});var reverse3d=Object(operation[\"a\"/* op */])({reverse3d_:reverse3d_});var reverse4d=Object(operation[\"a\"/* op */])({reverse4d_:reverse4d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * @deprecated\r\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\r\n * shape.\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same shape and dtype as\r\n *     `a`.\r\n */function notEqualStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','notEqualStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','notEqualStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in notEqualStrict: ');return $a.notEqual($b);}/**\r\n * @deprecated\r\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\r\n * shape.\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same shape and dtype as\r\n *     `a`.\r\n */function lessStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','lessStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','lessStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in lessStrict: ');return $a.less($b);}function equalStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','equalStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','equalStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in equalStrict: ');return $a.equal($b);}function lessEqualStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','lessEqualStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','lessEqualStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in lessEqualStrict: ');return $a.lessEqual($b);}function greaterStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','greaterStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','greaterStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in greaterStrict: ');return $a.greater($b);}function greaterEqualStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','greaterEqualStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','greaterEqualStrict');Object(util[\"assertShapesMatch\"])($a.shape,$b.shape,'Error in greaterEqualStrict: ');return $a.greaterEqual($b);}var equalStrict=Object(operation[\"a\"/* op */])({equalStrict_:equalStrict_});var greaterEqualStrict=Object(operation[\"a\"/* op */])({greaterEqualStrict_:greaterEqualStrict_});var greaterStrict=Object(operation[\"a\"/* op */])({greaterStrict_:greaterStrict_});var lessEqualStrict=Object(operation[\"a\"/* op */])({lessEqualStrict_:lessEqualStrict_});var lessStrict=Object(operation[\"a\"/* op */])({lessStrict_:lessStrict_});var notEqualStrict=Object(operation[\"a\"/* op */])({notEqualStrict_:notEqualStrict_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * @deprecated\r\n * Adds two `tf.Tensor`s element-wise, A + B.\r\n *\r\n * Inputs must be the same shape. For broadcasting support, use add() instead.\r\n *\r\n * @param a The first Tensor to add element-wise.\r\n * @param b The second Tensor to add element-wise.\r\n */function addStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','addStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','addStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in addStrict: ');return $a.add($b);}/**\r\n * @deprecated\r\n * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must\r\n * be the same shape.\r\n *\r\n * For broadcasting support, use `tf.sub` instead.\r\n *\r\n * @param a The first Tensor to subtract element-wise.\r\n * @param b The second Tensor to subtract element-wise.\r\n */function subStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','subStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','subStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in subStrict: ');return $a.sub($b);}/**\r\n * @deprecated\r\n * Computes the power of one `tf.Tensor` to another. Inputs must\r\n * be the same shape.\r\n *\r\n * For broadcasting support, use `tf.pow` instead.\r\n *\r\n * @param base The base tensor to pow element-wise.\r\n * @param exp The exponent tensor to pow element-wise.\r\n */function powStrict_(base,exp){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');util[\"assertShapesMatch\"](base.shape,exp.shape,'Error in powStrict: ');return base.pow(exp);}/**\r\n * @deprecated\r\n * Multiplies two `tf.Tensor`s element-wise, A * B.\r\n *\r\n * Inputs must be the same shape. For broadcasting support, use `tf.mul`.\r\n *\r\n * @param a The first tensor to multiply.\r\n * @param b The first tensor to multiply. Must have the same\r\n *    dtype as `a`.\r\n */function mulStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','mul');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','mul');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in multiplyStrict: ');return $a.mul($b);}/**\r\n * @deprecated\r\n * Divides two `tf.Tensor`s element-wise, A / B. Inputs must\r\n * be the same shape.\r\n *\r\n * @param a The first tensor as the numerator for element-wise division.\r\n * @param b The second tensor as the denominator for element-wise division.\r\n */function divStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','div');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','div');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in divideStrict: ');return $a.div($b);}/**\r\n * @deprecated\r\n * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must\r\n * be the same shape. For broadcasting support, use mod().\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same dtype as `a`.\r\n */function modStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','modStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','modStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in modStrict: ');return $a.mod($b);}/**\r\n * @deprecated\r\n * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must\r\n * be the same shape. For broadcasting support, use minimum().\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same dtype as `a`.\r\n */function minimumStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','minimumStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','minimumStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in minimumStrict: ');return $a.minimum($b);}/**\r\n * @deprecated\r\n * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must\r\n * be the same shape. For broadcasting support, use maximum().\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same dtype as `a`.\r\n */function maximumStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','maximumStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','maximumStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in maximumStrict: ');return $a.maximum($b);}/**\r\n * @deprecated\r\n * Returns (a - b) * (a - b) element-wise.\r\n *\r\n * Inputs must be the same shape. For broadcasting support, use\r\n * `tf.squaredDifference` instead.\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n */function squaredDifferenceStrict_(a,b){deprecationWarn('strict variants of ops have been deprecated '+'and will be removed in future');var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','squaredDifferenceStrict');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','squaredDifferenceStrict');util[\"assertShapesMatch\"]($a.shape,$b.shape,'Error in squaredDifferenceStrict: ');return $a.squaredDifference($b);}var addStrict=Object(operation[\"a\"/* op */])({addStrict_:addStrict_});var divStrict=Object(operation[\"a\"/* op */])({divStrict_:divStrict_});var maximumStrict=Object(operation[\"a\"/* op */])({maximumStrict_:maximumStrict_});var minimumStrict=Object(operation[\"a\"/* op */])({minimumStrict_:minimumStrict_});var modStrict=Object(operation[\"a\"/* op */])({modStrict_:modStrict_});var mulStrict=Object(operation[\"a\"/* op */])({mulStrict_:mulStrict_});var powStrict=Object(operation[\"a\"/* op */])({powStrict_:powStrict_});var squaredDifferenceStrict=Object(operation[\"a\"/* op */])({squaredDifferenceStrict_:squaredDifferenceStrict_});var subStrict=Object(operation[\"a\"/* op */])({subStrict_:subStrict_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the softmax normalized vector given the logits.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n *\r\n * a.softmax().print();  // or tf.softmax(a)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\r\n *\r\n * a.softmax().print();  // or tf.softmax(a)\r\n * ```\r\n *\r\n * @param logits The logits array.\r\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\r\n *     which indicates the last dimension.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function softmax_(logits){var dim=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','softmax','float32');if(dim===-1){dim=$logits.rank-1;}if(dim!==$logits.rank-1){throw Error('Softmax along a non-last dimension is not yet supported. '+\"Logits was rank \".concat($logits.rank,\" and dim was \").concat(dim));}var inputsToSave=[];var outputsToSave=[true];return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.softmax($logits,dim);save([y]);return y;},{logits:$logits},function(dy,saved){var _saved62=_slicedToArray(saved,1),y=_saved62[0];var dyTimesY=dy.mul(y);var keepDims=true;return{logits:function logits(){return dyTimesY.sub(dyTimesY.sum([dim],keepDims).mul(y));}};},'Softmax',{dim:dim},inputsToSave,outputsToSave);}/**\r\n * Computes the log softmax.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n *\r\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\r\n *\r\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\r\n * ```\r\n *\r\n * @param logits The logits array.\r\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\r\n *     which indicates the last dimension.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function logSoftmax_(logits){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','logSoftmax');if(axis===-1){axis=$logits.rank-1;}if(axis!==$logits.rank-1){throw Error('Log Softmax along a non-last dimension is not yet supported. '+\"Logits was rank \".concat($logits.rank,\" and axis was \").concat(axis));}var customOp=customGrad(function(logits,save){var keepDims=true;var xMax=logits.max(axis,true);var shifted=logits.sub(xMax);var value=shifted.toFloat().sub(shifted.exp().sum(axis,keepDims).log());save([value]);var gradFunc=function gradFunc(dy,saved){var _saved63=_slicedToArray(saved,1),value=_saved63[0];var softmax=value.exp();return dy.sub(dy.sum(axis,keepDims).mul(softmax));};return{value:value,gradFunc:gradFunc};});return customOp($logits);}var softmax=Object(operation[\"a\"/* op */])({softmax_:softmax_});var logSoftmax=Object(operation[\"a\"/* op */])({logSoftmax_:logSoftmax_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the norm of scalar, vectors, and matrices.\r\n * This function can compute several different vector norms (the 1-norm, the\r\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\r\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.norm().print();  // or tf.norm(x)\r\n * ```\r\n *\r\n * @param x The input array.\r\n * @param ord Optional. Order of the norm. Supported norm types are\r\n * following:\r\n *\r\n *  | ord        | norm for matrices         | norm for vectors\r\n *  |------------|---------------------------|---------------------\r\n *  |'euclidean' |Frobenius norm             |2-norm\r\n *  |'fro'       |Frobenius norm\t           |\r\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\r\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\r\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\r\n *  |2           |                           |sum(abs(x)^2)^1/2*\r\n *\r\n * @param axis Optional. If axis is null (the default), the input is\r\n * considered a vector and a single vector norm is computed over the entire\r\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\r\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\r\n * is considered a batch of vectors, and axis determines the axis in x\r\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\r\n * considered a batch of matrices and axis determines the axes in NDArray\r\n * over which to compute a matrix norm.\r\n * @param keepDims Optional. If true, the norm have the same dimensionality\r\n * as the input.\r\n */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */function norm_(x){var ord=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'euclidean';var axis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var keepDims=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','norm');var norm=normImpl(x,ord,axis);var keepDimsShape=norm.shape;if(keepDims){var axes=Object(util[\"parseAxisParam\"])(axis,x.shape);keepDimsShape=expandShapeToKeepDim(norm.shape,axes);}return norm.reshape(keepDimsShape);}function normImpl(x,p){var axis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(x.rank===0){return x.abs();}// consider vector when no axis is specified\nif(x.rank!==1&&axis===null){return normImpl(x.reshape([-1]),p,axis);}// vector\nif(x.rank===1||typeof axis==='number'||Array.isArray(axis)&&axis.length===1){if(p===1){return x.abs().sum(axis);}if(p===Infinity){return x.abs().max(axis);}if(p===-Infinity){return x.abs().min(axis);}if(p==='euclidean'||p===2){// norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\nreturn x.abs().pow(Object(tensor_ops[\"e\"/* scalar */])(2,'int32')).sum(axis).sqrt();}throw new Error(\"Error in norm: invalid ord value: \".concat(p));}// matrix (assumption axis[0] < axis[1])\nif(Array.isArray(axis)&&axis.length===2){if(p===1){return x.abs().sum(axis[0]).max(axis[1]-1);}if(p===Infinity){return x.abs().sum(axis[1]).max(axis[0]);}if(p===-Infinity){return x.abs().sum(axis[1]).min(axis[0]);}if(p==='fro'||p==='euclidean'){// norm(x) = sqrt(sum(pow(x, 2)))\nreturn x.square().sum(axis).sqrt();}throw new Error(\"Error in norm: invalid ord value: \".concat(p));}throw new Error(\"Error in norm: invalid axis: \".concat(axis));}var norm_norm=Object(operation[\"a\"/* op */])({norm_:norm_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/lstm.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes the next states and outputs of a stack of LSTMCells.\r\n *\r\n * Each cell output is used as input to the next cell.\r\n *\r\n * Returns `[cellState, cellOutput]`.\r\n *\r\n * Derived from tf.contrib.rn.MultiRNNCell.\r\n *\r\n * @param lstmCells Array of LSTMCell functions.\r\n * @param data The input to the cell.\r\n * @param c Array of previous cell states.\r\n * @param h Array of previous cell outputs.\r\n */ /** @doc {heading: 'Operations', subheading: 'RNN'} */function multiRNNCell_(lstmCells,data,c,h){var $data=Object(tensor_util_env[\"a\"/* convertToTensor */])(data,'data','multiRNNCell');var $c=Object(tensor_util_env[\"b\"/* convertToTensorArray */])(c,'c','multiRNNCell');var $h=Object(tensor_util_env[\"b\"/* convertToTensorArray */])(h,'h','multiRNNCell');var input=$data;var newStates=[];for(var i=0;i<lstmCells.length;i++){var output=lstmCells[i](input,$c[i],$h[i]);newStates.push(output[0]);newStates.push(output[1]);input=output[1];}var newC=[];var newH=[];for(var _i15=0;_i15<newStates.length;_i15+=2){newC.push(newStates[_i15]);newH.push(newStates[_i15+1]);}return[newC,newH];}/**\r\n * Computes the next state and output of a BasicLSTMCell.\r\n *\r\n * Returns `[newC, newH]`.\r\n *\r\n * Derived from tf.contrib.rnn.BasicLSTMCell.\r\n *\r\n * @param forgetBias Forget bias for the cell.\r\n * @param lstmKernel The weights for the cell.\r\n * @param lstmBias The bias for the cell.\r\n * @param data The input to the cell.\r\n * @param c Previous cell state.\r\n * @param h Previous cell output.\r\n */ /** @doc {heading: 'Operations', subheading: 'RNN'} */function basicLSTMCell_(forgetBias,lstmKernel,lstmBias,data,c,h){var $forgetBias=Object(tensor_util_env[\"a\"/* convertToTensor */])(forgetBias,'forgetBias','basicLSTMCell');var $lstmKernel=Object(tensor_util_env[\"a\"/* convertToTensor */])(lstmKernel,'lstmKernel','basicLSTMCell');var $lstmBias=Object(tensor_util_env[\"a\"/* convertToTensor */])(lstmBias,'lstmBias','basicLSTMCell');var $data=Object(tensor_util_env[\"a\"/* convertToTensor */])(data,'data','basicLSTMCell');var $c=Object(tensor_util_env[\"a\"/* convertToTensor */])(c,'c','basicLSTMCell');var $h=Object(tensor_util_env[\"a\"/* convertToTensor */])(h,'h','basicLSTMCell');var combined=$data.concat($h,1);var weighted=combined.matMul($lstmKernel);var res=weighted.add($lstmBias);// i = input_gate, j = new_input, f = forget_gate, o = output_gate\nvar batchSize=res.shape[0];var sliceCols=res.shape[1]/4;var sliceSize=[batchSize,sliceCols];var i=res.slice([0,0],sliceSize);var j=res.slice([0,sliceCols],sliceSize);var f=res.slice([0,sliceCols*2],sliceSize);var o=res.slice([0,sliceCols*3],sliceSize);var newC=i.sigmoid().mul(j.tanh()).add($c.mul($forgetBias.add(f).sigmoid()));var newH=newC.tanh().mul(o.sigmoid());return[newC,newH];}var basicLSTMCell=Object(operation[\"a\"/* op */])({basicLSTMCell_:basicLSTMCell_});var multiRNNCell=Object(operation[\"a\"/* op */])({multiRNNCell_:multiRNNCell_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Compute the moving average of a variable.\r\n *\r\n * Without zeroDebias, the moving average operation is defined by:\r\n *   `v += delta`\r\n * where\r\n *   `delta = (1 - decay) * (x - v)`\r\n *\r\n * With zeroDebias (default), the `delta` term is scaled to debias the\r\n * effect of the (assumed) zero-initialization of `v`.\r\n *   `delta /= (1 - decay ^ step)`\r\n *\r\n * For more details on the zero-debiasing algorithm, see:\r\n *   https://arxiv.org/abs/1412.6980\r\n *\r\n * Note that this function is completely stateless and does not keep track of\r\n * step count. The step count needs to be maintained by the caller and passed\r\n * in as `step`.\r\n *\r\n * @param v The current moving average value.\r\n * @param x New input value, must have the same shape and dtype as `v`.\r\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\r\n * @param step Step count.\r\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\r\n * @returns The new moving average value.\r\n */ /** @doc {heading: 'Operations', subheading: 'Moving Average'} */function movingAverage_(v,x,decay,step){var zeroDebias=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;var $v=Object(tensor_util_env[\"a\"/* convertToTensor */])(v,'v','movingAverage');var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','movingAverage');var $decay=Object(tensor_util_env[\"a\"/* convertToTensor */])(decay,'decay','movingAverage');Object(tensor_util[\"assertTypesMatch\"])($v,$x);util[\"assert\"](util[\"arraysEqual\"]($v.shape,$x.shape),function(){return'Shape mismatch in v and x';});var one=Object(tensor_ops[\"e\"/* scalar */])(1);var oneMinusDecay=one.sub($decay);var update=$x.sub($v).mul(oneMinusDecay);if(zeroDebias){util[\"assert\"](step!=null,function(){return'When using zeroDebias: true, step is required.';});var $step=Object(tensor_util_env[\"a\"/* convertToTensor */])(step,'step','movingAverage');update=update.div(one.sub(pow($decay,$step)));}return $v.add(update);}var movingAverage=Object(operation[\"a\"/* op */])({movingAverage_:movingAverage_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Extracts a strided slice of a tensor.\r\n *\r\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\r\n * the given input tensor (x). Starting at the location specified by begin the\r\n * slice continues by adding stride to the index until all dimensions are not\r\n * less than end. Note that a stride can be negative, which causes a reverse\r\n * slice.\r\n *\r\n * ```js\r\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n *    [3, 2, 3]);\r\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\r\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\r\n *                                                     // [4, 4, 4]]]\r\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\r\n *                                                     // [3, 3, 3]]]\r\n * ```\r\n *\r\n * @param x The tensor to stride slice.\r\n * @param begin The coordinates to start the slice from.\r\n * @param end: The coordinates to end the slice at.\r\n * @param strides: The size of the slice.\r\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\r\n *      and the fullest possible range in that dimension is used instead.\r\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\r\n *      and the fullest possible range in that dimension is used instead.\r\n * @param shrinkAxisMask: a bitmask where bit i implies that\r\n * the ith specification should shrink the dimensionality. begin and end must\r\n * imply a slice of size 1 in the dimension.\r\n */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */function stridedSlice_(x,begin,end,strides){var beginMask=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var endMask=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;var ellipsisMask=arguments.length>6&&arguments[6]!==undefined?arguments[6]:0;var newAxisMask=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;var shrinkAxisMask=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;if(strides==null){strides=new Array(begin.length);}var ellipsisAxes=maskToAxes(ellipsisMask);if(ellipsisAxes.length>1){throw new Error('Multiple ellipses in slice is not allowed.');}if(ellipsisMask!==0&&newAxisMask!==0){throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');}if(ellipsisMask!==0&&shrinkAxisMask!==0){throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','stridedSlice');var numInterpolatedAxes=$x.rank-begin.length;// Expand the dims of x based on the newAxisMask.\nvar expandAxes=maskToAxes(newAxisMask);var newShape=$x.shape.slice();expandAxes.forEach(function(axis){begin[axis]=0;end[axis]=1;newShape.splice(axis,0,1);});$x=$x.reshape(newShape);// Normalize the start, end and strides.\nfor(var axis=0;axis<$x.rank;axis++){begin[axis]=startForAxis(beginMask,begin,strides,$x.shape,axis,ellipsisMask);end[axis]=stopForAxis(endMask,end,strides,$x.shape,axis,ellipsisMask);strides[axis]=stridesForAxis(strides,axis,ellipsisMask);}if(ellipsisAxes.length&&numInterpolatedAxes>0){var fullIndex=ellipsisAxes[0];// The ellipsis applies to the masked index as well as any dimensions that\n// were interpolated as full selection.\nvar numElidedAxes=numInterpolatedAxes+1;begin=startIndicesWithElidedDims(begin,fullIndex,numElidedAxes);end=stopIndicesWithElidedDims(end,fullIndex,numElidedAxes,$x.shape);strides=stridesWithElidedDims(strides,fullIndex,numElidedAxes);}var shrinkAxes=maskToAxes(shrinkAxisMask);// Adjust the ends based on the shrink mask.\nshrinkAxes.forEach(function(axis){end[axis]=begin[axis]+1;strides[axis]=1;});// Figure out the output shape.\nvar size=slice_util_computeOutShape(begin,end,strides);// Remove the axes based on shrinkMask.\nvar outShape=size.filter(function(_,axis){return shrinkAxes.indexOf(axis)===-1;});var nonStrided=strides.every(function(v){return v===1;});if(nonStrided){return slice($x,begin,size).reshape(outShape);}var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.stridedSlice($x,begin,end,strides);},{$x:$x});return res.reshape(outShape);}var stridedSlice=Object(operation[\"a\"/* op */])({stridedSlice_:stridedSlice_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Finds the values and indices of the `k` largest entries along the last\r\n * dimension.\r\n *\r\n * If the input is a vector (rank=1), finds the k largest entries in the vector\r\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\r\n * largest entry in input, and its index is indices[j].\r\n * For higher rank inputs, computes the top k entries along the last dimension.\r\n *\r\n * If two elements are equal, the lower-index element appears first.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\r\n * const {values, indices} = tf.topk(a);\r\n * values.print();\r\n * indices.print();\r\n * ```\r\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\r\n * @param k Number of top elements to look for along the last dimension.\r\n * @param sorted If true, the resulting `k` elements will be sorted by the\r\n *     values in descending order.\r\n */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */function topk_(x){var k=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var sorted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','topk');if($x.rank===0){throw new Error('topk() expects the input to be of rank 1 or higher');}var lastDim=$x.shape[$x.shape.length-1];if(k>lastDim){throw new Error(\"'k' passed to topk() must be <= the last dimension (\".concat(lastDim,\") \")+\"but got \".concat(k));}var _engine$a$runKernelFu=engine[\"a\"/* ENGINE */].runKernelFunc(function(b){return b.topk($x,k,sorted);},{$x:$x}),_engine$a$runKernelFu2=_slicedToArray(_engine$a$runKernelFu,2),values=_engine$a$runKernelFu2[0],indices=_engine$a$runKernelFu2[1];return{values:values,indices:indices};}var topk=Object(operation[\"a\"/* op */])({topk_:topk_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a new tensor by applying sparse updates to individual\r\n * values or slices within a zero tensor of the given shape tensor according to\r\n * indices. This operator is the inverse of the `tf.gatherND` operator which\r\n * extracts values or slices from a given tensor.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\r\n * const updates = tf.tensor1d([9, 10, 11, 12]);\r\n * const shape = [8];\r\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\r\n * ```\r\n *\r\n * @param indices The tensor contains the indices into the output tensor.\r\n * @param updates The tensor contains the value for the indices.\r\n * @param shape: The shape of the output tensor.\r\n */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */function scatterND_(indices,updates,shape){var $indices=Object(tensor_util_env[\"a\"/* convertToTensor */])(indices,'indices','scatterND','int32');var $updates=Object(tensor_util_env[\"a\"/* convertToTensor */])(updates,'updates','scatterND');validateInput($updates,$indices,shape);return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.scatterND($indices,$updates,shape);},{indices:$indices,updates:$updates},null/* backward */,'ScatterNd',{shape:shape});}var scatterND=Object(operation[\"a\"/* op */])({scatterND_:scatterND_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\r\n * dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.fft().print();  // tf.spectral.fft(x).print();\r\n * ```\r\n * @param input The complex input to compute an fft over.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */function fft_(input){Object(util[\"assert\"])(input.dtype==='complex64',function(){return\"The dtype for tf.spectral.fft() must be complex64 \"+\"but got \".concat(input.dtype,\".\");});// Collapse all outer dimensions to a single batch dimension.\nvar innerDimensionSize=input.shape[input.shape.length-1];var batch=input.size/innerDimensionSize;var input2D=input.as2D(batch,innerDimensionSize);var ret=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.fft(input2D);},{input:input});return ret.reshape(input.shape);}/**\r\n * Inverse fast Fourier transform.\r\n *\r\n * Computes the inverse 1-dimensional discrete Fourier transform over the\r\n * inner-most dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.ifft().print();  // tf.spectral.ifft(x).print();\r\n * ```\r\n * @param input The complex input to compute an ifft over.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */function ifft_(input){Object(util[\"assert\"])(input.dtype==='complex64',function(){return\"The dtype for tf.spectral.ifft() must be complex64 \"+\"but got \".concat(input.dtype,\".\");});// Collapse all outer dimensions to a single batch dimension.\nvar innerDimensionSize=input.shape[input.shape.length-1];var batch=input.size/innerDimensionSize;var input2D=input.as2D(batch,innerDimensionSize);var ret=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.ifft(input2D);},{input:input});return ret.reshape(input.shape);}/**\r\n * Real value input fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional discrete Fourier transform over the\r\n * inner-most dimension of the real input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n *\r\n * real.rfft().print();\r\n * ```\r\n * @param input The real value input to compute an rfft over.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */function rfft_(input,fftLength){Object(util[\"assert\"])(input.dtype==='float32',function(){return\"The dtype for rfft() must be real value but got \".concat(input.dtype);});var innerDimensionSize=input.shape[input.shape.length-1];var batch=input.size/innerDimensionSize;var adjustedInput;if(fftLength!=null&&fftLength<innerDimensionSize){// Need to crop\nvar begin=input.shape.map(function(v){return 0;});var size=input.shape.map(function(v){return v;});size[input.shape.length-1]=fftLength;adjustedInput=input.slice(begin,size);innerDimensionSize=fftLength;}else if(fftLength!=null&&fftLength>innerDimensionSize){// Need to pad with zeros\nvar zerosShape=input.shape.map(function(v){return v;});zerosShape[input.shape.length-1]=fftLength-innerDimensionSize;adjustedInput=input.concat(Object(tensor_ops[\"n\"/* zeros */])(zerosShape),input.shape.length-1);innerDimensionSize=fftLength;}else{adjustedInput=input;}// Complement the input with zero imaginary numbers.\nvar zerosInput=adjustedInput.zerosLike();var complexInput=Object(complex[\"a\"/* complex */])(adjustedInput,zerosInput).as2D(batch,innerDimensionSize);var ret=fft(complexInput);// Exclude complex conjugations. These conjugations are put symmetrically.\nvar half=Math.floor(innerDimensionSize/2)+1;var realValues=Object(real[\"a\"/* real */])(ret);var imagValues=Object(imag[\"a\"/* imag */])(ret);var realComplexConjugate=realValues.split([half,innerDimensionSize-half],realValues.shape.length-1);var imagComplexConjugate=imagValues.split([half,innerDimensionSize-half],imagValues.shape.length-1);var outputShape=adjustedInput.shape.slice();outputShape[adjustedInput.shape.length-1]=half;return Object(complex[\"a\"/* complex */])(realComplexConjugate[0],imagComplexConjugate[0]).reshape(outputShape);}/**\r\n * Inversed real value input fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional inversed discrete Fourier transform over the\r\n * inner-most dimension of the real input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([0, 0, 0]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.irfft().print();\r\n * ```\r\n * @param input The real value input to compute an irfft over.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */function irfft_(input){var innerDimensionSize=input.shape[input.shape.length-1];var batch=input.size/innerDimensionSize;if(innerDimensionSize<=2){var complexInput=input.as2D(batch,innerDimensionSize);var ret=ifft(complexInput);return Object(real[\"a\"/* real */])(ret);}else{// The length of unique components of the DFT of a real-valued signal\n// is 2 * (input_len - 1)\nvar outputShape=[batch,2*(innerDimensionSize-1)];var realInput=Object(real[\"a\"/* real */])(input).as2D(batch,innerDimensionSize);var imagInput=Object(imag[\"a\"/* imag */])(input).as2D(batch,innerDimensionSize);var realConjugate=realInput.slice([0,1],[batch,innerDimensionSize-2]).reverse(1);var imagConjugate=imagInput.slice([0,1],[batch,innerDimensionSize-2]).reverse(1).mul(Object(tensor_ops[\"e\"/* scalar */])(-1));var r=realInput.concat(realConjugate,1);var i=imagInput.concat(imagConjugate,1);var _complexInput=Object(complex[\"a\"/* complex */])(r,i).as2D(outputShape[0],outputShape[1]);var _ret=ifft(_complexInput);return Object(real[\"a\"/* real */])(_ret);}}var fft=Object(operation[\"a\"/* op */])({fft_:fft_});var ifft=Object(operation[\"a\"/* op */])({ifft_:ifft_});var rfft=Object(operation[\"a\"/* op */])({rfft_:rfft_});var irfft=Object(operation[\"a\"/* op */])({irfft_:irfft_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js\n/**\r\n * Validate sparseToDense inputs.\r\n *\r\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\r\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\r\n * placed.\r\n * @param sparseValues A 0-D or 1-D Tensor. Values\r\n * corresponding to each row of sparseIndices, or a scalar value to be used for\r\n * all sparse indices.\r\n * @param outputShape number[]. Shape of the dense output tensor.\r\n * @param validateIndices boolean. indice validation is not supported, error\r\n * will be thrown if it is set.\r\n */function sparse_to_dense_util_validateInput(sparseIndices,sparseValues,outputShape,defaultValues){if(sparseIndices.dtype!=='int32'){throw new Error('tf.sparseToDense() expects the indices to be int32 type,'+\" but the dtype was \".concat(sparseIndices.dtype,\".\"));}if(sparseIndices.rank>2){throw new Error('sparseIndices should be a scalar, vector, or matrix,'+\" but got shape \".concat(sparseIndices.shape,\".\"));}var numElems=sparseIndices.rank>0?sparseIndices.shape[0]:1;var numDims=sparseIndices.rank>1?sparseIndices.shape[1]:1;if(outputShape.length!==numDims){throw new Error('outputShape has incorrect number of elements:,'+\" \".concat(outputShape.length,\", should be: \").concat(numDims,\".\"));}var numValues=sparseValues.size;if(!(sparseValues.rank===0||sparseValues.rank===1&&numValues===numElems)){throw new Error('sparseValues has incorrect shape '+\"\".concat(sparseValues.shape,\", should be [] or [\").concat(numElems,\"]\"));}if(sparseValues.dtype!==defaultValues.dtype){throw new Error('sparseValues.dtype must match defaultValues.dtype');}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Converts a sparse representation into a dense tensor.\r\n *\r\n * Builds an array dense with shape outputShape such that:\r\n *\r\n * // If sparseIndices is scalar\r\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\r\n *\r\n * // If sparseIndices is a vector, then for each i\r\n * dense[sparseIndices[i]] = sparseValues[i]\r\n *\r\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\r\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\r\n * All other values in dense are set to defaultValue. If sparseValues is a\r\n * scalar, all sparse indices are set to this single value.\r\n *\r\n * If indices are repeated the final value is summed over all values for those\r\n * indices.\r\n *\r\n * ```js\r\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\r\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\r\n * const shape = [8];\r\n * tf.sparseToDense(indices, values, shape).print();\r\n * ```\r\n *\r\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\r\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\r\n * placed.\r\n * @param sparseValues A 0-D or 1-D Tensor. Values\r\n * corresponding to each row of sparseIndices, or a scalar value to be used for\r\n * all sparse indices.\r\n * @param outputShape Shape of the dense output tensor. the type is inferred.\r\n * @param defaultValue Scalar. Value to set for indices not specified in\r\n * sparseIndices. Defaults to zero.\r\n */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */function sparseToDense_(sparseIndices,sparseValues,outputShape){var defaultValue=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var $sparseIndices=Object(tensor_util_env[\"a\"/* convertToTensor */])(sparseIndices,'sparseIndices','sparseToDense','int32');var $sparseValues=Object(tensor_util_env[\"a\"/* convertToTensor */])(sparseValues,'sparseValues','sparseToDense');var $defaultValue=Object(tensor_util_env[\"a\"/* convertToTensor */])(defaultValue,'defaultValue','sparseToDense',$sparseValues.dtype);sparse_to_dense_util_validateInput($sparseIndices,$sparseValues,outputShape,$defaultValue);return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.sparseToDense($sparseIndices,$sparseValues,outputShape,$defaultValue);},{$sparseIndices:$sparseIndices,$sparseValues:$sparseValues,$defaultValue:$defaultValue});}var sparseToDense=Object(operation[\"a\"/* op */])({sparseToDense_:sparseToDense_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Gather slices from input tensor into a Tensor with shape specified by\r\n * `indices`.\r\n *\r\n * `indices` is an K-dimensional integer tensor, best thought of as a\r\n * (K-1)-dimensional tensor of indices into input, where each element defines a\r\n * slice of input:\r\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n *\r\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\r\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\r\n * of input, where N = indices.shape[-1].\r\n *\r\n * The last dimension of indices can be at most the rank of input:\r\n * indices.shape[-1] <= input.rank\r\n *\r\n * The last dimension of `indices` corresponds to elements\r\n * (if indices.shape[-1] == input.rank) or slices\r\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\r\n * input.\r\n * The output tensor has shape\r\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\r\n *\r\n * Note that on CPU, if an out of bound index is found, an error is returned. On\r\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\r\n * output value.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\r\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\r\n * tf.gatherND(input, indices).print() // [10, 11]\r\n * ```\r\n *\r\n * @param x The tensor from which to gather values.\r\n * @param indices Index tensor, must be of type int32.\r\n */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */function gatherND_(x,indices){var $indices=Object(tensor_util_env[\"a\"/* convertToTensor */])(indices,'indices','gatherND','int32');var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','gatherND');var forward=function forward(backend){return backend.gatherND($x,$indices);};var inputs={params:$x,indices:$indices};return engine[\"a\"/* ENGINE */].runKernelFunc(forward,inputs,null/* gradient */,kernel_names[\"G\"/* GatherNd */]);}var gatherND=Object(operation[\"a\"/* op */])({gatherND_:gatherND_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Normalize noise shape based on provided tensor and noise shape.\r\n *\r\n * @param x Tensor.\r\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\r\n *   an array of numbers. Optional.\r\n * @returns Normalized noise shape.\r\n */function getNoiseShape(x,noiseShape){if(noiseShape==null){return x.shape.slice();}if(util[\"arraysEqual\"](x.shape,noiseShape)){return noiseShape;}if(x.shape.length===noiseShape.length){var newDimension=[];for(var i=0;i<x.shape.length;i++){if(noiseShape[i]==null&&x.shape[i]!=null){newDimension.push(x.shape[i]);}else{newDimension.push(noiseShape[i]);}}return newDimension;}return noiseShape;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes dropout.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 2, 1]);\r\n * const rate = 0.75;\r\n * const output = tf.dropout(x, rate);\r\n * output.print();\r\n * ```\r\n *\r\n * @param x A floating point Tensor or TensorLike.\r\n * @param rate A float in the range [0, 1). The probability that each element\r\n *   of x is discarded.\r\n * @param noiseShape An array of numbers of type int32, representing the\r\n * shape for randomly generated keep/drop flags. If the noiseShape has null\r\n * value, it will be automatically replaced with the x's relative dimension\r\n * size. Optional.\r\n * @param seed Used to create random seeds. Optional.\r\n * @returns A Tensor of the same shape of x.\r\n */ /** @doc {heading: 'Operations', subheading: 'Dropout'} */function dropout_(x,rate,noiseShape,seed){var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','dropout');util[\"assert\"]($x.dtype==='float32',function(){return\"x has to be a floating point tensor since it's going to be \"+\"scaled, but got a \".concat($x.dtype,\" tensor instead.\");});util[\"assert\"](rate>=0&&rate<1,function(){return\"rate must be a float in the range [0, 1), but got \".concat(rate,\".\");});if(rate===0){return x instanceof dist_tensor[\"a\"/* Tensor */]?$x.clone():$x;}var $noiseShape=getNoiseShape($x,noiseShape);var keepProb=1-rate;var multiplier=randomUniform($noiseShape,0,1,'float32',seed).add(keepProb).floor().div(keepProb);return $x.mul(multiplier);}var dropout=Object(operation[\"a\"/* op */])({dropout_:dropout_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Generate a Hann window.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\r\n *\r\n * ```js\r\n * tf.signal.hannWindow(10).print();\r\n * ```\r\n * @param The length of window\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */function hannWindow_(windowLength){return cosineWindow(windowLength,0.5,0.5);}/**\r\n * Generate a hamming window.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\r\n *\r\n * ```js\r\n * tf.signal.hammingWindow(10).print();\r\n * ```\r\n * @param The length of window\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */function hammingWindow_(windowLength){return cosineWindow(windowLength,0.54,0.46);}/**\r\n * Expands input into frames of frameLength.\r\n * Slides a window size with frameStep.\r\n *\r\n * ```js\r\n * tf.signal.frame([1, 2, 3], 2, 1).print();\r\n * ```\r\n * @param signal The input tensor to be expanded\r\n * @param frameLength Length of each frame\r\n * @param frameStep The frame hop size in samples.\r\n * @param padEnd Whether to pad the end of signal with padValue.\r\n * @param padValue An number to use where the input signal does\r\n *     not exist when padEnd is True.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */function frame_(signal,frameLength,frameStep){var padEnd=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var padValue=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var start=0;var output=[];while(start+frameLength<=signal.size){output.push(slice(signal,start,frameLength));start+=frameStep;}if(padEnd){while(start<signal.size){var padLen=start+frameLength-signal.size;var pad=concat([slice(signal,start,frameLength-padLen),fill([padLen],padValue)]);output.push(pad);start+=frameStep;}}if(output.length===0){return Object(tensor_ops[\"h\"/* tensor2d */])([],[0,frameLength]);}return concat(output).as2D(output.length,frameLength);}/**\r\n * Computes the Short-time Fourier Transform of signals\r\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\r\n *\r\n * ```js\r\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\r\n * tf.signal.stft(input, 3, 1).print();\r\n * ```\r\n * @param signal 1-dimensional real value tensor.\r\n * @param frameLength The window length of samples.\r\n * @param frameStep The number of samples to step.\r\n * @param fftLength The size of the FFT to apply.\r\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\r\n */ /**\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */function stft_(signal,frameLength,frameStep,fftLength){var windowFn=arguments.length>4&&arguments[4]!==undefined?arguments[4]:hannWindow;if(fftLength==null){fftLength=enclosingPowerOfTwo(frameLength);}var framedSignal=signal_ops_frame(signal,frameLength,frameStep);var windowedSignal=mul(framedSignal,windowFn(frameLength));var output=[];for(var i=0;i<framedSignal.shape[0];i++){output.push(rfft(windowedSignal.slice([i,0],[1,frameLength]),fftLength));}return concat(output);}function enclosingPowerOfTwo(value){// Return 2**N for integer N such that 2**N >= value.\nreturn Math.floor(Math.pow(2,Math.ceil(Math.log(value)/Math.log(2.0))));}function cosineWindow(windowLength,a,b){var even=1-windowLength%2;var newValues=new Float32Array(windowLength);for(var i=0;i<windowLength;++i){var cosArg=2.0*Math.PI*i/(windowLength+even-1);newValues[i]=a-b*Math.cos(cosArg);}return Object(tensor_ops[\"g\"/* tensor1d */])(newValues,'float32');}var hannWindow=Object(operation[\"a\"/* op */])({hannWindow_:hannWindow_});var hammingWindow=Object(operation[\"a\"/* op */])({hammingWindow_:hammingWindow_});var signal_ops_frame=Object(operation[\"a\"/* op */])({frame_:frame_});var stft=Object(operation[\"a\"/* op */])({stft_:stft_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns whether the targets are in the top K predictions.\r\n *\r\n * ```js\r\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\r\n * const targets = tf.tensor1d([2, 0]);\r\n * const precision = await tf.inTopKAsync(predictions, targets);\r\n * precision.print();\r\n * ```\r\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\r\n *     at least `k`.\r\n * @param targets 1-D or higher `tf.Tensor`.\r\n * @param k Optional Number of top elements to look at for computing precision,\r\n *     default to 1.\r\n */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */function inTopKAsync_(_x41,_x42){return _inTopKAsync_.apply(this,arguments);}function _inTopKAsync_(){_inTopKAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee47(predictions,targets){var k,$predictions,$targets,lastDim,predictionsVals,targetsVals,batch,size,precision,b,offset,vals,valAndInd,i,_i20,_args48=arguments;return regeneratorRuntime.wrap(function _callee47$(_context47){while(1){switch(_context47.prev=_context47.next){case 0:k=_args48.length>2&&_args48[2]!==undefined?_args48[2]:1;$predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','inTopK');$targets=Object(tensor_util_env[\"a\"/* convertToTensor */])(targets,'targets','inTopK');Object(util[\"assert\"])($predictions.rank>1,function(){return'inTopK() expects the predictions to be of rank 2 or higher, '+\"but got \".concat($predictions.rank);});Object(util[\"assert\"])($predictions.rank-1===$targets.rank,function(){return\"predictions rank should be 1 larger than \"+\"targets rank, but got predictions rank \"+\"\".concat($predictions.rank,\" and targets rank \").concat($targets.rank);});Object(util[\"assertShapesMatch\"])($predictions.shape.slice(0,$predictions.shape.length-1),$targets.shape,\"predictions's shape should be align with the targets' shape, \"+'except the last dimension.');lastDim=$predictions.shape[$predictions.shape.length-1];Object(util[\"assert\"])(k>0&&k<=lastDim,function(){return\"'k' passed to inTopK() must be > 0 && <= the predictions last \"+\"dimension (\".concat(lastDim,\"), but got \").concat(k);});_context47.next=10;return $predictions.data();case 10:predictionsVals=_context47.sent;_context47.next=13;return $targets.data();case 13:targetsVals=_context47.sent;// Reshape predictionsVals into a 2d tensor [batch, lastDim]\n// and look up topK along lastDim.\nbatch=predictionsVals.length/lastDim,size=lastDim;precision=Object(util[\"getTypedArrayFromDType\"])('bool',batch);b=0;case 17:if(!(b<batch)){_context47.next=35;break;}offset=b*size;vals=predictionsVals.subarray(offset,offset+size);valAndInd=[];for(i=0;i<vals.length;i++){valAndInd.push({value:vals[i],index:i});}valAndInd.sort(function(a,b){return b.value-a.value;});precision[b]=0;_i20=0;case 25:if(!(_i20<k)){_context47.next=32;break;}if(!(valAndInd[_i20].index===targetsVals[b])){_context47.next=29;break;}precision[b]=1;return _context47.abrupt(\"break\",32);case 29:_i20++;_context47.next=25;break;case 32:b++;_context47.next=17;break;case 35:if(predictions!==$predictions){$predictions.dispose();}if(targets!==$targets){$targets.dispose();}// Output precision has the same shape as targets.\nreturn _context47.abrupt(\"return\",Object(tensor_ops[\"f\"/* tensor */])(precision,$targets.shape,'bool'));case 38:case\"end\":return _context47.stop();}}},_callee47);}));return _inTopKAsync_.apply(this,arguments);}var inTopKAsync=inTopKAsync_;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Reduction;(function(Reduction){Reduction[Reduction[\"NONE\"]=0]=\"NONE\";Reduction[Reduction[\"MEAN\"]=1]=\"MEAN\";Reduction[Reduction[\"SUM\"]=2]=\"SUM\";Reduction[Reduction[\"SUM_BY_NONZERO_WEIGHTS\"]=3]=\"SUM_BY_NONZERO_WEIGHTS\";})(Reduction||(Reduction={}));/**\r\n * Computes the weighted loss between two tensors.\r\n *\r\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `losses`, and must be broadcastable to `losses` (i.e., all\r\n *    dimensions must be either `1`, or the same as the corresponding\r\n *    `losses` dimension).\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function computeWeightedLoss_(losses,weights){var reduction=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $losses=Object(tensor_util_env[\"a\"/* convertToTensor */])(losses,'losses','computeWeightedLoss');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','computeWeightedLoss');}var weightedLoss=$weights==null?$losses:$losses.mul($weights);if(reduction===Reduction.NONE){return weightedLoss;}if(reduction===Reduction.SUM){return weightedLoss.sum();}if(reduction===Reduction.MEAN){if($weights==null){return weightedLoss.mean();}else{var broadcastFactor=$losses.size/$weights.size;var result=weightedLoss.sum().div($weights.sum());return broadcastFactor>1?result.div(Object(tensor_ops[\"e\"/* scalar */])(broadcastFactor)):result;}}if(reduction===Reduction.SUM_BY_NONZERO_WEIGHTS){if($weights==null){return weightedLoss.sum().div(Object(tensor_ops[\"e\"/* scalar */])($losses.size));}else{var broadcastedWeights=$weights.mul(Object(tensor_ops[\"b\"/* ones */])($losses.shape));var numNonZeros=broadcastedWeights.notEqual(Object(tensor_ops[\"e\"/* scalar */])(0)).sum().toFloat();return weightedLoss.sum().div(numNonZeros);}}throw Error(\"Unknown reduction: \".concat(reduction));}/**\r\n * Computes the absolute difference loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function absoluteDifference_(labels,predictions,weights){var reduction=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','absoluteDifference');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','absoluteDifference');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','absoluteDifference');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in absoluteDifference: ');var losses=$labels.sub($predictions).abs();return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes the mean squared error between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function meanSquaredError_(labels,predictions,weights){var reduction=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','meanSquaredError');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','meanSquaredError');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','meanSquaredError');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in meanSquaredError: ');var losses=$labels.squaredDifference($predictions);return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes the cosine distance loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param axis The dimension along which the cosine distance is computed.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function cosineDistance_(labels,predictions,axis,weights){var reduction=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','cosineDistance');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','cosineDistance');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','cosineDistance');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in cosineDistance: ');var one=Object(tensor_ops[\"e\"/* scalar */])(1);var losses=one.sub($labels.mul($predictions).sum(axis,true));return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes the Hinge loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function hingeLoss_(labels,predictions,weights){var reduction=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','hingeLoss');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','hingeLoss');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','hingeLoss');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in hingeLoss: ');var one=Object(tensor_ops[\"e\"/* scalar */])(1);// Convert binary labels to (-1, 1)\n$labels=Object(tensor_ops[\"e\"/* scalar */])(2).mul($labels).sub(one);var losses=one.sub($labels.mul($predictions)).relu();return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes the log loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param epsilon A small increment to avoid taking log of zero\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function logLoss_(labels,predictions,weights){var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1e-7;var reduction=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','logLoss');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','logLoss');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','logLoss');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in logLoss: ');var one=Object(tensor_ops[\"e\"/* scalar */])(1);var epsilonScalar=Object(tensor_ops[\"e\"/* scalar */])(epsilon);var losses=$labels.mul($predictions.add(epsilonScalar).log()).neg().sub(one.sub($labels).mul(one.sub($predictions).add(epsilonScalar).log()));return computeWeightedLoss(losses,$weights,reduction);}function sigmoidCrossEntropyWithLogits_(labels,logits){var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','sigmoidCrossEntropyWithLogits');var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','sigmoidCrossEntropyWithLogits');Object(util[\"assertShapesMatch\"])($labels.shape,$logits.shape,'Error in sigmoidCrossEntropyWithLogits: ');/**\r\n     * Implementation Details:\r\n     *\r\n     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\r\n     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\r\n     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\r\n     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\r\n     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\r\n     *   = (1 - z) * x + log(1 + exp(-x))\r\n     *   = x - x * z + log(1 + exp(-x))\r\n     *\r\n     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\r\n     *     x - x * z + log(1 + exp(-x))\r\n     *   = log(exp(x)) - x * z + log(1 + exp(-x))\r\n     *   = - x * z + log(1 + exp(x))\r\n     *\r\n     * Hence, to ensure stability and avoid overflow, the implementation uses\r\n     * this equivalent formulation:\r\n     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\r\n     */var maxOutput=$logits.relu();var outputXTarget=$logits.mul($labels);var sigmoidOutput=$logits.abs().neg().exp().log1p();return maxOutput.sub(outputXTarget).add(sigmoidOutput);}/**\r\n * Computes the sigmoid cross entropy loss between two tensors.\r\n *\r\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\r\n *\r\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\r\n *                         + 0.5 * labelSmoothing\r\n *\r\n * @param multiClassLabels The ground truth output tensor of shape\r\n * [batch_size, num_classes], same dimensions as 'predictions'.\r\n * @param logits The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param labelSmoothing If greater than 0, then smooth the labels.\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */function sigmoidCrossEntropy_(multiClassLabels,logits,weights){var labelSmoothing=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var reduction=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $multiClassLabels=Object(tensor_util_env[\"a\"/* convertToTensor */])(multiClassLabels,'multiClassLabels','sigmoidCrossEntropy');var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','sigmoidCrossEntropy');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','sigmoidCrossEntropy');}Object(util[\"assertShapesMatch\"])($multiClassLabels.shape,$logits.shape,'Error in sigmoidCrossEntropy: ');if(labelSmoothing>0){var labelSmoothingScalar=Object(tensor_ops[\"e\"/* scalar */])(labelSmoothing);var one=Object(tensor_ops[\"e\"/* scalar */])(1);var half=Object(tensor_ops[\"e\"/* scalar */])(0.5);$multiClassLabels=$multiClassLabels.mul(one.sub(labelSmoothingScalar)).add(half.mul(labelSmoothingScalar));}var losses=sigmoidCrossEntropyWithLogits_($multiClassLabels,$logits);return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes the huber loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param delta Point where huber loss changes from quadratic to linear.\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`.\r\n */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */function huberLoss_(labels,predictions,weights){var delta=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1.0;var reduction=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $labels=Object(tensor_util_env[\"a\"/* convertToTensor */])(labels,'labels','huberLoss');var $predictions=Object(tensor_util_env[\"a\"/* convertToTensor */])(predictions,'predictions','huberLoss');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','huberLoss');}Object(util[\"assertShapesMatch\"])($labels.shape,$predictions.shape,'Error in huberLoss: ');var deltaScalar=Object(tensor_ops[\"e\"/* scalar */])(delta);var error=$predictions.sub($labels).abs();var quadratic=minimum(error,deltaScalar);var linear=error.sub(quadratic);var losses=Object(tensor_ops[\"e\"/* scalar */])(0.5).mul(quadratic.square()).add(deltaScalar.mul(linear));return computeWeightedLoss(losses,$weights,reduction);}/**\r\n * Computes softmax cross entropy between logits and labels.\r\n *\r\n * Measures the probability error in discrete classification tasks in which\r\n * the classes are mutually exclusive (each entry is in exactly one class).\r\n * For example, each CIFAR-10 image is labeled with one and only one label: an\r\n * image can be a dog or a truck, but not both.\r\n *\r\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\r\n * not be. All that is required is that each row of labels is a valid\r\n * probability distribution. If they are not, the computation of the gradient\r\n * will be incorrect.\r\n *\r\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\r\n * logits internally for efficiency. Do not call this op with the output of\r\n * softmax, as it will produce incorrect results.\r\n *\r\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\r\n * and the same dtype.\r\n * @param labels The labels array.\r\n * @param logits The logits array.\r\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\r\n *     which indicates the last dimension.\r\n */function softmaxCrossEntropyWithLogits_(labels,logits){var dim=arguments.length>2&&arguments[2]!==undefined?arguments[2]:-1;if(dim===-1){dim=logits.rank-1;}if(dim!==logits.rank-1){throw Error(\"Softmax cross entropy along a non-last dimension is not yet \"+\"supported. Labels / logits was rank \".concat(logits.rank,\" \")+\"and dim was \".concat(dim));}// Use a custom gradient for numerical stability.\nvar customOp=customGrad(function(labels,logits,save){// Reference:\n//   1. http://cs231n.github.io/linear-classify/#softmax\n//   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\nvar keepDims=true;var lse=logits.logSumExp([dim],keepDims);var logResult=logits.toFloat().sub(lse);save([labels,logResult]);var costVector=logResult.mul(labels).neg();var value=costVector.sum([dim]);var gradFunc=function gradFunc(dy,saved){var _saved64=_slicedToArray(saved,2),labels=_saved64[0],logResult=_saved64[1];var dyShape=expandShapeToKeepDim(dy.shape,[dim]);return[dy.reshape(dyShape).mul(labels.toFloat().sub(logResult.exp())),dy.reshape(dyShape).mul(logResult.exp().sub(labels.toFloat()))];};return{value:value,gradFunc:gradFunc};});return customOp(labels,logits);}/**\r\n * Computes the softmax cross entropy loss between two tensors.\r\n *\r\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\r\n *\r\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\r\n *                         + labelSmoothing / numClasses\r\n *\r\n * @param onehotLabels One hot encoded labels\r\n *    [batch_size, num_classes], same dimensions as 'predictions'.\r\n * @param logits The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or 1, and must be\r\n *    broadcastable to `loss`  of shape [batch_size]\r\n * @param labelSmoothing If greater than 0, then smooth the labels.\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n */ /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */function softmaxCrossEntropy_(onehotLabels,logits,weights){var labelSmoothing=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var reduction=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Reduction.SUM_BY_NONZERO_WEIGHTS;var $onehotLabels=Object(tensor_util_env[\"a\"/* convertToTensor */])(onehotLabels,'onehotLabels','softmaxCrossEntropy');var $logits=Object(tensor_util_env[\"a\"/* convertToTensor */])(logits,'logits','softmaxCrossEntropy');var $weights=null;if(weights!=null){$weights=Object(tensor_util_env[\"a\"/* convertToTensor */])(weights,'weights','softmaxCrossEntropy');}Object(util[\"assertShapesMatch\"])($onehotLabels.shape,$logits.shape,'Error in softmaxCrossEntropy: ');if(labelSmoothing>0){var labelSmoothingScalar=Object(tensor_ops[\"e\"/* scalar */])(labelSmoothing);var one=Object(tensor_ops[\"e\"/* scalar */])(1);var numClasses=Object(tensor_ops[\"e\"/* scalar */])($onehotLabels.shape[1]);$onehotLabels=$onehotLabels.mul(one.sub(labelSmoothingScalar)).add(labelSmoothingScalar.div(numClasses));}var losses=softmaxCrossEntropyWithLogits_($onehotLabels,$logits);return computeWeightedLoss(losses,$weights,reduction);}var absoluteDifference=Object(operation[\"a\"/* op */])({absoluteDifference_:absoluteDifference_});var computeWeightedLoss=Object(operation[\"a\"/* op */])({computeWeightedLoss_:computeWeightedLoss_});var cosineDistance=Object(operation[\"a\"/* op */])({cosineDistance_:cosineDistance_});var hingeLoss=Object(operation[\"a\"/* op */])({hingeLoss_:hingeLoss_});var huberLoss=Object(operation[\"a\"/* op */])({huberLoss_:huberLoss_});var logLoss=Object(operation[\"a\"/* op */])({logLoss_:logLoss_});var meanSquaredError=Object(operation[\"a\"/* op */])({meanSquaredError_:meanSquaredError_});var sigmoidCrossEntropy=Object(operation[\"a\"/* op */])({sigmoidCrossEntropy_:sigmoidCrossEntropy_});var softmaxCrossEntropy=Object(operation[\"a\"/* op */])({softmaxCrossEntropy_:softmaxCrossEntropy_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Linear algebra ops.\r\n */ /**\r\n * Copy a tensor setting everything outside a central band in each innermost\r\n * matrix to zero.\r\n *\r\n * The band part is computed as follows: Assume input has `k` dimensions\r\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\r\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\r\n * The indicator function\r\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\r\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\r\n *                        [-1,  0,  1, 2],\r\n *                        [-2, -1,  0, 1],\r\n *                        [-3, -2, -1, 0]]);\r\n * let y = tf.linalg.bandPart(x, 1, -1);\r\n * y.print(); // [[ 0,  1,  2, 3],\r\n *            //  [-1,  0,  1, 2],\r\n *            //  [ 0, -1,  0, 1],\r\n *            //  [ 0, 0 , -1, 0]]\r\n * let z = tf.linalg.bandPart(x, 2, 1);\r\n * z.print(); // [[ 0,  1,  0, 0],\r\n *            //  [-1,  0,  1, 0],\r\n *            //  [-2, -1,  0, 1],\r\n *            //  [ 0, -2, -1, 0]]\r\n * ```\r\n *\r\n * @param x Rank `k` tensor\r\n * @param numLower Number of subdiagonals to keep.\r\n *   If negative, keep entire lower triangle.\r\n * @param numUpper Number of subdiagonals to keep.\r\n *   If negative, keep entire upper triangle.\r\n * @returns Rank `k` tensor of the same shape as input.\r\n *   The extracted banded tensor.\r\n */ /**\r\n * @doc {heading:'Operations',\r\n *       subheading:'Linear Algebra',\r\n *       namespace:'linalg'}\r\n */function bandPart_(a,numLower,numUpper){if(numLower%1!==0){throw new Error(\"bandPart(): numLower must be an integer, got \".concat(numLower,\".\"));}if(numUpper%1!==0){throw new Error(\"bandPart(): numUpper must be an integer, got \".concat(numUpper,\".\"));}var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','bandPart');if($a.rank<2){throw new Error(\"bandPart(): Rank must be at least 2, got \".concat($a.rank,\".\"));}var shape=$a.shape,_$a$shape$slice=$a.shape.slice(-2),_$a$shape$slice2=_slicedToArray(_$a$shape$slice,2),M=_$a$shape$slice2[0],N=_$a$shape$slice2[1];if(!(numLower<=M)){throw new Error(\"bandPart(): numLower (\".concat(numLower,\")\")+\" must not be greater than the number of rows (\".concat(M,\").\"));}if(!(numUpper<=N)){throw new Error(\"bandPart(): numUpper (\".concat(numUpper,\")\")+\" must not be greater than the number of columns (\".concat(N,\").\"));}if(numLower<0){numLower=M;}if(numUpper<0){numUpper=N;}var i=Object(tensor_ops[\"d\"/* range */])(0,M,1,'int32').reshape([-1,1]),j=Object(tensor_ops[\"d\"/* range */])(0,N,1,'int32'),ij=sub(i,j);var inBand=logicalAnd(ij.lessEqual(Object(tensor_ops[\"e\"/* scalar */])(+numLower,'int32')),ij.greaterEqual(Object(tensor_ops[\"e\"/* scalar */])(-numUpper,'int32')));var zero=Object(tensor_ops[\"n\"/* zeros */])([M,N],$a.dtype);return stack(unstack($a.reshape([-1,M,N])).map(function(mat){return where(inBand,mat,zero);})).reshape(shape);}/**\r\n * Gram-Schmidt orthogonalization.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\r\n * let y = tf.linalg.gramSchmidt(x);\r\n * y.print();\r\n * console.log('Othogonalized:');\r\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\r\n * console.log('First row direction maintained:');\r\n * const data = await y.array();\r\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\r\n * ```\r\n *\r\n * @param xs The vectors to be orthogonalized, in one of the two following\r\n *   formats:\r\n *   - An Array of `tf.Tensor1D`.\r\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\r\n *     of `xs`.\r\n *   In each case, all the vectors must have the same length and the length\r\n *   must be greater than or equal to the number of vectors.\r\n * @returns The orthogonalized and normalized vectors or matrix.\r\n *   Orthogonalization means that the vectors or the rows of the matrix\r\n *   are orthogonal (zero inner products). Normalization means that each\r\n *   vector or each row of the matrix has an L2 norm that equals `1`.\r\n */ /**\r\n * @doc {heading:'Operations',\r\n *       subheading:'Linear Algebra',\r\n *       namespace:'linalg'}\r\n */function gramSchmidt_(xs){var inputIsTensor2D;if(Array.isArray(xs)){(function(){inputIsTensor2D=false;Object(util[\"assert\"])(xs!=null&&xs.length>0,function(){return'Gram-Schmidt process: input must not be null, undefined, or '+'empty';});var dim=xs[0].shape[0];var _loop2=function _loop2(i){Object(util[\"assert\"])(xs[i].shape[0]===dim,function(){return'Gram-Schmidt: Non-unique lengths found in the input vectors: '+\"(\".concat(xs[i].shape[0],\" vs. \").concat(dim,\")\");});};for(var i=1;i<xs.length;++i){_loop2(i);}})();}else{inputIsTensor2D=true;xs=split(xs,xs.shape[0],0).map(function(x){return squeeze(x,[0]);});}Object(util[\"assert\"])(xs.length<=xs[0].shape[0],function(){return\"Gram-Schmidt: Number of vectors (\".concat(xs.length,\") exceeds \")+\"number of dimensions (\".concat(xs[0].shape[0],\").\");});var ys=[];var xs1d=xs;var _loop3=function _loop3(i){ys.push(engine[\"a\"/* ENGINE */].tidy(function(){var x=xs1d[i];if(i>0){for(var j=0;j<i;++j){var proj=sum(ys[j].mul(x)).mul(ys[j]);x=x.sub(proj);}}return x.div(norm_norm(x,'euclidean'));}));};for(var i=0;i<xs.length;++i){_loop3(i);}if(inputIsTensor2D){return stack(ys,0);}else{return ys;}}/**\r\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\r\n *\r\n * Implementation based on\r\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\r\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\r\n * let [q, r] = tf.linalg.qr(a);\r\n * console.log('Q');\r\n * q.print();\r\n * console.log('R');\r\n * r.print();\r\n * console.log('Orthogonalized');\r\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\r\n * console.log('Reconstructed');\r\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\r\n * ```\r\n *\r\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\r\n *   it has the shape `[..., M, N]`.\r\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\r\n *   If `true`, compute full-sized `Q`. If `false` (the default),\r\n *   compute only the leading N columns of `Q` and `R`.\r\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\r\n *   i.e., its columns all have unit norm and are mutually orthogonal.\r\n *   If `M >= N`,\r\n *     If `fullMatrices` is `false` (default),\r\n *       - `Q` has a shape of `[..., M, N]`,\r\n *       - `R` has a shape of `[..., N, N]`.\r\n *     If `fullMatrices` is `true` (default),\r\n *       - `Q` has a shape of `[..., M, M]`,\r\n *       - `R` has a shape of `[..., M, N]`.\r\n *   If `M < N`,\r\n *     - `Q` has a shape of `[..., M, M]`,\r\n *     - `R` has a shape of `[..., M, N]`.\r\n * @throws If the rank of `x` is less than 2.\r\n */ /**\r\n * @doc {heading:'Operations',\r\n *       subheading:'Linear Algebra',\r\n *       namespace:'linalg'}\r\n */function qr_(x){var fullMatrices=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(x.rank<2){throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \".concat(x.rank));}else if(x.rank===2){return qr2d(x,fullMatrices);}else{// Rank > 2.\n// TODO(cais): Below we split the input into individual 2D tensors,\n//   perform QR decomposition on them and then stack the results back\n//   together. We should explore whether this can be parallelized.\nvar outerDimsProd=x.shape.slice(0,x.shape.length-2).reduce(function(value,prev){return value*prev;});var x2ds=unstack(x.reshape([outerDimsProd,x.shape[x.shape.length-2],x.shape[x.shape.length-1]]),0);var q2ds=[];var r2ds=[];x2ds.forEach(function(x2d){var _qr2d=qr2d(x2d,fullMatrices),_qr2d2=_slicedToArray(_qr2d,2),q2d=_qr2d2[0],r2d=_qr2d2[1];q2ds.push(q2d);r2ds.push(r2d);});var q=stack(q2ds,0).reshape(x.shape);var r=stack(r2ds,0).reshape(x.shape);return[q,r];}}function qr2d(x){var fullMatrices=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return engine[\"a\"/* ENGINE */].tidy(function(){if(x.shape.length!==2){throw new Error(\"qr2d() requires a 2D Tensor, but got a \".concat(x.shape.length,\"D Tensor.\"));}var m=x.shape[0];var n=x.shape[1];var q=eye(m);// Orthogonal transform so far.\nvar r=x.clone();// Transformed matrix so far.\nvar one2D=Object(tensor_ops[\"h\"/* tensor2d */])([[1]],[1,1]);var w=one2D.clone();var iters=m>=n?n:m;var _loop4=function _loop4(j){// This tidy within the for-loop ensures we clean up temporary\n// tensors as soon as they are no longer needed.\nvar rTemp=r;var wTemp=w;var qTemp=q;var _engine$a$tidy=engine[\"a\"/* ENGINE */].tidy(function(){// Find H = I - tau * w * w', to put zeros below R(j, j).\nvar rjEnd1=r.slice([j,j],[m-j,1]);var normX=rjEnd1.norm();var rjj=r.slice([j,j],[1,1]);// The sign() function returns 0 on 0, which causes division by zero.\nvar s=Object(tensor_ops[\"h\"/* tensor2d */])([[-1]]).where(rjj.greater(0),Object(tensor_ops[\"h\"/* tensor2d */])([[1]]));var u1=rjj.sub(s.mul(normX));var wPre=rjEnd1.div(u1);if(wPre.shape[0]===1){w=one2D.clone();}else{w=one2D.concat(wPre.slice([1,0],[wPre.shape[0]-1,wPre.shape[1]]),0);}var tau=s.matMul(u1).div(normX).neg();// -- R := HR, Q := QH.\nvar rjEndAll=r.slice([j,0],[m-j,n]);var tauTimesW=tau.mul(w);var wT=w.transpose();if(j===0){r=rjEndAll.sub(tauTimesW.matMul(wT.matMul(rjEndAll)));}else{var rTimesTau=rjEndAll.sub(tauTimesW.matMul(wT.matMul(rjEndAll)));r=r.slice([0,0],[j,n]).concat(rTimesTau,0);}var tawTimesWT=tauTimesW.transpose();var qAllJEnd=q.slice([0,j],[m,q.shape[1]-j]);if(j===0){q=qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tawTimesWT));}else{var qTimesTau=qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tawTimesWT));q=q.slice([0,0],[m,j]).concat(qTimesTau,1);}return[w,r,q];});var _engine$a$tidy2=_slicedToArray(_engine$a$tidy,3);w=_engine$a$tidy2[0];r=_engine$a$tidy2[1];q=_engine$a$tidy2[2];_dispose([rTemp,wTemp,qTemp]);};for(var j=0;j<iters;++j){_loop4(j);}if(!fullMatrices&&m>n){q=q.slice([0,0],[m,n]);r=r.slice([0,0],[n,n]);}return[q,r];});}var bandPart=Object(operation[\"a\"/* op */])({bandPart_:bandPart_});var gramSchmidt=Object(operation[\"a\"/* op */])({gramSchmidt_:gramSchmidt_});var qr=Object(operation[\"a\"/* op */])({qr_:qr_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\r\n * allows inserting duplicate value, in which case, the element will be inserted\r\n * at the lowest index of the value.\r\n * @param arr The array to modify.\r\n * @param element The element to insert.\r\n * @param comparator Optional. If no comparator is specified, elements are\r\n * compared using array_util.defaultComparator, which is suitable for Strings\r\n * and Numbers in ascending arrays. If the array contains multiple instances of\r\n * the target value, the left-most instance will be returned. To provide a\r\n * comparator, it should take 2 arguments to compare and return a negative,\r\n * zero, or a positive number.\r\n */function binaryInsert(arr,element,comparator){var index=binarySearch(arr,element,comparator);var insertionPoint=index<0?-(index+1):index;arr.splice(insertionPoint,0,element);}/**\r\n * Searches the array for the target using binary search, returns the index\r\n * of the found element, or position to insert if element not found. If no\r\n * comparator is specified, elements are compared using array_\r\n * util.defaultComparator, which is suitable for Strings and Numbers in\r\n * ascending arrays. If the array contains multiple instances of the target\r\n * value, the left-most instance will be returned.\r\n * @param arr The array to be searched in.\r\n * @param target The target to be searched for.\r\n * @param comparator Should take 2 arguments to compare and return a negative,\r\n *    zero, or a positive number.\r\n * @return Lowest index of the target value if found, otherwise the insertion\r\n *    point where the target should be inserted, in the form of\r\n *    (-insertionPoint - 1).\r\n */function binarySearch(arr,target,comparator){return binarySearch_(arr,target,comparator||defaultComparator);}/**\r\n * Compares its two arguments for order.\r\n * @param a The first element to be compared.\r\n * @param b The second element to be compared.\r\n * @return A negative number, zero, or a positive number as the first\r\n *     argument is less than, equal to, or greater than the second.\r\n */function defaultComparator(a,b){return a>b?1:a<b?-1:0;}function binarySearch_(arr,target,comparator){var left=0;var right=arr.length;var middle=0;var found=false;while(left<right){middle=left+(right-left>>>1);var compareResult=comparator(target,arr[middle]);if(compareResult>0){left=middle+1;}else{right=middle;// If compareResult is 0, the value is found. We record it is found,\n// and then keep looking because there may be duplicate.\nfound=!compareResult;}}return found?left:-left-1;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\r\n */function nonMaxSuppressionV3(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold){var dummySoftNmsSigma=0.0;var result=nonMaxSuppressionImpl_(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,dummySoftNmsSigma);result.selectedScores.dispose();result.numValidOutputs.dispose();return result.selectedIndices;}function nonMaxSuppressionV5(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma){// For NonMaxSuppressionV5Op, we always return a second output holding\n// corresponding scores.\nvar returnScoresTensor=true;var result=nonMaxSuppressionImpl_(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma,returnScoresTensor);result.numValidOutputs.dispose();return{selectedIndices:result.selectedIndices,selectedScores:result.selectedScores};}function nonMaxSuppressionImpl_(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma){var returnScoresTensor=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;var padToMaxOutputSize=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;// The list is sorted in ascending order, so that we can always pop the\n// candidate with the largest score in O(1) time.\nvar candidates=[];for(var i=0;i<scores.length;i++){if(scores[i]>scoreThreshold){candidates.push({score:scores[i],boxIndex:i,suppressBeginIndex:0});}}candidates.sort(ascendingComparator);// If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n// before.\nvar scale=softNmsSigma>0?-0.5/softNmsSigma:0.0;var selectedIndices=[];var selectedScores=[];while(selectedIndices.length<maxOutputSize&&candidates.length>0){var candidate=candidates.pop();var originalScore=candidate.score,boxIndex=candidate.boxIndex,suppressBeginIndex=candidate.suppressBeginIndex;if(originalScore<scoreThreshold){break;}// Overlapping boxes are likely to have similar scores, therefore we\n// iterate through the previously selected boxes backwards in order to\n// see if candidate's score should be suppressed. We use\n// suppressBeginIndex to track and ensure a candidate can be suppressed\n// by a selected box no more than once. Also, if the overlap exceeds\n// iouThreshold, we simply ignore the candidate.\nvar ignoreCandidate=false;for(var j=selectedIndices.length-1;j>=suppressBeginIndex;--j){var iou=intersectionOverUnion(boxes,boxIndex,selectedIndices[j]);if(iou>=iouThreshold){ignoreCandidate=true;break;}candidate.score=candidate.score*suppressWeight(iouThreshold,scale,iou);if(candidate.score<=scoreThreshold){break;}}// At this point, if `candidate.score` has not dropped below\n// `scoreThreshold`, then we know that we went through all of the\n// previous selections and can safely update `suppressBeginIndex` to the\n// end of the selected array. Then we can re-insert the candidate with\n// the updated score and suppressBeginIndex back in the candidate list.\n// If on the other hand, `candidate.score` has dropped below the score\n// threshold, we will not add it back to the candidates list.\ncandidate.suppressBeginIndex=selectedIndices.length;if(!ignoreCandidate){// Candidate has passed all the tests, and is not suppressed, so\n// select the candidate.\nif(candidate.score===originalScore){selectedIndices.push(boxIndex);selectedScores.push(candidate.score);}else if(candidate.score>scoreThreshold){// Candidate's score is suppressed but is still high enough to be\n// considered, so add back to the candidates list.\nbinaryInsert(candidates,candidate,ascendingComparator);}}}// NonMaxSuppressionV4 feature: padding output to maxOutputSize.\nvar numValidOutputs=selectedIndices.length;if(padToMaxOutputSize){selectedIndices.fill(0,numValidOutputs);selectedScores.fill(0.0,numValidOutputs);}return{selectedIndices:Object(tensor_ops[\"g\"/* tensor1d */])(selectedIndices,'int32'),selectedScores:Object(tensor_ops[\"g\"/* tensor1d */])(selectedScores,'float32'),numValidOutputs:Object(tensor_ops[\"e\"/* scalar */])(numValidOutputs,'int32')};}function intersectionOverUnion(boxes,i,j){var iCoord=boxes.subarray(i*4,i*4+4);var jCoord=boxes.subarray(j*4,j*4+4);var yminI=Math.min(iCoord[0],iCoord[2]);var xminI=Math.min(iCoord[1],iCoord[3]);var ymaxI=Math.max(iCoord[0],iCoord[2]);var xmaxI=Math.max(iCoord[1],iCoord[3]);var yminJ=Math.min(jCoord[0],jCoord[2]);var xminJ=Math.min(jCoord[1],jCoord[3]);var ymaxJ=Math.max(jCoord[0],jCoord[2]);var xmaxJ=Math.max(jCoord[1],jCoord[3]);var areaI=(ymaxI-yminI)*(xmaxI-xminI);var areaJ=(ymaxJ-yminJ)*(xmaxJ-xminJ);if(areaI<=0||areaJ<=0){return 0.0;}var intersectionYmin=Math.max(yminI,yminJ);var intersectionXmin=Math.max(xminI,xminJ);var intersectionYmax=Math.min(ymaxI,ymaxJ);var intersectionXmax=Math.min(xmaxI,xmaxJ);var intersectionArea=Math.max(intersectionYmax-intersectionYmin,0.0)*Math.max(intersectionXmax-intersectionXmin,0.0);return intersectionArea/(areaI+areaJ-intersectionArea);}// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold,scale,iou){var weight=Math.exp(scale*iou*iou);return iou<=iouThreshold?weight:0.0;}function ascendingComparator(c1,c2){// For objects with same scores, we make the object with the larger index go\n// first. In an array that pops from the end, this means that the object with\n// the smaller index will be popped first. This ensures the same output as\n// the TensorFlow python version.\nreturn c1.score-c2.score||c1.score===c2.score&&c2.boxIndex-c1.boxIndex;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function nonMaxSuppSanityCheck(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma){if(iouThreshold==null){iouThreshold=0.5;}if(scoreThreshold==null){scoreThreshold=Number.NEGATIVE_INFINITY;}if(softNmsSigma==null){softNmsSigma=0.0;}var numBoxes=boxes.shape[0];maxOutputSize=Math.min(maxOutputSize,numBoxes);util[\"assert\"](0<=iouThreshold&&iouThreshold<=1,function(){return\"iouThreshold must be in [0, 1], but was '\".concat(iouThreshold,\"'\");});util[\"assert\"](boxes.rank===2,function(){return\"boxes must be a 2D tensor, but was of rank '\".concat(boxes.rank,\"'\");});util[\"assert\"](boxes.shape[1]===4,function(){return\"boxes must have 4 columns, but 2nd dimension was \".concat(boxes.shape[1]);});util[\"assert\"](scores.rank===1,function(){return'scores must be a 1D tensor';});util[\"assert\"](scores.shape[0]===numBoxes,function(){return\"scores has incompatible shape with boxes. Expected \".concat(numBoxes,\", \")+\"but was \".concat(scores.shape[0]);});util[\"assert\"](0<=softNmsSigma&&softNmsSigma<=1,function(){return\"softNmsSigma must be in [0, 1], but was '\".concat(softNmsSigma,\"'\");});return{maxOutputSize:maxOutputSize,iouThreshold:iouThreshold,scoreThreshold:scoreThreshold,softNmsSigma:softNmsSigma};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/non_max_suppression.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function nonMaxSuppression_(boxes,scores,maxOutputSize){var iouThreshold=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.5;var scoreThreshold=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Number.NEGATIVE_INFINITY;var $boxes=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxes,'boxes','nonMaxSuppression');var $scores=Object(tensor_util_env[\"a\"/* convertToTensor */])(scores,'scores','nonMaxSuppression');var inputs=nonMaxSuppSanityCheck($boxes,$scores,maxOutputSize,iouThreshold,scoreThreshold);maxOutputSize=inputs.maxOutputSize;iouThreshold=inputs.iouThreshold;scoreThreshold=inputs.scoreThreshold;var attrs={maxOutputSize:maxOutputSize,iouThreshold:iouThreshold,scoreThreshold:scoreThreshold};return engine[\"a\"/* ENGINE */].runKernelFunc(function(b){return b.nonMaxSuppression($boxes,$scores,maxOutputSize,iouThreshold,scoreThreshold);},{boxes:$boxes,scores:$scores},null/* grad */,kernel_names[\"Z\"/* NonMaxSuppressionV3 */],attrs);}var nonMaxSuppression=Object(operation[\"a\"/* op */])({nonMaxSuppression_:nonMaxSuppression_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Bilinear resize a batch of 3D images to a new shape.\r\n *\r\n * @param images The images, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param size The new shape `[newHeight, newWidth]` to resize the\r\n *     images to. Each channel is resized individually.\r\n * @param alignCorners Defaults to False. If true, rescale\r\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\r\n *     corners of images and resized images. If false, rescale by\r\n *     `new_height / height`. Treat similarly the width dimension.\r\n */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */function resizeBilinear_(images,size){var alignCorners=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $images=Object(tensor_util_env[\"a\"/* convertToTensor */])(images,'images','resizeBilinear');util[\"assert\"]($images.rank===3||$images.rank===4,function(){return\"Error in resizeBilinear: x must be rank 3 or 4, but got \"+\"rank \".concat($images.rank,\".\");});util[\"assert\"](size.length===2,function(){return\"Error in resizeBilinear: new shape must 2D, but got shape \"+\"\".concat(size,\".\");});var batchImages=$images;var reshapedTo4D=false;if($images.rank===3){reshapedTo4D=true;batchImages=$images.as4D(1,$images.shape[0],$images.shape[1],$images.shape[2]);}var _size=_slicedToArray(size,2),newHeight=_size[0],newWidth=_size[1];var forward=function forward(backend,save){save([batchImages]);return backend.resizeBilinear(batchImages,newHeight,newWidth,alignCorners);};var backward=function backward(dy,saved){return{x:function x(){return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.resizeBilinearBackprop(dy,saved[0],alignCorners);},{});}};};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,{x:batchImages},backward,'ResizeBilinear',{alignCorners:alignCorners,newHeight:newHeight,newWidth:newWidth});if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}/**\r\n * NearestNeighbor resize a batch of 3D images to a new shape.\r\n *\r\n * @param images The images, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param size The new shape `[newHeight, newWidth]` to resize the\r\n *     images to. Each channel is resized individually.\r\n * @param alignCorners Defaults to False. If true, rescale\r\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\r\n *     corners of images and resized images. If false, rescale by\r\n *     `new_height / height`. Treat similarly the width dimension.\r\n */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */function resizeNearestNeighbor_(images,size){var alignCorners=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var $images=Object(tensor_util_env[\"a\"/* convertToTensor */])(images,'images','resizeNearestNeighbor');util[\"assert\"]($images.rank===3||$images.rank===4,function(){return\"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got \"+\"rank \".concat($images.rank,\".\");});util[\"assert\"](size.length===2,function(){return\"Error in resizeNearestNeighbor: new shape must 2D, but got shape \"+\"\".concat(size,\".\");});util[\"assert\"]($images.dtype==='float32'||$images.dtype==='int32',function(){return'`images` must have `int32` or `float32` as dtype';});var batchImages=$images;var reshapedTo4D=false;if($images.rank===3){reshapedTo4D=true;batchImages=$images.as4D(1,$images.shape[0],$images.shape[1],$images.shape[2]);}var _size2=_slicedToArray(size,2),newHeight=_size2[0],newWidth=_size2[1];var forward=function forward(backend,save){save([batchImages]);return backend.resizeNearestNeighbor(batchImages,newHeight,newWidth,alignCorners);};var backward=function backward(dy,saved){return{batchImages:function batchImages(){return engine[\"a\"/* ENGINE */].runKernelFunc(function(backend){return backend.resizeNearestNeighborBackprop(dy,saved[0],alignCorners);},{});}};};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,{batchImages:batchImages},backward);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}/**\r\n * Performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union).\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @return A 1D tensor with the selected box indices.\r\n */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ /** This is the async version of `nonMaxSuppression` */function nonMaxSuppressionAsync_(_x43,_x44,_x45){return _nonMaxSuppressionAsync_.apply(this,arguments);}/**\r\n * Performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union).\r\n *\r\n * This op also supports a Soft-NMS mode (c.f.\r\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\r\n * of other overlapping boxes, therefore favoring different regions of the image\r\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\r\n * parameter to be larger than 0.\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\r\n *     When sigma is 0, it falls back to nonMaxSuppression.\r\n * @return A map with the following properties:\r\n *     - selectedIndices: A 1D tensor with the selected box indices.\r\n *     - selectedScores: A 1D tensor with the corresponding scores for each\r\n *       selected box.\r\n */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */function _nonMaxSuppressionAsync_(){_nonMaxSuppressionAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee48(boxes,scores,maxOutputSize){var iouThreshold,scoreThreshold,$boxes,$scores,inputs,boxesAndScores,boxesVals,scoresVals,res,_args49=arguments;return regeneratorRuntime.wrap(function _callee48$(_context48){while(1){switch(_context48.prev=_context48.next){case 0:iouThreshold=_args49.length>3&&_args49[3]!==undefined?_args49[3]:0.5;scoreThreshold=_args49.length>4&&_args49[4]!==undefined?_args49[4]:Number.NEGATIVE_INFINITY;$boxes=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxes,'boxes','nonMaxSuppressionAsync');$scores=Object(tensor_util_env[\"a\"/* convertToTensor */])(scores,'scores','nonMaxSuppressionAsync');inputs=nonMaxSuppSanityCheck($boxes,$scores,maxOutputSize,iouThreshold,scoreThreshold);maxOutputSize=inputs.maxOutputSize;iouThreshold=inputs.iouThreshold;scoreThreshold=inputs.scoreThreshold;_context48.next=10;return Promise.all([$boxes.data(),$scores.data()]);case 10:boxesAndScores=_context48.sent;boxesVals=boxesAndScores[0];scoresVals=boxesAndScores[1];res=nonMaxSuppressionV3(boxesVals,scoresVals,maxOutputSize,iouThreshold,scoreThreshold);if($boxes!==boxes){$boxes.dispose();}if($scores!==scores){$scores.dispose();}return _context48.abrupt(\"return\",res);case 17:case\"end\":return _context48.stop();}}},_callee48);}));return _nonMaxSuppressionAsync_.apply(this,arguments);}function nonMaxSuppressionWithScore_(boxes,scores,maxOutputSize){var iouThreshold=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.5;var scoreThreshold=arguments.length>4&&arguments[4]!==undefined?arguments[4]:Number.NEGATIVE_INFINITY;var softNmsSigma=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0.0;var $boxes=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxes,'boxes','nonMaxSuppression');var $scores=Object(tensor_util_env[\"a\"/* convertToTensor */])(scores,'scores','nonMaxSuppression');var inputs=nonMaxSuppSanityCheck($boxes,$scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma);maxOutputSize=inputs.maxOutputSize;iouThreshold=inputs.iouThreshold;scoreThreshold=inputs.scoreThreshold;softNmsSigma=inputs.softNmsSigma;var attrs={maxOutputSize:maxOutputSize,iouThreshold:iouThreshold,scoreThreshold:scoreThreshold,softNmsSigma:softNmsSigma};var result=engine[\"a\"/* ENGINE */].runKernel('NonMaxSuppressionV5',{boxes:$boxes,scores:$scores},attrs);return{selectedIndices:result[0],selectedScores:result[1]};}/** This is the async version of `nonMaxSuppressionWithScore` */function nonMaxSuppressionWithScoreAsync_(_x46,_x47,_x48){return _nonMaxSuppressionWithScoreAsync_.apply(this,arguments);}/**\r\n * Extracts crops from the input image tensor and resizes them using bilinear\r\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\r\n * to a common output size specified by crop_size.\r\n *\r\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\r\n *     where imageHeight and imageWidth must be positive, specifying the\r\n *     batch of images from which to take crops\r\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\r\n *     coordinates of the box in the boxInd[i]'th image in the batch\r\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\r\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\r\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\r\n *     specifying the size to which all crops are resized to.\r\n * @param method Optional string from `'bilinear' | 'nearest'`,\r\n *     defaults to bilinear, which specifies the sampling method for resizing\r\n * @param extrapolationValue A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to 0.\r\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\r\n */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */function _nonMaxSuppressionWithScoreAsync_(){_nonMaxSuppressionWithScoreAsync_=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee49(boxes,scores,maxOutputSize){var iouThreshold,scoreThreshold,softNmsSigma,$boxes,$scores,inputs,boxesAndScores,boxesVals,scoresVals,res,_args50=arguments;return regeneratorRuntime.wrap(function _callee49$(_context49){while(1){switch(_context49.prev=_context49.next){case 0:iouThreshold=_args50.length>3&&_args50[3]!==undefined?_args50[3]:0.5;scoreThreshold=_args50.length>4&&_args50[4]!==undefined?_args50[4]:Number.NEGATIVE_INFINITY;softNmsSigma=_args50.length>5&&_args50[5]!==undefined?_args50[5]:0.0;$boxes=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxes,'boxes','nonMaxSuppressionAsync');$scores=Object(tensor_util_env[\"a\"/* convertToTensor */])(scores,'scores','nonMaxSuppressionAsync');inputs=nonMaxSuppSanityCheck($boxes,$scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma);maxOutputSize=inputs.maxOutputSize;iouThreshold=inputs.iouThreshold;scoreThreshold=inputs.scoreThreshold;softNmsSigma=inputs.softNmsSigma;_context49.next=12;return Promise.all([$boxes.data(),$scores.data()]);case 12:boxesAndScores=_context49.sent;boxesVals=boxesAndScores[0];scoresVals=boxesAndScores[1];res=nonMaxSuppressionV5(boxesVals,scoresVals,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma);if($boxes!==boxes){$boxes.dispose();}if($scores!==scores){$scores.dispose();}return _context49.abrupt(\"return\",res);case 19:case\"end\":return _context49.stop();}}},_callee49);}));return _nonMaxSuppressionWithScoreAsync_.apply(this,arguments);}function cropAndResize_(image,boxes,boxInd,cropSize,method,extrapolationValue){var $image=Object(tensor_util_env[\"a\"/* convertToTensor */])(image,'image','cropAndResize');var $boxes=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxes,'boxes','cropAndResize','float32');var $boxInd=Object(tensor_util_env[\"a\"/* convertToTensor */])(boxInd,'boxInd','cropAndResize','int32');method=method||'bilinear';extrapolationValue=extrapolationValue||0;var numBoxes=$boxes.shape[0];util[\"assert\"]($image.rank===4,function(){return'Error in cropAndResize: image must be rank 4,'+\"but got rank \".concat($image.rank,\".\");});util[\"assert\"]($boxes.rank===2&&$boxes.shape[1]===4,function(){return\"Error in cropAndResize: boxes must be have size [\".concat(numBoxes,\",4] \")+\"but had shape \".concat($boxes.shape,\".\");});util[\"assert\"]($boxInd.rank===1&&$boxInd.shape[0]===numBoxes,function(){return\"Error in cropAndResize: boxInd must be have size [\".concat(numBoxes,\"] \")+\"but had shape \".concat($boxes.shape,\".\");});util[\"assert\"](cropSize.length===2,function(){return\"Error in cropAndResize: cropSize must be of length 2, but got \"+\"length \".concat(cropSize.length,\".\");});util[\"assert\"](cropSize[0]>=1&&cropSize[1]>=1,function(){return\"cropSize must be atleast [1,1], but was \".concat(cropSize);});util[\"assert\"](method==='bilinear'||method==='nearest',function(){return\"method must be bilinear or nearest, but was \".concat(method);});var forward=function forward(backend,save){return backend.cropAndResize($image,$boxes,$boxInd,cropSize,method,extrapolationValue);};var res=engine[\"a\"/* ENGINE */].runKernelFunc(forward,{images:$image,boxes:$boxes,boxInd:$boxInd},null/* der */,'CropAndResize',{method:method,extrapolationValue:extrapolationValue,cropSize:cropSize});return res;}var resizeBilinear=Object(operation[\"a\"/* op */])({resizeBilinear_:resizeBilinear_});var resizeNearestNeighbor=Object(operation[\"a\"/* op */])({resizeNearestNeighbor_:resizeNearestNeighbor_});var nonMaxSuppressionAsync=nonMaxSuppressionAsync_;var nonMaxSuppressionWithScore=Object(operation[\"a\"/* op */])({nonMaxSuppressionWithScore_:nonMaxSuppressionWithScore_});var nonMaxSuppressionWithScoreAsync=nonMaxSuppressionWithScoreAsync_;var cropAndResize=Object(operation[\"a\"/* op */])({cropAndResize_:cropAndResize_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Whether we should call fused ops.\nvar shouldFuse=function shouldFuse(gradientDepth,activation){var gradientMode=gradientDepth>0;return!gradientMode||activation==='linear';};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Returns gradient for fused activation.\nvar getFusedDyActivation=function getFusedDyActivation(dy,y,activation){if(activation==null||activation==='linear'){return dy;}if(activation==='relu'){return dy.mul(y.step());}throw new Error(\"Gradient for activation \".concat(activation,\" has not been \")+\"implemented yet.\");};// Returns gradient for fused bias.\nvar getFusedBiasGradient=function getFusedBiasGradient(bias,dyActivation){var res=dyActivation;var reduceAxes=getReductionAxes(bias.shape,dyActivation.shape);if(reduceAxes.length>0){res=res.sum(reduceAxes);}return res.reshape(bias.shape);};var applyActivation=function applyActivation(x,activation,preluActivationWeights){if(activation==='linear'){return x;}else if(activation==='relu'){return relu(x);}else if(activation==='elu'){return elu(x);}else if(activation==='relu6'){return relu6(x);}else if(activation==='prelu'){return prelu(x,preluActivationWeights);}throw new Error(\"Unknown fused activation \".concat(activation,\".\"));};/**\r\n * Computes the dot product of two matrices with optional activation and bias.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([-1, -2], [1, 2]);\r\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const bias = tf.tensor2d([1, 2], [1, 2]);\r\n *\r\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\r\n * ```\r\n *\r\n * @param obj An object with the following properties:\r\n * - `a` First matrix in dot product operation.\r\n * - `b` Second matrix in dot product operation.\r\n * - `transposeA` If true, `a` is transposed before multiplication.\r\n * - `transposeB` If true, `b` is transposed before multiplication.\r\n * - `bias` Matrix to be added to the result.\r\n * - `activation` Name of activation kernel (defaults to `linear`).\r\n * - `preluActivationWeights` Tensor of prelu weights.\r\n */function fusedMatMul_(_ref4){var a=_ref4.a,b=_ref4.b,_ref4$transposeA=_ref4.transposeA,transposeA=_ref4$transposeA===void 0?false:_ref4$transposeA,_ref4$transposeB=_ref4.transposeB,transposeB=_ref4$transposeB===void 0?false:_ref4$transposeB,bias=_ref4.bias,_ref4$activation=_ref4.activation,activation=_ref4$activation===void 0?'linear':_ref4$activation,preluActivationWeights=_ref4.preluActivationWeights;if(shouldFuse(engine[\"a\"/* ENGINE */].state.gradientDepth,activation)===false){var result=matMul(a,b,transposeA,transposeB);if(bias!=null){result=add(result,bias);}return applyActivation(result,activation,preluActivationWeights);}var $a=Object(tensor_util_env[\"a\"/* convertToTensor */])(a,'a','fused matMul');var $b=Object(tensor_util_env[\"a\"/* convertToTensor */])(b,'b','fused matMul');var _Object39=Object(tensor_util[\"makeTypesMatch\"])($a,$b);var _Object40=_slicedToArray(_Object39,2);$a=_Object40[0];$b=_Object40[1];var innerShapeA=transposeA?$a.shape[$a.rank-2]:$a.shape[$a.rank-1];var innerShapeB=transposeB?$b.shape[$b.rank-1]:$b.shape[$b.rank-2];var outerShapeA=transposeA?$a.shape[$a.rank-1]:$a.shape[$a.rank-2];var outerShapeB=transposeB?$b.shape[$b.rank-2]:$b.shape[$b.rank-1];var outerDimsA=$a.shape.slice(0,-2);var outerDimsB=$b.shape.slice(0,-2);var batchDimA=util[\"sizeFromShape\"](outerDimsA);var batchDimB=util[\"sizeFromShape\"](outerDimsB);util[\"assert\"]($a.rank>=2&&$b.rank>=2&&$a.rank===$b.rank,function(){return\"Error in fused matMul: inputs must have the same rank of at least \"+\"2, got ranks \".concat($a.rank,\" and \").concat($b.rank,\".\");});util[\"assert\"](util[\"arraysEqual\"](outerDimsA,outerDimsB),function(){return\"Error in fused matMul: outer dimensions (\".concat(outerDimsA,\") and (\")+\"\".concat(outerDimsB,\") of Tensors with shapes \").concat($a.shape,\" and \")+\"\".concat($b.shape,\" must match.\");});util[\"assert\"](innerShapeA===innerShapeB,function(){return\"Error in fused matMul: inner shapes (\".concat(innerShapeA,\") and (\")+\"\".concat(innerShapeB,\") of Tensors with shapes \").concat($a.shape,\" and \")+\"\".concat($b.shape,\" and transposeA=\").concat(transposeA)+\" and transposeB=\".concat(transposeB,\" must match.\");});var outShape=$a.shape.slice(0,-2).concat([outerShapeA,outerShapeB]);var a3D=transposeA?$a.as3D(batchDimA,innerShapeA,outerShapeA):$a.as3D(batchDimA,outerShapeA,innerShapeA);var b3D=transposeB?$b.as3D(batchDimB,outerShapeB,innerShapeB):$b.as3D(batchDimB,innerShapeB,outerShapeB);var $bias;if(bias!=null){$bias=Object(tensor_util_env[\"a\"/* convertToTensor */])(bias,'bias','fused matMul');var _Object41=Object(tensor_util[\"makeTypesMatch\"])($bias,$a);var _Object42=_slicedToArray(_Object41,1);$bias=_Object42[0];assertAndGetBroadcastShape(outShape,$bias.shape);}var $preluActivationWeights;if(preluActivationWeights!=null){$preluActivationWeights=Object(tensor_util_env[\"a\"/* convertToTensor */])(preluActivationWeights,'prelu weights','fused matMul');}var grad=function grad(dy,saved){var _saved65=_slicedToArray(saved,3),a3D=_saved65[0],b3D=_saved65[1],y=_saved65[2];var dyActivation=getFusedDyActivation(dy,y,activation);var biasGradient={};if(bias!=null){biasGradient={bias:function bias(){return getFusedBiasGradient($bias,dyActivation);}};}if(!transposeA&&!transposeB){return Object.assign({a:function a(){return dyActivation.matMul(b3D,false,true);},b:function b(){return a3D.matMul(dyActivation,true,false);}},biasGradient);}else if(!transposeA&&transposeB){return Object.assign({a:function a(){return dyActivation.matMul(b3D,false,false);},b:function b(){return dyActivation.matMul(a3D,true,false);}},biasGradient);}else if(transposeA&&!transposeB){return Object.assign({a:function a(){return b3D.matMul(dyActivation,false,true);},b:function b(){return a3D.matMul(dyActivation,false,false);}},biasGradient);}else{return Object.assign({a:function a(){return b3D.matMul(dyActivation,true,true);},b:function b(){return dyActivation.matMul(a3D,true,true);}},biasGradient);}};var inputs={a:a3D,b:b3D};if(bias!=null){inputs.bias=$bias;}if(preluActivationWeights!=null){inputs.preluActivationWeights=$preluActivationWeights;}var inputsToSave=[a3D,b3D];var outputsToSave=[true];var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var y=backend.fusedBatchMatMul({a:a3D,b:b3D,transposeA:transposeA,transposeB:transposeB,bias:$bias,activation:activation,preluActivationWeights:$preluActivationWeights});save([a3D,b3D,y]);return y;},inputs,grad,'_FusedMatMul',{transposeA:transposeA,transposeB:transposeB,activation:activation},inputsToSave,outputsToSave);return res.reshape(outShape);}/**\r\n * Computes a 2D convolution over the input x, optionally fused with adding a\r\n * bias and applying an activation.\r\n *\r\n * ```js\r\n * const inputDepth = 2;\r\n * const inShape = [2, 2, 2, inputDepth];\r\n * const outputDepth = 2;\r\n * const fSize = 1;\r\n * const pad = 0;\r\n * const strides = 1;\r\n *\r\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\r\n * 16], inShape);\r\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\r\n * outputDepth]);\r\n *\r\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\r\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\r\n * ```\r\n *\r\n * @param obj An object with the following properties:\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid` output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param bias Tensor to be added to the result.\r\n * @param activation Name of activation kernel (defaults to `linear`) to be\r\n *     applied\r\n *      after biasAdd.\r\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\r\n *     of a `prelu` activation, typically the same shape as `x`.\r\n */function fusedConv2d_(_ref5){var x=_ref5.x,filter=_ref5.filter,strides=_ref5.strides,pad=_ref5.pad,_ref5$dataFormat=_ref5.dataFormat,dataFormat=_ref5$dataFormat===void 0?'NHWC':_ref5$dataFormat,_ref5$dilations=_ref5.dilations,dilations=_ref5$dilations===void 0?[1,1]:_ref5$dilations,dimRoundingMode=_ref5.dimRoundingMode,bias=_ref5.bias,_ref5$activation=_ref5.activation,activation=_ref5$activation===void 0?'linear':_ref5$activation,preluActivationWeights=_ref5.preluActivationWeights;activation=activation||'linear';if(shouldFuse(engine[\"a\"/* ENGINE */].state.gradientDepth,activation)===false){var result=conv2d(x,filter,strides,pad,dataFormat,dilations,dimRoundingMode);if(bias!=null){result=add(result,bias);}return applyActivation(result,activation,preluActivationWeights);}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','conv2d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','conv2d');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=$x.as4D(1,$x.shape[0],$x.shape[1],$x.shape[2]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in fused conv2d: input must be rank 4, but got rank \"+\"\".concat(x4D.rank,\".\");});util[\"assert\"]($filter.rank===4,function(){return\"Error in fused conv2d: filter must be rank 4, but got rank \"+\"\".concat($filter.rank,\".\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in fused conv2d: pad must be an integer when using, \"+\"dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}util[\"assert\"](x4D.shape[3]===$filter.shape[2],function(){return\"Error in conv2d: depth of input (\".concat(x4D.shape[3],\") must match \")+\"input depth for filter \".concat($filter.shape[2],\".\");});util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in conv2D: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});util[\"assert\"](dataFormat==='NHWC',function(){return\"Error in conv2d: got dataFormat of \".concat(dataFormat,\" but only NHWC is currently supported.\");});var convInfo=computeConv2DInfo(x4D.shape,$filter.shape,strides,dilations,pad,dimRoundingMode);var $bias;if(bias!=null){$bias=Object(tensor_util_env[\"a\"/* convertToTensor */])(bias,'bias','fused conv2d');var _Object43=Object(tensor_util[\"makeTypesMatch\"])($bias,$x);var _Object44=_slicedToArray(_Object43,1);$bias=_Object44[0];assertAndGetBroadcastShape(convInfo.outShape,$bias.shape);}var $preluActivationWeights;if(preluActivationWeights!=null){$preluActivationWeights=Object(tensor_util_env[\"a\"/* convertToTensor */])(preluActivationWeights,'prelu weights','fused conv2d');}var grad=function grad(dy,saved){var _saved66=_slicedToArray(saved,3),$filter=_saved66[0],x4D=_saved66[1],y=_saved66[2];var dyActivation=getFusedDyActivation(dy,y,activation);util[\"assert\"](tupleValuesAreOne(dilations),function(){return'Error in gradient of fused conv2D: '+\"dilation rates greater than 1 \"+\"are not yet supported in gradients. Got dilations '\".concat(dilations,\"'\");});var biasGradient={};if(bias!=null){biasGradient={bias:function bias(){return getFusedBiasGradient($bias,dyActivation);}};}return Object.assign({x:function x(){return conv2DBackpropInput(x4D.shape,dyActivation,$filter,strides,pad);},filter:function filter(){return conv2DBackpropFilter(x4D,dyActivation,$filter.shape,strides,pad);}},biasGradient);};var inputs={x:x4D,filter:$filter};if(bias!=null){inputs.bias=$bias;}if(preluActivationWeights!=null){inputs.preluActivationWeights=$preluActivationWeights;}var inputsToSave=[$filter,x4D];var outputsToSave=[true];// Save the only output.\nvar res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.fusedConv2d({input:x4D,filter:$filter,convInfo:convInfo,bias:$bias,activation:activation,preluActivationWeights:$preluActivationWeights});save([$filter,x4D,res]);return res;},inputs,grad,'FusedConv2D',{convInfo:convInfo,activation:activation},inputsToSave,outputsToSave);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}/**\r\n * Computes depthwise 2D convolution, optionally fused with adding a\r\n * bias and applying an activation.\r\n *\r\n * Given a 4D `input` array and a `filter` array of shape\r\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\r\n * `inChannels` convolutional filters of depth 1, this op applies a\r\n * different filter to each input channel (expanding from 1 channel to\r\n * `channelMultiplier` channels for each), then concatenates the results\r\n * together. The output has `inChannels * channelMultiplier` channels.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\r\n * for more details.\r\n *\r\n * @param obj An object with the following properties:\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param bias Tensor to be added to the result.\r\n * @param activation Name of activation kernel (defaults to `linear`).\r\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\r\n *     of a `prelu` activation, typically the same shape as `x`.\r\n */function fusedDepthwiseConv2d_(_ref6){var x=_ref6.x,filter=_ref6.filter,strides=_ref6.strides,pad=_ref6.pad,_ref6$dataFormat=_ref6.dataFormat,dataFormat=_ref6$dataFormat===void 0?'NHWC':_ref6$dataFormat,_ref6$dilations=_ref6.dilations,dilations=_ref6$dilations===void 0?[1,1]:_ref6$dilations,dimRoundingMode=_ref6.dimRoundingMode,bias=_ref6.bias,_ref6$activation=_ref6.activation,activation=_ref6$activation===void 0?'linear':_ref6$activation,preluActivationWeights=_ref6.preluActivationWeights;if(shouldFuse(engine[\"a\"/* ENGINE */].state.gradientDepth,activation)===false){var result=depthwiseConv2d(x,filter,strides,pad,dataFormat,dilations,dimRoundingMode);if(bias!=null){result=add(result,bias);}return applyActivation(result,activation,preluActivationWeights);}var $x=Object(tensor_util_env[\"a\"/* convertToTensor */])(x,'x','depthwiseConv2d');var $filter=Object(tensor_util_env[\"a\"/* convertToTensor */])(filter,'filter','depthwiseConv2d');var x4D=$x;var reshapedTo4D=false;if($x.rank===3){reshapedTo4D=true;x4D=$x.as4D(1,$x.shape[0],$x.shape[1],$x.shape[2]);}util[\"assert\"](x4D.rank===4,function(){return\"Error in fused depthwiseConv2d: input must be rank 4, but got \"+\"rank \".concat(x4D.rank,\".\");});util[\"assert\"]($filter.rank===4,function(){return\"Error in fused depthwiseConv2d: filter must be rank 4, \"+\"but got rank \".concat($filter.rank,\".\");});util[\"assert\"](x4D.shape[3]===$filter.shape[2],function(){return\"Error in fused depthwiseConv2d: number of input channels \"+\"(\".concat(x4D.shape[3],\") must match the inChannels dimension in \")+\"filter \".concat($filter.shape[2],\".\");});if(dilations==null){dilations=[1,1];}util[\"assert\"](eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in fused depthwiseConv2d: Either strides or dilations must '+\"be 1. Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});if(dimRoundingMode!=null){util[\"assert\"](util[\"isInt\"](pad),function(){return\"Error in fused depthwiseConv2d: pad must be an integer when \"+\"using dimRoundingMode \".concat(dimRoundingMode,\" but got pad \").concat(pad,\".\");});}var convInfo=computeConv2DInfo(x4D.shape,$filter.shape,strides,dilations,pad,dimRoundingMode,true/* depthwise */);var $bias;if(bias!=null){$bias=Object(tensor_util_env[\"a\"/* convertToTensor */])(bias,'bias','fused conv2d');var _Object45=Object(tensor_util[\"makeTypesMatch\"])($bias,$x);var _Object46=_slicedToArray(_Object45,1);$bias=_Object46[0];assertAndGetBroadcastShape(convInfo.outShape,$bias.shape);}var $preluActivationWeights;if(preluActivationWeights!=null){$preluActivationWeights=Object(tensor_util_env[\"a\"/* convertToTensor */])(preluActivationWeights,'prelu weights','fused depthwiseConv2d');}var grad=function grad(dy,saved){util[\"assert\"](tupleValuesAreOne(dilations),function(){return'Error in gradient of fused depthwiseConv2d: dilation rates '+\"greater than 1 are not yet supported. Got dilations \"+\"'\".concat(dilations,\"'\");});var _saved67=_slicedToArray(saved,3),$filter=_saved67[0],x4D=_saved67[1],y=_saved67[2];var dyActivation=getFusedDyActivation(dy,y,activation);var biasGradient={};if(bias!=null){biasGradient={bias:function bias(){return getFusedBiasGradient($bias,dyActivation);}};}return Object.assign({x:function x(){return depthwiseConv2dNativeBackpropInput(x4D.shape,dyActivation,$filter,convInfo);},filter:function filter(){return depthwiseConv2dNativeBackpropFilter(x4D,dyActivation,$filter.shape,convInfo);}},biasGradient);};var inputs={x:x4D,filter:$filter};if(bias!=null){inputs.bias=$bias;}if(preluActivationWeights!=null){inputs.preluActivationWeights=$preluActivationWeights;}var inputsToSave=[$filter,x4D];var outputsToSave=[true];var res=engine[\"a\"/* ENGINE */].runKernelFunc(function(backend,save){var res=backend.fusedDepthwiseConv2D({input:x4D,filter:$filter,convInfo:convInfo,bias:$bias,activation:activation,preluActivationWeights:$preluActivationWeights});save([$filter,x4D,res]);return res;},inputs,grad,'FusedDepthwiseConv2D',{convInfo:convInfo,activation:activation},inputsToSave,outputsToSave);if(reshapedTo4D){return res.as3D(res.shape[1],res.shape[2],res.shape[3]);}return res;}var fused_ops_matMul=Object(operation[\"a\"/* op */])({fusedMatMul_:fusedMatMul_});var fused_ops_conv2d=Object(operation[\"a\"/* op */])({fusedConv2d_:fusedConv2d_});var fused_ops_depthwiseConv2d=Object(operation[\"a\"/* op */])({fusedDepthwiseConv2d_:fusedDepthwiseConv2d_});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Modularized ops.\n// Second level exports.\n// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */var optimizer_Optimizer=/*#__PURE__*/function(_Serializable){_inherits(optimizer_Optimizer,_Serializable);var _super=_createSuper(optimizer_Optimizer);function optimizer_Optimizer(){_classCallCheck2(this,optimizer_Optimizer);return _super.apply(this,arguments);}_createClass(optimizer_Optimizer,[{key:\"minimize\",value:/**\r\n     * Executes `f()` and minimizes the scalar output of `f()` by computing\r\n     * gradients of y with respect to the list of trainable variables provided by\r\n     * `varList`. If no list is provided, it defaults to all trainable variables.\r\n     *\r\n     * @param f The function to execute and whose output to minimize.\r\n     * @param returnCost Whether to return the scalar cost value produced by\r\n     * executing `f()`.\r\n     * @param varList An optional list of variables to update. If specified, only\r\n     * the trainable variables in varList will be updated by minimize. Defaults to\r\n     * all trainable variables.\r\n     */ /** @doc {heading: 'Training', subheading: 'Optimizers'} */function minimize(f){var returnCost=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var varList=arguments.length>2?arguments[2]:undefined;var _this$computeGradient=this.computeGradients(f,varList),value=_this$computeGradient.value,grads=_this$computeGradient.grads;if(varList!=null){var gradArray=varList.map(function(v){return{name:v.name,tensor:grads[v.name]};});this.applyGradients(gradArray);}else{this.applyGradients(grads);}// Dispose gradients.\n_dispose(grads);if(returnCost){return value;}else{value.dispose();return null;}}/**\r\n     * The number of iterations that this optimizer instance has been invoked for.\r\n     */},{key:\"iterations\",get:function get(){if(this.iterations_==null){this.iterations_=0;}return this.iterations_;}},{key:\"incrementIterations\",value:function incrementIterations(){this.iterations_=this.iterations+1;}/**\r\n     * Executes f() and computes the gradient of the scalar output of f() with\r\n     * respect to the list of trainable variables provided by `varList`. If no\r\n     * list is provided, it defaults to all trainable variables.\r\n     *\r\n     * @param f The function to execute and whose output to use for computing\r\n     * gradients with respect to variables.\r\n     * @param varList An optional list of variables to compute gradients with\r\n     * respect to. If specified, only the trainable variables in varList will have\r\n     * gradients computed with respect to. Defaults to all trainable variables.\r\n     */},{key:\"computeGradients\",value:function computeGradients(f,varList){return variableGrads(f,varList);}/**\r\n     * Dispose the variables (if any) owned by this optimizer instance.\r\n     */},{key:\"dispose\",value:function dispose(){if(this.iterations_!=null){_dispose(this.iterations_);}}},{key:\"saveIterations\",value:function(){var _saveIterations=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee17(){return regeneratorRuntime.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:if(this.iterations_==null){this.iterations_=0;}return _context17.abrupt(\"return\",{name:'iter',// TODO(cais): Use 'int64' type when available.\ntensor:Object(tensor_ops[\"e\"/* scalar */])(this.iterations_,'int32')});case 2:case\"end\":return _context17.stop();}}},_callee17,this);}));function saveIterations(){return _saveIterations.apply(this,arguments);}return saveIterations;}()},{key:\"getWeights\",value:function(){var _getWeights=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee18(){return regeneratorRuntime.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:throw new Error('getWeights() is not implemented for this optimizer yet.');case 1:case\"end\":return _context18.stop();}}},_callee18);}));function getWeights(){return _getWeights.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee19(weightValues){return regeneratorRuntime.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:throw new Error(\"setWeights() is not implemented for this optimizer class \"+\"\".concat(this.getClassName()));case 1:case\"end\":return _context19.stop();}}},_callee19,this);}));function setWeights(_x49){return _setWeights.apply(this,arguments);}return setWeights;}()/**\r\n     * Extract the first element of the weight values and set it\r\n     * as the iterations counter variable of this instance of optimizer.\r\n     *\r\n     * @param weightValues\r\n     * @returns Weight values with the first element consumed and excluded.\r\n     */},{key:\"extractIterations\",value:function(){var _extractIterations=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee20(weightValues){return regeneratorRuntime.wrap(function _callee20$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:_context20.next=2;return weightValues[0].tensor.data();case 2:this.iterations_=_context20.sent[0];return _context20.abrupt(\"return\",weightValues.slice(1));case 4:case\"end\":return _context20.stop();}}},_callee20,this);}));function extractIterations(_x50){return _extractIterations.apply(this,arguments);}return extractIterations;}()}]);return optimizer_Optimizer;}(Serializable);Object.defineProperty(optimizer_Optimizer,Symbol.hasInstance,{value:function value(instance){return instance.minimize!=null&&instance.computeGradients!=null&&instance.applyGradients!=null;}});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doclink Optimizer */var adadelta_optimizer_AdadeltaOptimizer=/*#__PURE__*/function(_optimizer_Optimizer){_inherits(adadelta_optimizer_AdadeltaOptimizer,_optimizer_Optimizer);var _super2=_createSuper(adadelta_optimizer_AdadeltaOptimizer);function adadelta_optimizer_AdadeltaOptimizer(learningRate,rho){var _this6;var epsilon=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck2(this,adadelta_optimizer_AdadeltaOptimizer);_this6=_super2.call(this);_this6.learningRate=learningRate;_this6.rho=rho;_this6.epsilon=epsilon;_this6.accumulatedGrads=[];_this6.accumulatedUpdates=[];if(epsilon==null){_this6.epsilon=engine[\"a\"/* ENGINE */].backend.epsilon();}return _this6;}_createClass(adadelta_optimizer_AdadeltaOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this7=this;var variableNames=Array.isArray(variableGradients)?variableGradients.map(function(item){return item.name;}):Object.keys(variableGradients);variableNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];var trainable=false;if(_this7.accumulatedGrads[i]==null){_this7.accumulatedGrads[i]={originalName:\"\".concat(name,\"/accum_grad\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}if(_this7.accumulatedUpdates[i]==null){_this7.accumulatedUpdates[i]={originalName:\"\".concat(name,\"/accum_var\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var accumulatedGrad=_this7.accumulatedGrads[i].variable;var accumulatedUpdate=_this7.accumulatedUpdates[i].variable;tidy(function(){var newAccumulatedGrad=accumulatedGrad.mul(_this7.rho).add(gradient.square().mul(1-_this7.rho));var updates=accumulatedUpdate.add(_this7.epsilon).sqrt().div(accumulatedGrad.add(_this7.epsilon).sqrt()).mul(gradient);var newAccumulatedUpdate=accumulatedUpdate.mul(_this7.rho).add(updates.square().mul(1-_this7.rho));accumulatedGrad.assign(newAccumulatedGrad);accumulatedUpdate.assign(newAccumulatedUpdate);var newValue=updates.mul(-_this7.learningRate).add(value);value.assign(newValue);});});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){if(this.accumulatedUpdates!=null){_dispose(this.accumulatedGrads.map(function(v){return v.variable;}));_dispose(this.accumulatedUpdates.map(function(v){return v.variable;}));}}},{key:\"getWeights\",value:function(){var _getWeights2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee21(){var variables;return regeneratorRuntime.wrap(function _callee21$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:// Order matters for Python compatibility.\nvariables=[].concat(_toConsumableArray2(this.accumulatedGrads),_toConsumableArray2(this.accumulatedUpdates));_context21.next=3;return this.saveIterations();case 3:_context21.t0=_context21.sent;return _context21.abrupt(\"return\",[_context21.t0].concat(variables.map(function(v){return{name:v.originalName,tensor:v.variable};})));case 5:case\"end\":return _context21.stop();}}},_callee21,this);}));function getWeights(){return _getWeights2.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee22(weightValues){var variableCount,trainable;return regeneratorRuntime.wrap(function _callee22$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:_context22.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context22.sent;variableCount=weightValues.length/2;trainable=false;this.accumulatedGrads=weightValues.slice(0,variableCount).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});this.accumulatedUpdates=weightValues.slice(variableCount,variableCount*2).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});case 7:case\"end\":return _context22.stop();}}},_callee22,this);}));function setWeights(_x51){return _setWeights2.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'rho':this.rho,'epsilon':this.epsilon};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['rho'],config['epsilon']);}}]);return adadelta_optimizer_AdadeltaOptimizer;}(optimizer_Optimizer);/** @nocollapse */adadelta_optimizer_AdadeltaOptimizer.className='Adadelta';// Name matters for Python compatibility.\nregisterClass(adadelta_optimizer_AdadeltaOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doclink Optimizer */var adagrad_optimizer_AdagradOptimizer=/*#__PURE__*/function(_optimizer_Optimizer2){_inherits(adagrad_optimizer_AdagradOptimizer,_optimizer_Optimizer2);var _super3=_createSuper(adagrad_optimizer_AdagradOptimizer);function adagrad_optimizer_AdagradOptimizer(learningRate){var _this8;var initialAccumulatorValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.1;_classCallCheck2(this,adagrad_optimizer_AdagradOptimizer);_this8=_super3.call(this);_this8.learningRate=learningRate;_this8.initialAccumulatorValue=initialAccumulatorValue;_this8.accumulatedGrads=[];return _this8;}_createClass(adagrad_optimizer_AdagradOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this9=this;var variableNames=Array.isArray(variableGradients)?variableGradients.map(function(item){return item.name;}):Object.keys(variableGradients);variableNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];if(_this9.accumulatedGrads[i]==null){var trainable=false;_this9.accumulatedGrads[i]={originalName:\"\".concat(name,\"/accumulator\"),variable:tidy(function(){return fill(value.shape,_this9.initialAccumulatorValue).variable(trainable);})};}var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var accumulatedGrad=_this9.accumulatedGrads[i].variable;tidy(function(){var newAccumulatedGrad=accumulatedGrad.add(gradient.square());accumulatedGrad.assign(newAccumulatedGrad);var newValue=gradient.div(newAccumulatedGrad.add(engine[\"a\"/* ENGINE */].backend.epsilon()).sqrt()).mul(-_this9.learningRate).add(value);value.assign(newValue);});});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){if(this.accumulatedGrads!=null){_dispose(this.accumulatedGrads.map(function(v){return v.variable;}));}}},{key:\"getWeights\",value:function(){var _getWeights3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee23(){return regeneratorRuntime.wrap(function _callee23$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:_context23.next=2;return this.saveIterations();case 2:_context23.t0=_context23.sent;return _context23.abrupt(\"return\",[_context23.t0].concat(this.accumulatedGrads.map(function(v){return{name:v.originalName,tensor:v.variable};})));case 4:case\"end\":return _context23.stop();}}},_callee23,this);}));function getWeights(){return _getWeights3.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee24(weightValues){var trainable;return regeneratorRuntime.wrap(function _callee24$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:_context24.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context24.sent;trainable=false;this.accumulatedGrads=weightValues.map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});case 5:case\"end\":return _context24.stop();}}},_callee24,this);}));function setWeights(_x52){return _setWeights3.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'initialAccumulatorValue':this.initialAccumulatorValue};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['initialAccumulatorValue']);}}]);return adagrad_optimizer_AdagradOptimizer;}(optimizer_Optimizer);/** @nocollapse */adagrad_optimizer_AdagradOptimizer.className='Adagrad';// Note: Name matters for Python compatibility.\nregisterClass(adagrad_optimizer_AdagradOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var adam_optimizer_AdamOptimizer=/*#__PURE__*/function(_optimizer_Optimizer3){_inherits(adam_optimizer_AdamOptimizer,_optimizer_Optimizer3);var _super4=_createSuper(adam_optimizer_AdamOptimizer);function adam_optimizer_AdamOptimizer(learningRate,beta1,beta2){var _this10;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck2(this,adam_optimizer_AdamOptimizer);_this10=_super4.call(this);_this10.learningRate=learningRate;_this10.beta1=beta1;_this10.beta2=beta2;_this10.epsilon=epsilon;_this10.accumulatedFirstMoment=[];_this10.accumulatedSecondMoment=[];tidy(function(){// accB* will be updated by batch.\n_this10.accBeta1=Object(tensor_ops[\"e\"/* scalar */])(beta1).variable();_this10.accBeta2=Object(tensor_ops[\"e\"/* scalar */])(beta2).variable();});if(epsilon==null){_this10.epsilon=engine[\"a\"/* ENGINE */].backend.epsilon();}return _this10;}_createClass(adam_optimizer_AdamOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this11=this;var varNames=Array.isArray(variableGradients)?variableGradients.map(function(v){return v.name;}):Object.keys(variableGradients);tidy(function(){var oneMinusAccBeta1=sub(1,_this11.accBeta1);var oneMinusAccBeta2=sub(1,_this11.accBeta2);varNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];var trainable=false;if(_this11.accumulatedFirstMoment[i]==null){_this11.accumulatedFirstMoment[i]={originalName:\"\".concat(name,\"/m\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}if(_this11.accumulatedSecondMoment[i]==null){_this11.accumulatedSecondMoment[i]={originalName:\"\".concat(name,\"/v\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var firstMoment=_this11.accumulatedFirstMoment[i].variable;var secondMoment=_this11.accumulatedSecondMoment[i].variable;var newFirstMoment=firstMoment.mul(_this11.beta1).add(gradient.mul(1-_this11.beta1));var newSecondMoment=secondMoment.mul(_this11.beta2).add(gradient.square().mul(1-_this11.beta2));var biasCorrectedFirstMoment=newFirstMoment.div(oneMinusAccBeta1);var biasCorrectedSecondMoment=newSecondMoment.div(oneMinusAccBeta2);firstMoment.assign(newFirstMoment);secondMoment.assign(newSecondMoment);var newValue=biasCorrectedFirstMoment.div(biasCorrectedSecondMoment.sqrt().add(_this11.epsilon)).mul(-_this11.learningRate).add(value);value.assign(newValue);});_this11.accBeta1.assign(_this11.accBeta1.mul(_this11.beta1));_this11.accBeta2.assign(_this11.accBeta2.mul(_this11.beta2));});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){this.accBeta1.dispose();this.accBeta2.dispose();if(this.accumulatedFirstMoment!=null){_dispose(this.accumulatedFirstMoment.map(function(v){return v.variable;}));}if(this.accumulatedSecondMoment!=null){_dispose(this.accumulatedSecondMoment.map(function(v){return v.variable;}));}}},{key:\"getWeights\",value:function(){var _getWeights4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee25(){var variables;return regeneratorRuntime.wrap(function _callee25$(_context25){while(1){switch(_context25.prev=_context25.next){case 0:// Order matters for Python compatibility.\nvariables=[].concat(_toConsumableArray2(this.accumulatedFirstMoment),_toConsumableArray2(this.accumulatedSecondMoment));_context25.next=3;return this.saveIterations();case 3:_context25.t0=_context25.sent;return _context25.abrupt(\"return\",[_context25.t0].concat(variables.map(function(v){return{name:v.originalName,tensor:v.variable};})));case 5:case\"end\":return _context25.stop();}}},_callee25,this);}));function getWeights(){return _getWeights4.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee26(weightValues){var _this12=this;var variableCount,trainable;return regeneratorRuntime.wrap(function _callee26$(_context26){while(1){switch(_context26.prev=_context26.next){case 0:_context26.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context26.sent;tidy(function(){_this12.accBeta1.assign(pow(_this12.beta1,_this12.iterations_+1));_this12.accBeta2.assign(pow(_this12.beta2,_this12.iterations_+1));});variableCount=weightValues.length/2;trainable=false;this.accumulatedFirstMoment=weightValues.slice(0,variableCount).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});this.accumulatedSecondMoment=weightValues.slice(variableCount,variableCount*2).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});case 8:case\"end\":return _context26.stop();}}},_callee26,this);}));function setWeights(_x53){return _setWeights4.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'beta1':this.beta1,'beta2':this.beta2,'epsilon':this.epsilon};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['beta1'],config['beta2'],config['epsilon']);}}]);return adam_optimizer_AdamOptimizer;}(optimizer_Optimizer);/** @nocollapse */adam_optimizer_AdamOptimizer.className='Adam';// Note: Name matters for Python compatibility.\nregisterClass(adam_optimizer_AdamOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var adamax_optimizer_AdamaxOptimizer=/*#__PURE__*/function(_optimizer_Optimizer4){_inherits(adamax_optimizer_AdamaxOptimizer,_optimizer_Optimizer4);var _super5=_createSuper(adamax_optimizer_AdamaxOptimizer);function adamax_optimizer_AdamaxOptimizer(learningRate,beta1,beta2){var _this13;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var decay=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0.0;_classCallCheck2(this,adamax_optimizer_AdamaxOptimizer);_this13=_super5.call(this);_this13.learningRate=learningRate;_this13.beta1=beta1;_this13.beta2=beta2;_this13.epsilon=epsilon;_this13.decay=decay;_this13.accumulatedFirstMoment=[];_this13.accumulatedWeightedInfNorm=[];tidy(function(){_this13.iteration=Object(tensor_ops[\"e\"/* scalar */])(0).variable();_this13.accBeta1=Object(tensor_ops[\"e\"/* scalar */])(beta1).variable();});if(epsilon==null){_this13.epsilon=engine[\"a\"/* ENGINE */].backend.epsilon();}return _this13;}_createClass(adamax_optimizer_AdamaxOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this14=this;var variableNames=Array.isArray(variableGradients)?variableGradients.map(function(item){return item.name;}):Object.keys(variableGradients);tidy(function(){var oneMinusAccBeta1=sub(1,_this14.accBeta1);var lr=div(-_this14.learningRate,_this14.iteration.mul(_this14.decay).add(1));variableNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];var trainable=false;if(_this14.accumulatedFirstMoment[i]==null){_this14.accumulatedFirstMoment[i]={originalName:\"\".concat(name,\"/m\"),variable:Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable)};}if(_this14.accumulatedWeightedInfNorm[i]==null){_this14.accumulatedWeightedInfNorm[i]={originalName:\"\".concat(name,\"/v\"),variable:Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable)};}var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var firstMoment=_this14.accumulatedFirstMoment[i].variable;var weightedInfNorm=_this14.accumulatedWeightedInfNorm[i].variable;var newFirstMoment=firstMoment.mul(_this14.beta1).add(gradient.mul(1-_this14.beta1));var ut0=weightedInfNorm.mul(_this14.beta2);var ut1=gradient.abs();var newWeightedInfNorm=ut0.maximum(ut1);firstMoment.assign(newFirstMoment);weightedInfNorm.assign(newWeightedInfNorm);var newValue=lr.div(oneMinusAccBeta1).mul(newFirstMoment.div(newWeightedInfNorm.add(_this14.epsilon))).add(value);value.assign(newValue);});_this14.iteration.assign(_this14.iteration.add(1));_this14.accBeta1.assign(_this14.accBeta1.mul(_this14.beta1));});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){this.accBeta1.dispose();this.iteration.dispose();if(this.accumulatedFirstMoment!=null){_dispose(this.accumulatedFirstMoment.map(function(v){return v.variable;}));}if(this.accumulatedWeightedInfNorm!=null){_dispose(this.accumulatedWeightedInfNorm.map(function(v){return v.variable;}));}}},{key:\"getWeights\",value:function(){var _getWeights5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee27(){return regeneratorRuntime.wrap(function _callee27$(_context27){while(1){switch(_context27.prev=_context27.next){case 0:throw new Error('getWeights() is not implemented for Adamax yet.');case 1:case\"end\":return _context27.stop();}}},_callee27);}));function getWeights(){return _getWeights5.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee28(weightValues){return regeneratorRuntime.wrap(function _callee28$(_context28){while(1){switch(_context28.prev=_context28.next){case 0:throw new Error('setWeights() is not implemented for Adamax yet.');case 1:case\"end\":return _context28.stop();}}},_callee28);}));function setWeights(_x54){return _setWeights5.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'beta1':this.beta1,'beta2':this.beta2,'epsilon':this.epsilon,'decay':this.decay};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['beta1'],config['beta2'],config['epsilon'],config['decay']);}}]);return adamax_optimizer_AdamaxOptimizer;}(optimizer_Optimizer);/** @nocollapse */adamax_optimizer_AdamaxOptimizer.className='Adamax';// Note: Name matters for Python compatbility.\nregisterClass(adamax_optimizer_AdamaxOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doclink Optimizer */var sgd_optimizer_SGDOptimizer=/*#__PURE__*/function(_optimizer_Optimizer5){_inherits(sgd_optimizer_SGDOptimizer,_optimizer_Optimizer5);var _super6=_createSuper(sgd_optimizer_SGDOptimizer);function sgd_optimizer_SGDOptimizer(learningRate){var _this15;_classCallCheck2(this,sgd_optimizer_SGDOptimizer);_this15=_super6.call(this);_this15.learningRate=learningRate;_this15.setLearningRate(learningRate);return _this15;}_createClass(sgd_optimizer_SGDOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this16=this;var varNames=Array.isArray(variableGradients)?variableGradients.map(function(v){return v.name;}):Object.keys(variableGradients);varNames.forEach(function(name,i){var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var value=engine[\"a\"/* ENGINE */].registeredVariables[name];tidy(function(){var newValue=_this16.c.mul(gradient).add(value);value.assign(newValue);});});this.incrementIterations();}/**\r\n     * Sets the learning rate of the optimizer.\r\n     */},{key:\"setLearningRate\",value:function setLearningRate(learningRate){this.learningRate=learningRate;if(this.c!=null){this.c.dispose();}this.c=keep(Object(tensor_ops[\"e\"/* scalar */])(-learningRate));}},{key:\"dispose\",value:function dispose(){this.c.dispose();}},{key:\"getWeights\",value:function(){var _getWeights6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee29(){return regeneratorRuntime.wrap(function _callee29$(_context29){while(1){switch(_context29.prev=_context29.next){case 0:_context29.next=2;return this.saveIterations();case 2:_context29.t0=_context29.sent;return _context29.abrupt(\"return\",[_context29.t0]);case 4:case\"end\":return _context29.stop();}}},_callee29,this);}));function getWeights(){return _getWeights6.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee30(weightValues){return regeneratorRuntime.wrap(function _callee30$(_context30){while(1){switch(_context30.prev=_context30.next){case 0:_context30.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context30.sent;if(!(weightValues.length!==0)){_context30.next=5;break;}throw new Error('SGD optimizer does not have settable weights.');case 5:case\"end\":return _context30.stop();}}},_callee30,this);}));function setWeights(_x55){return _setWeights6.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate']);}}]);return sgd_optimizer_SGDOptimizer;}(optimizer_Optimizer);/** @nocollapse */sgd_optimizer_SGDOptimizer.className='SGD';// Note: Name matters for Python compatibility.\nregisterClass(sgd_optimizer_SGDOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doclink Optimizer */var momentum_optimizer_MomentumOptimizer=/*#__PURE__*/function(_sgd_optimizer_SGDOpt){_inherits(momentum_optimizer_MomentumOptimizer,_sgd_optimizer_SGDOpt);var _super7=_createSuper(momentum_optimizer_MomentumOptimizer);function momentum_optimizer_MomentumOptimizer(learningRate,momentum){var _this17;var useNesterov=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck2(this,momentum_optimizer_MomentumOptimizer);_this17=_super7.call(this,learningRate);_this17.learningRate=learningRate;_this17.momentum=momentum;_this17.useNesterov=useNesterov;_this17.accumulations=[];_this17.m=Object(tensor_ops[\"e\"/* scalar */])(_this17.momentum);return _this17;}_createClass(momentum_optimizer_MomentumOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this18=this;var variableNames=Array.isArray(variableGradients)?variableGradients.map(function(item){return item.name;}):Object.keys(variableGradients);variableNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];if(_this18.accumulations[i]==null){var trainable=false;_this18.accumulations[i]={originalName:\"\".concat(name,\"/momentum\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}var accumulation=_this18.accumulations[i].variable;var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}tidy(function(){var newValue;var newAccumulation=_this18.m.mul(accumulation).add(gradient);if(_this18.useNesterov){newValue=_this18.c.mul(gradient.add(newAccumulation.mul(_this18.m))).add(value);}else{newValue=_this18.c.mul(newAccumulation).add(value);}accumulation.assign(newAccumulation);value.assign(newValue);});});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){this.m.dispose();if(this.accumulations!=null){_dispose(this.accumulations.map(function(v){return v.variable;}));}}/**\r\n     * Sets the momentum of the optimizer.\r\n     *\r\n     * @param momentum\r\n     */},{key:\"setMomentum\",value:function setMomentum(momentum){this.momentum=momentum;}},{key:\"getWeights\",value:function(){var _getWeights7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee31(){return regeneratorRuntime.wrap(function _callee31$(_context31){while(1){switch(_context31.prev=_context31.next){case 0:_context31.next=2;return this.saveIterations();case 2:_context31.t0=_context31.sent;return _context31.abrupt(\"return\",[_context31.t0].concat(this.accumulations.map(function(v){return{name:v.originalName,tensor:v.variable};})));case 4:case\"end\":return _context31.stop();}}},_callee31,this);}));function getWeights(){return _getWeights7.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee32(weightValues){var trainable;return regeneratorRuntime.wrap(function _callee32$(_context32){while(1){switch(_context32.prev=_context32.next){case 0:_context32.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context32.sent;trainable=false;this.accumulations=weightValues.map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});case 5:case\"end\":return _context32.stop();}}},_callee32,this);}));function setWeights(_x56){return _setWeights7.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'momentum':this.momentum,'useNesterov':this.useNesterov};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['momentum'],config['useNesterov']);}}]);return momentum_optimizer_MomentumOptimizer;}(sgd_optimizer_SGDOptimizer);/** @nocollapse */momentum_optimizer_MomentumOptimizer.className='Momentum';// Name matters for Python compatibility.\nregisterClass(momentum_optimizer_MomentumOptimizer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** @doclink Optimizer */var rmsprop_optimizer_RMSPropOptimizer=/*#__PURE__*/function(_optimizer_Optimizer6){_inherits(rmsprop_optimizer_RMSPropOptimizer,_optimizer_Optimizer6);var _super8=_createSuper(rmsprop_optimizer_RMSPropOptimizer);function rmsprop_optimizer_RMSPropOptimizer(learningRate){var _this19;var decay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.9;var momentum=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.0;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var centered=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;_classCallCheck2(this,rmsprop_optimizer_RMSPropOptimizer);_this19=_super8.call(this);_this19.learningRate=learningRate;_this19.decay=decay;_this19.momentum=momentum;_this19.epsilon=epsilon;_this19.accumulatedMeanSquares=[];_this19.accumulatedMoments=[];_this19.accumulatedMeanGrads=[];_this19.centered=centered;if(epsilon==null){_this19.epsilon=engine[\"a\"/* ENGINE */].backend.epsilon();}if(learningRate==null){throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");}return _this19;}_createClass(rmsprop_optimizer_RMSPropOptimizer,[{key:\"applyGradients\",value:function applyGradients(variableGradients){var _this20=this;var variableNames=Array.isArray(variableGradients)?variableGradients.map(function(item){return item.name;}):Object.keys(variableGradients);variableNames.forEach(function(name,i){var value=engine[\"a\"/* ENGINE */].registeredVariables[name];var trainable=false;if(_this20.accumulatedMeanSquares[i]==null){_this20.accumulatedMeanSquares[i]={originalName:\"\".concat(name,\"/rms\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}if(_this20.accumulatedMoments[i]==null){_this20.accumulatedMoments[i]={originalName:\"\".concat(name,\"/momentum\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}if(_this20.accumulatedMeanGrads[i]==null&&_this20.centered){_this20.accumulatedMeanGrads[i]={originalName:\"\".concat(name,\"/mg\"),variable:tidy(function(){return Object(tensor_ops[\"o\"/* zerosLike */])(value).variable(trainable);})};}var gradient=Array.isArray(variableGradients)?variableGradients[i].tensor:variableGradients[name];if(gradient==null){return;}var accumulatedMeanSquare=_this20.accumulatedMeanSquares[i].variable;var accumulatedMoments=_this20.accumulatedMoments[i].variable;tidy(function(){var newAccumulatedMeanSquare=accumulatedMeanSquare.mul(_this20.decay).add(gradient.square().mul(1-_this20.decay));if(_this20.centered){var accumulatedMeanGrad=_this20.accumulatedMeanGrads[i].variable;// Centered gradient\nvar newAccumulatedMeanGrad=accumulatedMeanGrad.mul(_this20.decay).add(gradient.mul(1-_this20.decay));var newAccumulatedMoments=accumulatedMoments.mul(_this20.momentum).add(gradient.mul(_this20.learningRate).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this20.epsilon)).sqrt()));accumulatedMeanSquare.assign(newAccumulatedMeanSquare);accumulatedMeanGrad.assign(newAccumulatedMeanGrad);accumulatedMoments.assign(newAccumulatedMoments);var newValue=value.sub(newAccumulatedMoments);value.assign(newValue);}else{// Plain gradient\nvar _newAccumulatedMeanSquare=accumulatedMeanSquare.mul(_this20.decay).add(gradient.square().mul(1-_this20.decay));var _newAccumulatedMoments=accumulatedMoments.mul(_this20.momentum).add(gradient.mul(_this20.learningRate).div(_newAccumulatedMeanSquare.add(_this20.epsilon).sqrt()));accumulatedMeanSquare.assign(_newAccumulatedMeanSquare);accumulatedMoments.assign(_newAccumulatedMoments);var _newValue=value.sub(_newAccumulatedMoments);value.assign(_newValue);}});});this.incrementIterations();}},{key:\"dispose\",value:function dispose(){if(this.accumulatedMeanSquares!=null){_dispose(this.accumulatedMeanSquares.map(function(v){return v.variable;}));}if(this.accumulatedMeanGrads!=null&&this.centered){_dispose(this.accumulatedMeanGrads.map(function(v){return v.variable;}));}if(this.accumulatedMoments!=null){_dispose(this.accumulatedMoments.map(function(v){return v.variable;}));}}},{key:\"getWeights\",value:function(){var _getWeights8=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee33(){var variables;return regeneratorRuntime.wrap(function _callee33$(_context33){while(1){switch(_context33.prev=_context33.next){case 0:// Order matters for Python compatibility.\nvariables=[].concat(_toConsumableArray2(this.accumulatedMeanSquares),_toConsumableArray2(this.accumulatedMoments));if(this.centered){variables.push.apply(variables,_toConsumableArray2(this.accumulatedMeanGrads));}_context33.next=4;return this.saveIterations();case 4:_context33.t0=_context33.sent;return _context33.abrupt(\"return\",[_context33.t0].concat(variables.map(function(v){return{name:v.originalName,tensor:v.variable};})));case 6:case\"end\":return _context33.stop();}}},_callee33,this);}));function getWeights(){return _getWeights8.apply(this,arguments);}return getWeights;}()},{key:\"setWeights\",value:function(){var _setWeights8=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee34(weightValues){var variableCount,trainable;return regeneratorRuntime.wrap(function _callee34$(_context34){while(1){switch(_context34.prev=_context34.next){case 0:_context34.next=2;return this.extractIterations(weightValues);case 2:weightValues=_context34.sent;variableCount=this.centered?weightValues.length/3:weightValues.length/2;trainable=false;this.accumulatedMeanSquares=weightValues.slice(0,variableCount).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});this.accumulatedMoments=weightValues.slice(variableCount,variableCount*2).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});if(this.centered){this.accumulatedMeanGrads=weightValues.slice(variableCount*2,variableCount*3).map(function(v){return{originalName:v.name,variable:v.tensor.variable(trainable)};});}case 8:case\"end\":return _context34.stop();}}},_callee34,this);}));function setWeights(_x57){return _setWeights8.apply(this,arguments);}return setWeights;}()},{key:\"getConfig\",value:function getConfig(){return{'learningRate':this.learningRate,'decay':this.decay,'momentum':this.momentum,'epsilon':this.epsilon,'centered':this.centered};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config['learningRate'],config['decay'],config['momentum'],config['epsilon'],config['centered']);}}]);return rmsprop_optimizer_RMSPropOptimizer;}(optimizer_Optimizer);/** @nocollapse */rmsprop_optimizer_RMSPropOptimizer.className='RMSProp';// Note: Name matters for Python compatibility.\nregisterClass(rmsprop_optimizer_RMSPropOptimizer);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/types.js\nvar dist_types=__webpack_require__(23);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var optimizer_constructors_OptimizerConstructors=/*#__PURE__*/function(){function optimizer_constructors_OptimizerConstructors(){_classCallCheck2(this,optimizer_constructors_OptimizerConstructors);}_createClass(optimizer_constructors_OptimizerConstructors,null,[{key:\"sgd\",value:/**\r\n     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\r\n     *\r\n     * ```js\r\n     * // Fit a quadratic function by learning the coefficients a, b, c.\r\n     * const xs = tf.tensor1d([0, 1, 2, 3]);\r\n     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\r\n     *\r\n     * const a = tf.scalar(Math.random()).variable();\r\n     * const b = tf.scalar(Math.random()).variable();\r\n     * const c = tf.scalar(Math.random()).variable();\r\n     *\r\n     * // y = a * x^2 + b * x + c.\r\n     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);\r\n     * const loss = (pred, label) => pred.sub(label).square().mean();\r\n     *\r\n     * const learningRate = 0.01;\r\n     * const optimizer = tf.train.sgd(learningRate);\r\n     *\r\n     * // Train the model.\r\n     * for (let i = 0; i < 10; i++) {\r\n     *   optimizer.minimize(() => loss(f(xs), ys));\r\n     * }\r\n     *\r\n     * // Make predictions.\r\n     * console.log(\r\n     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\r\n     * const preds = f(xs).dataSync();\r\n     * preds.forEach((pred, i) => {\r\n     *   console.log(`x: ${i}, pred: ${pred}`);\r\n     * });\r\n     * ```\r\n     *\r\n     * @param learningRate The learning rate to use for the SGD algorithm.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */function sgd(learningRate){return new sgd_optimizer_SGDOptimizer(learningRate);}/**\r\n     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient\r\n     * descent.\r\n     *\r\n     * See\r\n     * [http://proceedings.mlr.press/v28/sutskever13.pdf](\r\n     * http://proceedings.mlr.press/v28/sutskever13.pdf)\r\n     *\r\n     * @param learningRate The learning rate to use for the Momentum gradient\r\n     * descent algorithm.\r\n     * @param momentum The momentum to use for the momentum gradient descent\r\n     * algorithm.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"momentum\",value:function momentum(learningRate,_momentum){var useNesterov=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return new momentum_optimizer_MomentumOptimizer(learningRate,_momentum,useNesterov);}/**\r\n     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\r\n     * descent. This implementation uses plain momentum and is not centered\r\n     * version of RMSProp.\r\n     *\r\n     * See\r\n     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\r\n     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\r\n     *\r\n     * @param learningRate The learning rate to use for the RMSProp gradient\r\n     * descent algorithm.\r\n     * @param decay The discounting factor for the history/coming gradient.\r\n     * @param momentum The momentum to use for the RMSProp gradient descent\r\n     * algorithm.\r\n     * @param epsilon Small value to avoid zero denominator.\r\n     * @param centered If true, gradients are normalized by the estimated\r\n     * variance of the gradient.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"rmsprop\",value:function rmsprop(learningRate){var decay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:.9;var momentum=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.0;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var centered=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;return new rmsprop_optimizer_RMSPropOptimizer(learningRate,decay,momentum,epsilon,centered);}/**\r\n     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\r\n     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\r\n     *\r\n     * @param learningRate The learning rate to use for the Adam gradient\r\n     * descent algorithm.\r\n     * @param beta1 The exponential decay rate for the 1st moment estimates.\r\n     * @param beta2 The exponential decay rate for the 2nd moment estimates.\r\n     * @param epsilon A small constant for numerical stability.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"adam\",value:function adam(){var learningRate=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.001;var beta1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.9;var beta2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.999;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return new adam_optimizer_AdamOptimizer(learningRate,beta1,beta2,epsilon);}/**\r\n     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\r\n     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)\r\n     *\r\n     * @param learningRate The learning rate to use for the Adadelta gradient\r\n     * descent algorithm.\r\n     * @param rho The learning rate decay over each update.\r\n     * @param epsilon A constant epsilon used to better condition the grad\r\n     * update.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"adadelta\",value:function adadelta(){var learningRate=arguments.length>0&&arguments[0]!==undefined?arguments[0]:.001;var rho=arguments.length>1&&arguments[1]!==undefined?arguments[1]:.95;var epsilon=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return new adadelta_optimizer_AdadeltaOptimizer(learningRate,rho,epsilon);}/**\r\n     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\r\n     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\r\n     *\r\n     * @param learningRate The learning rate to use for the Adamax gradient\r\n     * descent algorithm.\r\n     * @param beta1 The exponential decay rate for the 1st moment estimates.\r\n     * @param beta2 The exponential decay rate for the 2nd moment estimates.\r\n     * @param epsilon A small constant for numerical stability.\r\n     * @param decay The learning rate decay over each update.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"adamax\",value:function adamax(){var learningRate=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.002;var beta1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.9;var beta2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.999;var epsilon=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var decay=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0.0;return new adamax_optimizer_AdamaxOptimizer(learningRate,beta1,beta2,epsilon,decay);}/**\r\n     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\r\n     * See\r\n     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\r\n     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\r\n     * or\r\n     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\r\n     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)\r\n     *\r\n     * @param learningRate The learning rate to use for the Adagrad gradient\r\n     * descent algorithm.\r\n     * @param initialAccumulatorValue Starting value for the accumulators, must be\r\n     * positive.\r\n     */ /**\r\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\r\n     */},{key:\"adagrad\",value:function adagrad(learningRate){var initialAccumulatorValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.1;return new adagrad_optimizer_AdagradOptimizer(learningRate,initialAccumulatorValue);}}]);return optimizer_constructors_OptimizerConstructors;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/train.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // So typings can propagate.\n// tslint:disable-next-line:no-unused-expression\n[momentum_optimizer_MomentumOptimizer,sgd_optimizer_SGDOptimizer,adadelta_optimizer_AdadeltaOptimizer,adagrad_optimizer_AdagradOptimizer,rmsprop_optimizer_RMSPropOptimizer,adamax_optimizer_AdamaxOptimizer,adam_optimizer_AdamOptimizer];var train={sgd:optimizer_constructors_OptimizerConstructors.sgd,momentum:optimizer_constructors_OptimizerConstructors.momentum,adadelta:optimizer_constructors_OptimizerConstructors.adadelta,adagrad:optimizer_constructors_OptimizerConstructors.adagrad,rmsprop:optimizer_constructors_OptimizerConstructors.rmsprop,adamax:optimizer_constructors_OptimizerConstructors.adamax,adam:optimizer_constructors_OptimizerConstructors.adam};// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/browser_util.js\nvar browser_util=__webpack_require__(40);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Gets the new shape of the input Tensor after it's been reshaped\r\n * to:\r\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\r\n * inputShape[1], ..., inputShape[N-1]]\r\n *\r\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */function getReshaped(inputShape,blockShape,prod){var batchToSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var reshaped=[];if(batchToSpace){reshaped=reshaped.concat(blockShape.slice(0));reshaped.push(inputShape[0]/prod);reshaped=reshaped.concat(inputShape.slice(1));}else{reshaped=reshaped.concat(inputShape[0]);var spatialLength=blockShape.length;for(var i=0;i<spatialLength;++i){reshaped=reshaped.concat([inputShape[i+1]/blockShape[i],blockShape[i]]);}reshaped=reshaped.concat(inputShape.slice(spatialLength+1));}return reshaped;}/**\r\n * Gets the permutation that will transpose the dimensions of the\r\n * reshaped tensor to shape:\r\n *\r\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\r\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */function getPermuted(reshapedRank,blockShapeRank){var batchToSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var permuted=[];if(batchToSpace){permuted.push(blockShapeRank);for(var i=blockShapeRank+1;i<reshapedRank;++i){if(i<=2*blockShapeRank){permuted.push(i);permuted.push(i-(blockShapeRank+1));}else{permuted.push(i);}}}else{var permutedBeforeBatch=[];var permutedAfterBatch=[];for(var _i16=1;_i16<reshapedRank;++_i16){if(_i16>=blockShapeRank*2+1||_i16%2===1){permutedAfterBatch.push(_i16);}else{permutedBeforeBatch.push(_i16);}}permuted.push.apply(permuted,permutedBeforeBatch);permuted.push(0);permuted.push.apply(permuted,permutedAfterBatch);}return permuted;}/**\r\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\r\n * is applied.  The new shape will be:\r\n *\r\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\r\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */function getReshapedPermuted(inputShape,blockShape,prod){var batchToSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var reshapedPermuted=[];if(batchToSpace){reshapedPermuted.push(inputShape[0]/prod);}else{reshapedPermuted.push(inputShape[0]*prod);}for(var i=1;i<inputShape.length;++i){if(i<=blockShape.length){if(batchToSpace){reshapedPermuted.push(blockShape[i-1]*inputShape[i]);}else{reshapedPermuted.push(inputShape[i]/blockShape[i-1]);}}else{reshapedPermuted.push(inputShape[i]);}}return reshapedPermuted;}/**\r\n * Converts the crops argument into the beginning coordinates of a slice\r\n * operation.\r\n */function getSliceBeginCoords(crops,blockShape){var sliceBeginCoords=[0];for(var i=0;i<blockShape;++i){sliceBeginCoords.push(crops[i][0]);}return sliceBeginCoords;}/**\r\n * Converts the crops argument into the size of a slice operation.  When\r\n * combined with getSliceBeginCoords this function allows the reshaped and\r\n * permuted Tensor to be cropped to its final output shape of:\r\n *\r\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\r\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\r\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */function getSliceSize(uncroppedShape,crops,blockShape){var sliceSize=uncroppedShape.slice(0,1);for(var i=0;i<blockShape;++i){sliceSize.push(uncroppedShape[i+1]-crops[i][0]-crops[i][1]);}return sliceSize;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ERF_P=0.3275911;var ERF_A1=0.254829592;var ERF_A2=-0.284496736;var ERF_A3=1.421413741;var ERF_A4=-1.453152027;var ERF_A5=1.061405429;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/log.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function warn(){if(!Object(environment[\"c\"/* env */])().getBool('IS_TEST')){var _console;(_console=console).warn.apply(_console,arguments);}}function log_log(){if(!Object(environment[\"c\"/* env */])().getBool('IS_TEST')){var _console2;(_console2=console).log.apply(_console2,arguments);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\r\n *\r\n * The memory layout is interleaved as follows:\r\n * real: [r0, r1, r2]\r\n * imag: [i0, i1, i2]\r\n * complex: [r0, i0, r1, i1, r2, i2]\r\n *\r\n * This is the inverse of splitRealAndImagArrays.\r\n *\r\n * @param real The real values of the complex tensor values.\r\n * @param imag The imag values of the complex tensor values.\r\n * @returns A complex tensor as a Float32Array with merged values.\r\n */function mergeRealAndImagArrays(real,imag){if(real.length!==imag.length){throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\"+\"\".concat(real.length,\", imag: \").concat(imag.length,\".\"));}var result=new Float32Array(real.length*2);for(var i=0;i<result.length;i+=2){result[i]=real[i/2];result[i+1]=imag[i/2];}return result;}/**\r\n * Splits a complex Float32Array into real and imag parts.\r\n *\r\n * The memory layout is interleaved as follows:\r\n * complex: [r0, i0, r1, i1, r2, i2]\r\n * real: [r0, r1, r2]\r\n * imag: [i0, i1, i2]\r\n *\r\n * This is the inverse of mergeRealAndImagArrays.\r\n *\r\n * @param complex The complex tensor values.\r\n * @returns An object with real and imag Float32Array components of the complex\r\n *     tensor.\r\n */function splitRealAndImagArrays(complex){var real=new Float32Array(complex.length/2);var imag=new Float32Array(complex.length/2);for(var i=0;i<complex.length;i+=2){real[i/2]=complex[i];imag[i/2]=complex[i+1];}return{real:real,imag:imag};}/**\r\n * Extracts even indexed complex values in the given array.\r\n * @param complex The complex tensor values\r\n */function complexWithEvenIndex(complex){var len=Math.ceil(complex.length/4);var real=new Float32Array(len);var imag=new Float32Array(len);for(var i=0;i<complex.length;i+=4){real[Math.floor(i/4)]=complex[i];imag[Math.floor(i/4)]=complex[i+1];}return{real:real,imag:imag};}/**\r\n * Extracts odd indexed comple values in the given array.\r\n * @param complex The complex tensor values\r\n */function complexWithOddIndex(complex){var len=Math.floor(complex.length/4);var real=new Float32Array(len);var imag=new Float32Array(len);for(var i=2;i<complex.length;i+=4){real[Math.floor(i/4)]=complex[i];imag[Math.floor(i/4)]=complex[i+1];}return{real:real,imag:imag};}/**\r\n * Get the map representing a complex value in the given array.\r\n * @param complex The complex tensor values.\r\n * @param index An index of the target complex value.\r\n */function getComplexWithIndex(complex,index){var real=complex[index*2];var imag=complex[index*2+1];return{real:real,imag:imag};}/**\r\n * Insert a given complex value into the TypedArray.\r\n * @param data The array in which the complex value is inserted.\r\n * @param c The complex value to be inserted.\r\n * @param index An index of the target complex value.\r\n */function assignToTypedArray(data,real,imag,index){data[index*2]=real;data[index*2+1]=imag;}/**\r\n * Make the list of exponent terms used by FFT.\r\n */function exponents(n,inverse){var real=new Float32Array(n/2);var imag=new Float32Array(n/2);for(var i=0;i<Math.ceil(n/2);i++){var x=(inverse?2:-2)*Math.PI*(i/n);real[i]=Math.cos(x);imag[i]=Math.sin(x);}return{real:real,imag:imag};}/**\r\n * Make the exponent term used by FFT.\r\n */function exponent(k,n,inverse){var x=(inverse?2:-2)*Math.PI*(k/n);var real=Math.cos(x);var imag=Math.sin(x);return{real:real,imag:imag};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Utilities needed by backend consumers of tf-core.\nfunction castTensor(x,dtype,backend){if(dtype==='complex64'){if(x.dtype==='complex64'){return x.clone();}var zerosTensor=Object(tensor_ops[\"n\"/* zeros */])(x.shape);var floatX=x.toFloat();var result=backend.complex(floatX,zerosTensor);zerosTensor.dispose();floatX.dispose();return result;}if(!Object(util[\"hasEncodingLoss\"])(x.dtype,dtype)){// We don't change the underlying data, since we cast to higher\n// precision.\nreturn engine[\"a\"/* ENGINE */].makeTensorFromDataId(x.dataId,x.shape,dtype);}if(x.dtype==='complex64'){var _real=backend.real(x);var _result=_real.cast(dtype);_real.dispose();return _result;}if(dtype==='int32'){return backend.int(x);}else if(dtype==='bool'){var zero=Object(tensor_ops[\"e\"/* scalar */])(0,x.dtype);var _result2=backend.notEqual(x,zero);zero.dispose();return _result2;}else{throw new Error(\"Error in Cast: failed to cast \".concat(x.dtype,\" to \").concat(dtype));}}function reshapeTensor(x,shape){return engine[\"a\"/* ENGINE */].makeTensorFromDataId(x.dataId,shape,x.dtype);}function linspaceImpl(start,stop,num){var step=(stop-start)/(num-1);var values=Object(util[\"makeZerosTypedArray\"])(num,'float32');values[0]=start;for(var i=1;i<values.length;i++){values[i]=values[i-1]+step;}return Object(tensor_ops[\"g\"/* tensor1d */])(values,'float32');}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/device_util.js\nvar device_util=__webpack_require__(36);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate\n// kernels have been modularized in WebGL and CPU\n// https://github.com/tensorflow/tfjs/issues/2822.\n/** Shared implementation of the split kernel across WebGL and CPU. */function split_shared_split(x,sizeSplits,axis){var begin=new Array(x.rank).fill(0);var size=x.shape.slice();return sizeSplits.map(function(s){var sliceSize=_toConsumableArray2(size);sliceSize[axis]=s;var slice=x.slice(begin,sliceSize);begin[axis]+=s;return slice;});}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * An implementation of the tile kernel shared between webgl and cpu for string\r\n * tensors only.\r\n */function tile_impl_tile(xBuf,reps){var newShape=new Array(xBuf.rank);for(var i=0;i<newShape.length;i++){newShape[i]=xBuf.shape[i]*reps[i];}var result=array_ops_buffer(newShape,xBuf.dtype);for(var _i17=0;_i17<result.values.length;++_i17){var newLoc=result.indexToLoc(_i17);var originalLoc=new Array(xBuf.rank);for(var j=0;j<originalLoc.length;j++){originalLoc[j]=newLoc[j]%xBuf.shape[j];}var originalIndex=xBuf.locToIndex(originalLoc);result.values[_i17]=xBuf.values[originalIndex];}return result.toTensor();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** An implementation of the TopK kernel shared between webgl and cpu. */function topkImpl(x,xShape,xDtype,k,sorted){// Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\nvar lastDim=xShape[xShape.length-1];var batch=x.length/lastDim,size=lastDim;var allTopKVals=Object(util[\"getTypedArrayFromDType\"])(xDtype,batch*k);var allTopKIndices=Object(util[\"getTypedArrayFromDType\"])('int32',batch*k);for(var b=0;b<batch;b++){var offset=b*size;var vals=x.subarray(offset,offset+size);var valAndInd=[];for(var i=0;i<vals.length;i++){valAndInd.push({value:vals[i],index:i});}valAndInd.sort(function(a,b){return b.value-a.value;});var outOffset=b*k;var topKVals=allTopKVals.subarray(outOffset,outOffset+k);var topKIndices=allTopKIndices.subarray(outOffset,outOffset+k);for(var _i18=0;_i18<k;_i18++){topKVals[_i18]=valAndInd[_i18].value;topKIndices[_i18]=valAndInd[_i18].index;}}// Reshape back to the original input shape, except that the last\n// dimension is k.\nvar outputShape=xShape.slice();outputShape[outputShape.length-1]=k;return[Object(tensor_ops[\"f\"/* tensor */])(allTopKVals,outputShape,xDtype),Object(tensor_ops[\"f\"/* tensor */])(allTopKIndices,outputShape,'int32')];}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var EPSILON_FLOAT32=1e-7;var EPSILON_FLOAT16=1e-4;/** Convenient class for storing tensor-related data. */var DataStorage=/*#__PURE__*/function(){function DataStorage(backend,dataMover){_classCallCheck2(this,DataStorage);this.backend=backend;this.dataMover=dataMover;this.data=new WeakMap();this.dataIdsCount=0;}_createClass(DataStorage,[{key:\"get\",value:function get(dataId){if(!this.data.has(dataId)){this.dataMover.moveData(this.backend,dataId);}return this.data.get(dataId);}},{key:\"set\",value:function set(dataId,value){this.dataIdsCount++;this.data.set(dataId,value);}},{key:\"has\",value:function has(dataId){return this.data.has(dataId);}},{key:\"delete\",value:function _delete(dataId){this.dataIdsCount--;return this.data.delete(dataId);}},{key:\"numDataIds\",value:function numDataIds(){return this.dataIdsCount;}}]);return DataStorage;}();/**\r\n * The interface that defines the kernels that should be implemented when\r\n * adding a new backend. New backends don't need to implement every one of the\r\n * methods, this can be done gradually (throw an error for unimplemented\r\n * methods).\r\n */var KernelBackend=/*#__PURE__*/function(){function KernelBackend(){_classCallCheck2(this,KernelBackend);}_createClass(KernelBackend,[{key:\"time\",value:function time(f){return notYetImplemented('time');}},{key:\"read\",value:function read(dataId){return notYetImplemented('read');}},{key:\"readSync\",value:function readSync(dataId){return notYetImplemented('readSync');}},{key:\"numDataIds\",value:function numDataIds(){return notYetImplemented('numDataIds');}},{key:\"disposeData\",value:function disposeData(dataId){return notYetImplemented('disposeData');}},{key:\"write\",value:function write(values,shape,dtype){return notYetImplemented('write');}},{key:\"move\",value:function move(dataId,values,shape,dtype){return notYetImplemented('move');}},{key:\"memory\",value:function memory(){return notYetImplemented('memory');}/** Returns the highest precision for floats in bits (e.g. 16 or 32) */},{key:\"floatPrecision\",value:function floatPrecision(){return notYetImplemented('floatPrecision');}/** Returns the smallest representable number.  */},{key:\"epsilon\",value:function epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32:EPSILON_FLOAT16;}},{key:\"batchMatMul\",value:function batchMatMul(a,b,transposeA,transposeB){return notYetImplemented('batchMatMul');}},{key:\"fusedBatchMatMul\",value:function fusedBatchMatMul(_ref7){var a=_ref7.a,b=_ref7.b,transposeA=_ref7.transposeA,transposeB=_ref7.transposeB,bias=_ref7.bias,activation=_ref7.activation,preluActivationWeights=_ref7.preluActivationWeights;return notYetImplemented('fusedBatchMatMul');}},{key:\"slice\",value:function slice(x,begin,size){return notYetImplemented('slice');}},{key:\"stridedSlice\",value:function stridedSlice(x,begin,end,strides){return notYetImplemented('stridedSlice');}},{key:\"unstack\",value:function unstack(x,axis){return notYetImplemented('unstack');}},{key:\"reverse\",value:function reverse(a,axis){return notYetImplemented('reverse');}},{key:\"concat\",value:function concat(tensors,axis){return notYetImplemented('concat');}},{key:\"neg\",value:function neg(a){return notYetImplemented('neg');}},{key:\"add\",value:function add(a,b){return notYetImplemented('add');}},{key:\"addN\",value:function addN(tensors){return notYetImplemented('addN');}},{key:\"subtract\",value:function subtract(a,b){return notYetImplemented('subtract');}},{key:\"multiply\",value:function multiply(a,b){return notYetImplemented('multiply');}},{key:\"realDivide\",value:function realDivide(a,b){return notYetImplemented('realDivide');}},{key:\"floorDiv\",value:function floorDiv(a,b){return notYetImplemented('floorDiv');}},{key:\"sum\",value:function sum(x,axes){return notYetImplemented('sum');}},{key:\"prod\",value:function prod(x,axes){return notYetImplemented('prod');}},{key:\"unsortedSegmentSum\",value:function unsortedSegmentSum(x,segmentIds,numSegments){return notYetImplemented('unsortedSegmentSum');}},{key:\"argMin\",value:function argMin(x,axis){return notYetImplemented('argMin');}},{key:\"argMax\",value:function argMax(x,axis){return notYetImplemented('argMax');}},{key:\"equal\",value:function equal(a,b){return notYetImplemented('equal');}},{key:\"notEqual\",value:function notEqual(a,b){return notYetImplemented('notEqual');}},{key:\"less\",value:function less(a,b){return notYetImplemented('less');}},{key:\"lessEqual\",value:function lessEqual(a,b){return notYetImplemented('lessEqual');}},{key:\"greater\",value:function greater(a,b){return notYetImplemented('greater');}},{key:\"greaterEqual\",value:function greaterEqual(a,b){return notYetImplemented('greaterEqual');}},{key:\"logicalNot\",value:function logicalNot(a){return notYetImplemented('logicalNot');}},{key:\"logicalAnd\",value:function logicalAnd(a,b){return notYetImplemented('logicalAnd');}},{key:\"logicalOr\",value:function logicalOr(a,b){return notYetImplemented('logicalOr');}},{key:\"where\",value:function where(condition){return notYetImplemented('where');}},{key:\"select\",value:function select(condition,a,b){return notYetImplemented('select');}},{key:\"topk\",value:function topk(x,k,sorted){return notYetImplemented('topk');}},{key:\"min\",value:function min(x,axes){return notYetImplemented('min');}},{key:\"minimum\",value:function minimum(a,b){return notYetImplemented('minimum');}},{key:\"mod\",value:function mod(a,b){return notYetImplemented('mod');}},{key:\"max\",value:function max(x,axes){return notYetImplemented('max');}},{key:\"maximum\",value:function maximum(a,b){return notYetImplemented('maximum');}},{key:\"all\",value:function all(x,axes){return notYetImplemented('all');}},{key:\"any\",value:function any(x,axes){return notYetImplemented('any');}},{key:\"squaredDifference\",value:function squaredDifference(a,b){return notYetImplemented('squaredDifference');}},{key:\"ceil\",value:function ceil(x){return notYetImplemented('ceil');}},{key:\"floor\",value:function floor(x){return notYetImplemented('floor');}},{key:\"round\",value:function round(x){return notYetImplemented('round');}},{key:\"sign\",value:function sign(x){return notYetImplemented('sign');}},{key:\"isNaN\",value:function isNaN(x){return notYetImplemented('isNaN');}},{key:\"isInf\",value:function isInf(x){return notYetImplemented('isInf');}},{key:\"isFinite\",value:function isFinite(x){return notYetImplemented('isFinite');}},{key:\"pow\",value:function pow(a,b){return notYetImplemented('pow');}},{key:\"exp\",value:function exp(x){return notYetImplemented('exp');}},{key:\"expm1\",value:function expm1(x){return notYetImplemented('expm1');}},{key:\"softmax\",value:function softmax(x,dim){return notYetImplemented('softmax');}},{key:\"log\",value:function log(x){return notYetImplemented('log');}},{key:\"log1p\",value:function log1p(x){return notYetImplemented('log1p');}},{key:\"sqrt\",value:function sqrt(x){return notYetImplemented('sqrt');}},{key:\"rsqrt\",value:function rsqrt(x){return notYetImplemented('rsqrt');}},{key:\"square\",value:function square(x){return notYetImplemented('square');}},{key:\"reciprocal\",value:function reciprocal(x){return notYetImplemented('reciprocal');}},{key:\"relu\",value:function relu(x){return notYetImplemented('relu');}},{key:\"relu6\",value:function relu6(x){return notYetImplemented('relu6');}},{key:\"prelu\",value:function prelu(x,a){return notYetImplemented('prelu');}},{key:\"elu\",value:function elu(x){return notYetImplemented('elu');}},{key:\"eluDer\",value:function eluDer(dy,y){return notYetImplemented('eluDer');}},{key:\"selu\",value:function selu(x){return notYetImplemented('selu');}},{key:\"int\",value:function int(x){return notYetImplemented('int');}},{key:\"clip\",value:function clip(x,min,max){return notYetImplemented('clip');}},{key:\"abs\",value:function abs(x){return notYetImplemented('abs');}},{key:\"complexAbs\",value:function complexAbs(x){return notYetImplemented('complexAbs');}},{key:\"sigmoid\",value:function sigmoid(x){return notYetImplemented('sigmoid');}},{key:\"softplus\",value:function softplus(x){return notYetImplemented('softplus');}},{key:\"sin\",value:function sin(x){return notYetImplemented('sin');}},{key:\"cos\",value:function cos(x){return notYetImplemented('cos');}},{key:\"tan\",value:function tan(x){return notYetImplemented('tan');}},{key:\"asin\",value:function asin(x){return notYetImplemented('asin');}},{key:\"acos\",value:function acos(x){return notYetImplemented('acos');}},{key:\"atan\",value:function atan(x){return notYetImplemented('atan');}},{key:\"atan2\",value:function atan2(a,b){return notYetImplemented('atan2');}},{key:\"sinh\",value:function sinh(x){return notYetImplemented('sinh');}},{key:\"cosh\",value:function cosh(x){return notYetImplemented('cosh');}},{key:\"tanh\",value:function tanh(x){return notYetImplemented('tanh');}},{key:\"asinh\",value:function asinh(x){return notYetImplemented('asinh');}},{key:\"acosh\",value:function acosh(x){return notYetImplemented('acosh');}},{key:\"atanh\",value:function atanh(x){return notYetImplemented('atanh');}},{key:\"erf\",value:function erf(x){return notYetImplemented('erf');}},{key:\"step\",value:function step(x,alpha){return notYetImplemented('step');}},{key:\"fusedConv2d\",value:function fusedConv2d(_ref8){var input=_ref8.input,filter=_ref8.filter,convInfo=_ref8.convInfo,bias=_ref8.bias,activation=_ref8.activation,preluActivationWeights=_ref8.preluActivationWeights;return notYetImplemented('fusedConv2d');}},{key:\"conv2d\",value:function conv2d(x,filter,convInfo){return notYetImplemented('conv2d');}},{key:\"conv2dDerInput\",value:function conv2dDerInput(dy,filter,convInfo){return notYetImplemented('conv2dDerInput');}},{key:\"conv2dDerFilter\",value:function conv2dDerFilter(x,dY,convInfo){return notYetImplemented('conv2dDerFilter');}},{key:\"fusedDepthwiseConv2D\",value:function fusedDepthwiseConv2D(_ref9){var input=_ref9.input,filter=_ref9.filter,convInfo=_ref9.convInfo,bias=_ref9.bias,activation=_ref9.activation,preluActivationWeights=_ref9.preluActivationWeights;return notYetImplemented('fusedDepthwiseConv2D');}},{key:\"depthwiseConv2D\",value:function depthwiseConv2D(input,filter,convInfo){return notYetImplemented('depthwiseConv2D');}},{key:\"depthwiseConv2DDerInput\",value:function depthwiseConv2DDerInput(dy,filter,convInfo){return notYetImplemented('depthwiseConv2DDerInput');}},{key:\"depthwiseConv2DDerFilter\",value:function depthwiseConv2DDerFilter(x,dY,convInfo){return notYetImplemented('depthwiseConv2DDerFilter');}},{key:\"conv3d\",value:function conv3d(x,filter,convInfo){return notYetImplemented('conv3d');}},{key:\"conv3dDerInput\",value:function conv3dDerInput(dy,filter,convInfo){return notYetImplemented('conv3dDerInput');}},{key:\"conv3dDerFilter\",value:function conv3dDerFilter(x,dY,convInfo){return notYetImplemented('conv3dDerFilter');}},{key:\"maxPool\",value:function maxPool(x,convInfo){return notYetImplemented('maxPool');}},{key:\"maxPoolBackprop\",value:function maxPoolBackprop(dy,x,y,convInfo){return notYetImplemented('maxPoolBackprop');}},{key:\"avgPool\",value:function avgPool(x,convInfo){return notYetImplemented('avgPool');}},{key:\"avgPoolBackprop\",value:function avgPoolBackprop(dy,x,convInfo){return notYetImplemented('avgPoolBackprop');}},{key:\"avgPool3d\",value:function avgPool3d(x,convInfo){return notYetImplemented('avgPool3d');}},{key:\"avgPool3dBackprop\",value:function avgPool3dBackprop(dy,x,convInfo){return notYetImplemented('avgPool3dBackprop');}},{key:\"maxPool3d\",value:function maxPool3d(x,convInfo){return notYetImplemented('maxPool3d');}},{key:\"maxPool3dBackprop\",value:function maxPool3dBackprop(dy,x,y,convInfo){return notYetImplemented('maxPool3dBackprop');}},{key:\"reshape\",value:function reshape(x,shape){return notYetImplemented('reshape');}},{key:\"cast\",value:function cast(x,dtype){return notYetImplemented('cast');}},{key:\"tile\",value:function tile(x,reps){return notYetImplemented('tile');}},{key:\"pad\",value:function pad(x,paddings,constantValue){return notYetImplemented('pad');}},{key:\"transpose\",value:function transpose(x,perm){return notYetImplemented('transpose');}},{key:\"gather\",value:function gather(x,indices,axis){return notYetImplemented('gather');}},{key:\"gatherND\",value:function gatherND(x,indices){return notYetImplemented('gatherND');}},{key:\"scatterND\",value:function scatterND(indices,updates,shape){return notYetImplemented('scatterND');}},{key:\"batchToSpaceND\",value:function batchToSpaceND(x,blockShape,crops){return notYetImplemented('batchToSpaceND');}},{key:\"spaceToBatchND\",value:function spaceToBatchND(x,blockShape,paddings){return notYetImplemented('spaceToBatchND');}},{key:\"resizeBilinear\",value:function resizeBilinear(x,newHeight,newWidth,alignCorners){return notYetImplemented('resizeBilinear');}},{key:\"resizeBilinearBackprop\",value:function resizeBilinearBackprop(dy,x,alignCorners){return notYetImplemented('resizeBilinearBackprop');}},{key:\"resizeNearestNeighbor\",value:function resizeNearestNeighbor(x,newHEight,newWidth,alignCorners){return notYetImplemented('resizeNearestNeighbor');}},{key:\"resizeNearestNeighborBackprop\",value:function resizeNearestNeighborBackprop(dy,x,alignCorners){return notYetImplemented('resizeNearestNeighborBackprop');}},{key:\"batchNorm\",value:function batchNorm(x,mean,variance,offset,scale,varianceEpsilon){return notYetImplemented('batchNorm');}},{key:\"localResponseNormalization4D\",value:function localResponseNormalization4D(x,radius,bias,alpha,beta){return notYetImplemented('localResponseNormalization4D');}},{key:\"LRNGrad\",value:function LRNGrad(dy,inputImage,outputImage,radius,bias,alpha,beta){return notYetImplemented('LRNGrad');}},{key:\"multinomial\",value:function multinomial(logits,normalized,numSamples,seed){return notYetImplemented('multinomial');}},{key:\"oneHot\",value:function oneHot(indices,depth,onValue,offValue){return notYetImplemented('oneHot');}},{key:\"cumsum\",value:function cumsum(x,axis,exclusive,reverse){return notYetImplemented('cumsum');}},{key:\"nonMaxSuppression\",value:function nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold){return notYetImplemented('nonMaxSuppression');}},{key:\"fft\",value:function fft(x){return notYetImplemented('fft');}},{key:\"ifft\",value:function ifft(x){return notYetImplemented('ifft');}},{key:\"complex\",value:function complex(real,imag){return notYetImplemented('complex');}},{key:\"real\",value:function real(input){return notYetImplemented('real');}},{key:\"imag\",value:function imag(input){return notYetImplemented('imag');}},{key:\"cropAndResize\",value:function cropAndResize(image,boxes,boxIndex,cropSize,method,extrapolationValue){return notYetImplemented('cropAndResize');}},{key:\"depthToSpace\",value:function depthToSpace(x,blockSize,dataFormat){return notYetImplemented('depthToSpace');}// Aligns with the \"SplitV\" kernel in TensorFlow.\n},{key:\"split\",value:function split(value,sizeSplits,axis){return notYetImplemented('split');}},{key:\"sparseToDense\",value:function sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue){return notYetImplemented('sparseToDense');}},{key:\"diag\",value:function diag(x){return notYetImplemented('diag');}},{key:\"fill\",value:function fill(shape,value,dtype){return notYetImplemented('fill');}},{key:\"onesLike\",value:function onesLike(x){return notYetImplemented('onesLike');}},{key:\"zerosLike\",value:function zerosLike(x){return notYetImplemented('zerosLike');}},{key:\"linspace\",value:function linspace(start,stop,num){return notYetImplemented('linspace');}},{key:\"dispose\",value:function dispose(){return notYetImplemented('dispose');}}]);return KernelBackend;}();function notYetImplemented(kernelName){throw new Error(\"'\".concat(kernelName,\"' not yet implemented or not found in the registry. \")+\"Did you forget to import the kernel?\");}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.add=function(b){this.throwIfDisposed();return add(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.atan2=function(b){this.throwIfDisposed();return atan2(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.avgPool=function(filterSize,strides,pad,dimRoundingMode){this.throwIfDisposed();return avgPool(this,filterSize,strides,pad,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.batchNorm=function(mean,variance,offset,scale,varianceEpsilon){this.throwIfDisposed();return batchNorm(this,mean,variance,offset,scale,varianceEpsilon);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.broadcastTo=function(shape){this.throwIfDisposed();return broadcastTo(this,shape);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.batchToSpaceND=function(blockShape,crops){this.throwIfDisposed();return batchToSpaceND(this,blockShape,crops);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.concat=function(x,axis){this.throwIfDisposed();if(x instanceof dist_tensor[\"a\"/* Tensor */]){x=[x];}return concat([this].concat(_toConsumableArray2(x)),axis);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.conv1d=function(filter,stride,pad,dataFormat,dilation,dimRoundingMode){this.throwIfDisposed();return conv1d(this,filter,stride,pad,dataFormat,dilation,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.conv2d=function(filter,strides,pad,dataFormat,dilations,dimRoundingMode){this.throwIfDisposed();return conv2d(this,filter,strides,pad,dataFormat,dilations,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.conv2dTranspose=function(filter,outputShape,strides,pad,dimRoundingMode){this.throwIfDisposed();return conv2dTranspose(this,filter,outputShape,strides,pad,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.cumsum=function(axis,exclusive,reverse){this.throwIfDisposed();return cumsum(this,axis,exclusive,reverse);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.depthToSpace=function(blockSize,dataFormat){this.throwIfDisposed();return depthToSpace(this,blockSize,dataFormat);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.depthwiseConv2d=function(filter,strides,pad,dataFormat,dilations,dimRoundingMode){this.throwIfDisposed();return depthwiseConv2d(this,filter,strides,pad,dataFormat,dilations,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * @deprecated Use `depthwiseConv2d` instead.\r\n */dist_tensor[\"a\"/* Tensor */].prototype.depthwiseConv2D=function(filter,strides,pad,dataFormat,dilations,dimRoundingMode){deprecationWarn('depthwiseConv2D is deprecated, use depthwiseConv2d instead');this.throwIfDisposed();return depthwiseConv2d(this,filter,strides,pad,dataFormat,dilations,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.div=function(b){this.throwIfDisposed();return div(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.divNoNan=function(b){this.throwIfDisposed();return divNoNan(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.dot=function(b){this.throwIfDisposed();return dot(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.elu=function(){this.throwIfDisposed();return elu(this);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.equal=function(b){this.throwIfDisposed();return equal(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.floorDiv=function(b){this.throwIfDisposed();return floorDiv(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.greater=function(b){this.throwIfDisposed();return greater(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.greaterEqual=function(b){this.throwIfDisposed();return greaterEqual(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.leakyRelu=function(alpha){this.throwIfDisposed();return leakyRelu(this,alpha);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.less=function(b){this.throwIfDisposed();return less(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.lessEqual=function(b){this.throwIfDisposed();return lessEqual(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.localResponseNormalization=function(depthRadius,bias,alpha,beta){this.throwIfDisposed();return localResponseNormalization(this,depthRadius,bias,alpha,beta);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.matMul=function(b,transposeA,transposeB){this.throwIfDisposed();return matMul(this,b,transposeA,transposeB);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.max=function(axis,keepDims){this.throwIfDisposed();return max_max(this,axis,keepDims);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.maxPool=function(filterSize,strides,pad,dimRoundingMode){this.throwIfDisposed();return maxPool(this,filterSize,strides,pad,dimRoundingMode);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.maximum=function(b){this.throwIfDisposed();return maximum(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.minimum=function(b){this.throwIfDisposed();return minimum(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.mod=function(b){this.throwIfDisposed();return mod(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.mul=function(b){this.throwIfDisposed();return mul(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.notEqual=function(b){this.throwIfDisposed();return notEqual(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.oneHot=function(depth){var onValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var offValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;this.throwIfDisposed();return oneHot(this,depth,onValue,offValue);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.pad=function(paddings,constantValue){this.throwIfDisposed();return pad_pad(this,paddings,constantValue);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.pool=function(windowShape,poolingType,padding,dilationRate,strides){this.throwIfDisposed();return pool(this,windowShape,poolingType,padding,dilationRate,strides);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.pow=function(exp){this.throwIfDisposed();return pow(this,exp);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.prelu=function(alpha){this.throwIfDisposed();return prelu(this,alpha);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.relu=function(){this.throwIfDisposed();return relu(this);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.relu6=function(){this.throwIfDisposed();return relu6(this);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.selu=function(){this.throwIfDisposed();return selu(this);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.separableConv2d=function(depthwiseFilter,pointwiseFilter,strides,pad,dilation,dataFormat){this.throwIfDisposed();return separableConv2d(this,depthwiseFilter,pointwiseFilter,strides,pad,dilation,dataFormat);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.split=function(numOrSizeSplits,axis){this.throwIfDisposed();return split(this,numOrSizeSplits,axis);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.squaredDifference=function(b){this.throwIfDisposed();return squaredDifference(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.spaceToBatchND=function(blockShape,paddings){this.throwIfDisposed();return spaceToBatchND(this,blockShape,paddings);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.sub=function(b){this.throwIfDisposed();return sub(this,b);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.tile=function(reps){this.throwIfDisposed();return tile(this,reps);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */dist_tensor[\"a\"/* Tensor */].prototype.transpose=function(perm){this.throwIfDisposed();return transpose(this,perm);};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * @fileoverview\r\n * @suppress {partialAlias} Optimization disabled due to passing the module\r\n * object into a function below:\r\n *\r\n *   import * as ops from './ops/ops';\r\n *   setOpHandler(ops);\r\n */ // Engine is the global singleton that needs to be initialized before the rest\n// of the app.\n// Register backend-agnostic flags.\n// Register all the gradients.\n// Serialization.\n// Optimizers.\n// Top-level method exports.\n// Second level exports.\n// Backend specific.\nObject(dist_tensor[\"e\"/* setOpHandler */])(ops_namespaceObject);// Export all kernel names / info.\n// Import all op chainers and add type info to Tensor.\n/***/},/* 1 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"shuffle\",function(){return shuffle;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"clamp\",function(){return clamp;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"nearestLargerEven\",function(){return nearestLargerEven;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"sum\",function(){return sum;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"randUniform\",function(){return randUniform;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"distSquared\",function(){return distSquared;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"assert\",function(){return assert;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"assertShapesMatch\",function(){return assertShapesMatch;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"assertNonNull\",function(){return assertNonNull;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"flatten\",function(){return flatten;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"sizeFromShape\",function(){return sizeFromShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isScalarShape\",function(){return isScalarShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"arraysEqual\",function(){return arraysEqual;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isInt\",function(){return isInt;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"tanh\",function(){return tanh;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"sizeToSquarishShape\",function(){return sizeToSquarishShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"createShuffledIndices\",function(){return createShuffledIndices;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"rightPad\",function(){return rightPad;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"repeatedTry\",function(){return repeatedTry;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"inferFromImplicitShape\",function(){return inferFromImplicitShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"parseAxisParam\",function(){return parseAxisParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"squeezeShape\",function(){return squeezeShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"getTypedArrayFromDType\",function(){return getTypedArrayFromDType;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"getArrayFromDType\",function(){return getArrayFromDType;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"checkConversionForErrors\",function(){return checkConversionForErrors;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isValidDtype\",function(){return isValidDtype;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"hasEncodingLoss\",function(){return hasEncodingLoss;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isTypedArray\",function(){return isTypedArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"bytesPerElement\",function(){return bytesPerElement;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"bytesFromStringArray\",function(){return bytesFromStringArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isString\",function(){return isString;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isBoolean\",function(){return isBoolean;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isNumber\",function(){return isNumber;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"inferDtype\",function(){return inferDtype;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isFunction\",function(){return isFunction;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"nearestDivisor\",function(){return nearestDivisor;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"computeStrides\",function(){return computeStrides;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"toTypedArray\",function(){return toTypedArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"toNestedArray\",function(){return toNestedArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"makeOnesTypedArray\",function(){return makeOnesTypedArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"makeZerosTypedArray\",function(){return makeZerosTypedArray;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"now\",function(){return now;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"assertNonNegativeIntegerDimensions\",function(){return assertNonNegativeIntegerDimensions;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"fetch\",function(){return fetch;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"encodeString\",function(){return encodeString;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"decodeString\",function(){return decodeString;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"locToIndex\",function(){return locToIndex;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"indexToLoc\",function(){return indexToLoc;});/* harmony import */var _environment__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(10);/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Shuffles the array in-place using Fisher-Yates algorithm.\r\n *\r\n * ```js\r\n * const a = [1, 2, 3, 4, 5];\r\n * tf.util.shuffle(a);\r\n * console.log(a);\r\n * ```\r\n *\r\n * @param array The array to shuffle in-place.\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */ // tslint:disable-next-line:no-any\nfunction shuffle(array){var counter=array.length;var temp=0;var index=0;// While there are elements in the array\nwhile(counter>0){// Pick a random index\nindex=Math.random()*counter|0;// Decrease counter by 1\ncounter--;// And swap the last element with it\ntemp=array[counter];array[counter]=array[index];array[index]=temp;}}/** Clamps a value to a specified range. */function clamp(min,x,max){return Math.max(min,Math.min(x,max));}function nearestLargerEven(val){return val%2===0?val:val+1;}function sum(arr){var sum=0;for(var i=0;i<arr.length;i++){sum+=arr[i];}return sum;}/**\r\n * Returns a sample from a uniform [a, b) distribution.\r\n *\r\n * @param a The minimum support (inclusive).\r\n * @param b The maximum support (exclusive).\r\n * @return A pseudorandom number on the half-open interval [a,b).\r\n */function randUniform(a,b){var r=Math.random();return b*r+(1-r)*a;}/** Returns the squared Euclidean distance between two vectors. */function distSquared(a,b){var result=0;for(var i=0;i<a.length;i++){var diff=Number(a[i])-Number(b[i]);result+=diff*diff;}return result;}/**\r\n * Asserts that the expression is true. Otherwise throws an error with the\r\n * provided message.\r\n *\r\n * ```js\r\n * const x = 2;\r\n * tf.util.assert(x === 2, 'x is not 2');\r\n * ```\r\n *\r\n * @param expr The expression to assert (as a boolean).\r\n * @param msg A function that returns the message to report when throwing an\r\n *     error. We use a function for performance reasons.\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */function assert(expr,msg){if(!expr){throw new Error(typeof msg==='string'?msg:msg());}}function assertShapesMatch(shapeA,shapeB){var errorMessagePrefix=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';assert(arraysEqual(shapeA,shapeB),function(){return errorMessagePrefix+\" Shapes \".concat(shapeA,\" and \").concat(shapeB,\" must match\");});}function assertNonNull(a){assert(a!=null,function(){return\"The input to the tensor constructor must be a non-null value.\";});}// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\r\n *  Flattens an arbitrarily nested array.\r\n *\r\n * ```js\r\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\r\n * const flat = tf.util.flatten(a);\r\n * console.log(flat);\r\n * ```\r\n *\r\n *  @param arr The nested array to flatten.\r\n *  @param result The destination array which holds the elements.\r\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\r\n *      to false.\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */function flatten(arr){var result=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var skipTypedArray=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(result==null){result=[];}if(Array.isArray(arr)||isTypedArray(arr)&&!skipTypedArray){for(var i=0;i<arr.length;++i){flatten(arr[i],result,skipTypedArray);}}else{result.push(arr);}return result;}/**\r\n * Returns the size (number of elements) of the tensor given its shape.\r\n *\r\n * ```js\r\n * const shape = [3, 4, 2];\r\n * const size = tf.util.sizeFromShape(shape);\r\n * console.log(size);\r\n * ```\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */function sizeFromShape(shape){if(shape.length===0){// Scalar.\nreturn 1;}var size=shape[0];for(var i=1;i<shape.length;i++){size*=shape[i];}return size;}function isScalarShape(shape){return shape.length===0;}function arraysEqual(n1,n2){if(n1===n2){return true;}if(n1==null||n2==null){return false;}if(n1.length!==n2.length){return false;}for(var i=0;i<n1.length;i++){if(n1[i]!==n2[i]){return false;}}return true;}function isInt(a){return a%1===0;}function tanh(x){// tslint:disable-next-line:no-any\nif(Math.tanh!=null){// tslint:disable-next-line:no-any\nreturn Math.tanh(x);}if(x===Infinity){return 1;}else if(x===-Infinity){return-1;}else{var e2x=Math.exp(2*x);return(e2x-1)/(e2x+1);}}function sizeToSquarishShape(size){var width=Math.ceil(Math.sqrt(size));return[width,Math.ceil(size/width)];}/**\r\n * Creates a new array with randomized indicies to a given quantity.\r\n *\r\n * ```js\r\n * const randomTen = tf.util.createShuffledIndices(10);\r\n * console.log(randomTen);\r\n * ```\r\n *\r\n * @param number Quantity of how many shuffled indicies to create.\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */function createShuffledIndices(n){var shuffledIndices=new Uint32Array(n);for(var i=0;i<n;++i){shuffledIndices[i]=i;}shuffle(shuffledIndices);return shuffledIndices;}function rightPad(a,size){if(size<=a.length){return a;}return a+' '.repeat(size-a.length);}function repeatedTry(checkFn){var delayFn=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(counter){return 0;};var maxCounter=arguments.length>2?arguments[2]:undefined;return new Promise(function(resolve,reject){var tryCount=0;var tryFn=function tryFn(){if(checkFn()){resolve();return;}tryCount++;var nextBackoff=delayFn(tryCount);if(maxCounter!=null&&tryCount>=maxCounter){reject();return;}setTimeout(tryFn,nextBackoff);};tryFn();});}/**\r\n * Given the full size of the array and a shape that may contain -1 as the\r\n * implicit dimension, returns the inferred shape where -1 is replaced.\r\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\r\n *\r\n * @param shape The shape, which may contain -1 in some dimension.\r\n * @param size The full size (number of elements) of the array.\r\n * @return The inferred shape where -1 is replaced with the inferred size.\r\n */function inferFromImplicitShape(shape,size){var shapeProd=1;var implicitIdx=-1;for(var i=0;i<shape.length;++i){if(shape[i]>=0){shapeProd*=shape[i];}else if(shape[i]===-1){if(implicitIdx!==-1){throw Error(\"Shapes can only have 1 implicit size. \"+\"Found -1 at dim \".concat(implicitIdx,\" and dim \").concat(i));}implicitIdx=i;}else if(shape[i]<0){throw Error(\"Shapes can not be < 0. Found \".concat(shape[i],\" at dim \").concat(i));}}if(implicitIdx===-1){if(size>0&&size!==shapeProd){throw Error(\"Size(\".concat(size,\") must match the product of shape \").concat(shape));}return shape;}if(shapeProd===0){throw Error(\"Cannot infer the missing size in [\".concat(shape,\"] when \")+\"there are 0 elements\");}if(size%shapeProd!==0){throw Error(\"The implicit shape can't be a fractional number. \"+\"Got \".concat(size,\" / \").concat(shapeProd));}var newShape=shape.slice();newShape[implicitIdx]=size/shapeProd;return newShape;}function parseAxisParam(axis,shape){var rank=shape.length;// Normalize input\naxis=axis==null?shape.map(function(s,i){return i;}):[].concat(axis);// Check for valid range\nassert(axis.every(function(ax){return ax>=-rank&&ax<rank;}),function(){return\"All values in axis param must be in range [-\".concat(rank,\", \").concat(rank,\") but \")+\"got axis \".concat(axis);});// Check for only integers\nassert(axis.every(function(ax){return isInt(ax);}),function(){return\"All values in axis param must be integers but \"+\"got axis \".concat(axis);});// Handle negative axis.\nreturn axis.map(function(a){return a<0?rank+a:a;});}/** Reduces the shape by removing all dimensions of shape 1. */function squeezeShape(shape,axis){var newShape=[];var keptDims=[];var isEmptyArray=axis!=null&&Array.isArray(axis)&&axis.length===0;var axes=axis==null||isEmptyArray?null:parseAxisParam(axis,shape).sort();var j=0;for(var i=0;i<shape.length;++i){if(axes!=null){if(axes[j]===i&&shape[i]!==1){throw new Error(\"Can't squeeze axis \".concat(i,\" since its dim '\").concat(shape[i],\"' is not 1\"));}if((axes[j]==null||axes[j]>i)&&shape[i]===1){newShape.push(shape[i]);keptDims.push(i);}if(axes[j]<=i){j++;}}if(shape[i]!==1){newShape.push(shape[i]);keptDims.push(i);}}return{newShape:newShape,keptDims:keptDims};}function getTypedArrayFromDType(dtype,size){var values=null;if(dtype==null||dtype==='float32'){values=new Float32Array(size);}else if(dtype==='int32'){values=new Int32Array(size);}else if(dtype==='bool'){values=new Uint8Array(size);}else{throw new Error(\"Unknown data type \".concat(dtype));}return values;}function getArrayFromDType(dtype,size){var values=null;if(dtype==null||dtype==='float32'){values=new Float32Array(size);}else if(dtype==='int32'){values=new Int32Array(size);}else if(dtype==='bool'){values=new Uint8Array(size);}else if(dtype==='string'){values=new Array(size);}else{throw new Error(\"Unknown data type \".concat(dtype));}return values;}function checkConversionForErrors(vals,dtype){for(var i=0;i<vals.length;i++){var num=vals[i];if(isNaN(num)||!isFinite(num)){throw Error(\"A tensor of type \".concat(dtype,\" being uploaded contains \").concat(num,\".\"));}}}/** Returns true if the dtype is valid. */function isValidDtype(dtype){return dtype==='bool'||dtype==='complex64'||dtype==='float32'||dtype==='int32'||dtype==='string';}/**\r\n * Returns true if the new type can't encode the old type without loss of\r\n * precision.\r\n */function hasEncodingLoss(oldType,newType){if(newType==='complex64'){return false;}if(newType==='float32'&&oldType!=='complex64'){return false;}if(newType==='int32'&&oldType!=='float32'&&oldType!=='complex64'){return false;}if(newType==='bool'&&oldType==='bool'){return false;}return true;}function isTypedArray(a){return a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array;}function bytesPerElement(dtype){if(dtype==='float32'||dtype==='int32'){return 4;}else if(dtype==='complex64'){return 8;}else if(dtype==='bool'){return 1;}else{throw new Error(\"Unknown dtype \".concat(dtype));}}/**\r\n * Returns the approximate number of bytes allocated in the string array - 2\r\n * bytes per character. Computing the exact bytes for a native string in JS is\r\n * not possible since it depends on the encoding of the html page that serves\r\n * the website.\r\n */function bytesFromStringArray(arr){if(arr==null){return 0;}var bytes=0;arr.forEach(function(x){return bytes+=x.length;});return bytes;}/** Returns true if the value is a string. */function isString(value){return typeof value==='string'||value instanceof String;}function isBoolean(value){return typeof value==='boolean';}function isNumber(value){return typeof value==='number';}function inferDtype(values){if(Array.isArray(values)){return inferDtype(values[0]);}if(values instanceof Float32Array){return'float32';}else if(values instanceof Int32Array||values instanceof Uint8Array){return'int32';}else if(isNumber(values)){return'float32';}else if(isString(values)){return'string';}else if(isBoolean(values)){return'bool';}return'float32';}function isFunction(f){return!!(f&&f.constructor&&f.call&&f.apply);}function nearestDivisor(size,start){for(var i=start;i<size;++i){if(size%i===0){return i;}}return size;}function computeStrides(shape){var rank=shape.length;if(rank<2){return[];}// Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n// strides.\nvar strides=new Array(rank-1);strides[rank-2]=shape[rank-1];for(var i=rank-3;i>=0;--i){strides[i]=strides[i+1]*shape[i+1];}return strides;}function toTypedArray(a,dtype,debugMode){if(dtype==='string'){throw new Error('Cannot convert a string[] to a TypedArray');}if(Array.isArray(a)){a=flatten(a);}if(debugMode){checkConversionForErrors(a,dtype);}if(noConversionNeeded(a,dtype)){return a;}if(dtype==null||dtype==='float32'||dtype==='complex64'){return new Float32Array(a);}else if(dtype==='int32'){return new Int32Array(a);}else if(dtype==='bool'){var bool=new Uint8Array(a.length);for(var i=0;i<bool.length;++i){if(Math.round(a[i])!==0){bool[i]=1;}}return bool;}else{throw new Error(\"Unknown data type \".concat(dtype));}}function createNestedArray(offset,shape,a){var ret=new Array();if(shape.length===1){var d=shape[0];for(var i=0;i<d;i++){ret[i]=a[offset+i];}}else{var _d2=shape[0];var rest=shape.slice(1);var len=rest.reduce(function(acc,c){return acc*c;});for(var _i21=0;_i21<_d2;_i21++){ret[_i21]=createNestedArray(offset+_i21*len,rest,a);}}return ret;}// Provide a nested array of TypedArray in given shape.\nfunction toNestedArray(shape,a){if(shape.length===0){// Scalar type should return a single number.\nreturn a[0];}var size=shape.reduce(function(acc,c){return acc*c;});if(size===0){// A tensor with shape zero should be turned into empty list.\nreturn[];}if(size!==a.length){throw new Error(\"[\".concat(shape,\"] does not match the input size.\"));}return createNestedArray(0,shape,a);}function noConversionNeeded(a,dtype){return a instanceof Float32Array&&dtype==='float32'||a instanceof Int32Array&&dtype==='int32'||a instanceof Uint8Array&&dtype==='bool';}function makeOnesTypedArray(size,dtype){var array=makeZerosTypedArray(size,dtype);for(var i=0;i<array.length;i++){array[i]=1;}return array;}function makeZerosTypedArray(size,dtype){if(dtype==null||dtype==='float32'||dtype==='complex64'){return new Float32Array(size);}else if(dtype==='int32'){return new Int32Array(size);}else if(dtype==='bool'){return new Uint8Array(size);}else{throw new Error(\"Unknown data type \".concat(dtype));}}/**\r\n * Returns the current high-resolution time in milliseconds relative to an\r\n * arbitrary time in the past. It works across different platforms (node.js,\r\n * browsers).\r\n *\r\n * ```js\r\n * console.log(tf.util.now());\r\n * ```\r\n */ /** @doc {heading: 'Util', namespace: 'util'} */function now(){return Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().platform.now();}function assertNonNegativeIntegerDimensions(shape){shape.forEach(function(dimSize){assert(Number.isInteger(dimSize)&&dimSize>=0,function(){return\"Tensor must have a shape comprised of positive integers but got \"+\"shape [\".concat(shape,\"].\");});});}/**\r\n * Returns a platform-specific implementation of\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\r\n * `tf.util.fetch` returns that function.\r\n *\r\n * If not, `tf.util.fetch` returns a platform-specific solution.\r\n *\r\n * ```js\r\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\r\n * // handle response\r\n * ```\r\n */ /** @doc {heading: 'Util'} */function fetch(path,requestInits){return Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().platform.fetch(path,requestInits);}/**\r\n * Encodes the provided string into bytes using the provided encoding scheme.\r\n *\r\n * @param s The string to encode.\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n */ /** @doc {heading: 'Util'} */function encodeString(s){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'utf-8';encoding=encoding||'utf-8';return Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().platform.encode(s,encoding);}/**\r\n * Decodes the provided bytes into a string using the provided encoding scheme.\r\n * @param bytes The bytes to decode.\r\n *\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n */ /** @doc {heading: 'Util'} */function decodeString(bytes){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'utf-8';encoding=encoding||'utf-8';return Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().platform.decode(bytes,encoding);}/**\r\n * Computes flat index for a given location (multidimentionsal index) in a\r\n * Tensor/multidimensional array.\r\n *\r\n * @param locs Location in the tensor.\r\n * @param rank Rank of the tensor.\r\n * @param strides Tensor strides.\r\n */function locToIndex(locs,rank,strides){if(rank===0){return 0;}else if(rank===1){return locs[0];}var index=locs[locs.length-1];for(var i=0;i<locs.length-1;++i){index+=strides[i]*locs[i];}return index;}/**\r\n * Computes the location (multidimensional index) in a tensor/multidimentional\r\n * array for a given flat index.\r\n *\r\n * @param index Index in flat array.\r\n * @param rank Rank of tensor.\r\n * @param strides Strides of tensor.\r\n */function indexToLoc(index,rank,strides){if(rank===0){return[];}else if(rank===1){return[index];}var locs=new Array(rank);for(var i=0;i<locs.length-1;++i){locs[i]=Math.floor(index/strides[i]);index-=locs[i]*strides[i];}locs[locs.length-1]=index;return locs;}/***/},/* 2 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return getParamValue;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return getTensor;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return getTensorsForCurrentContenxt;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return getNodeNameAndIndex;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return parseNodeName;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return split;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function getParamValue(paramName,node,tensorMap,context){var inputParam=node.inputParams[paramName];if(inputParam&&inputParam.inputIndexStart!==undefined){var start=inputParam.inputIndexStart;var end=inputParam.inputIndexEnd===0?undefined:inputParam.inputIndexEnd===undefined?start+1:inputParam.inputIndexEnd;if(inputParam.type==='tensor'){return getTensor(node.inputNames[inputParam.inputIndexStart],tensorMap,context);}if(inputParam.type==='tensors'){var inputs=node.inputNames.slice(start,end);return inputs.map(function(name){return getTensor(name,tensorMap,context);});}var data=Array.prototype.slice.call(getTensor(node.inputNames.slice(start)[0],tensorMap,context).dataSync());return inputParam.type==='number'?data[0]:data;}var attrParam=node.attrParams[paramName];return attrParam&&attrParam.value;}/**\r\n * Retrieve the tensor based on input name by extracting the node name and\r\n * output index information.\r\n * @param name Node input name\r\n * @param tensorsMap Tensors map keyed by the node\r\n */function getTensor(name,tensorsMap,context){var _parseNodeName=parseNodeName(name),_parseNodeName2=_slicedToArray(_parseNodeName,2),nodeName=_parseNodeName2[0],index=_parseNodeName2[1];var contextId=context.currentContextIds.find(function(contextId){return!!tensorsMap[getNodeNameWithContextId(nodeName,contextId)];});return contextId!==undefined?tensorsMap[getNodeNameWithContextId(nodeName,contextId)][index]:undefined;}/**\r\n * Retrieve the tensors based on input name for current context.\r\n * @param name Node input name\r\n * @param tensorsMap Tensors map keyed by the node\r\n */function getTensorsForCurrentContenxt(name,tensorsMap,context){return tensorsMap[getNodeNameWithContextId(name,context.currentContextId)];}/**\r\n * Returns the node name and index from the Node input name.\r\n * @param inputName The input name of the node, in format of\r\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\r\n * default to 0.\r\n */function getNodeNameAndIndex(inputName,context){var _parseNodeName3=parseNodeName(inputName),_parseNodeName4=_slicedToArray(_parseNodeName3,2),nodeName=_parseNodeName4[0],index=_parseNodeName4[1];return[getNodeNameWithContextId(nodeName,context&&context.currentContextId),index];}function getNodeNameWithContextId(name,contextId){return!!contextId?\"\".concat(name,\"-\").concat(contextId):name;}function parseNodeName(name){var parts=name.split(':');if(parts.length===1){return[name,0];}var nodeName=parts[0];return[nodeName,Number(parts[parts.length-1])];}function split(arr,size){var res=[];for(var i=0;i<arr.length;i+=size){res.push(arr.slice(i,i+size));}return res;}/***/},/* 3 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return inferShape;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return convertToTensor;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return convertToTensorArray;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/* harmony import */var _environment__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10);/* harmony import */var _tensor__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(7);/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function inferShape(val,dtype){var firstElem=val;if(Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(val)){return dtype==='string'?[]:[val.length];}if(!Array.isArray(val)){return[];// Scalar.\n}var shape=[];while(Array.isArray(firstElem)||Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(firstElem)&&dtype!=='string'){shape.push(firstElem.length);firstElem=firstElem[0];}if(Array.isArray(val)&&Object(_environment__WEBPACK_IMPORTED_MODULE_1__[/* env */\"c\"])().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')){deepAssertShapeConsistency(val,shape,[]);}return shape;}function deepAssertShapeConsistency(val,shape,indices){indices=indices||[];if(!Array.isArray(val)&&!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(val)){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assert\"])(shape.length===0,function(){return\"Element arr[\".concat(indices.join(']['),\"] is a primitive, \")+\"but should be an array/TypedArray of \".concat(shape[0],\" elements\");});return;}Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assert\"])(shape.length>0,function(){return\"Element arr[\".concat(indices.join(']['),\"] should be a primitive, \")+\"but is an array of \".concat(val.length,\" elements\");});Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assert\"])(val.length===shape[0],function(){return\"Element arr[\".concat(indices.join(']['),\"] should have \").concat(shape[0],\" \")+\"elements, but has \".concat(val.length,\" elements\");});var subShape=shape.slice(1);for(var i=0;i<val.length;++i){deepAssertShapeConsistency(val[i],subShape,indices.concat(i));}}function assertDtype(expectedDtype,actualDType,argName,functionName){if(expectedDtype==null){return;}if(expectedDtype!=='numeric'&&expectedDtype!==actualDType||expectedDtype==='numeric'&&actualDType==='string'){throw new Error(\"Argument '\".concat(argName,\"' passed to '\").concat(functionName,\"' must \")+\"be \".concat(expectedDtype,\" tensor, but got \").concat(actualDType,\" tensor\"));}}function convertToTensor(x,argName,functionName){var parseAsDtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'numeric';if(x instanceof _tensor__WEBPACK_IMPORTED_MODULE_2__[/* Tensor */\"a\"]){assertDtype(parseAsDtype,x.dtype,argName,functionName);return x;}var inferredDtype=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"inferDtype\"])(x);// If the user expects a bool/int/float, use that info to update the\n// inferredDtype when it is not a string.\nif(inferredDtype!=='string'&&['bool','int32','float32'].indexOf(parseAsDtype)>=0){inferredDtype=parseAsDtype;}assertDtype(parseAsDtype,inferredDtype,argName,functionName);if(x==null||!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(x)&&!Array.isArray(x)&&typeof x!=='number'&&typeof x!=='boolean'&&typeof x!=='string'){var type=x==null?'null':x.constructor.name;throw new Error(\"Argument '\".concat(argName,\"' passed to '\").concat(functionName,\"' must be a \")+\"Tensor or TensorLike, but got '\".concat(type,\"'\"));}var inferredShape=inferShape(x,inferredDtype);if(!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(x)&&!Array.isArray(x)){x=[x];}var skipTypedArray=true;var values=inferredDtype!=='string'?Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"toTypedArray\"])(x,inferredDtype,Object(_environment__WEBPACK_IMPORTED_MODULE_1__[/* env */\"c\"])().getBool('DEBUG')):Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"flatten\"])(x,[],skipTypedArray);return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].makeTensor(values,inferredShape,inferredDtype);}function convertToTensorArray(arg,argName,functionName){var parseAsDtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'numeric';if(!Array.isArray(arg)){throw new Error(\"Argument \".concat(argName,\" passed to \").concat(functionName,\" must be a \")+'`Tensor[]` or `TensorLike[]`');}var tensors=arg;return tensors.map(function(t,i){return convertToTensor(t,\"\".concat(argName,\"[\").concat(i,\"]\"),functionName);},parseAsDtype);}/***/},/* 4 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return op;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Used for wrapping functions that perform math operations on\r\n * Tensors. The function will be wrapped in a named scope that cleans all\r\n * memory usage after the function is done.\r\n */function op(f){var keys=Object.keys(f);if(keys.length!==1){throw new Error(\"Please provide an object with a single key \"+\"(operation name) mapping to a function. Got an object with \"+\"\".concat(keys.length,\" keys.\"));}var opName=keys[0];var fn=f[opName];// Strip the underscore from the end of the function name.\nif(opName.endsWith('_')){opName=opName.substring(0,opName.length-1);}// tslint:disable-next-line:no-any\nvar f2=function f2(){_engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].startScope(opName);try{var result=fn.apply(void 0,arguments);if(result instanceof Promise){console.error('Cannot return a Promise inside of tidy.');}_engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].endScope(result);return result;}catch(ex){_engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].endScope(null);throw ex;}};Object.defineProperty(f2,'name',{value:opName,configurable:true});// tslint:disable-next-line:no-any\nreturn f2;}/***/},/* 5 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"a\",function(){return(/* binding */ENGINE);});// UNUSED EXPORTS: Engine\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/environment.js\nvar dist_environment=__webpack_require__(10);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/global_util.js\nvar global_util=__webpack_require__(33);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js\nvar kernel_registry=__webpack_require__(17);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/util.js\nvar util=__webpack_require__(1);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/profiler.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Profiler=/*#__PURE__*/function(){function Profiler(backendTimer,logger){_classCallCheck2(this,Profiler);this.backendTimer=backendTimer;this.logger=logger;if(logger==null){this.logger=new profiler_Logger();}}_createClass(Profiler,[{key:\"profileKernel\",value:function profileKernel(kernelName,inputs,f){var _this21=this;var outputs;var holdResultWrapperFn=function holdResultWrapperFn(){outputs=f();};var timer=this.backendTimer.time(holdResultWrapperFn);outputs.forEach(function(r){// Dangling promise here because we don't want to propagate up\n// asynchronicity.\nr.data().then(function(vals){checkComputationForErrors(vals,r.dtype,kernelName);timer.then(function(timing){var extraInfo='';if(timing.getExtraProfileInfo!=null){extraInfo=timing.getExtraProfileInfo();}_this21.logger.logKernelProfile(kernelName,r,vals,timing.kernelMs,inputs,extraInfo);});});});return outputs;}}]);return Profiler;}();function checkComputationForErrors(vals,dtype,kernelName){if(dtype!=='float32'){// Only floating point computations will generate NaN values\nreturn false;}for(var i=0;i<vals.length;i++){var num=vals[i];if(isNaN(num)||!isFinite(num)){// Throwing custom exception so behavior is testable.\nconsole.warn(\"Found \".concat(num,\" in the result of '\").concat(kernelName,\"'\"));return true;}}return false;}var profiler_Logger=/*#__PURE__*/function(){function profiler_Logger(){_classCallCheck2(this,profiler_Logger);}_createClass(profiler_Logger,[{key:\"logKernelProfile\",value:function logKernelProfile(name,result,vals,timeMs,inputs,extraInfo){var time=typeof timeMs==='number'?util[\"rightPad\"](\"\".concat(timeMs,\"ms\"),9):timeMs['error'];var paddedName=util[\"rightPad\"](name,25);var rank=result.rank;var size=result.size;var shape=util[\"rightPad\"](result.shape.toString(),14);var inputShapesDescription='';for(var _name in inputs){var input=inputs[_name];// The input might be a non-tensor (e.g HTMLImageElement), in which case\n// we claim the output shape as input shape.\nvar inputShape=input.shape||result.shape;var inputRank=inputShape.length;inputShapesDescription+=\"\".concat(_name,\": \").concat(inputRank,\"D \").concat(inputRank>0?inputShape:'',\" \");}console.log(\"%c\".concat(paddedName,\"\\t%c\").concat(time,\"\\t%c\").concat(rank,\"D \").concat(shape,\"\\t%c\").concat(size,\"\\t%c\").concat(inputShapesDescription,\"\\t%c\").concat(extraInfo),'font-weight:bold','color:red','color:blue','color: orange','color: green','color: steelblue');}}]);return profiler_Logger;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tape.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Computes a list of TapeNodes that connect x to y, filtering everything else\r\n * out and preserving the order of the original tape elements.\r\n *\r\n * @param tape The tape elements to filter.\r\n * @param xs The input Tensors.\r\n * @param y The output Tensor.\r\n */function getFilteredNodesXToY(tape,xs,y){// Forward pass to compute all the nodes and Tensors that are transitively a\n// function of x.\nvar tensorsFromX={};var nodesFromX={};for(var i=0;i<xs.length;i++){tensorsFromX[xs[i].id]=true;}for(var _i22=0;_i22<tape.length;_i22++){var node=tape[_i22];var nodeInputs=node.inputs;for(var inputName in nodeInputs){var input=nodeInputs[inputName];var anyInputFromX=false;for(var j=0;j<xs.length;j++){if(tensorsFromX[input.id]){node.outputs.forEach(function(output){return tensorsFromX[output.id]=true;});anyInputFromX=true;nodesFromX[node.id]=true;break;}}if(anyInputFromX){break;}}}// Backward pass to find all of the nodes and Tensors that lead to y.\nvar tensorsLeadToY={};tensorsLeadToY[y.id]=true;var nodesToY={};for(var _i23=tape.length-1;_i23>=0;_i23--){var _node=tape[_i23];var _nodeInputs=_node.inputs;// If any of the outputs lead to y, mark all of the inputs as leading to y.\nfor(var _j5=0;_j5<_node.outputs.length;_j5++){if(tensorsLeadToY[_node.outputs[_j5].id]){for(var _inputName in _nodeInputs){tensorsLeadToY[_nodeInputs[_inputName].id]=true;nodesToY[_node.id]=true;}break;}}}// Return the paths that come from x and lead to y.\nvar filteredTape=[];for(var _i24=0;_i24<tape.length;_i24++){var _node2=tape[_i24];if(nodesFromX[_node2.id]&&nodesToY[_node2.id]){// Prune the inputs from the node that aren't a function of x.\nvar prunedInputs={};for(var _inputName2 in _node2.inputs){var nodeInput=_node2.inputs[_inputName2];if(tensorsFromX[nodeInput.id]){prunedInputs[_inputName2]=nodeInput;}}// Copy the node and overwrite inputsAndArgs to the pruned version.\nvar prunedNode=Object.assign({},_node2);prunedNode.inputs=prunedInputs;prunedNode.outputs=_node2.outputs;filteredTape.push(prunedNode);}}return filteredTape;}/**\r\n * Backpropagate gradients through the filtered TapeNodes.\r\n *\r\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\r\n * is mutated by this method.\r\n * @param filteredTape The filtered TapeNodes to backprop through.\r\n */function backpropagateGradients(tensorAccumulatedGradientMap,filteredTape,tidy){var _loop5=function _loop5(i){var node=filteredTape[i];var dys=[];node.outputs.forEach(function(o){var gradTensor=tensorAccumulatedGradientMap[o.id];if(gradTensor!=null){dys.push(gradTensor);}else{// This particular output is not in the back-propagation subgraph, so it\n// does not affect the final output, thus we put null for its dy.\ndys.push(null);}});if(node.gradient==null){throw new Error(\"Cannot compute gradient: gradient function not found \"+\"for \".concat(node.kernelName,\".\"));}// Backprop dy through this node and accumulate gradients over the inputs.\nvar inputGradients=node.gradient(dys);var _loop6=function _loop6(inputName){if(!(inputName in inputGradients)){throw new Error(\"Cannot backprop through input \".concat(inputName,\". \")+\"Available gradients found: \".concat(Object.keys(inputGradients),\".\"));}// Call the gradient function.\nvar dx=tidy(function(){return inputGradients[inputName]();});if(dx.dtype!=='float32'){throw new Error(\"Error in gradient for op \".concat(node.kernelName,\". The gradient of input \")+\"\".concat(inputName,\" must have 'float32' dtype, but has '\").concat(dx.dtype,\"'\"));}var x=node.inputs[inputName];if(!util[\"arraysEqual\"](dx.shape,x.shape)){throw new Error(\"Error in gradient for op \".concat(node.kernelName,\". The gradient of input \")+\"'\".concat(inputName,\"' has shape '\").concat(dx.shape,\"', which does not match \")+\"the shape of the input '\".concat(x.shape,\"'\"));}if(tensorAccumulatedGradientMap[x.id]==null){tensorAccumulatedGradientMap[x.id]=dx;}else{var curGradient=tensorAccumulatedGradientMap[x.id];tensorAccumulatedGradientMap[x.id]=curGradient.add(dx);curGradient.dispose();}};for(var inputName in node.inputs){_loop6(inputName);}};// Walk the tape backward and keep a map of Tensor to its gradient.\nfor(var i=filteredTape.length-1;i>=0;i--){_loop5(i);}}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor.js + 1 modules\nvar tensor=__webpack_require__(7);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\nvar tensor_util=__webpack_require__(11);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/engine.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var EngineState=/*#__PURE__*/function(){function EngineState(){_classCallCheck2(this,EngineState);// Public since optimizers will use it.\nthis.registeredVariables={};this.nextTapeNodeId=0;this.numBytes=0;this.numTensors=0;this.numStringTensors=0;this.numDataBuffers=0;// Number of nested tf.grad() statements when computing higher-order\n// gradients. E.g. `1` for first-order gradients and `2` for second-order\n// gradients. Used to track if the tape should be removed after a backprop.\nthis.gradientDepth=0;// Number of nested kernel calls. When kernel depth is greater than 1, we turn\n// off the tape.\nthis.kernelDepth=0;this.scopeStack=[];/**\r\n         * Keeps track of the number of data moves during a kernel execution. We\r\n         * maintain a stack since kernels can call other kernels, recursively.\r\n         */this.numDataMovesStack=[];this.nextScopeId=0;this.tensorInfo=new WeakMap();this.profiling=false;this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null};}_createClass(EngineState,[{key:\"dispose\",value:function dispose(){for(var variableName in this.registeredVariables){this.registeredVariables[variableName].dispose();}}}]);return EngineState;}();var engine_Engine=/*#__PURE__*/function(){function engine_Engine(ENV){_classCallCheck2(this,engine_Engine);this.ENV=ENV;this.registry={};this.registryFactory={};this.pendingBackendInitId=0;this.state=new EngineState();}_createClass(engine_Engine,[{key:\"ready\",value:function(){var _ready=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee50(){var sortedBackends,i,backendName,success;return regeneratorRuntime.wrap(function _callee50$(_context50){while(1){switch(_context50.prev=_context50.next){case 0:if(!(this.pendingBackendInit!=null)){_context50.next=2;break;}return _context50.abrupt(\"return\",this.pendingBackendInit.then(function(){}));case 2:if(!(this.backendInstance!=null)){_context50.next=4;break;}return _context50.abrupt(\"return\");case 4:sortedBackends=this.getSortedBackends();i=0;case 6:if(!(i<sortedBackends.length)){_context50.next=18;break;}backendName=sortedBackends[i];_context50.next=10;return this.initializeBackend(backendName).success;case 10:success=_context50.sent;if(!success){_context50.next=15;break;}_context50.next=14;return this.setBackend(backendName);case 14:return _context50.abrupt(\"return\");case 15:i++;_context50.next=6;break;case 18:throw new Error(\"Could not initialize any backends, all backend initializations \"+\"failed.\");case 19:case\"end\":return _context50.stop();}}},_callee50,this);}));function ready(){return _ready.apply(this,arguments);}return ready;}()},{key:\"backend\",get:function get(){if(this.pendingBackendInit!=null){throw new Error(\"Backend '\".concat(this.backendName,\"' has not yet been initialized. Make \")+\"sure to await tf.ready() or await tf.setBackend() before calling \"+\"other methods\");}if(this.backendInstance==null){var _this$initializeBacke=this.initializeBackendsAndReturnBest(),name=_this$initializeBacke.name,asyncInit=_this$initializeBacke.asyncInit;if(asyncInit){throw new Error(\"The highest priority backend '\".concat(name,\"' has not yet been \")+\"initialized. Make sure to await tf.ready() or \"+\"await tf.setBackend() before calling other methods\");}this.setBackend(name);}return this.backendInstance;}},{key:\"backendNames\",value:function backendNames(){return Object.keys(this.registryFactory);}},{key:\"findBackend\",value:function findBackend(backendName){if(!(backendName in this.registry)){// If the backend hasn't been initialized but we have a registry entry for\n// it, initialize it and return it.\nif(backendName in this.registryFactory){var _this$initializeBacke2=this.initializeBackend(backendName),asyncInit=_this$initializeBacke2.asyncInit;if(asyncInit){// Backend is not ready yet.\nreturn null;}}else{return null;}}return this.registry[backendName];}},{key:\"findBackendFactory\",value:function findBackendFactory(backendName){if(!(backendName in this.registryFactory)){return null;}return this.registryFactory[backendName].factory;}},{key:\"registerBackend\",value:function registerBackend(backendName,factory){var priority=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(backendName in this.registryFactory){console.warn(\"\".concat(backendName,\" backend was already registered. \")+\"Reusing existing backend factory.\");return false;}this.registryFactory[backendName]={factory:factory,priority:priority};return true;}},{key:\"setBackend\",value:function(){var _setBackend=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee51(backendName){var _this$initializeBacke3,success,asyncInit,result;return regeneratorRuntime.wrap(function _callee51$(_context51){while(1){switch(_context51.prev=_context51.next){case 0:if(!(this.registryFactory[backendName]==null)){_context51.next=2;break;}throw new Error(\"Backend name '\".concat(backendName,\"' not found in registry\"));case 2:this.backendName=backendName;if(!(this.registry[backendName]==null)){_context51.next=16;break;}this.backendInstance=null;_this$initializeBacke3=this.initializeBackend(backendName),success=_this$initializeBacke3.success,asyncInit=_this$initializeBacke3.asyncInit;if(!asyncInit){_context51.next=12;break;}_context51.next=9;return success;case 9:_context51.t0=_context51.sent;_context51.next=13;break;case 12:_context51.t0=success;case 13:result=_context51.t0;if(result){_context51.next=16;break;}return _context51.abrupt(\"return\",false);case 16:this.backendInstance=this.registry[backendName];this.setupRegisteredKernels();// Reset the profiler.\nthis.profiler=new Profiler(this.backendInstance);return _context51.abrupt(\"return\",true);case 20:case\"end\":return _context51.stop();}}},_callee51,this);}));function setBackend(_x58){return _setBackend.apply(this,arguments);}return setBackend;}()},{key:\"setupRegisteredKernels\",value:function setupRegisteredKernels(){var _this22=this;var kernels=Object(kernel_registry[\"c\"/* getKernelsForBackend */])(this.backendName);kernels.forEach(function(kernel){if(kernel.setupFunc!=null){kernel.setupFunc(_this22.backendInstance);}});}},{key:\"disposeRegisteredKernels\",value:function disposeRegisteredKernels(backendName){var _this23=this;var kernels=Object(kernel_registry[\"c\"/* getKernelsForBackend */])(backendName);kernels.forEach(function(kernel){if(kernel.disposeFunc!=null){kernel.disposeFunc(_this23.registry[backendName]);}});}/**\r\n     * Initializes a backend by looking up the backend name in the factory\r\n     * registry and calling the factory method. Returns a boolean representing\r\n     * whether the initialization of the backend suceeded. Throws an error if\r\n     * there is no backend in the factory registry.\r\n     */},{key:\"initializeBackend\",value:function initializeBackend(backendName){var _this24=this;var registryFactoryEntry=this.registryFactory[backendName];if(registryFactoryEntry==null){throw new Error(\"Cannot initialize backend \".concat(backendName,\", no registration found.\"));}try{var backend=registryFactoryEntry.factory();// Test if the factory returns a promise.\nif(Promise.resolve(backend)===backend){var promiseId=++this.pendingBackendInitId;var success=backend.then(function(backendInstance){// Outdated promise. Another backend was set in the meantime.\nif(promiseId<_this24.pendingBackendInitId){return false;}_this24.registry[backendName]=backendInstance;_this24.pendingBackendInit=null;return true;}).catch(function(err){// Outdated promise. Another backend was set in the meantime.\nif(promiseId<_this24.pendingBackendInitId){return false;}_this24.pendingBackendInit=null;console.warn(\"Initialization of backend \".concat(backendName,\" failed\"));console.warn(err.stack||err.message);return false;});this.pendingBackendInit=success;return{success:success,asyncInit:true};}else{this.registry[backendName]=backend;return{success:true,asyncInit:false};}}catch(err){console.warn(\"Initialization of backend \".concat(backendName,\" failed\"));console.warn(err.stack||err.message);return{success:false,asyncInit:false};}}},{key:\"removeBackend\",value:function removeBackend(backendName){if(!(backendName in this.registryFactory)){throw new Error(\"\".concat(backendName,\" backend not found in registry\"));}if(this.backendName===backendName&&this.pendingBackendInit!=null){// There is a pending promise of the backend we want to remove. Make it\n// obsolete.\nthis.pendingBackendInitId++;}if(backendName in this.registry){this.disposeRegisteredKernels(backendName);this.registry[backendName].dispose();delete this.registry[backendName];}delete this.registryFactory[backendName];// Unset the backend if it is active.\nif(this.backendName===backendName){this.pendingBackendInit=null;this.backendName=null;this.backendInstance=null;}}},{key:\"getSortedBackends\",value:function getSortedBackends(){var _this25=this;if(Object.keys(this.registryFactory).length===0){throw new Error('No backend found in registry.');}return Object.keys(this.registryFactory).sort(function(a,b){// Highest priority comes first.\nreturn _this25.registryFactory[b].priority-_this25.registryFactory[a].priority;});}},{key:\"initializeBackendsAndReturnBest\",value:function initializeBackendsAndReturnBest(){var sortedBackends=this.getSortedBackends();for(var i=0;i<sortedBackends.length;i++){var backendName=sortedBackends[i];var _this$initializeBacke4=this.initializeBackend(backendName),success=_this$initializeBacke4.success,asyncInit=_this$initializeBacke4.asyncInit;if(asyncInit||success){return{name:backendName,asyncInit:asyncInit};}}throw new Error(\"Could not initialize any backends, all backend initializations \"+\"failed.\");}},{key:\"moveData\",value:function moveData(backend,dataId){var info=this.state.tensorInfo.get(dataId);var srcBackend=info.backend;var values=this.readSync(dataId);// Delete the tensor from the old backend and move it to the new\n// backend.\nsrcBackend.disposeData(dataId);info.backend=backend;backend.move(dataId,values,info.shape,info.dtype);if(this.shouldCheckForMemLeaks()){// Track the number of moves during a kernel execution to correctly\n// detect memory leaks.\nthis.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++;}}},{key:\"tidy\",value:function tidy(nameOrFn,fn){var _this26=this;var name=null;if(fn==null){// Called with only 1 argument.\nif(typeof nameOrFn!=='function'){throw new Error('Please provide a function to tidy()');}fn=nameOrFn;}else{// Called with 2 arguments.\nif(typeof nameOrFn!=='string'&&!(nameOrFn instanceof String)){throw new Error('When calling with two arguments, the first argument '+'to tidy() must be a string');}if(typeof fn!=='function'){throw new Error('When calling with two arguments, the 2nd argument '+'to tidy() must be a function');}name=nameOrFn;// TODO(nsthorat,smilkov): Do operation logging and performance\n// profiling.\n}var result;return this.scopedRun(function(){return _this26.startScope(name);},function(){return _this26.endScope(result);},function(){result=fn();if(result instanceof Promise){console.error('Cannot return a Promise inside of tidy.');}return result;});}},{key:\"scopedRun\",value:function scopedRun(start,end,f){start();try{var res=f();end();return res;}catch(ex){end();throw ex;}}},{key:\"nextTensorId\",value:function nextTensorId(){return engine_Engine.nextTensorId++;}},{key:\"nextVariableId\",value:function nextVariableId(){return engine_Engine.nextVariableId++;}/**\r\n     * This method is called instead of the public-facing tensor.clone() when\r\n     * saving a tensor for backwards pass. It makes sure to add the clone\r\n     * operation to the tape regardless of being called inside a kernel\r\n     * execution.\r\n     *\r\n     * This method will go away once all kernels are modularized since we won't\r\n     * need to turn off the tape inside runKernel().\r\n     */},{key:\"clone\",value:function clone(x){var y=this.makeTensorFromDataId(x.dataId,x.shape,x.dtype);var inputs={x:x};var grad=function grad(dy){return{x:function x(){return dy.toFloat();}};};var saved=[];this.addTapeNode(this.state.activeScope.name,inputs,[y],grad,saved,{});return y;}/**\r\n     * Execute a kernel with the given name and return the output tensor.\r\n     *\r\n     * @param kernelName The name of the kernel to execute.\r\n     * @param inputs A map of input names to tensors.\r\n     * @param attrs A map of attribute names to their values. An attribute is a\r\n     *     primitive (non-tensor) input to the kernel.\r\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\r\n     *     computation.\r\n     * @param outputsToSave A list of booleans, specifying which output to save\r\n     *     for the backprop computation. These are booleans since the output\r\n     * tensors are not visible to the user.\r\n     */},{key:\"runKernel\",value:function runKernel(kernelName,inputs,attrs,inputsToSave,outputsToSave){var forwardFunc=null;var backwardsFunc=null;// Call runKernel as a stop-gap until we modularize all kernels.\n// Once we modularize all kernels, we will remove the existing\n// `runKernelFunc`.\nreturn this.runKernelFunc(forwardFunc,inputs,backwardsFunc,kernelName,attrs,inputsToSave,outputsToSave);}},{key:\"shouldCheckForMemLeaks\",value:function shouldCheckForMemLeaks(){return this.ENV.getBool('IS_TEST');}},{key:\"checkKernelForMemLeak\",value:function checkKernelForMemLeak(kernelName,numDataIdsBefore,outInfos){var numDataIdsAfter=this.backend.numDataIds();// Count the number of data ids associated with the result of the kernel.\nvar numOutputDataIds=0;outInfos.forEach(function(info){// Complex numbers allocate 3 data ids, one for 'real', one for\n// 'imaginary', and one for the container that holds the former two.\nnumOutputDataIds+=info.dtype==='complex64'?3:1;});// Account for the number of moves during kernel execution. A \"data move\"\n// can happen in the middle of a kernel execution, placing a new (key,value)\n// pair in the data storage. Since data moves have net zero effect (we\n// always remove the data from the old backend), we have to cancel them out\n// when detecting memory leaks.\nvar numMoves=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];var dataIdsLeaked=numDataIdsAfter-numDataIdsBefore-numOutputDataIds-numMoves;if(dataIdsLeaked>0){throw new Error(\"Backend '\".concat(this.backendName,\"' has an internal memory leak \")+\"(\".concat(dataIdsLeaked,\" data ids) after running '\").concat(kernelName,\"'\"));}}/**\r\n     * @deprecated Use `runKernel` for newly added kernels. Keep using this method\r\n     *     only for kernels that are not yet fully modularized.\r\n     */},{key:\"runKernelFunc\",value:function runKernelFunc(forwardFunc,inputs,backwardsFunc,kernelName,attrs,inputsToSave,outputsToSave){var _this27=this;var outputs;var saved=[];var isTapeOn=this.isTapeOn();if(kernelName==null){kernelName=this.state.activeScope!=null?this.state.activeScope.name:'';}var startingBytecount=this.state.numBytes;var startingNumTensors=this.state.numTensors;if(this.shouldCheckForMemLeaks()){this.state.numDataMovesStack.push(0);}var kernelFunc;var kernel=Object(kernel_registry[\"b\"/* getKernel */])(kernelName,this.backendName);var out;if(kernel!=null){kernelFunc=function kernelFunc(){var numDataIdsBefore=_this27.backend.numDataIds();out=kernel.kernelFunc({inputs:inputs,attrs:attrs,backend:_this27.backend});var outInfos=Array.isArray(out)?out:[out];if(_this27.shouldCheckForMemLeaks()){_this27.checkKernelForMemLeak(kernelName,numDataIdsBefore,outInfos);}var outTensors=outInfos.map(function(_ref10){var dataId=_ref10.dataId,shape=_ref10.shape,dtype=_ref10.dtype;return _this27.makeTensorFromDataId(dataId,shape,dtype);});// Save the inputs and outputs.\n// Do not save unless we are recording to the tape. Otherwise it would\n// cause a mem leak since we would never run backprop, which disposes\n// the kept tensors.\nif(isTapeOn){var tensorsToSave=_this27.getTensorsForGradient(kernelName,inputs,outTensors);if(tensorsToSave==null){// Fallback for ops that call runKernelFunc and pass in\n// inputsToSave and outputsToSave. Currently this is the set of ops\n// with kernel support in the WASM backend. Once those ops and\n// respective gradients are modularised we can remove this path.\nif(outputsToSave==null){outputsToSave=[];}var outsToSave=outTensors.filter(function(_,i){return outputsToSave[i];});tensorsToSave=(inputsToSave||[]).slice().concat(outsToSave);}saved=_this27.saveTensorsForBackwardMode(tensorsToSave);}return outTensors;};}else{var saveFunc=function saveFunc(tensors){// Do not save unless we are recording to the tape. Otherwise it would\n// cause a mem leak since we would never run backprop, which disposes\n// the kept tensors.\nif(!isTapeOn){return;}saved=tensors.map(function(tensor){return _this27.keep(_this27.clone(tensor));});};kernelFunc=function kernelFunc(){var numDataIdsBefore=_this27.backend.numDataIds();out=_this27.tidy(function(){return forwardFunc(_this27.backend,saveFunc);});var outs=Array.isArray(out)?out:[out];if(_this27.shouldCheckForMemLeaks()){_this27.checkKernelForMemLeak(kernelName,numDataIdsBefore,outs);}return outs;};}// Stop recording to a tape when running a kernel.\nthis.scopedRun(function(){return _this27.state.kernelDepth++;},function(){return _this27.state.kernelDepth--;},function(){if(!_this27.ENV.getBool('DEBUG')){outputs=kernelFunc();}else{outputs=_this27.profiler.profileKernel(kernelName,inputs,function(){return kernelFunc();});}});if(isTapeOn){this.addTapeNode(kernelName,inputs,outputs,backwardsFunc,saved,attrs);}if(this.state.profiling){this.state.activeProfile.kernels.push({name:kernelName,bytesAdded:this.state.numBytes-startingBytecount,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-startingNumTensors,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(inputs).map(function(key){return inputs[key].shape;}),outputShapes:outputs.map(function(item){return item.shape;})});}return Array.isArray(out)?outputs:outputs[0];}/**\r\n     * Saves tensors used in forward mode for use in backward mode.\r\n     *\r\n     * @param tensors the list of tensors to save.\r\n     */},{key:\"saveTensorsForBackwardMode\",value:function saveTensorsForBackwardMode(tensors){var _this28=this;var saved=tensors.map(function(tensor){return _this28.keep(_this28.clone(tensor));});return saved;}/**\r\n     * Returns a list of tensors to save for a given gradient calculation.\r\n     *\r\n     * Returns undefined if their is no registered gradient for this kernel in the\r\n     * gradient registry.\r\n     *\r\n     * @param kernelName name of kernel to look up gradient for.\r\n     * @param inputs a map of input tensors.\r\n     * @param outputs an array of output tensors from forward mode of kernel.\r\n     */},{key:\"getTensorsForGradient\",value:function getTensorsForGradient(kernelName,inputs,outputs){var gradConfig=Object(kernel_registry[\"a\"/* getGradient */])(kernelName);if(gradConfig!=null){var inputsToSave=gradConfig.inputsToSave||[];var outputsToSave=gradConfig.outputsToSave||[];// If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n// specified in inputsToSave will be saved.\nvar inputTensorsToSave;if(gradConfig.saveAllInputs){util[\"assert\"](Array.isArray(inputs),function(){return'saveAllInputs is true, expected inputs to be an array.';});inputTensorsToSave=Object.keys(inputs).map(function(key){return inputs[key];});}else{inputTensorsToSave=inputsToSave.map(function(inputName){return inputs[inputName];});}var outputTensorsToSave=outputs.filter(function(_,i){return outputsToSave[i];});return inputTensorsToSave.concat(outputTensorsToSave);}// TODO(yassogba) throw exception here once all runkernelFunc calls with\n// inputsToSave/outputsToSave are removed\nreturn null;}/**\r\n     * Internal method used by public APIs for tensor creation. Makes a new\r\n     * tensor with the provided shape, dtype and values. It always\r\n     * creates a new data id and writes the values to the underlying backend.\r\n     */},{key:\"makeTensor\",value:function makeTensor(values,shape,dtype,backend){if(values==null){throw new Error('Values passed to engine.makeTensor() are null');}dtype=dtype||'float32';backend=backend||this.backend;var backendVals=values;if(dtype==='string'&&util[\"isString\"](values[0])){backendVals=values.map(function(d){return util[\"encodeString\"](d);});}var dataId=backend.write(backendVals,shape,dtype);var t=new tensor[\"a\"/* Tensor */](shape,dtype,dataId,this.nextTensorId());this.incRef(t,backend);// Count bytes for string tensors.\nif(dtype==='string'){var info=this.state.tensorInfo.get(dataId);var newBytes=Object(util[\"bytesFromStringArray\"])(backendVals);this.state.numBytes+=newBytes-info.bytes;info.bytes=newBytes;}return t;}/**\r\n     * Internal method used by backends. Makes a new tensor\r\n     * that is a wrapper around an existing data id. It doesn't create\r\n     * a new data id, only increments the ref count used in memory tracking.\r\n     */},{key:\"makeTensorFromDataId\",value:function makeTensorFromDataId(dataId,shape,dtype,backend){dtype=dtype||'float32';var t=new tensor[\"a\"/* Tensor */](shape,dtype,dataId,this.nextTensorId());this.incRef(t,backend);return t;}},{key:\"makeVariable\",value:function makeVariable(initialValue){var trainable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var name=arguments.length>2?arguments[2]:undefined;var dtype=arguments.length>3?arguments[3]:undefined;name=name||this.nextVariableId().toString();if(dtype!=null&&dtype!==initialValue.dtype){initialValue=initialValue.asType(dtype);}var v=new tensor[\"c\"/* Variable */](initialValue,trainable,name,this.nextTensorId());if(this.state.registeredVariables[v.name]!=null){throw new Error(\"Variable with name \".concat(v.name,\" was already registered\"));}this.state.registeredVariables[v.name]=v;this.incRef(v,this.backend);return v;}},{key:\"incRef\",value:function incRef(a,backend){var refCount=this.state.tensorInfo.has(a.dataId)?this.state.tensorInfo.get(a.dataId).refCount:0;this.state.numTensors++;if(a.dtype==='string'){this.state.numStringTensors++;}if(refCount===0){this.state.numDataBuffers++;// Bytes for complex numbers are counted by their components. Bytes for\n// string tensors are counted when writing values.\nvar bytes=0;if(a.dtype!=='complex64'&&a.dtype!=='string'){bytes=a.size*util[\"bytesPerElement\"](a.dtype);}this.state.tensorInfo.set(a.dataId,{backend:backend||this.backend,dtype:a.dtype,shape:a.shape,bytes:bytes,refCount:0});this.state.numBytes+=bytes;}this.state.tensorInfo.get(a.dataId).refCount++;if(!(a instanceof tensor[\"c\"/* Variable */])){this.track(a);}}},{key:\"disposeTensor\",value:function disposeTensor(a){if(!this.state.tensorInfo.has(a.dataId)){return;}this.state.numTensors--;if(a.dtype==='string'){this.state.numStringTensors--;}var info=this.state.tensorInfo.get(a.dataId);var refCount=info.refCount;if(refCount<=1){// Don't count bytes for complex numbers as they are counted by their\n// components.\nif(a.dtype!=='complex64'){this.state.numBytes-=info.bytes;}this.state.numDataBuffers--;info.backend.disposeData(a.dataId);this.state.tensorInfo.delete(a.dataId);}else{this.state.tensorInfo.get(a.dataId).refCount--;}// TODO(nsthorat): Construct an error and save the stack trace for\n// debugging when in debug mode. Creating a stack trace is too expensive\n// to do unconditionally.\n}},{key:\"disposeVariables\",value:function disposeVariables(){for(var varName in this.state.registeredVariables){var v=this.state.registeredVariables[varName];this.disposeVariable(v);}}},{key:\"disposeVariable\",value:function disposeVariable(v){this.disposeTensor(v);if(this.state.registeredVariables[v.name]!=null){delete this.state.registeredVariables[v.name];}}},{key:\"memory\",value:function memory(){var info=this.backend.memory();info.numTensors=this.state.numTensors;info.numDataBuffers=this.state.numDataBuffers;info.numBytes=this.state.numBytes;if(this.state.numStringTensors>0){info.unreliable=true;if(info.reasons==null){info.reasons=[];}info.reasons.push('Memory usage by string tensors is approximate '+'(2 bytes per character)');}return info;}},{key:\"profile\",value:function(){var _profile=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee52(query){var startBytes,startNumTensors;return regeneratorRuntime.wrap(function _callee52$(_context52){while(1){switch(_context52.prev=_context52.next){case 0:this.state.profiling=true;startBytes=this.state.numBytes;startNumTensors=this.state.numTensors;this.state.activeProfile.kernels=[];this.state.activeProfile.result=query();this.state.profiling=false;this.state.activeProfile.peakBytes=Math.max.apply(Math,_toConsumableArray2(this.state.activeProfile.kernels.map(function(d){return d.totalBytesSnapshot;})));this.state.activeProfile.newBytes=this.state.numBytes-startBytes;this.state.activeProfile.newTensors=this.state.numTensors-startNumTensors;return _context52.abrupt(\"return\",this.state.activeProfile);case 10:case\"end\":return _context52.stop();}}},_callee52,this);}));function profile(_x59){return _profile.apply(this,arguments);}return profile;}()},{key:\"isTapeOn\",value:function isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0;}},{key:\"addTapeNode\",value:function addTapeNode(kernelName,inputs,outputs,gradientsFunc,saved,attrs){var _this29=this;var tapeNode={id:this.state.nextTapeNodeId++,kernelName:kernelName,inputs:inputs,outputs:outputs,saved:saved};var gradConfig=Object(kernel_registry[\"a\"/* getGradient */])(kernelName);if(gradConfig!=null){gradientsFunc=gradConfig.gradFunc;}if(gradientsFunc!=null){tapeNode.gradient=function(dys){// TODO(smilkov): To optimize back-prop, pass dys that are not used in\n// the backprop graph to the user as null instead of zeros\ndys=dys.map(function(dy,i){if(dy==null){var output=outputs[i];var vals=util[\"makeZerosTypedArray\"](output.size,output.dtype);return _this29.makeTensor(vals,output.shape,output.dtype);}return dy;});// Grad functions of ops with single outputs expect a dy, while ops\n// with multiple outputs expect dys (array of dy).\nreturn gradientsFunc(dys.length>1?dys:dys[0],saved,attrs);};}this.state.activeTape.push(tapeNode);}},{key:\"keep\",value:function keep(result){result.kept=true;return result;}},{key:\"startTape\",value:function startTape(){if(this.state.gradientDepth===0){this.state.activeTape=[];}this.state.gradientDepth++;}},{key:\"endTape\",value:function endTape(){this.state.gradientDepth--;}/**\r\n     * Start a scope. Use this with endScope() to achieve the same functionality\r\n     * as scope() without the need for a function closure.\r\n     */},{key:\"startScope\",value:function startScope(name){var scopeInfo={track:[],name:'unnamed scope',id:this.state.nextScopeId++};if(name){scopeInfo.name=name;}this.state.scopeStack.push(scopeInfo);this.state.activeScope=scopeInfo;}/**\r\n     * End a scope. Use this with startScope() to achieve the same functionality\r\n     * as scope() without the need for a function closure.\r\n     */},{key:\"endScope\",value:function endScope(result){var _this30=this;var tensorsToTrackInParent=Object(tensor_util[\"getTensorsInContainer\"])(result);var tensorsToTrackInParentSet=new Set(tensorsToTrackInParent.map(function(t){return t.id;}));// Dispose the arrays tracked in this scope.\nfor(var i=0;i<this.state.activeScope.track.length;i++){var _tensor=this.state.activeScope.track[i];if(!_tensor.kept&&!tensorsToTrackInParentSet.has(_tensor.id)){_tensor.dispose();}}var oldScope=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1];// Track the current result in the parent scope.\ntensorsToTrackInParent.forEach(function(tensor){// Only track the tensor if was allocated in the inner scope and is not\n// globally kept.\nif(!tensor.kept&&tensor.scopeId===oldScope.id){_this30.track(tensor);}});}/**\r\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\r\n     * returned are of the same length as `xs`, but some might be null if `f`\r\n     * was not a function of that `x`. It also takes optional dy to multiply the\r\n     * gradient, which defaults to `1`.\r\n     */},{key:\"gradients\",value:function gradients(f,xs,dy){var _this31=this;var allowNoGradients=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;util[\"assert\"](xs.length>0,function(){return'gradients() received an empty list of xs.';});if(dy!=null&&dy.dtype!=='float32'){throw new Error(\"dy must have 'float32' dtype, but has '\".concat(dy.dtype,\"'\"));}var y=this.scopedRun(function(){return _this31.startTape();},function(){return _this31.endTape();},function(){return _this31.tidy('forward',f);});util[\"assert\"](y instanceof tensor[\"a\"/* Tensor */],function(){return'The result y returned by f() must be a tensor.';});// Filter out the nodes that don't connect x => y.\nvar filteredTape=getFilteredNodesXToY(this.state.activeTape,xs,y);if(!allowNoGradients&&filteredTape.length===0&&xs.length>0){throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure '+'that the f you passed encloses all operations that lead from x '+'to y.');}return this.tidy('backward',function(){var accumulatedGradientMap={};accumulatedGradientMap[y.id]=dy==null?ones(y.shape):dy;// Backprop gradients through the filtered nodes.\nbackpropagateGradients(accumulatedGradientMap,filteredTape,// Pass the tidy function to avoid circular dep with `tape.ts`.\nfunction(f){return _this31.tidy(f);});var grads=xs.map(function(x){return accumulatedGradientMap[x.id];});if(_this31.state.gradientDepth===0){// This means that we are not computing higher-order gradients\n// and can clean up the tape.\n_this31.state.activeTape.forEach(function(node){var _iterator5=_createForOfIteratorHelper(node.saved),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _tensor2=_step5.value;_tensor2.dispose();}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}});_this31.state.activeTape=null;}return{value:y,grads:grads};});}},{key:\"customGrad\",value:function customGrad(f){var _this32=this;util[\"assert\"](util[\"isFunction\"](f),function(){return'The f passed in customGrad(f) must be a function.';});return function(){for(var _len2=arguments.length,inputs=new Array(_len2),_key2=0;_key2<_len2;_key2++){inputs[_key2]=arguments[_key2];}util[\"assert\"](inputs.every(function(t){return t instanceof tensor[\"a\"/* Tensor */];}),function(){return'The args passed in customGrad(f)(x1, x2,...) must all be '+'tensors';});var res;var inputMap={};inputs.forEach(function(input,i){inputMap[i]=input;});return _this32.runKernelFunc(function(_,save){res=f.apply(void 0,[].concat(inputs,[save]));util[\"assert\"](res.value instanceof tensor[\"a\"/* Tensor */],function(){return'The function f passed in customGrad(f) must return an '+'object where `obj.value` is a tensor';});util[\"assert\"](util[\"isFunction\"](res.gradFunc),function(){return'The function f passed in customGrad(f) must return an '+'object where `obj.gradFunc` is a function.';});return res.value;},inputMap,function(dy,saved){var gradRes=res.gradFunc(dy,saved);var grads=Array.isArray(gradRes)?gradRes:[gradRes];util[\"assert\"](grads.length===inputs.length,function(){return'The function f passed in customGrad(f) must return an '+'object where `obj.gradFunc` is a function that returns '+'the same number of tensors as inputs passed to f(...).';});util[\"assert\"](grads.every(function(t){return t instanceof tensor[\"a\"/* Tensor */];}),function(){return'The function f passed in customGrad(f) must return an '+'object where `obj.gradFunc` is a function that returns '+'a list of only tensors.';});var gradMap={};grads.forEach(function(grad,i){gradMap[i]=function(){return grad;};});return gradMap;});};}},{key:\"readSync\",value:function readSync(dataId){// Route the read to the correct backend.\nvar info=this.state.tensorInfo.get(dataId);return info.backend.readSync(dataId);}},{key:\"read\",value:function read(dataId){// Route the read to the correct backend.\nvar info=this.state.tensorInfo.get(dataId);return info.backend.read(dataId);}},{key:\"time\",value:function(){var _time=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee53(query){var start,timingInfo;return regeneratorRuntime.wrap(function _callee53$(_context53){while(1){switch(_context53.prev=_context53.next){case 0:start=Object(util[\"now\"])();_context53.next=3;return this.backend.time(query);case 3:timingInfo=_context53.sent;timingInfo.wallMs=Object(util[\"now\"])()-start;return _context53.abrupt(\"return\",timingInfo);case 6:case\"end\":return _context53.stop();}}},_callee53,this);}));function time(_x60){return _time.apply(this,arguments);}return time;}()/**\r\n     * Tracks a Tensor in the current scope to be automatically cleaned up\r\n     * when the current scope ends, and returns the value.\r\n     *\r\n     * @param result The Tensor to track in the current scope.\r\n     */},{key:\"track\",value:function track(result){if(this.state.activeScope!=null){result.scopeId=this.state.activeScope.id;this.state.activeScope.track.push(result);}return result;}},{key:\"registeredVariables\",get:function get(){return this.state.registeredVariables;}/**\r\n     * Resets the engine state. Removes all backends but does not remove\r\n     * registered backend factories.\r\n     */},{key:\"reset\",value:function reset(){// Make any pending promise obsolete.\nthis.pendingBackendInitId++;this.state.dispose();this.ENV.reset();this.state=new EngineState();for(var backendName in this.registry){this.disposeRegisteredKernels(backendName);this.registry[backendName].dispose();delete this.registry[backendName];}this.backendName=null;this.backendInstance=null;this.pendingBackendInit=null;}}]);return engine_Engine;}();engine_Engine.nextTensorId=0;engine_Engine.nextVariableId=0;function ones(shape){var values=Object(util[\"makeOnesTypedArray\"])(Object(util[\"sizeFromShape\"])(shape),'float32');return ENGINE.makeTensor(values,shape,'float32');}function getOrMakeEngine(){var ns=Object(global_util[\"b\"/* getGlobalNamespace */])();if(ns._tfengine==null){var environment=new dist_environment[\"b\"/* Environment */](ns);ns._tfengine=new engine_Engine(environment);}Object(dist_environment[\"d\"/* setEnvironmentGlobal */])(ns._tfengine.ENV);// Tell the current tensor interface that the global engine is responsible\n// for tracking.\nObject(tensor[\"f\"/* setTensorTracker */])(function(){return ns._tfengine;});return ns._tfengine;}var ENGINE=getOrMakeEngine();/***/},/* 6 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return Add;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return AddN;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return Atan2;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return AvgPool;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"g\",function(){return AvgPoolBackprop;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return AvgPool3D;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return AvgPool3DBackprop;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"h\",function(){return BatchMatMul;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"i\",function(){return BatchToSpaceND;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"j\",function(){return BroadcastTo;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"k\",function(){return Complex;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"l\",function(){return Concat;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"m\",function(){return Conv2D;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"n\",function(){return Conv2DBackpropFilter;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"o\",function(){return Conv2DBackpropInput;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"p\",function(){return Conv3D;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"q\",function(){return Conv3DBackpropFilterV2;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"r\",function(){return Conv3DBackpropInputV2;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"s\",function(){return Cumsum;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"t\",function(){return DepthToSpace;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"u\",function(){return DepthwiseConv2dNative;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"v\",function(){return DepthwiseConv2dNativeBackpropFilter;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"w\",function(){return DepthwiseConv2dNativeBackpropInput;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"x\",function(){return Diag;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"y\",function(){return Div;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"z\",function(){return Elu;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"A\",function(){return EluGrad;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"B\",function(){return Equal;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"D\",function(){return FloorDiv;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"C\",function(){return Fill;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"F\",function(){return FusedBatchNorm;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"G\",function(){return GatherNd;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"H\",function(){return Greater;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"I\",function(){return GreaterEqual;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"J\",function(){return Identity;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"K\",function(){return Imag;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"N\",function(){return Less;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"O\",function(){return LessEqual;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"L\",function(){return LRN;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"M\",function(){return LRNBackprop;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"P\",function(){return Max;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"V\",function(){return Maximum;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"Q\",function(){return MaxPool;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"T\",function(){return MaxPoolBackprop;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"R\",function(){return MaxPool3D;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"S\",function(){return MaxPool3DBackprop;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"U\",function(){return MaxPoolWithArgmax;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"W\",function(){return Minimum;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"X\",function(){return Mod;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"Y\",function(){return Multiply;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"bb\",function(){return NotEqual;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"Z\",function(){return NonMaxSuppressionV3;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"ab\",function(){return NonMaxSuppressionV5;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"cb\",function(){return OneHot;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"db\",function(){return PadV2;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"eb\",function(){return Pool;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"fb\",function(){return Pow;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"gb\",function(){return Prelu;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"hb\",function(){return Real;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"ib\",function(){return Relu;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"jb\",function(){return Relu6;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"kb\",function(){return SelectV2;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"lb\",function(){return Selu;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"mb\",function(){return SpaceToBatchND;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"nb\",function(){return SplitV;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"pb\",function(){return SquaredDifference;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"ob\",function(){return Square;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"qb\",function(){return Sub;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"rb\",function(){return Tile;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"sb\",function(){return Transpose;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"E\",function(){return FromPixels;});var Add='Add';var AddN='AddN';var Atan2='Atan2';var AvgPool='AvgPool';var AvgPoolBackprop='AvgPoolBackprop';var AvgPool3D='AvgPool3D';var AvgPool3DBackprop='AvgPool3DBackprop';var BatchMatMul='BatchMatMul';var BatchToSpaceND='BatchToSpaceND';var BroadcastTo='BroadcastTo';var Complex='Complex';var Concat='Concat';var Conv2D='Conv2D';var Conv2DBackpropFilter='Conv2DBackpropFilter';var Conv2DBackpropInput='Conv2DBackpropInput';var Conv3D='Conv3D';var Conv3DBackpropFilterV2='Conv3DBackpropFilterV2';var Conv3DBackpropInputV2='Conv3DBackpropInputV2';var Cumsum='Cumsum';var DepthToSpace='DepthToSpace';var DepthwiseConv2dNative='DepthwiseConv2dNative';var DepthwiseConv2dNativeBackpropFilter='DepthwiseConv2dNativeBackpropFilter';var DepthwiseConv2dNativeBackpropInput='DepthwiseConv2dNativeBackpropInput';var Diag='Diag';var Div='Div';var Elu='Elu';var EluGrad='EluGrad';var Equal='Equal';var FloorDiv='FloorDiv';var Fill='Fill';var FusedBatchNorm='FusedBatchNorm';var GatherNd='GatherNd';var Greater='Greater';var GreaterEqual='GreaterEqual';var Identity='Identity';var Imag='Imag';var Less='Less';var LessEqual='LessEqual';var LRN='LRN';var LRNBackprop='LRNBackprop';var Max='Max';var Maximum='Maximum';var MaxPool='MaxPool';var MaxPoolBackprop='MaxPoolBackprop';var MaxPool3D='MaxPool3D';var MaxPool3DBackprop='MaxPool3DBackprop';var MaxPoolWithArgmax='MaxPoolWithArgmax';var Minimum='Minimum';var Mod='Mod';var Multiply='Multiply';var NotEqual='NotEqual';var NonMaxSuppressionV3='NonMaxSuppressionV3';var NonMaxSuppressionV5='NonMaxSuppressionV5';var OneHot='OneHot';var PadV2='PadV2';var Pool='Pool';var Pow='Pow';var Prelu='Prelu';var Real='Real';var Relu='Relu';var Relu6='Relu6';var SelectV2='SelectV2';var Selu='Selu';var SpaceToBatchND='SpaceToBatchND';var SplitV='SplitV';var SquaredDifference='SquaredDifference';var Square='Square';var Sub='Sub';var Tile='Tile';var Transpose='Transpose';/**\r\n * TensorFlow.js-only kernels\r\n */var FromPixels='FromPixels';/***/},/* 7 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"b\",function(){return(/* binding */tensor_TensorBuffer);});__webpack_require__.d(__webpack_exports__,\"f\",function(){return(/* binding */setTensorTracker);});__webpack_require__.d(__webpack_exports__,\"e\",function(){return(/* binding */setOpHandler);});__webpack_require__.d(__webpack_exports__,\"d\",function(){return(/* binding */setDeprecationWarningFn);});__webpack_require__.d(__webpack_exports__,\"a\",function(){return(/* binding */tensor_Tensor);});__webpack_require__.d(__webpack_exports__,\"c\",function(){return(/* binding */tensor_Variable);});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/util.js\nvar util=__webpack_require__(1);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Maximum number of values before we decide to show ellipsis.\nvar FORMAT_LIMIT_NUM_VALS=20;// Number of first and last values to show when displaying a, b,...,y, z.\nvar FORMAT_NUM_FIRST_LAST_VALS=3;// Number of significant digits to show.\nvar FORMAT_NUM_SIG_DIGITS=7;function tensorToString(vals,shape,dtype,verbose){var strides=Object(util[\"computeStrides\"])(shape);var padPerCol=computeMaxSizePerColumn(vals,shape,dtype,strides);var rank=shape.length;var valsLines=subTensorToString(vals,shape,dtype,strides,padPerCol);var lines=['Tensor'];if(verbose){lines.push(\"  dtype: \".concat(dtype));lines.push(\"  rank: \".concat(rank));lines.push(\"  shape: [\".concat(shape,\"]\"));lines.push(\"  values:\");}lines.push(valsLines.map(function(l){return'    '+l;}).join('\\n'));return lines.join('\\n');}function computeMaxSizePerColumn(vals,shape,dtype,strides){var n=Object(util[\"sizeFromShape\"])(shape);var numCols=strides[strides.length-1];var padPerCol=new Array(numCols).fill(0);var rank=shape.length;var valuesOrTuples=dtype==='complex64'?createComplexTuples(vals):vals;if(rank>1){for(var row=0;row<n/numCols;row++){var offset=row*numCols;for(var j=0;j<numCols;j++){padPerCol[j]=Math.max(padPerCol[j],valToString(valuesOrTuples[offset+j],0,dtype).length);}}}return padPerCol;}function valToString(val,pad,dtype){var valStr;if(Array.isArray(val)){valStr=\"\".concat(parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS)),\" + \")+\"\".concat(parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS)),\"j\");}else if(Object(util[\"isString\"])(val)){valStr=\"'\".concat(val,\"'\");}else if(dtype==='bool'){valStr=boolNumToString(val);}else{valStr=parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();}return Object(util[\"rightPad\"])(valStr,pad);}function boolNumToString(v){return v===0?'false':'true';}function subTensorToString(vals,shape,dtype,strides,padPerCol){var isLast=arguments.length>5&&arguments[5]!==undefined?arguments[5]:true;var storagePerElement=dtype==='complex64'?2:1;var size=shape[0];var rank=shape.length;if(rank===0){if(dtype==='complex64'){var complexTuple=createComplexTuples(vals);return[valToString(complexTuple[0],0,dtype)];}if(dtype==='bool'){return[boolNumToString(vals[0])];}return[vals[0].toString()];}if(rank===1){if(size>FORMAT_LIMIT_NUM_VALS){var firstValsSize=FORMAT_NUM_FIRST_LAST_VALS*storagePerElement;var firstVals=Array.from(vals.slice(0,firstValsSize));var lastVals=Array.from(vals.slice((size-FORMAT_NUM_FIRST_LAST_VALS)*storagePerElement,size*storagePerElement));if(dtype==='complex64'){firstVals=createComplexTuples(firstVals);lastVals=createComplexTuples(lastVals);}return['['+firstVals.map(function(x,i){return valToString(x,padPerCol[i],dtype);}).join(', ')+', ..., '+lastVals.map(function(x,i){return valToString(x,padPerCol[size-FORMAT_NUM_FIRST_LAST_VALS+i],dtype);}).join(', ')+']'];}var displayVals=dtype==='complex64'?createComplexTuples(vals):Array.from(vals);return['['+displayVals.map(function(x,i){return valToString(x,padPerCol[i],dtype);}).join(', ')+']'];}// The array is rank 2 or more.\nvar subshape=shape.slice(1);var substrides=strides.slice(1);var stride=strides[0]*storagePerElement;var lines=[];if(size>FORMAT_LIMIT_NUM_VALS){for(var i=0;i<FORMAT_NUM_FIRST_LAST_VALS;i++){var start=i*stride;var end=start+stride;lines.push.apply(lines,_toConsumableArray2(subTensorToString(vals.slice(start,end),subshape,dtype,substrides,padPerCol,false/* isLast */)));}lines.push('...');for(var _i25=size-FORMAT_NUM_FIRST_LAST_VALS;_i25<size;_i25++){var _start=_i25*stride;var _end=_start+stride;lines.push.apply(lines,_toConsumableArray2(subTensorToString(vals.slice(_start,_end),subshape,dtype,substrides,padPerCol,_i25===size-1/* isLast */)));}}else{for(var _i26=0;_i26<size;_i26++){var _start2=_i26*stride;var _end2=_start2+stride;lines.push.apply(lines,_toConsumableArray2(subTensorToString(vals.slice(_start2,_end2),subshape,dtype,substrides,padPerCol,_i26===size-1/* isLast */)));}}var sep=rank===2?',':'';lines[0]='['+lines[0]+sep;for(var _i27=1;_i27<lines.length-1;_i27++){lines[_i27]=' '+lines[_i27]+sep;}var newLineSep=',\\n';for(var _i28=2;_i28<rank;_i28++){newLineSep+='\\n';}lines[lines.length-1]=' '+lines[lines.length-1]+']'+(isLast?'':newLineSep);return lines;}function createComplexTuples(vals){var complexTuples=[];for(var i=0;i<vals.length;i+=2){complexTuples.push([vals[i],vals[i+1]]);}return complexTuples;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-core/dist/tensor.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */var tensor_TensorBuffer=/*#__PURE__*/function(){function tensor_TensorBuffer(shape,dtype,values){var _this33=this;_classCallCheck2(this,tensor_TensorBuffer);this.dtype=dtype;this.shape=shape.slice();this.size=util[\"sizeFromShape\"](shape);if(values!=null){var n=values.length;util[\"assert\"](n===this.size,function(){return\"Length of values '\".concat(n,\"' does not match the size \")+\"inferred by the shape '\".concat(_this33.size,\"'.\");});}if(dtype==='complex64'){throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create \"+\"a TensorBuffer for the real and imaginary parts separately and \"+\"call tf.complex(real, imag).\");}this.values=values||util[\"getArrayFromDType\"](dtype,this.size);this.strides=Object(util[\"computeStrides\"])(shape);}/**\r\n     * Sets a value in the buffer at a given location.\r\n     *\r\n     * @param value The value to set.\r\n     * @param locs  The location indices.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */_createClass(tensor_TensorBuffer,[{key:\"set\",value:function set(value){var _this34=this;for(var _len3=arguments.length,locs=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){locs[_key3-1]=arguments[_key3];}if(locs.length===0){locs=[0];}util[\"assert\"](locs.length===this.rank,function(){return\"The number of provided coordinates (\".concat(locs.length,\") must \")+\"match the rank (\".concat(_this34.rank,\")\");});var index=this.locToIndex(locs);this.values[index]=value;}/**\r\n     * Returns the value in the buffer at the provided location.\r\n     *\r\n     * @param locs The location indices.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */},{key:\"get\",value:function get(){for(var _len4=arguments.length,locs=new Array(_len4),_key4=0;_key4<_len4;_key4++){locs[_key4]=arguments[_key4];}if(locs.length===0){locs=[0];}var i=0;for(var _i29=0,_locs=locs;_i29<_locs.length;_i29++){var loc=_locs[_i29];if(loc<0||loc>=this.shape[i]){var msg=\"Requested out of range element at \".concat(locs,\". \")+\"  Buffer shape=\".concat(this.shape);throw new Error(msg);}i++;}var index=locs[locs.length-1];for(var _i30=0;_i30<locs.length-1;++_i30){index+=this.strides[_i30]*locs[_i30];}return this.values[index];}},{key:\"locToIndex\",value:function locToIndex(locs){if(this.rank===0){return 0;}else if(this.rank===1){return locs[0];}var index=locs[locs.length-1];for(var i=0;i<locs.length-1;++i){index+=this.strides[i]*locs[i];}return index;}},{key:\"indexToLoc\",value:function indexToLoc(index){if(this.rank===0){return[];}else if(this.rank===1){return[index];}var locs=new Array(this.shape.length);for(var i=0;i<locs.length-1;++i){locs[i]=Math.floor(index/this.strides[i]);index-=locs[i]*this.strides[i];}locs[locs.length-1]=index;return locs;}},{key:\"rank\",get:function get(){return this.shape.length;}/**\r\n     * Creates an immutable `tf.Tensor` object from the buffer.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */},{key:\"toTensor\",value:function toTensor(){return trackerFn().makeTensor(this.values,this.shape,this.dtype);}}]);return tensor_TensorBuffer;}();// For tracking tensor creation and disposal.\nvar trackerFn=null;// Used by chaining methods to call into ops.\nvar opHandler=null;// Used to warn about deprecated methods.\nvar deprecationWarningFn=null;// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */function setTensorTracker(fn){trackerFn=fn;}/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */function setOpHandler(handler){opHandler=handler;}/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */function setDeprecationWarningFn(fn){deprecationWarningFn=fn;}/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */var tensor_Tensor=/*#__PURE__*/function(){function tensor_Tensor(shape,dtype,dataId,id){_classCallCheck2(this,tensor_Tensor);/** Whether this tensor has been globally kept. */this.kept=false;this.isDisposedInternal=false;this.shape=shape.slice();this.dtype=dtype||'float32';this.size=util[\"sizeFromShape\"](shape);this.strides=Object(util[\"computeStrides\"])(shape);this.dataId=dataId;this.id=id;this.rankType=this.rank<5?this.rank.toString():'higher';}/** Flatten a Tensor to a 1D array. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */_createClass(tensor_Tensor,[{key:\"flatten\",value:function flatten(){this.throwIfDisposed();return this.as1D();}/** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"asScalar\",value:function asScalar(){this.throwIfDisposed();util[\"assert\"](this.size===1,function(){return'The array must have only 1 element.';});return this.reshape([]);}/** Converts a `tf.Tensor` to a `tf.Tensor1D`. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"as1D\",value:function as1D(){this.throwIfDisposed();return this.reshape([this.size]);}/**\r\n     * Converts a `tf.Tensor` to a `tf.Tensor2D`.\r\n     *\r\n     * @param rows Number of rows in `tf.Tensor2D`.\r\n     * @param columns Number of columns in `tf.Tensor2D`.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"as2D\",value:function as2D(rows,columns){this.throwIfDisposed();return this.reshape([rows,columns]);}/**\r\n     * Converts a `tf.Tensor` to a `tf.Tensor3D`.\r\n     *\r\n     * @param rows Number of rows in `tf.Tensor3D`.\r\n     * @param columns Number of columns in `tf.Tensor3D`.\r\n     * @param depth Depth of `tf.Tensor3D`.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"as3D\",value:function as3D(rows,columns,depth){this.throwIfDisposed();return this.reshape([rows,columns,depth]);}/**\r\n     * Converts a `tf.Tensor` to a `tf.Tensor4D`.\r\n     *\r\n     * @param rows Number of rows in `tf.Tensor4D`.\r\n     * @param columns Number of columns in `tf.Tensor4D`.\r\n     * @param depth Depth of `tf.Tensor4D`.\r\n     * @param depth2 4th dimension of `tf.Tensor4D`.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"as4D\",value:function as4D(rows,columns,depth,depth2){this.throwIfDisposed();return this.reshape([rows,columns,depth,depth2]);}/**\r\n     * Converts a `tf.Tensor` to a `tf.Tensor5D`.\r\n     *\r\n     * @param rows Number of rows in `tf.Tensor5D`.\r\n     * @param columns Number of columns in `tf.Tensor5D`.\r\n     * @param depth Depth of `tf.Tensor5D`.\r\n     * @param depth2 4th dimension of `tf.Tensor5D`.\r\n     * @param depth3 5th dimension of 'tf.Tensor5D'\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"as5D\",value:function as5D(rows,columns,depth,depth2,depth3){this.throwIfDisposed();return this.reshape([rows,columns,depth,depth2,depth3]);}/**\r\n     * Casts a `tf.Tensor` to a specified dtype.\r\n     *\r\n     * @param dtype Data-type to cast the tensor to.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"asType\",value:function asType(dtype){this.throwIfDisposed();return opHandler.cast(this,dtype);}},{key:\"rank\",get:function get(){return this.shape.length;}/**\r\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"buffer\",value:function(){var _buffer=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee54(){var vals;return regeneratorRuntime.wrap(function _callee54$(_context54){while(1){switch(_context54.prev=_context54.next){case 0:_context54.next=2;return this.data();case 2:vals=_context54.sent;return _context54.abrupt(\"return\",opHandler.buffer(this.shape,this.dtype,vals));case 4:case\"end\":return _context54.stop();}}},_callee54,this);}));function buffer(){return _buffer.apply(this,arguments);}return buffer;}()/** Returns a `tf.TensorBuffer` that holds the underlying data. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"bufferSync\",value:function bufferSync(){return opHandler.buffer(this.shape,this.dtype,this.dataSync());}/**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * asynchronously.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"array\",value:function(){var _array=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee55(){var vals;return regeneratorRuntime.wrap(function _callee55$(_context55){while(1){switch(_context55.prev=_context55.next){case 0:_context55.next=2;return this.data();case 2:vals=_context55.sent;return _context55.abrupt(\"return\",Object(util[\"toNestedArray\"])(this.shape,vals));case 4:case\"end\":return _context55.stop();}}},_callee55,this);}));function array(){return _array.apply(this,arguments);}return array;}()/**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * synchronously.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"arraySync\",value:function arraySync(){return Object(util[\"toNestedArray\"])(this.shape,this.dataSync());}/**\r\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n     * promise of `TypedArray` that resolves when the computation has finished.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"data\",value:function(){var _data=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee56(){var data,bytes;return regeneratorRuntime.wrap(function _callee56$(_context56){while(1){switch(_context56.prev=_context56.next){case 0:this.throwIfDisposed();data=trackerFn().read(this.dataId);if(!(this.dtype==='string')){_context56.next=13;break;}_context56.next=5;return data;case 5:bytes=_context56.sent;_context56.prev=6;return _context56.abrupt(\"return\",bytes.map(function(b){return util[\"decodeString\"](b);}));case 10:_context56.prev=10;_context56.t0=_context56[\"catch\"](6);throw new Error('Failed to decode the string bytes into utf-8. '+'To get the original bytes, call tensor.bytes().');case 13:return _context56.abrupt(\"return\",data);case 14:case\"end\":return _context56.stop();}}},_callee56,this,[[6,10]]);}));function data(){return _data.apply(this,arguments);}return data;}()/**\r\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n     * UI thread until the values are ready, which can cause performance issues.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"dataSync\",value:function dataSync(){this.throwIfDisposed();var data=trackerFn().readSync(this.dataId);if(this.dtype==='string'){try{return data.map(function(b){return util[\"decodeString\"](b);});}catch(_a){throw new Error('Failed to decode the string bytes into utf-8. '+'To get the original bytes, call tensor.bytes().');}}return data;}/** Returns the underlying bytes of the tensor's data. */},{key:\"bytes\",value:function(){var _bytes=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee57(){var data;return regeneratorRuntime.wrap(function _callee57$(_context57){while(1){switch(_context57.prev=_context57.next){case 0:this.throwIfDisposed();_context57.next=3;return trackerFn().read(this.dataId);case 3:data=_context57.sent;if(!(this.dtype==='string')){_context57.next=8;break;}return _context57.abrupt(\"return\",data);case 8:return _context57.abrupt(\"return\",new Uint8Array(data.buffer));case 9:case\"end\":return _context57.stop();}}},_callee57,this);}));function bytes(){return _bytes.apply(this,arguments);}return bytes;}()/**\r\n     * Disposes `tf.Tensor` from memory.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"dispose\",value:function dispose(){if(this.isDisposed){return;}trackerFn().disposeTensor(this);this.isDisposedInternal=true;}},{key:\"isDisposed\",get:function get(){return this.isDisposedInternal;}},{key:\"throwIfDisposed\",value:function throwIfDisposed(){if(this.isDisposed){throw new Error(\"Tensor is disposed.\");}}/** Casts the array to type `float32` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"toFloat\",value:function toFloat(){return this.asType('float32');}/** Casts the array to type `int32` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"toInt\",value:function toInt(){return this.asType('int32');}/** Casts the array to type `bool` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"toBool\",value:function toBool(){return this.asType('bool');}/**\r\n     * Prints the `tf.Tensor`. See `tf.print` for details.\r\n     *\r\n     * @param verbose Whether to print verbose information about the tensor,\r\n     *    including dtype and size.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"print\",value:function print(){var verbose=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return opHandler.print(this,verbose);}/**\r\n     * Reshapes the tensor into the provided shape.\r\n     * See `tf.reshape` for more details.\r\n     *\r\n     * @param newShape An array of integers defining the output tensor shape.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"reshape\",value:function reshape(newShape){this.throwIfDisposed();return opHandler.reshape(this,newShape);}/**\r\n     * Reshapes the tensor into the shape of the provided tensor.\r\n     *\r\n     * @param x The tensor of required shape.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"reshapeAs\",value:function reshapeAs(x){this.throwIfDisposed();return this.reshape(x.shape);}/**\r\n     * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\r\n     * into the tensor's shape. See `tf.expandDims` for details.\r\n     *\r\n     * @param axis The dimension index at which to insert shape of 1. Defaults to\r\n     *     0 (the first dimension).\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"expandDims\",value:function expandDims(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return opHandler.expandDims(this,axis);}/**\r\n     * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\r\n     * See `tf.squeeze` for more details.\r\n     *\r\n     * @param axis A list of numbers. If specified, only squeezes the\r\n     *    dimensions listed. The dimension index starts at 0. It is an error to\r\n     *    squeeze a dimension that is not 1.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"squeeze\",value:function squeeze(axis){this.throwIfDisposed();return opHandler.squeeze(this,axis);}/** Returns a copy of the tensor. See `tf.clone` for details. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"clone\",value:function clone(){this.throwIfDisposed();return opHandler.clone(this);}/**\r\n     * Returns a human-readable description of the tensor. Useful for logging.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */},{key:\"toString\",value:function toString(){var verbose=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var vals=this.dataSync();return tensorToString(vals,this.shape,this.dtype,verbose);}// Below is chain API that is not exposed to docs to avoid repetition. To\n// expose a method, move it above this comment and add @doc and jsdoc.\n},{key:\"gather\",value:function gather(indices){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.throwIfDisposed();return opHandler.gather(this,indices,axis);}},{key:\"norm\",value:function norm(){var ord=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'euclidean';var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var keepDims=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;this.throwIfDisposed();return opHandler.norm(this,ord,axis,keepDims);}},{key:\"slice\",value:function slice(begin,size){this.throwIfDisposed();return opHandler.slice(this,begin,size);}},{key:\"reverse\",value:function reverse(axis){this.throwIfDisposed();return opHandler.reverse(this,axis);}},{key:\"stack\",value:function stack(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return opHandler.stack([this,x],axis);}},{key:\"unstack\",value:function unstack(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return opHandler.unstack(this,axis);}// Reduction ops.\n},{key:\"all\",value:function all(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.all(this,axis,keepDims);}},{key:\"any\",value:function any(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.any(this,axis,keepDims);}},{key:\"logSumExp\",value:function logSumExp(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.logSumExp(this,axis,keepDims);}},{key:\"sum\",value:function sum(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.sum(this,axis,keepDims);}},{key:\"prod\",value:function prod(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.prod(this,axis,keepDims);}},{key:\"mean\",value:function mean(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.mean(this,axis,keepDims);}},{key:\"min\",value:function min(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var keepDims=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.min(this,axis,keepDims);}},{key:\"argMin\",value:function argMin(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.throwIfDisposed();return opHandler.argMin(this,axis);}},{key:\"argMax\",value:function argMax(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.throwIfDisposed();return opHandler.argMax(this,axis);}// Transformations\n},{key:\"cast\",value:function cast(dtype){this.throwIfDisposed();return opHandler.cast(this,dtype);}// Binary ops.\n/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"addStrict\",value:function addStrict(x){this.throwIfDisposed();return opHandler.addStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"subStrict\",value:function subStrict(x){this.throwIfDisposed();return opHandler.subStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"powStrict\",value:function powStrict(exp){this.throwIfDisposed();return opHandler.powStrict(this,exp);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"mulStrict\",value:function mulStrict(x){this.throwIfDisposed();return opHandler.mulStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"divStrict\",value:function divStrict(x){this.throwIfDisposed();return opHandler.divStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"minimumStrict\",value:function minimumStrict(x){this.throwIfDisposed();return opHandler.minimumStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"maximumStrict\",value:function maximumStrict(x){this.throwIfDisposed();return opHandler.maximumStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"modStrict\",value:function modStrict(x){this.throwIfDisposed();return opHandler.modStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"squaredDifferenceStrict\",value:function squaredDifferenceStrict(x){this.throwIfDisposed();return opHandler.squaredDifferenceStrict(this,x);}// Compare ops.\n/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"notEqualStrict\",value:function notEqualStrict(x){this.throwIfDisposed();return opHandler.notEqualStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"lessStrict\",value:function lessStrict(x){this.throwIfDisposed();return opHandler.lessStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"equalStrict\",value:function equalStrict(x){this.throwIfDisposed();return opHandler.equalStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"lessEqualStrict\",value:function lessEqualStrict(x){this.throwIfDisposed();return opHandler.lessEqualStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"greaterStrict\",value:function greaterStrict(x){this.throwIfDisposed();return opHandler.greaterStrict(this,x);}/**\r\n     * @deprecated strict variants of ops have been deprecated\r\n     */},{key:\"greaterEqualStrict\",value:function greaterEqualStrict(x){this.throwIfDisposed();return opHandler.greaterEqualStrict(this,x);}// Compare ops.\n},{key:\"logicalAnd\",value:function logicalAnd(x){this.throwIfDisposed();return opHandler.logicalAnd(this,x);}},{key:\"logicalOr\",value:function logicalOr(x){this.throwIfDisposed();return opHandler.logicalOr(this,x);}},{key:\"logicalNot\",value:function logicalNot(){this.throwIfDisposed();return opHandler.logicalNot(this);}},{key:\"logicalXor\",value:function logicalXor(x){this.throwIfDisposed();return opHandler.logicalXor(this,x);}},{key:\"where\",value:function where(condition,x){this.throwIfDisposed();return opHandler.where(condition,this,x);}// Unary ops.\n},{key:\"neg\",value:function neg(){this.throwIfDisposed();return opHandler.neg(this);}},{key:\"ceil\",value:function ceil(){this.throwIfDisposed();return opHandler.ceil(this);}},{key:\"floor\",value:function floor(){this.throwIfDisposed();return opHandler.floor(this);}},{key:\"sign\",value:function sign(){this.throwIfDisposed();return opHandler.sign(this);}},{key:\"isNaN\",value:function isNaN(){this.throwIfDisposed();return opHandler.isNaN(this);}},{key:\"isInf\",value:function isInf(){this.throwIfDisposed();return opHandler.isInf(this);}},{key:\"isFinite\",value:function isFinite(){this.throwIfDisposed();return opHandler.isFinite(this);}},{key:\"exp\",value:function exp(){this.throwIfDisposed();return opHandler.exp(this);}},{key:\"expm1\",value:function expm1(){this.throwIfDisposed();return opHandler.expm1(this);}},{key:\"log\",value:function log(){this.throwIfDisposed();return opHandler.log(this);}},{key:\"log1p\",value:function log1p(){this.throwIfDisposed();return opHandler.log1p(this);}},{key:\"sqrt\",value:function sqrt(){this.throwIfDisposed();return opHandler.sqrt(this);}},{key:\"rsqrt\",value:function rsqrt(){this.throwIfDisposed();return opHandler.rsqrt(this);}},{key:\"square\",value:function square(){this.throwIfDisposed();return opHandler.square(this);}},{key:\"reciprocal\",value:function reciprocal(){this.throwIfDisposed();return opHandler.reciprocal(this);}},{key:\"abs\",value:function abs(){this.throwIfDisposed();return opHandler.abs(this);}},{key:\"clipByValue\",value:function clipByValue(min,max){this.throwIfDisposed();return opHandler.clipByValue(this,min,max);}},{key:\"sigmoid\",value:function sigmoid(){this.throwIfDisposed();return opHandler.sigmoid(this);}},{key:\"logSigmoid\",value:function logSigmoid(){this.throwIfDisposed();return opHandler.logSigmoid(this);}},{key:\"softplus\",value:function softplus(){this.throwIfDisposed();return opHandler.softplus(this);}},{key:\"zerosLike\",value:function zerosLike(){this.throwIfDisposed();return opHandler.zerosLike(this);}},{key:\"onesLike\",value:function onesLike(){this.throwIfDisposed();return opHandler.onesLike(this);}},{key:\"sin\",value:function sin(){this.throwIfDisposed();return opHandler.sin(this);}},{key:\"cos\",value:function cos(){this.throwIfDisposed();return opHandler.cos(this);}},{key:\"tan\",value:function tan(){this.throwIfDisposed();return opHandler.tan(this);}},{key:\"asin\",value:function asin(){this.throwIfDisposed();return opHandler.asin(this);}},{key:\"acos\",value:function acos(){this.throwIfDisposed();return opHandler.acos(this);}},{key:\"atan\",value:function atan(){this.throwIfDisposed();return opHandler.atan(this);}},{key:\"sinh\",value:function sinh(){this.throwIfDisposed();return opHandler.sinh(this);}},{key:\"cosh\",value:function cosh(){this.throwIfDisposed();return opHandler.cosh(this);}},{key:\"tanh\",value:function tanh(){this.throwIfDisposed();return opHandler.tanh(this);}},{key:\"asinh\",value:function asinh(){this.throwIfDisposed();return opHandler.asinh(this);}},{key:\"acosh\",value:function acosh(){this.throwIfDisposed();return opHandler.acosh(this);}},{key:\"atanh\",value:function atanh(){this.throwIfDisposed();return opHandler.atanh(this);}},{key:\"erf\",value:function erf(){this.throwIfDisposed();return opHandler.erf(this);}},{key:\"round\",value:function round(){this.throwIfDisposed();return opHandler.round(this);}},{key:\"step\",value:function step(){var alpha=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.0;this.throwIfDisposed();return opHandler.step(this,alpha);}},{key:\"softmax\",value:function softmax(){var dim=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-1;this.throwIfDisposed();return opHandler.softmax(this,dim);}},{key:\"logSoftmax\",value:function logSoftmax(){var axis=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-1;this.throwIfDisposed();return opHandler.logSoftmax(this,axis);}// Image ops.\n},{key:\"resizeBilinear\",value:function resizeBilinear(newShape2D){var alignCorners=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.image.resizeBilinear(this,newShape2D,alignCorners);}},{key:\"resizeNearestNeighbor\",value:function resizeNearestNeighbor(newShape2D){var alignCorners=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.throwIfDisposed();return opHandler.image.resizeNearestNeighbor(this,newShape2D,alignCorners);}// Pooling.\n},{key:\"variable\",value:function variable(){var trainable=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var name=arguments.length>1?arguments[1]:undefined;var dtype=arguments.length>2?arguments[2]:undefined;this.throwIfDisposed();return trackerFn().makeVariable(this,trainable,name,dtype);}},{key:\"unsortedSegmentSum\",value:function unsortedSegmentSum(segmentIds,numSegments){this.throwIfDisposed();return opHandler.unsortedSegmentSum(this,segmentIds,numSegments);}},{key:\"topk\",value:function topk(){var k=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var sorted=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.throwIfDisposed();return opHandler.topk(this,k,sorted);}},{key:\"stridedSlice\",value:function stridedSlice(begin,end,strides){var beginMask=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var endMask=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var ellipsisMask=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;var newAxisMask=arguments.length>6&&arguments[6]!==undefined?arguments[6]:0;var shrinkAxisMask=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;this.throwIfDisposed();return opHandler.stridedSlice(this,begin,end,strides,beginMask,endMask,ellipsisMask,newAxisMask,shrinkAxisMask);}},{key:\"fft\",value:function fft(){this.throwIfDisposed();return opHandler.spectral.fft(this);}},{key:\"ifft\",value:function ifft(){this.throwIfDisposed();return opHandler.spectral.ifft(this);}},{key:\"rfft\",value:function rfft(){this.throwIfDisposed();return opHandler.spectral.rfft(this);}},{key:\"irfft\",value:function irfft(){this.throwIfDisposed();return opHandler.spectral.irfft(this);}}]);return tensor_Tensor;}();Object.defineProperty(tensor_Tensor,Symbol.hasInstance,{value:function value(instance){return!!instance&&instance.dataId!=null&&instance.shape!=null&&instance.dtype!=null;}});/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */var tensor_Variable=/*#__PURE__*/function(_tensor_Tensor){_inherits(tensor_Variable,_tensor_Tensor);var _super9=_createSuper(tensor_Variable);function tensor_Variable(initialValue,trainable,name,tensorId){var _this35;_classCallCheck2(this,tensor_Variable);_this35=_super9.call(this,initialValue.shape,initialValue.dtype,initialValue.dataId,tensorId);_this35.trainable=trainable;_this35.name=name;return _this35;}/**\r\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n     * the same shape and dtype as the old `tf.Tensor`.\r\n     *\r\n     * @param newValue New tensor to be assigned to this variable.\r\n     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */_createClass(tensor_Variable,[{key:\"assign\",value:function assign(newValue){if(newValue.dtype!==this.dtype){throw new Error(\"dtype of the new value (\".concat(newValue.dtype,\") and \")+\"previous value (\".concat(this.dtype,\") must match\"));}if(!util[\"arraysEqual\"](newValue.shape,this.shape)){throw new Error(\"shape of the new value (\".concat(newValue.shape,\") and \")+\"previous value (\".concat(this.shape,\") must match\"));}trackerFn().disposeTensor(this);this.dataId=newValue.dataId;trackerFn().incRef(this,null/* backend */);}},{key:\"dispose\",value:function dispose(){trackerFn().disposeVariable(this);this.isDisposedInternal=true;}}]);return tensor_Variable;}(tensor_Tensor);Object.defineProperty(tensor_Variable,Symbol.hasInstance,{value:function value(instance){return instance instanceof tensor_Tensor&&instance.assign!=null&&instance.assign instanceof Function;}});/***/},/* 8 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return linspace;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return ones;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return range;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return scalar;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return tensor;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"g\",function(){return tensor1d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"h\",function(){return tensor2d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"i\",function(){return tensor3d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"j\",function(){return tensor4d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"k\",function(){return tensor5d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"l\",function(){return tensor6d;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"m\",function(){return variable;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"n\",function(){return zeros;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return onesLike;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"o\",function(){return zerosLike;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/* harmony import */var _environment__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10);/* harmony import */var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3);/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1);/* harmony import */var _complex__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(18);/* harmony import */var _imag__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(25);/* harmony import */var _operation__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(4);/* harmony import */var _real__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(22);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * ```js\r\n * // Pass an array of values to create a vector.\r\n * tf.tensor([1, 2, 3, 4]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a nested array of values to make a matrix or a higher\r\n * // dimensional tensor.\r\n * tf.tensor([[1, 2], [3, 4]]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a flat array and specify a shape yourself.\r\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`. If the values are strings,\r\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor(values,shape,dtype){var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);return makeTensor(values,shape,inferredShape,dtype);}/** This is shared code across all tensor creation methods. */function makeTensor(values,shape,inferredShape,dtype){if(dtype==null){dtype=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"inferDtype\"])(values);}if(dtype==='complex64'){throw new Error(\"Cannot construct a complex64 tensor directly. \"+\"Please use tf.complex(real, imag).\");}if(!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(values)&&!Array.isArray(values)&&typeof values!=='number'&&typeof values!=='boolean'&&typeof values!=='string'){throw new Error('values passed to tensor(values) must be a number/boolean/string or '+'an array of numbers/booleans/strings, or a TypedArray');}if(shape!=null){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNegativeIntegerDimensions\"])(shape);var providedSize=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"sizeFromShape\"])(shape);var inferredSize=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"sizeFromShape\"])(inferredShape);Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assert\"])(providedSize===inferredSize,function(){return\"Based on the provided shape, [\".concat(shape,\"], the tensor should have \")+\"\".concat(providedSize,\" values but has \").concat(inferredSize);});for(var i=0;i<inferredShape.length;++i){var inferred=inferredShape[i];var flatDimsDontMatch=i===inferredShape.length-1?inferred!==Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"sizeFromShape\"])(shape.slice(i)):true;Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assert\"])(inferredShape[i]===shape[i]||!flatDimsDontMatch,function(){return\"Error creating a new Tensor. Inferred shape \"+\"(\".concat(inferredShape,\") does not match the provided \")+\"shape (\".concat(shape,\"). \");});}}if(!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(values)&&!Array.isArray(values)){values=[values];}shape=shape||inferredShape;values=dtype!=='string'?Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"toTypedArray\"])(values,dtype,Object(_environment__WEBPACK_IMPORTED_MODULE_1__[/* env */\"c\"])().getBool('DEBUG')):Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"flatten\"])(values,[],true);return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].makeTensor(values,shape,dtype);}/**\r\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.scalar` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.scalar(3.14).print();\r\n * ```\r\n *\r\n * @param value The value of the scalar.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function scalar(value,dtype){if((Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(value)&&dtype!=='string'||Array.isArray(value))&&dtype!=='complex64'){throw new Error('Error creating a new Scalar: value must be a primitive '+'(number|boolean|string)');}if(dtype==='string'&&Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isTypedArray\"])(value)&&!(value instanceof Uint8Array)){throw new Error('When making a scalar from encoded string, '+'the value must be `Uint8Array`.');}var shape=[];var inferredShape=[];return makeTensor(value,shape,inferredShape,dtype);}/**\r\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor1d` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.tensor1d([1, 2, 3]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be array of numbers,\r\n *     or a `TypedArray`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor1d(values,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==1){throw new Error('tensor1d() requires values to be a flat/TypedArray');}var shape=null;return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor2d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor2d([[1, 2], [3, 4]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. If not provided, it is inferred from\r\n *     `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor2d(values,shape,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);if(shape!=null&&shape.length!==2){throw new Error('tensor2d() requires shape to have two numbers');}var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==2&&inferredShape.length!==1){throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');}if(inferredShape.length===1&&shape==null){throw new Error('tensor2d() requires shape to be provided when `values` '+'are a flat/TypedArray');}return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor3d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. If not provided,  it is inferred from\r\n *     `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor3d(values,shape,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);if(shape!=null&&shape.length!==3){throw new Error('tensor3d() requires shape to have three numbers');}var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==3&&inferredShape.length!==1){throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');}if(inferredShape.length===1&&shape==null){throw new Error('tensor3d() requires shape to be provided when `values` '+'are a flat array');}return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor4d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor4d(values,shape,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);if(shape!=null&&shape.length!==4){throw new Error('tensor4d() requires shape to have four numbers');}var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==4&&inferredShape.length!==1){throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');}if(inferredShape.length===1&&shape==null){throw new Error('tensor4d() requires shape to be provided when `values` '+'are a flat array');}return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor5d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor5d(values,shape,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);if(shape!=null&&shape.length!==5){throw new Error('tensor5d() requires shape to have five numbers');}var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==5&&inferredShape.length!==1){throw new Error('tensor5d() requires values to be '+'number[][][][][] or flat/TypedArray');}if(inferredShape.length===1&&shape==null){throw new Error('tensor5d() requires shape to be provided when `values` '+'are a flat array');}return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor6d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function tensor6d(values,shape,dtype){Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"assertNonNull\"])(values);if(shape!=null&&shape.length!==6){throw new Error('tensor6d() requires shape to have six numbers');}var inferredShape=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* inferShape */\"c\"])(values,dtype);if(inferredShape.length!==6&&inferredShape.length!==1){throw new Error('tensor6d() requires values to be number[][][][][][] or '+'flat/TypedArray');}if(inferredShape.length===1&&shape==null){throw new Error('tensor6d() requires shape to be provided when `values` '+'are a flat array');}shape=shape||inferredShape;return makeTensor(values,shape,inferredShape,dtype);}/**\r\n * Creates a new variable with the provided initial value.\r\n * ```js\r\n * const x = tf.variable(tf.tensor([1, 2, 3]));\r\n * x.assign(tf.tensor([4, 5, 6]));\r\n *\r\n * x.print();\r\n * ```\r\n *\r\n * @param initialValue Initial value for the tensor.\r\n * @param trainable If true, optimizers are allowed to update it.\r\n * @param name Name of the variable. Defaults to a unique id.\r\n * @param dtype If set, initialValue will be converted to the given type.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function variable(initialValue){var trainable=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var name=arguments.length>2?arguments[2]:undefined;var dtype=arguments.length>3?arguments[3]:undefined;return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].makeVariable(initialValue,trainable,name,dtype);}/**\r\n * Creates a `tf.Tensor` with all elements set to 1.\r\n *\r\n * ```js\r\n * tf.ones([2, 2]).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param dtype The type of an element in the resulting tensor. Defaults to\r\n *     'float'.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function ones(shape){var dtype=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'float32';if(dtype==='complex64'){var real=ones(shape,'float32');var imag=zeros(shape,'float32');return Object(_complex__WEBPACK_IMPORTED_MODULE_4__[/* complex */\"a\"])(real,imag);}var values=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"makeOnesTypedArray\"])(Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"sizeFromShape\"])(shape),dtype);return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].makeTensor(values,shape,dtype);}/**\r\n * Creates a `tf.Tensor` with all elements set to 0.\r\n *\r\n * ```js\r\n * tf.zeros([2, 2]).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param dtype The type of an element in the resulting tensor. Can\r\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function zeros(shape){var dtype=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'float32';if(dtype==='complex64'){var real=zeros(shape,'float32');var imag=zeros(shape,'float32');return Object(_complex__WEBPACK_IMPORTED_MODULE_4__[/* complex */\"a\"])(real,imag);}var values=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"makeZerosTypedArray\"])(Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"sizeFromShape\"])(shape),dtype);return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].makeTensor(values,shape,dtype);}/**\r\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\r\n * given tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2]);\r\n * tf.onesLike(x).print();\r\n * ```\r\n * @param x A tensor.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function onesLike_(x){var $x=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(x,'x','onesLike');if($x.dtype==='complex64'){var r=onesLike(Object(_real__WEBPACK_IMPORTED_MODULE_7__[/* real */\"a\"])($x));var i=zerosLike(Object(_imag__WEBPACK_IMPORTED_MODULE_5__[/* imag */\"a\"])($x));return Object(_complex__WEBPACK_IMPORTED_MODULE_4__[/* complex */\"a\"])(r,i);}var der=function der(dy,saved){return{x:function x(){return zerosLike(dy);}};};return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(function(backend){return backend.onesLike($x);},{x:$x},der,'OnesLike');}/**\r\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\r\n * given tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2]);\r\n * tf.zerosLike(x).print();\r\n * ```\r\n *\r\n * @param x The tensor of required shape.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function zerosLike_(x){var $x=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(x,'x','zerosLike');var der=function der(dy,saved){return{x:function x(){return zerosLike(dy);}};};return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(function(backend){return backend.zerosLike($x);},{x:$x},der,'ZerosLike');}/**\r\n * Return an evenly spaced sequence of numbers over the given interval.\r\n *\r\n * ```js\r\n * tf.linspace(0, 9, 10).print();\r\n * ```\r\n * @param start The start value of the sequence.\r\n * @param stop The end value of the sequence.\r\n * @param num The number of values to generate.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function linspace(start,stop,num){if(num<=0){throw new Error('The number of values should be positive.');}return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(function(backend){return backend.linspace(start,stop,num);},{});}/**\r\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\r\n *\r\n * The tensor is a is half-open interval meaning it includes start, but\r\n * excludes stop. Decrementing ranges and negative step values are also\r\n * supported.\r\n *\r\n * ```js\r\n * tf.range(0, 9, 2).print();\r\n * ```\r\n *\r\n * @param start An integer start value\r\n * @param stop An integer stop value\r\n * @param step An integer increment (will default to 1 or -1)\r\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function range(start,stop){var step=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var dtype=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'float32';if(step===0){throw new Error('Cannot have a step of zero');}var sameStartStop=start===stop;var increasingRangeNegativeStep=start<stop&&step<0;var decreasingRangePositiveStep=stop<start&&step>1;if(sameStartStop||increasingRangeNegativeStep||decreasingRangePositiveStep){return zeros([0],dtype);}var numElements=Math.abs(Math.ceil((stop-start)/step));var values=Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"makeZerosTypedArray\"])(numElements,dtype);if(stop<start&&step===1){// Auto adjust the step's sign if it hasn't been set\n// (or was set to 1)\nstep=-1;}values[0]=start;for(var i=1;i<values.length;i++){values[i]=values[i-1]+step;}return tensor1d(values,dtype);}var onesLike=Object(_operation__WEBPACK_IMPORTED_MODULE_6__[/* op */\"a\"])({onesLike_:onesLike_});var zerosLike=Object(_operation__WEBPACK_IMPORTED_MODULE_6__[/* op */\"a\"])({zerosLike_:zerosLike_});/***/},/* 9 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return assertNotComplex;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function assertNotComplex(tensor,opName){if(!Array.isArray(tensor)){tensor=[tensor];}tensor.forEach(function(t){if(t!=null){_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].assert(t.dtype!=='complex64',function(){return\"\".concat(opName,\" does not support complex64 tensors in the CPU backend.\");});}});}/***/},/* 10 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return Environment;});/* unused harmony export getQueryParams */ /* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return env;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return ENV;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return setEnvironmentGlobal;});/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nvar TENSORFLOWJS_FLAGS_PREFIX='tfjsflags';/**\r\n * The environment contains evaluated flags as well as the registered platform.\r\n * This is always used as a global singleton and can be retrieved with\r\n * `tf.env()`.\r\n */ /** @doc {heading: 'Environment'} */var Environment=/*#__PURE__*/function(){// tslint:disable-next-line: no-any\nfunction Environment(global){_classCallCheck2(this,Environment);this.global=global;this.flags={};this.flagRegistry={};this.urlFlags={};this.populateURLFlags();}_createClass(Environment,[{key:\"setPlatform\",value:function setPlatform(platformName,platform){if(this.platform!=null){console.warn(\"Platform \".concat(this.platformName,\" has already been set. \")+\"Overwriting the platform with \".concat(platform,\".\"));}this.platformName=platformName;this.platform=platform;}},{key:\"registerFlag\",value:function registerFlag(flagName,evaluationFn,setHook){this.flagRegistry[flagName]={evaluationFn:evaluationFn,setHook:setHook};// Override the flag value from the URL. This has to happen here because the\n// environment is initialized before flags get registered.\nif(this.urlFlags[flagName]!=null){var flagValue=this.urlFlags[flagName];console.warn(\"Setting feature override from URL \".concat(flagName,\": \").concat(flagValue,\".\"));this.set(flagName,flagValue);}}},{key:\"getAsync\",value:function(){var _getAsync=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee58(flagName){return regeneratorRuntime.wrap(function _callee58$(_context58){while(1){switch(_context58.prev=_context58.next){case 0:if(!(flagName in this.flags)){_context58.next=2;break;}return _context58.abrupt(\"return\",this.flags[flagName]);case 2:_context58.next=4;return this.evaluateFlag(flagName);case 4:this.flags[flagName]=_context58.sent;return _context58.abrupt(\"return\",this.flags[flagName]);case 6:case\"end\":return _context58.stop();}}},_callee58,this);}));function getAsync(_x61){return _getAsync.apply(this,arguments);}return getAsync;}()},{key:\"get\",value:function get(flagName){if(flagName in this.flags){return this.flags[flagName];}var flagValue=this.evaluateFlag(flagName);if(flagValue instanceof Promise){throw new Error(\"Flag \".concat(flagName,\" cannot be synchronously evaluated. \")+\"Please use getAsync() instead.\");}this.flags[flagName]=flagValue;return this.flags[flagName];}},{key:\"getNumber\",value:function getNumber(flagName){return this.get(flagName);}},{key:\"getBool\",value:function getBool(flagName){return this.get(flagName);}},{key:\"getFlags\",value:function getFlags(){return this.flags;}// For backwards compatibility.\n},{key:\"features\",get:function get(){return this.flags;}},{key:\"set\",value:function set(flagName,value){if(this.flagRegistry[flagName]==null){throw new Error(\"Cannot set flag \".concat(flagName,\" as it has not been registered.\"));}this.flags[flagName]=value;if(this.flagRegistry[flagName].setHook!=null){this.flagRegistry[flagName].setHook(value);}}},{key:\"evaluateFlag\",value:function evaluateFlag(flagName){if(this.flagRegistry[flagName]==null){throw new Error(\"Cannot evaluate flag '\".concat(flagName,\"': no evaluation function found.\"));}return this.flagRegistry[flagName].evaluationFn();}},{key:\"setFlags\",value:function setFlags(flags){this.flags=Object.assign({},flags);}},{key:\"reset\",value:function reset(){this.flags={};this.urlFlags={};this.populateURLFlags();}},{key:\"populateURLFlags\",value:function populateURLFlags(){var _this36=this;if(typeof this.global==='undefined'||typeof this.global.location==='undefined'||typeof this.global.location.search==='undefined'){return;}var urlParams=getQueryParams(this.global.location.search);if(TENSORFLOWJS_FLAGS_PREFIX in urlParams){var keyValues=urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');keyValues.forEach(function(keyValue){var _keyValue$split=keyValue.split(':'),_keyValue$split2=_slicedToArray(_keyValue$split,2),key=_keyValue$split2[0],value=_keyValue$split2[1];_this36.urlFlags[key]=parseValue(key,value);});}}}]);return Environment;}();function getQueryParams(queryString){var params={};queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,function(s){for(var _len5=arguments.length,t=new Array(_len5>1?_len5-1:0),_key5=1;_key5<_len5;_key5++){t[_key5-1]=arguments[_key5];}decodeParam(params,t[0],t[1]);return t.join('=');});return params;}function decodeParam(params,name,value){params[decodeURIComponent(name)]=decodeURIComponent(value||'');}function parseValue(flagName,value){value=value.toLowerCase();if(value==='true'||value==='false'){return value==='true';}else if(\"\".concat(+value)===value){return+value;}throw new Error(\"Could not parse value flag value \".concat(value,\" for flag \").concat(flagName,\".\"));}/**\r\n * Returns the current environment (a global singleton).\r\n *\r\n * The environment object contains the evaluated feature values as well as the\r\n * active platform.\r\n */ /** @doc {heading: 'Environment'} */function env(){return ENV;}var ENV=null;function setEnvironmentGlobal(environment){ENV=environment;}/***/},/* 11 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"makeTypesMatch\",function(){return makeTypesMatch;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"assertTypesMatch\",function(){return assertTypesMatch;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isTensorInList\",function(){return isTensorInList;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"getTensorsInContainer\",function(){return getTensorsInContainer;});/* harmony import */var _tensor__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(7);/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(23);/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function makeTypesMatch(a,b){if(a.dtype===b.dtype){return[a,b];}var dtype=Object(_types__WEBPACK_IMPORTED_MODULE_1__[/* upcastType */\"c\"])(a.dtype,b.dtype);return[a.cast(dtype),b.cast(dtype)];}function assertTypesMatch(a,b){Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"assert\"])(a.dtype===b.dtype,function(){return\"The dtypes of the first(\".concat(a.dtype,\") and\")+\" second(\".concat(b.dtype,\") input must match\");});}function isTensorInList(tensor,tensorList){return tensorList.some(function(x){return x.id===tensor.id;});}/**\r\n * Extracts any `Tensor`s found within the provided object.\r\n *\r\n * @param container an object that may be a `Tensor` or may directly contain\r\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\r\n *   is safe to pass any object here, except that `Promise`s are not\r\n *   supported.\r\n * @returns An array of `Tensors` found within the passed object. If the\r\n *   argument is simply a `Tensor', a list containing that `Tensor` is\r\n *   returned. If the object is not a `Tensor` or does not\r\n *   contain `Tensors`, an empty list is returned.\r\n */function getTensorsInContainer(result){var list=[];var seen=new Set();walkTensorContainer(result,list,seen);return list;}function walkTensorContainer(container,list,seen){if(container==null){return;}if(container instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__[/* Tensor */\"a\"]){list.push(container);return;}if(!isIterable(container)){return;}// Iteration over keys works also for arrays.\nvar iterable=container;for(var k in iterable){var val=iterable[k];if(!seen.has(val)){seen.add(val);walkTensorContainer(val,list,seen);}}}// tslint:disable-next-line:no-any\nfunction isIterable(obj){return Array.isArray(obj)||_typeof2(obj)==='object';}/***/},/* 12 */ /***/function(module,exports,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(global){var numeric=false?undefined:exports;if(typeof global!==\"undefined\"){global.numeric=numeric;}numeric.version=\"1.2.6\";// 1. Utility functions\nnumeric.bench=function bench(f,interval){var t1,t2,n,i;if(typeof interval===\"undefined\"){interval=15;}n=0.5;t1=new Date();while(1){n*=2;for(i=n;i>3;i-=4){f();f();f();f();}while(i>0){f();i--;}t2=new Date();if(t2-t1>interval)break;}for(i=n;i>3;i-=4){f();f();f();f();}while(i>0){f();i--;}t2=new Date();return 1000*(3*n-1)/(t2-t1);};numeric._myIndexOf=function _myIndexOf(w){var n=this.length,k;for(k=0;k<n;++k){if(this[k]===w)return k;}return-1;};numeric.myIndexOf=Array.prototype.indexOf?Array.prototype.indexOf:numeric._myIndexOf;numeric.Function=Function;numeric.precision=4;numeric.largeArray=50;numeric.prettyPrint=function prettyPrint(x){function fmtnum(x){if(x===0){return'0';}if(isNaN(x)){return'NaN';}if(x<0){return'-'+fmtnum(-x);}if(isFinite(x)){var scale=Math.floor(Math.log(x)/Math.log(10));var normalized=x/Math.pow(10,scale);var basic=normalized.toPrecision(numeric.precision);if(parseFloat(basic)===10){scale++;normalized=1;basic=normalized.toPrecision(numeric.precision);}return parseFloat(basic).toString()+'e'+scale.toString();}return'Infinity';}var ret=[];function foo(x){var k;if(typeof x===\"undefined\"){ret.push(Array(numeric.precision+8).join(' '));return false;}if(typeof x===\"string\"){ret.push('\"'+x+'\"');return false;}if(typeof x===\"boolean\"){ret.push(x.toString());return false;}if(typeof x===\"number\"){var a=fmtnum(x);var b=x.toPrecision(numeric.precision);var c=parseFloat(x.toString()).toString();var d=[a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];for(k=1;k<d.length;k++){if(d[k].length<a.length)a=d[k];}ret.push(Array(numeric.precision+8-a.length).join(' ')+a);return false;}if(x===null){ret.push(\"null\");return false;}if(typeof x===\"function\"){ret.push(x.toString());var flag=false;for(k in x){if(x.hasOwnProperty(k)){if(flag)ret.push(',\\n');else ret.push('\\n{');flag=true;ret.push(k);ret.push(': \\n');foo(x[k]);}}if(flag)ret.push('}\\n');return true;}if(x instanceof Array){if(x.length>numeric.largeArray){ret.push('...Large Array...');return true;}var flag=false;ret.push('[');for(k=0;k<x.length;k++){if(k>0){ret.push(',');if(flag)ret.push('\\n ');}flag=foo(x[k]);}ret.push(']');return true;}ret.push('{');var flag=false;for(k in x){if(x.hasOwnProperty(k)){if(flag)ret.push(',\\n');flag=true;ret.push(k);ret.push(': \\n');foo(x[k]);}}ret.push('}');return true;}foo(x);return ret.join('');};numeric.parseDate=function parseDate(d){function foo(d){if(typeof d==='string'){return Date.parse(d.replace(/-/g,'/'));}if(!(d instanceof Array)){throw new Error(\"parseDate: parameter must be arrays of strings\");}var ret=[],k;for(k=0;k<d.length;k++){ret[k]=foo(d[k]);}return ret;}return foo(d);};numeric.parseFloat=function parseFloat_(d){function foo(d){if(typeof d==='string'){return parseFloat(d);}if(!(d instanceof Array)){throw new Error(\"parseFloat: parameter must be arrays of strings\");}var ret=[],k;for(k=0;k<d.length;k++){ret[k]=foo(d[k]);}return ret;}return foo(d);};numeric.parseCSV=function parseCSV(t){var foo=t.split('\\n');var j,k;var ret=[];var pat=/(([^'\",]*)|('[^']*')|(\"[^\"]*\")),/g;var patnum=/^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/;var stripper=function stripper(n){return n.substr(0,n.length-1);};var count=0;for(k=0;k<foo.length;k++){var bar=(foo[k]+\",\").match(pat),baz;if(bar.length>0){ret[count]=[];for(j=0;j<bar.length;j++){baz=stripper(bar[j]);if(patnum.test(baz)){ret[count][j]=parseFloat(baz);}else ret[count][j]=baz;}count++;}}return ret;};numeric.toCSV=function toCSV(A){var s=numeric.dim(A);var i,j,m,n,row,ret;m=s[0];n=s[1];ret=[];for(i=0;i<m;i++){row=[];for(j=0;j<m;j++){row[j]=A[i][j].toString();}ret[i]=row.join(', ');}return ret.join('\\n')+'\\n';};numeric.getURL=function getURL(url){var client=new XMLHttpRequest();client.open(\"GET\",url,false);client.send();return client;};numeric.imageURL=function imageURL(img){function base64(A){var n=A.length,i,x,y,z,p,q,r,s;var key=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var ret=\"\";for(i=0;i<n;i+=3){x=A[i];y=A[i+1];z=A[i+2];p=x>>2;q=((x&3)<<4)+(y>>4);r=((y&15)<<2)+(z>>6);s=z&63;if(i+1>=n){r=s=64;}else if(i+2>=n){s=64;}ret+=key.charAt(p)+key.charAt(q)+key.charAt(r)+key.charAt(s);}return ret;}function crc32Array(a,from,to){if(typeof from===\"undefined\"){from=0;}if(typeof to===\"undefined\"){to=a.length;}var table=[0x00000000,0x77073096,0xEE0E612C,0x990951BA,0x076DC419,0x706AF48F,0xE963A535,0x9E6495A3,0x0EDB8832,0x79DCB8A4,0xE0D5E91E,0x97D2D988,0x09B64C2B,0x7EB17CBD,0xE7B82D07,0x90BF1D91,0x1DB71064,0x6AB020F2,0xF3B97148,0x84BE41DE,0x1ADAD47D,0x6DDDE4EB,0xF4D4B551,0x83D385C7,0x136C9856,0x646BA8C0,0xFD62F97A,0x8A65C9EC,0x14015C4F,0x63066CD9,0xFA0F3D63,0x8D080DF5,0x3B6E20C8,0x4C69105E,0xD56041E4,0xA2677172,0x3C03E4D1,0x4B04D447,0xD20D85FD,0xA50AB56B,0x35B5A8FA,0x42B2986C,0xDBBBC9D6,0xACBCF940,0x32D86CE3,0x45DF5C75,0xDCD60DCF,0xABD13D59,0x26D930AC,0x51DE003A,0xC8D75180,0xBFD06116,0x21B4F4B5,0x56B3C423,0xCFBA9599,0xB8BDA50F,0x2802B89E,0x5F058808,0xC60CD9B2,0xB10BE924,0x2F6F7C87,0x58684C11,0xC1611DAB,0xB6662D3D,0x76DC4190,0x01DB7106,0x98D220BC,0xEFD5102A,0x71B18589,0x06B6B51F,0x9FBFE4A5,0xE8B8D433,0x7807C9A2,0x0F00F934,0x9609A88E,0xE10E9818,0x7F6A0DBB,0x086D3D2D,0x91646C97,0xE6635C01,0x6B6B51F4,0x1C6C6162,0x856530D8,0xF262004E,0x6C0695ED,0x1B01A57B,0x8208F4C1,0xF50FC457,0x65B0D9C6,0x12B7E950,0x8BBEB8EA,0xFCB9887C,0x62DD1DDF,0x15DA2D49,0x8CD37CF3,0xFBD44C65,0x4DB26158,0x3AB551CE,0xA3BC0074,0xD4BB30E2,0x4ADFA541,0x3DD895D7,0xA4D1C46D,0xD3D6F4FB,0x4369E96A,0x346ED9FC,0xAD678846,0xDA60B8D0,0x44042D73,0x33031DE5,0xAA0A4C5F,0xDD0D7CC9,0x5005713C,0x270241AA,0xBE0B1010,0xC90C2086,0x5768B525,0x206F85B3,0xB966D409,0xCE61E49F,0x5EDEF90E,0x29D9C998,0xB0D09822,0xC7D7A8B4,0x59B33D17,0x2EB40D81,0xB7BD5C3B,0xC0BA6CAD,0xEDB88320,0x9ABFB3B6,0x03B6E20C,0x74B1D29A,0xEAD54739,0x9DD277AF,0x04DB2615,0x73DC1683,0xE3630B12,0x94643B84,0x0D6D6A3E,0x7A6A5AA8,0xE40ECF0B,0x9309FF9D,0x0A00AE27,0x7D079EB1,0xF00F9344,0x8708A3D2,0x1E01F268,0x6906C2FE,0xF762575D,0x806567CB,0x196C3671,0x6E6B06E7,0xFED41B76,0x89D32BE0,0x10DA7A5A,0x67DD4ACC,0xF9B9DF6F,0x8EBEEFF9,0x17B7BE43,0x60B08ED5,0xD6D6A3E8,0xA1D1937E,0x38D8C2C4,0x4FDFF252,0xD1BB67F1,0xA6BC5767,0x3FB506DD,0x48B2364B,0xD80D2BDA,0xAF0A1B4C,0x36034AF6,0x41047A60,0xDF60EFC3,0xA867DF55,0x316E8EEF,0x4669BE79,0xCB61B38C,0xBC66831A,0x256FD2A0,0x5268E236,0xCC0C7795,0xBB0B4703,0x220216B9,0x5505262F,0xC5BA3BBE,0xB2BD0B28,0x2BB45A92,0x5CB36A04,0xC2D7FFA7,0xB5D0CF31,0x2CD99E8B,0x5BDEAE1D,0x9B64C2B0,0xEC63F226,0x756AA39C,0x026D930A,0x9C0906A9,0xEB0E363F,0x72076785,0x05005713,0x95BF4A82,0xE2B87A14,0x7BB12BAE,0x0CB61B38,0x92D28E9B,0xE5D5BE0D,0x7CDCEFB7,0x0BDBDF21,0x86D3D2D4,0xF1D4E242,0x68DDB3F8,0x1FDA836E,0x81BE16CD,0xF6B9265B,0x6FB077E1,0x18B74777,0x88085AE6,0xFF0F6A70,0x66063BCA,0x11010B5C,0x8F659EFF,0xF862AE69,0x616BFFD3,0x166CCF45,0xA00AE278,0xD70DD2EE,0x4E048354,0x3903B3C2,0xA7672661,0xD06016F7,0x4969474D,0x3E6E77DB,0xAED16A4A,0xD9D65ADC,0x40DF0B66,0x37D83BF0,0xA9BCAE53,0xDEBB9EC5,0x47B2CF7F,0x30B5FFE9,0xBDBDF21C,0xCABAC28A,0x53B39330,0x24B4A3A6,0xBAD03605,0xCDD70693,0x54DE5729,0x23D967BF,0xB3667A2E,0xC4614AB8,0x5D681B02,0x2A6F2B94,0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D];var crc=-1,y=0,n=a.length,i;for(i=from;i<to;i++){y=(crc^a[i])&0xFF;crc=crc>>>8^table[y];}return crc^-1;}var h=img[0].length,w=img[0][0].length,s1,s2,next,k,length,a,b,i,j,adler32,crc32;var stream=[137,80,78,71,13,10,26,10,//  0: PNG signature\n0,0,0,13,//  8: IHDR Chunk length\n73,72,68,82,// 12: \"IHDR\" \nw>>24&255,w>>16&255,w>>8&255,w&255,// 16: Width\nh>>24&255,h>>16&255,h>>8&255,h&255,// 20: Height\n8,// 24: bit depth\n2,// 25: RGB\n0,// 26: deflate\n0,// 27: no filter\n0,// 28: no interlace\n-1,-2,-3,-4,// 29: CRC\n-5,-6,-7,-8,// 33: IDAT Chunk length\n73,68,65,84,// 37: \"IDAT\"\n// RFC 1950 header starts here\n8,// 41: RFC1950 CMF\n29// 42: RFC1950 FLG\n];crc32=crc32Array(stream,12,29);stream[29]=crc32>>24&255;stream[30]=crc32>>16&255;stream[31]=crc32>>8&255;stream[32]=crc32&255;s1=1;s2=0;for(i=0;i<h;i++){if(i<h-1){stream.push(0);}else{stream.push(1);}a=3*w+1+(i===0)&255;b=3*w+1+(i===0)>>8&255;stream.push(a);stream.push(b);stream.push(~a&255);stream.push(~b&255);if(i===0)stream.push(0);for(j=0;j<w;j++){for(k=0;k<3;k++){a=img[k][i][j];if(a>255)a=255;else if(a<0)a=0;else a=Math.round(a);s1=(s1+a)%65521;s2=(s2+s1)%65521;stream.push(a);}}stream.push(0);}adler32=(s2<<16)+s1;stream.push(adler32>>24&255);stream.push(adler32>>16&255);stream.push(adler32>>8&255);stream.push(adler32&255);length=stream.length-41;stream[33]=length>>24&255;stream[34]=length>>16&255;stream[35]=length>>8&255;stream[36]=length&255;crc32=crc32Array(stream,37);stream.push(crc32>>24&255);stream.push(crc32>>16&255);stream.push(crc32>>8&255);stream.push(crc32&255);stream.push(0);stream.push(0);stream.push(0);stream.push(0);//    a = stream.length;\nstream.push(73);// I\nstream.push(69);// E\nstream.push(78);// N\nstream.push(68);// D\nstream.push(174);// CRC1\nstream.push(66);// CRC2\nstream.push(96);// CRC3\nstream.push(130);// CRC4\nreturn'data:image/png;base64,'+base64(stream);};// 2. Linear algebra with Arrays.\nnumeric._dim=function _dim(x){var ret=[];while(_typeof2(x)===\"object\"){ret.push(x.length);x=x[0];}return ret;};numeric.dim=function dim(x){var y,z;if(_typeof2(x)===\"object\"){y=x[0];if(_typeof2(y)===\"object\"){z=y[0];if(_typeof2(z)===\"object\"){return numeric._dim(x);}return[x.length,y.length];}return[x.length];}return[];};numeric.mapreduce=function mapreduce(body,init){return Function('x','accum','_s','_k','if(typeof accum === \"undefined\") accum = '+init+';\\n'+'if(typeof x === \"number\") { var xi = x; '+body+'; return accum; }\\n'+'if(typeof _s === \"undefined\") _s = numeric.dim(x);\\n'+'if(typeof _k === \"undefined\") _k = 0;\\n'+'var _n = _s[_k];\\n'+'var i,xi;\\n'+'if(_k < _s.length-1) {\\n'+'    for(i=_n-1;i>=0;i--) {\\n'+'        accum = arguments.callee(x[i],accum,_s,_k+1);\\n'+'    }'+'    return accum;\\n'+'}\\n'+'for(i=_n-1;i>=1;i-=2) { \\n'+'    xi = x[i];\\n'+'    '+body+';\\n'+'    xi = x[i-1];\\n'+'    '+body+';\\n'+'}\\n'+'if(i === 0) {\\n'+'    xi = x[i];\\n'+'    '+body+'\\n'+'}\\n'+'return accum;');};numeric.mapreduce2=function mapreduce2(body,setup){return Function('x','var n = x.length;\\n'+'var i,xi;\\n'+setup+';\\n'+'for(i=n-1;i!==-1;--i) { \\n'+'    xi = x[i];\\n'+'    '+body+';\\n'+'}\\n'+'return accum;');};numeric.same=function same(x,y){var i,n;if(!(x instanceof Array)||!(y instanceof Array)){return false;}n=x.length;if(n!==y.length){return false;}for(i=0;i<n;i++){if(x[i]===y[i]){continue;}if(_typeof2(x[i])===\"object\"){if(!same(x[i],y[i]))return false;}else{return false;}}return true;};numeric.rep=function rep(s,v,k){if(typeof k===\"undefined\"){k=0;}var n=s[k],ret=Array(n),i;if(k===s.length-1){for(i=n-2;i>=0;i-=2){ret[i+1]=v;ret[i]=v;}if(i===-1){ret[0]=v;}return ret;}for(i=n-1;i>=0;i--){ret[i]=numeric.rep(s,v,k+1);}return ret;};numeric.dotMMsmall=function dotMMsmall(x,y){var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;p=x.length;q=y.length;r=y[0].length;ret=Array(p);for(i=p-1;i>=0;i--){foo=Array(r);bar=x[i];for(k=r-1;k>=0;k--){woo=bar[q-1]*y[q-1][k];for(j=q-2;j>=1;j-=2){i0=j-1;woo+=bar[j]*y[j][k]+bar[i0]*y[i0][k];}if(j===0){woo+=bar[0]*y[0][k];}foo[k]=woo;}ret[i]=foo;}return ret;};numeric._getCol=function _getCol(A,j,x){var n=A.length,i;for(i=n-1;i>0;--i){x[i]=A[i][j];--i;x[i]=A[i][j];}if(i===0)x[0]=A[0][j];};numeric.dotMMbig=function dotMMbig(x,y){var gc=numeric._getCol,p=y.length,v=Array(p);var m=x.length,n=y[0].length,A=new Array(m),xj;var VV=numeric.dotVV;var i,j,k,z;--p;--m;for(i=m;i!==-1;--i){A[i]=Array(n);}--n;for(i=n;i!==-1;--i){gc(y,i,v);for(j=m;j!==-1;--j){z=0;xj=x[j];A[j][i]=VV(xj,v);}}return A;};numeric.dotMV=function dotMV(x,y){var p=x.length,q=y.length,i;var ret=Array(p),dotVV=numeric.dotVV;for(i=p-1;i>=0;i--){ret[i]=dotVV(x[i],y);}return ret;};numeric.dotVM=function dotVM(x,y){var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;p=x.length;q=y[0].length;ret=Array(q);for(k=q-1;k>=0;k--){woo=x[p-1]*y[p-1][k];for(j=p-2;j>=1;j-=2){i0=j-1;woo+=x[j]*y[j][k]+x[i0]*y[i0][k];}if(j===0){woo+=x[0]*y[0][k];}ret[k]=woo;}return ret;};numeric.dotVV=function dotVV(x,y){var i,n=x.length,i1,ret=x[n-1]*y[n-1];for(i=n-2;i>=1;i-=2){i1=i-1;ret+=x[i]*y[i]+x[i1]*y[i1];}if(i===0){ret+=x[0]*y[0];}return ret;};numeric.dot=function dot(x,y){var d=numeric.dim;switch(d(x).length*1000+d(y).length){case 2002:if(y.length<10)return numeric.dotMMsmall(x,y);else return numeric.dotMMbig(x,y);case 2001:return numeric.dotMV(x,y);case 1002:return numeric.dotVM(x,y);case 1001:return numeric.dotVV(x,y);case 1000:return numeric.mulVS(x,y);case 1:return numeric.mulSV(x,y);case 0:return x*y;default:throw new Error('numeric.dot only works on vectors and matrices');}};numeric.diag=function diag(d){var i,i1,j,n=d.length,A=Array(n),Ai;for(i=n-1;i>=0;i--){Ai=Array(n);i1=i+2;for(j=n-1;j>=i1;j-=2){Ai[j]=0;Ai[j-1]=0;}if(j>i){Ai[j]=0;}Ai[i]=d[i];for(j=i-1;j>=1;j-=2){Ai[j]=0;Ai[j-1]=0;}if(j===0){Ai[0]=0;}A[i]=Ai;}return A;};numeric.getDiag=function(A){var n=Math.min(A.length,A[0].length),i,ret=Array(n);for(i=n-1;i>=1;--i){ret[i]=A[i][i];--i;ret[i]=A[i][i];}if(i===0){ret[0]=A[0][0];}return ret;};numeric.identity=function identity(n){return numeric.diag(numeric.rep([n],1));};numeric.pointwise=function pointwise(params,body,setup){if(typeof setup===\"undefined\"){setup=\"\";}var fun=[];var k;var avec=/\\[i\\]$/,p,thevec='';var haveret=false;for(k=0;k<params.length;k++){if(avec.test(params[k])){p=params[k].substring(0,params[k].length-3);thevec=p;}else{p=params[k];}if(p==='ret')haveret=true;fun.push(p);}fun[params.length]='_s';fun[params.length+1]='_k';fun[params.length+2]='if(typeof _s === \"undefined\") _s = numeric.dim('+thevec+');\\n'+'if(typeof _k === \"undefined\") _k = 0;\\n'+'var _n = _s[_k];\\n'+'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+'if(_k < _s.length-1) {\\n'+'    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\\n'+'    return ret;\\n'+'}\\n'+setup+'\\n'+'for(i=_n-1;i!==-1;--i) {\\n'+'    '+body+'\\n'+'}\\n'+'return ret;';return Function.apply(null,fun);};numeric.pointwise2=function pointwise2(params,body,setup){if(typeof setup===\"undefined\"){setup=\"\";}var fun=[];var k;var avec=/\\[i\\]$/,p,thevec='';var haveret=false;for(k=0;k<params.length;k++){if(avec.test(params[k])){p=params[k].substring(0,params[k].length-3);thevec=p;}else{p=params[k];}if(p==='ret')haveret=true;fun.push(p);}fun[params.length]='var _n = '+thevec+'.length;\\n'+'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+setup+'\\n'+'for(i=_n-1;i!==-1;--i) {\\n'+body+'\\n'+'}\\n'+'return ret;';return Function.apply(null,fun);};numeric._biforeach=function _biforeach(x,y,s,k,f){if(k===s.length-1){f(x,y);return;}var i,n=s[k];for(i=n-1;i>=0;i--){_biforeach(_typeof2(x)===\"object\"?x[i]:x,_typeof2(y)===\"object\"?y[i]:y,s,k+1,f);}};numeric._biforeach2=function _biforeach2(x,y,s,k,f){if(k===s.length-1){return f(x,y);}var i,n=s[k],ret=Array(n);for(i=n-1;i>=0;--i){ret[i]=_biforeach2(_typeof2(x)===\"object\"?x[i]:x,_typeof2(y)===\"object\"?y[i]:y,s,k+1,f);}return ret;};numeric._foreach=function _foreach(x,s,k,f){if(k===s.length-1){f(x);return;}var i,n=s[k];for(i=n-1;i>=0;i--){_foreach(x[i],s,k+1,f);}};numeric._foreach2=function _foreach2(x,s,k,f){if(k===s.length-1){return f(x);}var i,n=s[k],ret=Array(n);for(i=n-1;i>=0;i--){ret[i]=_foreach2(x[i],s,k+1,f);}return ret;};/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');\r\nnumeric.allV = numeric.mapreduce('if(!xi) return false;','true');\r\nnumeric.any = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.anyV(x); }\r\nnumeric.all = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.allV(x); }*/numeric.ops2={add:'+',sub:'-',mul:'*',div:'/',mod:'%',and:'&&',or:'||',eq:'===',neq:'!==',lt:'<',gt:'>',leq:'<=',geq:'>=',band:'&',bor:'|',bxor:'^',lshift:'<<',rshift:'>>',rrshift:'>>>'};numeric.opseq={addeq:'+=',subeq:'-=',muleq:'*=',diveq:'/=',modeq:'%=',lshifteq:'<<=',rshifteq:'>>=',rrshifteq:'>>>=',bandeq:'&=',boreq:'|=',bxoreq:'^='};numeric.mathfuns=['abs','acos','asin','atan','ceil','cos','exp','floor','log','round','sin','sqrt','tan','isNaN','isFinite'];numeric.mathfuns2=['atan2','pow','max','min'];numeric.ops1={neg:'-',not:'!',bnot:'~',clone:''};numeric.mapreducers={any:['if(xi) return true;','var accum = false;'],all:['if(!xi) return false;','var accum = true;'],sum:['accum += xi;','var accum = 0;'],prod:['accum *= xi;','var accum = 1;'],norm2Squared:['accum += xi*xi;','var accum = 0;'],norminf:['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],norm1:['accum += abs(xi)','var accum = 0, abs = Math.abs;'],sup:['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],inf:['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']};(function(){var i,o;for(i=0;i<numeric.mathfuns2.length;++i){o=numeric.mathfuns2[i];numeric.ops2[o]=o;}for(i in numeric.ops2){if(numeric.ops2.hasOwnProperty(i)){o=numeric.ops2[i];var code,codeeq,setup='';if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1){setup='var '+o+' = Math.'+o+';\\n';code=function code(r,x,y){return r+' = '+o+'('+x+','+y+')';};codeeq=function codeeq(x,y){return x+' = '+o+'('+x+','+y+')';};}else{code=function code(r,x,y){return r+' = '+x+' '+o+' '+y;};if(numeric.opseq.hasOwnProperty(i+'eq')){codeeq=function codeeq(x,y){return x+' '+o+'= '+y;};}else{codeeq=function codeeq(x,y){return x+' = '+x+' '+o+' '+y;};}}numeric[i+'VV']=numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);numeric[i+'SV']=numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);numeric[i+'VS']=numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);numeric[i]=Function('var n = arguments.length, i, x = arguments[0], y;\\n'+'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\\n'+'var dim = numeric.dim;\\n'+'for(i=1;i!==n;++i) { \\n'+'  y = arguments[i];\\n'+'  if(typeof x === \"object\") {\\n'+'      if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n'+'      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n'+'  } else if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n'+'  else '+codeeq('x','y')+'\\n'+'}\\nreturn x;\\n');numeric[o]=numeric[i];numeric[i+'eqV']=numeric.pointwise2(['ret[i]','x[i]'],codeeq('ret[i]','x[i]'),setup);numeric[i+'eqS']=numeric.pointwise2(['ret[i]','x'],codeeq('ret[i]','x'),setup);numeric[i+'eq']=Function('var n = arguments.length, i, x = arguments[0], y;\\n'+'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\\n'+'var s = numeric.dim(x);\\n'+'for(i=1;i!==n;++i) { \\n'+'  y = arguments[i];\\n'+'  if(typeof y === \"object\") numeric._biforeach(x,y,s,0,V);\\n'+'  else numeric._biforeach(x,y,s,0,S);\\n'+'}\\nreturn x;\\n');}}for(i=0;i<numeric.mathfuns2.length;++i){o=numeric.mathfuns2[i];delete numeric.ops2[o];}for(i=0;i<numeric.mathfuns.length;++i){o=numeric.mathfuns[i];numeric.ops1[o]=o;}for(i in numeric.ops1){if(numeric.ops1.hasOwnProperty(i)){setup='';o=numeric.ops1[i];if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1){if(Math.hasOwnProperty(o))setup='var '+o+' = Math.'+o+';\\n';}numeric[i+'eqV']=numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);numeric[i+'eq']=Function('x','if(typeof x !== \"object\") return '+o+'x\\n'+'var i;\\n'+'var V = numeric.'+i+'eqV;\\n'+'var s = numeric.dim(x);\\n'+'numeric._foreach(x,s,0,V);\\n'+'return x;\\n');numeric[i+'V']=numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);numeric[i]=Function('x','if(typeof x !== \"object\") return '+o+'(x)\\n'+'var i;\\n'+'var V = numeric.'+i+'V;\\n'+'var s = numeric.dim(x);\\n'+'return numeric._foreach2(x,s,0,V);\\n');}}for(i=0;i<numeric.mathfuns.length;++i){o=numeric.mathfuns[i];delete numeric.ops1[o];}for(i in numeric.mapreducers){if(numeric.mapreducers.hasOwnProperty(i)){o=numeric.mapreducers[i];numeric[i+'V']=numeric.mapreduce2(o[0],o[1]);numeric[i]=Function('x','s','k',o[1]+'if(typeof x !== \"object\") {'+'    xi = x;\\n'+o[0]+';\\n'+'    return accum;\\n'+'}'+'if(typeof s === \"undefined\") s = numeric.dim(x);\\n'+'if(typeof k === \"undefined\") k = 0;\\n'+'if(k === s.length-1) return numeric.'+i+'V(x);\\n'+'var xi;\\n'+'var n = x.length, i;\\n'+'for(i=n-1;i!==-1;--i) {\\n'+'   xi = arguments.callee(x[i]);\\n'+o[0]+';\\n'+'}\\n'+'return accum;\\n');}}})();numeric.truncVV=numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');numeric.truncVS=numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');numeric.truncSV=numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');numeric.trunc=function trunc(x,y){if(_typeof2(x)===\"object\"){if(_typeof2(y)===\"object\")return numeric.truncVV(x,y);return numeric.truncVS(x,y);}if(_typeof2(y)===\"object\")return numeric.truncSV(x,y);return Math.round(x/y)*y;};numeric.inv=function inv(x){var s=numeric.dim(x),abs=Math.abs,m=s[0],n=s[1];var A=numeric.clone(x),Ai,Aj;var I=numeric.identity(m),Ii,Ij;var i,j,k,x;for(j=0;j<n;++j){var i0=-1;var v0=-1;for(i=j;i!==m;++i){k=abs(A[i][j]);if(k>v0){i0=i;v0=k;}}Aj=A[i0];A[i0]=A[j];A[j]=Aj;Ij=I[i0];I[i0]=I[j];I[j]=Ij;x=Aj[j];for(k=j;k!==n;++k){Aj[k]/=x;}for(k=n-1;k!==-1;--k){Ij[k]/=x;}for(i=m-1;i!==-1;--i){if(i!==j){Ai=A[i];Ii=I[i];x=Ai[j];for(k=j+1;k!==n;++k){Ai[k]-=Aj[k]*x;}for(k=n-1;k>0;--k){Ii[k]-=Ij[k]*x;--k;Ii[k]-=Ij[k]*x;}if(k===0)Ii[0]-=Ij[0]*x;}}}return I;};numeric.det=function det(x){var s=numeric.dim(x);if(s.length!==2||s[0]!==s[1]){throw new Error('numeric: det() only works on square matrices');}var n=s[0],ret=1,i,j,k,A=numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;for(j=0;j<n-1;j++){k=j;for(i=j+1;i<n;i++){if(Math.abs(A[i][j])>Math.abs(A[k][j])){k=i;}}if(k!==j){temp=A[k];A[k]=A[j];A[j]=temp;ret*=-1;}Aj=A[j];for(i=j+1;i<n;i++){Ai=A[i];alpha=Ai[j]/Aj[j];for(k=j+1;k<n-1;k+=2){k1=k+1;Ai[k]-=Aj[k]*alpha;Ai[k1]-=Aj[k1]*alpha;}if(k!==n){Ai[k]-=Aj[k]*alpha;}}if(Aj[j]===0){return 0;}ret*=Aj[j];}return ret*A[j][j];};numeric.transpose=function transpose(x){var i,j,m=x.length,n=x[0].length,ret=Array(n),A0,A1,Bj;for(j=0;j<n;j++){ret[j]=Array(m);}for(i=m-1;i>=1;i-=2){A1=x[i];A0=x[i-1];for(j=n-1;j>=1;--j){Bj=ret[j];Bj[i]=A1[j];Bj[i-1]=A0[j];--j;Bj=ret[j];Bj[i]=A1[j];Bj[i-1]=A0[j];}if(j===0){Bj=ret[0];Bj[i]=A1[0];Bj[i-1]=A0[0];}}if(i===0){A0=x[0];for(j=n-1;j>=1;--j){ret[j][0]=A0[j];--j;ret[j][0]=A0[j];}if(j===0){ret[0][0]=A0[0];}}return ret;};numeric.negtranspose=function negtranspose(x){var i,j,m=x.length,n=x[0].length,ret=Array(n),A0,A1,Bj;for(j=0;j<n;j++){ret[j]=Array(m);}for(i=m-1;i>=1;i-=2){A1=x[i];A0=x[i-1];for(j=n-1;j>=1;--j){Bj=ret[j];Bj[i]=-A1[j];Bj[i-1]=-A0[j];--j;Bj=ret[j];Bj[i]=-A1[j];Bj[i-1]=-A0[j];}if(j===0){Bj=ret[0];Bj[i]=-A1[0];Bj[i-1]=-A0[0];}}if(i===0){A0=x[0];for(j=n-1;j>=1;--j){ret[j][0]=-A0[j];--j;ret[j][0]=-A0[j];}if(j===0){ret[0][0]=-A0[0];}}return ret;};numeric._random=function _random(s,k){var i,n=s[k],ret=Array(n),rnd;if(k===s.length-1){rnd=Math.random;for(i=n-1;i>=1;i-=2){ret[i]=rnd();ret[i-1]=rnd();}if(i===0){ret[0]=rnd();}return ret;}for(i=n-1;i>=0;i--){ret[i]=_random(s,k+1);}return ret;};numeric.random=function random(s){return numeric._random(s,0);};numeric.norm2=function norm2(x){return Math.sqrt(numeric.norm2Squared(x));};numeric.linspace=function linspace(a,b,n){if(typeof n===\"undefined\")n=Math.max(Math.round(b-a)+1,1);if(n<2){return n===1?[a]:[];}var i,ret=Array(n);n--;for(i=n;i>=0;i--){ret[i]=(i*b+(n-i)*a)/n;}return ret;};numeric.getBlock=function getBlock(x,from,to){var s=numeric.dim(x);function foo(x,k){var i,a=from[k],n=to[k]-a,ret=Array(n);if(k===s.length-1){for(i=n;i>=0;i--){ret[i]=x[i+a];}return ret;}for(i=n;i>=0;i--){ret[i]=foo(x[i+a],k+1);}return ret;}return foo(x,0);};numeric.setBlock=function setBlock(x,from,to,B){var s=numeric.dim(x);function foo(x,y,k){var i,a=from[k],n=to[k]-a;if(k===s.length-1){for(i=n;i>=0;i--){x[i+a]=y[i];}}for(i=n;i>=0;i--){foo(x[i+a],y[i],k+1);}}foo(x,B,0);return x;};numeric.getRange=function getRange(A,I,J){var m=I.length,n=J.length;var i,j;var B=Array(m),Bi,AI;for(i=m-1;i!==-1;--i){B[i]=Array(n);Bi=B[i];AI=A[I[i]];for(j=n-1;j!==-1;--j){Bi[j]=AI[J[j]];}}return B;};numeric.blockMatrix=function blockMatrix(X){var s=numeric.dim(X);if(s.length<4)return numeric.blockMatrix([X]);var m=s[0],n=s[1],M,N,i,j,Xij;M=0;N=0;for(i=0;i<m;++i){M+=X[i][0].length;}for(j=0;j<n;++j){N+=X[0][j][0].length;}var Z=Array(M);for(i=0;i<M;++i){Z[i]=Array(N);}var I=0,J,ZI,k,l,Xijk;for(i=0;i<m;++i){J=N;for(j=n-1;j!==-1;--j){Xij=X[i][j];J-=Xij[0].length;for(k=Xij.length-1;k!==-1;--k){Xijk=Xij[k];ZI=Z[I+k];for(l=Xijk.length-1;l!==-1;--l){ZI[J+l]=Xijk[l];}}}I+=X[i][0].length;}return Z;};numeric.tensor=function tensor(x,y){if(typeof x===\"number\"||typeof y===\"number\")return numeric.mul(x,y);var s1=numeric.dim(x),s2=numeric.dim(y);if(s1.length!==1||s2.length!==1){throw new Error('numeric: tensor product is only defined for vectors');}var m=s1[0],n=s2[0],A=Array(m),Ai,i,j,xi;for(i=m-1;i>=0;i--){Ai=Array(n);xi=x[i];for(j=n-1;j>=3;--j){Ai[j]=xi*y[j];--j;Ai[j]=xi*y[j];--j;Ai[j]=xi*y[j];--j;Ai[j]=xi*y[j];}while(j>=0){Ai[j]=xi*y[j];--j;}A[i]=Ai;}return A;};// 3. The Tensor type T\nnumeric.T=function T(x,y){this.x=x;this.y=y;};numeric.t=function t(x,y){return new numeric.T(x,y);};numeric.Tbinop=function Tbinop(rr,rc,cr,cc,setup){var io=numeric.indexOf;if(typeof setup!==\"string\"){var k;setup='';for(k in numeric){if(numeric.hasOwnProperty(k)&&(rr.indexOf(k)>=0||rc.indexOf(k)>=0||cr.indexOf(k)>=0||cc.indexOf(k)>=0)&&k.length>1){setup+='var '+k+' = numeric.'+k+';\\n';}}}return Function(['y'],'var x = this;\\n'+'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n'+setup+'\\n'+'if(x.y) {'+'  if(y.y) {'+'    return new numeric.T('+cc+');\\n'+'  }\\n'+'  return new numeric.T('+cr+');\\n'+'}\\n'+'if(y.y) {\\n'+'  return new numeric.T('+rc+');\\n'+'}\\n'+'return new numeric.T('+rr+');\\n');};numeric.T.prototype.add=numeric.Tbinop('add(x.x,y.x)','add(x.x,y.x),y.y','add(x.x,y.x),x.y','add(x.x,y.x),add(x.y,y.y)');numeric.T.prototype.sub=numeric.Tbinop('sub(x.x,y.x)','sub(x.x,y.x),neg(y.y)','sub(x.x,y.x),x.y','sub(x.x,y.x),sub(x.y,y.y)');numeric.T.prototype.mul=numeric.Tbinop('mul(x.x,y.x)','mul(x.x,y.x),mul(x.x,y.y)','mul(x.x,y.x),mul(x.y,y.x)','sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');numeric.T.prototype.reciprocal=function reciprocal(){var mul=numeric.mul,div=numeric.div;if(this.y){var d=numeric.add(mul(this.x,this.x),mul(this.y,this.y));return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));}return new T(div(1,this.x));};numeric.T.prototype.div=function div(y){if(!(y instanceof numeric.T))y=new numeric.T(y);if(y.y){return this.mul(y.reciprocal());}var div=numeric.div;if(this.y){return new numeric.T(div(this.x,y.x),div(this.y,y.x));}return new numeric.T(div(this.x,y.x));};numeric.T.prototype.dot=numeric.Tbinop('dot(x.x,y.x)','dot(x.x,y.x),dot(x.x,y.y)','dot(x.x,y.x),dot(x.y,y.x)','sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))');numeric.T.prototype.transpose=function transpose(){var t=numeric.transpose,x=this.x,y=this.y;if(y){return new numeric.T(t(x),t(y));}return new numeric.T(t(x));};numeric.T.prototype.transjugate=function transjugate(){var t=numeric.transpose,x=this.x,y=this.y;if(y){return new numeric.T(t(x),numeric.negtranspose(y));}return new numeric.T(t(x));};numeric.Tunop=function Tunop(r,c,s){if(typeof s!==\"string\"){s='';}return Function('var x = this;\\n'+s+'\\n'+'if(x.y) {'+'  '+c+';\\n'+'}\\n'+r+';\\n');};numeric.T.prototype.exp=numeric.Tunop('return new numeric.T(ex)','return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))','var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');numeric.T.prototype.conj=numeric.Tunop('return new numeric.T(x.x);','return new numeric.T(x.x,numeric.neg(x.y));');numeric.T.prototype.neg=numeric.Tunop('return new numeric.T(neg(x.x));','return new numeric.T(neg(x.x),neg(x.y));','var neg = numeric.neg;');numeric.T.prototype.sin=numeric.Tunop('return new numeric.T(numeric.sin(x.x))','return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');numeric.T.prototype.cos=numeric.Tunop('return new numeric.T(numeric.cos(x.x))','return x.exp().add(x.neg().exp()).div(2);');numeric.T.prototype.abs=numeric.Tunop('return new numeric.T(numeric.abs(x.x));','return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));','var mul = numeric.mul;');numeric.T.prototype.log=numeric.Tunop('return new numeric.T(numeric.log(x.x));','var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\n'+'return new numeric.T(numeric.log(r.x),theta.x);');numeric.T.prototype.norm2=numeric.Tunop('return numeric.norm2(x.x);','var f = numeric.norm2Squared;\\n'+'return Math.sqrt(f(x.x)+f(x.y));');numeric.T.prototype.inv=function inv(){var A=this;if(typeof A.y===\"undefined\"){return new numeric.T(numeric.inv(A.x));}var n=A.x.length,i,j,k;var Rx=numeric.identity(n),Ry=numeric.rep([n,n],0);var Ax=numeric.clone(A.x),Ay=numeric.clone(A.y);var Aix,Aiy,Ajx,Ajy,Rix,Riy,Rjx,Rjy;var i,j,k,d,d1,ax,ay,bx,by,temp;for(i=0;i<n;i++){ax=Ax[i][i];ay=Ay[i][i];d=ax*ax+ay*ay;k=i;for(j=i+1;j<n;j++){ax=Ax[j][i];ay=Ay[j][i];d1=ax*ax+ay*ay;if(d1>d){k=j;d=d1;}}if(k!==i){temp=Ax[i];Ax[i]=Ax[k];Ax[k]=temp;temp=Ay[i];Ay[i]=Ay[k];Ay[k]=temp;temp=Rx[i];Rx[i]=Rx[k];Rx[k]=temp;temp=Ry[i];Ry[i]=Ry[k];Ry[k]=temp;}Aix=Ax[i];Aiy=Ay[i];Rix=Rx[i];Riy=Ry[i];ax=Aix[i];ay=Aiy[i];for(j=i+1;j<n;j++){bx=Aix[j];by=Aiy[j];Aix[j]=(bx*ax+by*ay)/d;Aiy[j]=(by*ax-bx*ay)/d;}for(j=0;j<n;j++){bx=Rix[j];by=Riy[j];Rix[j]=(bx*ax+by*ay)/d;Riy[j]=(by*ax-bx*ay)/d;}for(j=i+1;j<n;j++){Ajx=Ax[j];Ajy=Ay[j];Rjx=Rx[j];Rjy=Ry[j];ax=Ajx[i];ay=Ajy[i];for(k=i+1;k<n;k++){bx=Aix[k];by=Aiy[k];Ajx[k]-=bx*ax-by*ay;Ajy[k]-=by*ax+bx*ay;}for(k=0;k<n;k++){bx=Rix[k];by=Riy[k];Rjx[k]-=bx*ax-by*ay;Rjy[k]-=by*ax+bx*ay;}}}for(i=n-1;i>0;i--){Rix=Rx[i];Riy=Ry[i];for(j=i-1;j>=0;j--){Rjx=Rx[j];Rjy=Ry[j];ax=Ax[j][i];ay=Ay[j][i];for(k=n-1;k>=0;k--){bx=Rix[k];by=Riy[k];Rjx[k]-=ax*bx-ay*by;Rjy[k]-=ax*by+ay*bx;}}}return new numeric.T(Rx,Ry);};numeric.T.prototype.get=function get(i){var x=this.x,y=this.y,k=0,ik,n=i.length;if(y){while(k<n){ik=i[k];x=x[ik];y=y[ik];k++;}return new numeric.T(x,y);}while(k<n){ik=i[k];x=x[ik];k++;}return new numeric.T(x);};numeric.T.prototype.set=function set(i,v){var x=this.x,y=this.y,k=0,ik,n=i.length,vx=v.x,vy=v.y;if(n===0){if(vy){this.y=vy;}else if(y){this.y=undefined;}this.x=x;return this;}if(vy){if(y){/* ok */}else{y=numeric.rep(numeric.dim(x),0);this.y=y;}while(k<n-1){ik=i[k];x=x[ik];y=y[ik];k++;}ik=i[k];x[ik]=vx;y[ik]=vy;return this;}if(y){while(k<n-1){ik=i[k];x=x[ik];y=y[ik];k++;}ik=i[k];x[ik]=vx;if(vx instanceof Array)y[ik]=numeric.rep(numeric.dim(vx),0);else y[ik]=0;return this;}while(k<n-1){ik=i[k];x=x[ik];k++;}ik=i[k];x[ik]=vx;return this;};numeric.T.prototype.getRows=function getRows(i0,i1){var n=i1-i0+1,j;var rx=Array(n),ry,x=this.x,y=this.y;for(j=i0;j<=i1;j++){rx[j-i0]=x[j];}if(y){ry=Array(n);for(j=i0;j<=i1;j++){ry[j-i0]=y[j];}return new numeric.T(rx,ry);}return new numeric.T(rx);};numeric.T.prototype.setRows=function setRows(i0,i1,A){var j;var rx=this.x,ry=this.y,x=A.x,y=A.y;for(j=i0;j<=i1;j++){rx[j]=x[j-i0];}if(y){if(!ry){ry=numeric.rep(numeric.dim(rx),0);this.y=ry;}for(j=i0;j<=i1;j++){ry[j]=y[j-i0];}}else if(ry){for(j=i0;j<=i1;j++){ry[j]=numeric.rep([x[j-i0].length],0);}}return this;};numeric.T.prototype.getRow=function getRow(k){var x=this.x,y=this.y;if(y){return new numeric.T(x[k],y[k]);}return new numeric.T(x[k]);};numeric.T.prototype.setRow=function setRow(i,v){var rx=this.x,ry=this.y,x=v.x,y=v.y;rx[i]=x;if(y){if(!ry){ry=numeric.rep(numeric.dim(rx),0);this.y=ry;}ry[i]=y;}else if(ry){ry=numeric.rep([x.length],0);}return this;};numeric.T.prototype.getBlock=function getBlock(from,to){var x=this.x,y=this.y,b=numeric.getBlock;if(y){return new numeric.T(b(x,from,to),b(y,from,to));}return new numeric.T(b(x,from,to));};numeric.T.prototype.setBlock=function setBlock(from,to,A){if(!(A instanceof numeric.T))A=new numeric.T(A);var x=this.x,y=this.y,b=numeric.setBlock,Ax=A.x,Ay=A.y;if(Ay){if(!y){this.y=numeric.rep(numeric.dim(this),0);y=this.y;}b(x,from,to,Ax);b(y,from,to,Ay);return this;}b(x,from,to,Ax);if(y)b(y,from,to,numeric.rep(numeric.dim(Ax),0));};numeric.T.rep=function rep(s,v){var T=numeric.T;if(!(v instanceof T))v=new T(v);var x=v.x,y=v.y,r=numeric.rep;if(y)return new T(r(s,x),r(s,y));return new T(r(s,x));};numeric.T.diag=function diag(d){if(!(d instanceof numeric.T))d=new numeric.T(d);var x=d.x,y=d.y,diag=numeric.diag;if(y)return new numeric.T(diag(x),diag(y));return new numeric.T(diag(x));};numeric.T.eig=function eig(){if(this.y){throw new Error('eig: not implemented for complex matrices.');}return numeric.eig(this.x);};numeric.T.identity=function identity(n){return new numeric.T(numeric.identity(n));};numeric.T.prototype.getDiag=function getDiag(){var n=numeric;var x=this.x,y=this.y;if(y){return new n.T(n.getDiag(x),n.getDiag(y));}return new n.T(n.getDiag(x));};// 4. Eigenvalues of real matrices\nnumeric.house=function house(x){var v=numeric.clone(x);var s=x[0]>=0?1:-1;var alpha=s*numeric.norm2(x);v[0]+=alpha;var foo=numeric.norm2(v);if(foo===0){/* this should not happen */throw new Error('eig: internal error');}return numeric.div(v,foo);};numeric.toUpperHessenberg=function toUpperHessenberg(me){var s=numeric.dim(me);if(s.length!==2||s[0]!==s[1]){throw new Error('numeric: toUpperHessenberg() only works on square matrices');}var m=s[0],i,j,k,x,v,A=numeric.clone(me),B,C,Ai,Ci,Q=numeric.identity(m),Qi;for(j=0;j<m-2;j++){x=Array(m-j-1);for(i=j+1;i<m;i++){x[i-j-1]=A[i][j];}if(numeric.norm2(x)>0){v=numeric.house(x);B=numeric.getBlock(A,[j+1,j],[m-1,m-1]);C=numeric.tensor(v,numeric.dot(v,B));for(i=j+1;i<m;i++){Ai=A[i];Ci=C[i-j-1];for(k=j;k<m;k++){Ai[k]-=2*Ci[k-j];}}B=numeric.getBlock(A,[0,j+1],[m-1,m-1]);C=numeric.tensor(numeric.dot(B,v),v);for(i=0;i<m;i++){Ai=A[i];Ci=C[i];for(k=j+1;k<m;k++){Ai[k]-=2*Ci[k-j-1];}}B=Array(m-j-1);for(i=j+1;i<m;i++){B[i-j-1]=Q[i];}C=numeric.tensor(v,numeric.dot(v,B));for(i=j+1;i<m;i++){Qi=Q[i];Ci=C[i-j-1];for(k=0;k<m;k++){Qi[k]-=2*Ci[k];}}}}return{H:A,Q:Q};};numeric.epsilon=2.220446049250313e-16;numeric.QRFrancis=function(H,maxiter){if(typeof maxiter===\"undefined\"){maxiter=10000;}H=numeric.clone(H);var H0=numeric.clone(H);var s=numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr,Hloc,Q=numeric.identity(m),Qi,Hi,B,C,Ci,i,j,k,iter;if(m<3){return{Q:Q,B:[[0,m-1]]};}var epsilon=numeric.epsilon;for(iter=0;iter<maxiter;iter++){for(j=0;j<m-1;j++){if(Math.abs(H[j+1][j])<epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))){var QH1=numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);var QH2=numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);B=Array(j+1);for(i=0;i<=j;i++){B[i]=Q[i];}C=numeric.dot(QH1.Q,B);for(i=0;i<=j;i++){Q[i]=C[i];}B=Array(m-j-1);for(i=j+1;i<m;i++){B[i-j-1]=Q[i];}C=numeric.dot(QH2.Q,B);for(i=j+1;i<m;i++){Q[i]=C[i-j-1];}return{Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};}}a=H[m-2][m-2];b=H[m-2][m-1];c=H[m-1][m-2];d=H[m-1][m-1];tr=a+d;det=a*d-b*c;Hloc=numeric.getBlock(H,[0,0],[2,2]);if(tr*tr>=4*det){var s1,s2;s1=0.5*(tr+Math.sqrt(tr*tr-4*det));s2=0.5*(tr-Math.sqrt(tr*tr-4*det));Hloc=numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),numeric.mul(Hloc,s1+s2)),numeric.diag(numeric.rep([3],s1*s2)));}else{Hloc=numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),numeric.mul(Hloc,tr)),numeric.diag(numeric.rep([3],det)));}x=[Hloc[0][0],Hloc[1][0],Hloc[2][0]];v=numeric.house(x);B=[H[0],H[1],H[2]];C=numeric.tensor(v,numeric.dot(v,B));for(i=0;i<3;i++){Hi=H[i];Ci=C[i];for(k=0;k<m;k++){Hi[k]-=2*Ci[k];}}B=numeric.getBlock(H,[0,0],[m-1,2]);C=numeric.tensor(numeric.dot(B,v),v);for(i=0;i<m;i++){Hi=H[i];Ci=C[i];for(k=0;k<3;k++){Hi[k]-=2*Ci[k];}}B=[Q[0],Q[1],Q[2]];C=numeric.tensor(v,numeric.dot(v,B));for(i=0;i<3;i++){Qi=Q[i];Ci=C[i];for(k=0;k<m;k++){Qi[k]-=2*Ci[k];}}var J;for(j=0;j<m-2;j++){for(k=j;k<=j+1;k++){if(Math.abs(H[k+1][k])<epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))){var QH1=numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);var QH2=numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);B=Array(k+1);for(i=0;i<=k;i++){B[i]=Q[i];}C=numeric.dot(QH1.Q,B);for(i=0;i<=k;i++){Q[i]=C[i];}B=Array(m-k-1);for(i=k+1;i<m;i++){B[i-k-1]=Q[i];}C=numeric.dot(QH2.Q,B);for(i=k+1;i<m;i++){Q[i]=C[i-k-1];}return{Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};}}J=Math.min(m-1,j+3);x=Array(J-j);for(i=j+1;i<=J;i++){x[i-j-1]=H[i][j];}v=numeric.house(x);B=numeric.getBlock(H,[j+1,j],[J,m-1]);C=numeric.tensor(v,numeric.dot(v,B));for(i=j+1;i<=J;i++){Hi=H[i];Ci=C[i-j-1];for(k=j;k<m;k++){Hi[k]-=2*Ci[k-j];}}B=numeric.getBlock(H,[0,j+1],[m-1,J]);C=numeric.tensor(numeric.dot(B,v),v);for(i=0;i<m;i++){Hi=H[i];Ci=C[i];for(k=j+1;k<=J;k++){Hi[k]-=2*Ci[k-j-1];}}B=Array(J-j);for(i=j+1;i<=J;i++){B[i-j-1]=Q[i];}C=numeric.tensor(v,numeric.dot(v,B));for(i=j+1;i<=J;i++){Qi=Q[i];Ci=C[i-j-1];for(k=0;k<m;k++){Qi[k]-=2*Ci[k];}}}}throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');};numeric.eig=function eig(A,maxiter){var QH=numeric.toUpperHessenberg(A);var QB=numeric.QRFrancis(QH.H,maxiter);var T=numeric.T;var n=A.length,i,k,flag=false,B=QB.B,H=numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));var Q=new T(numeric.dot(QB.Q,QH.Q)),Q0;var m=B.length,j;var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;var sqrt=Math.sqrt;for(k=0;k<m;k++){i=B[k][0];if(i===B[k][1]){// nothing\n}else{j=i+1;a=H[i][i];b=H[i][j];c=H[j][i];d=H[j][j];if(b===0&&c===0)continue;p1=-a-d;p2=a*d-b*c;disc=p1*p1-4*p2;if(disc>=0){if(p1<0)x=-0.5*(p1-sqrt(disc));else x=-0.5*(p1+sqrt(disc));n1=(a-x)*(a-x)+b*b;n2=c*c+(d-x)*(d-x);if(n1>n2){n1=sqrt(n1);p=(a-x)/n1;q=b/n1;}else{n2=sqrt(n2);p=c/n2;q=(d-x)/n2;}Q0=new T([[q,-p],[p,q]]);Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));}else{x=-0.5*p1;y=0.5*sqrt(-disc);n1=(a-x)*(a-x)+b*b;n2=c*c+(d-x)*(d-x);if(n1>n2){n1=sqrt(n1+y*y);p=(a-x)/n1;q=b/n1;x=0;y/=n1;}else{n2=sqrt(n2+y*y);p=c/n2;q=(d-x)/n2;x=y/n2;y=0;}Q0=new T([[q,-p],[p,q]],[[x,y],[y,-x]]);Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));}}}var R=Q.dot(A).dot(Q.transjugate()),n=A.length,E=numeric.T.identity(n);for(j=0;j<n;j++){if(j>0){for(k=j-1;k>=0;k--){var Rk=R.get([k,k]),Rj=R.get([j,j]);if(numeric.neq(Rk.x,Rj.x)||numeric.neq(Rk.y,Rj.y)){x=R.getRow(k).getBlock([k],[j-1]);y=E.getRow(j).getBlock([k],[j-1]);E.set([j,k],R.get([k,j]).neg().sub(x.dot(y)).div(Rk.sub(Rj)));}else{E.setRow(j,E.getRow(k));continue;}}}}for(j=0;j<n;j++){x=E.getRow(j);E.setRow(j,x.div(x.norm2()));}E=E.transpose();E=Q.transjugate().dot(E);return{lambda:R.getDiag(),E:E};};// 5. Compressed Column Storage matrices\nnumeric.ccsSparse=function ccsSparse(A){var m=A.length,n,foo,i,j,counts=[];for(i=m-1;i!==-1;--i){foo=A[i];for(j in foo){j=parseInt(j);while(j>=counts.length){counts[counts.length]=0;}if(foo[j]!==0)counts[j]++;}}var n=counts.length;var Ai=Array(n+1);Ai[0]=0;for(i=0;i<n;++i){Ai[i+1]=Ai[i]+counts[i];}var Aj=Array(Ai[n]),Av=Array(Ai[n]);for(i=m-1;i!==-1;--i){foo=A[i];for(j in foo){if(foo[j]!==0){counts[j]--;Aj[Ai[j]+counts[j]]=i;Av[Ai[j]+counts[j]]=foo[j];}}}return[Ai,Aj,Av];};numeric.ccsFull=function ccsFull(A){var Ai=A[0],Aj=A[1],Av=A[2],s=numeric.ccsDim(A),m=s[0],n=s[1],i,j,j0,j1,k;var B=numeric.rep([m,n],0);for(i=0;i<n;i++){j0=Ai[i];j1=Ai[i+1];for(j=j0;j<j1;++j){B[Aj[j]][i]=Av[j];}}return B;};numeric.ccsTSolve=function ccsTSolve(A,b,x,bj,xj){var Ai=A[0],Aj=A[1],Av=A[2],m=Ai.length-1,max=Math.max,n=0;if(typeof bj===\"undefined\")x=numeric.rep([m],0);if(typeof bj===\"undefined\")bj=numeric.linspace(0,x.length-1);if(typeof xj===\"undefined\")xj=[];function dfs(j){var k;if(x[j]!==0)return;x[j]=1;for(k=Ai[j];k<Ai[j+1];++k){dfs(Aj[k]);}xj[n]=j;++n;}var i,j,j0,j1,k,l,l0,l1,a;for(i=bj.length-1;i!==-1;--i){dfs(bj[i]);}xj.length=n;for(i=xj.length-1;i!==-1;--i){x[xj[i]]=0;}for(i=bj.length-1;i!==-1;--i){j=bj[i];x[j]=b[j];}for(i=xj.length-1;i!==-1;--i){j=xj[i];j0=Ai[j];j1=max(Ai[j+1],j0);for(k=j0;k!==j1;++k){if(Aj[k]===j){x[j]/=Av[k];break;}}a=x[j];for(k=j0;k!==j1;++k){l=Aj[k];if(l!==j)x[l]-=a*Av[k];}}return x;};numeric.ccsDFS=function ccsDFS(n){this.k=Array(n);this.k1=Array(n);this.j=Array(n);};numeric.ccsDFS.prototype.dfs=function dfs(J,Ai,Aj,x,xj,Pinv){var m=0,foo,n=xj.length;var k=this.k,k1=this.k1,j=this.j,km,k11;if(x[J]!==0)return;x[J]=1;j[0]=J;k[0]=km=Ai[J];k1[0]=k11=Ai[J+1];while(1){if(km>=k11){xj[n]=j[m];if(m===0)return;++n;--m;km=k[m];k11=k1[m];}else{foo=Pinv[Aj[km]];if(x[foo]===0){x[foo]=1;k[m]=km;++m;j[m]=foo;km=Ai[foo];k1[m]=k11=Ai[foo+1];}else++km;}}};numeric.ccsLPSolve=function ccsLPSolve(A,B,x,xj,I,Pinv,dfs){var Ai=A[0],Aj=A[1],Av=A[2],m=Ai.length-1,n=0;var Bi=B[0],Bj=B[1],Bv=B[2];var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;i0=Bi[I];i1=Bi[I+1];xj.length=0;for(i=i0;i<i1;++i){dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv);}for(i=xj.length-1;i!==-1;--i){x[xj[i]]=0;}for(i=i0;i!==i1;++i){j=Pinv[Bj[i]];x[j]=Bv[i];}for(i=xj.length-1;i!==-1;--i){j=xj[i];j0=Ai[j];j1=Ai[j+1];for(k=j0;k<j1;++k){if(Pinv[Aj[k]]===j){x[j]/=Av[k];break;}}a=x[j];for(k=j0;k<j1;++k){l=Pinv[Aj[k]];if(l!==j)x[l]-=a*Av[k];}}return x;};numeric.ccsLUP1=function ccsLUP1(A,threshold){var m=A[0].length-1;var L=[numeric.rep([m+1],0),[],[]],U=[numeric.rep([m+1],0),[],[]];var Li=L[0],Lj=L[1],Lv=L[2],Ui=U[0],Uj=U[1],Uv=U[2];var x=numeric.rep([m],0),xj=numeric.rep([m],0);var i,j,k,j0,j1,a,e,c,d,K;var sol=numeric.ccsLPSolve,max=Math.max,abs=Math.abs;var P=numeric.linspace(0,m-1),Pinv=numeric.linspace(0,m-1);var dfs=new numeric.ccsDFS(m);if(typeof threshold===\"undefined\"){threshold=1;}for(i=0;i<m;++i){sol(L,A,x,xj,i,Pinv,dfs);a=-1;e=-1;for(j=xj.length-1;j!==-1;--j){k=xj[j];if(k<=i)continue;c=abs(x[k]);if(c>a){e=k;a=c;}}if(abs(x[i])<threshold*a){j=P[i];a=P[e];P[i]=a;Pinv[a]=i;P[e]=j;Pinv[j]=e;a=x[i];x[i]=x[e];x[e]=a;}a=Li[i];e=Ui[i];d=x[i];Lj[a]=P[i];Lv[a]=1;++a;for(j=xj.length-1;j!==-1;--j){k=xj[j];c=x[k];xj[j]=0;x[k]=0;if(k<=i){Uj[e]=k;Uv[e]=c;++e;}else{Lj[a]=P[k];Lv[a]=c/d;++a;}}Li[i+1]=a;Ui[i+1]=e;}for(j=Lj.length-1;j!==-1;--j){Lj[j]=Pinv[Lj[j]];}return{L:L,U:U,P:P,Pinv:Pinv};};numeric.ccsDFS0=function ccsDFS0(n){this.k=Array(n);this.k1=Array(n);this.j=Array(n);};numeric.ccsDFS0.prototype.dfs=function dfs(J,Ai,Aj,x,xj,Pinv,P){var m=0,foo,n=xj.length;var k=this.k,k1=this.k1,j=this.j,km,k11;if(x[J]!==0)return;x[J]=1;j[0]=J;k[0]=km=Ai[Pinv[J]];k1[0]=k11=Ai[Pinv[J]+1];while(1){if(isNaN(km))throw new Error(\"Ow!\");if(km>=k11){xj[n]=Pinv[j[m]];if(m===0)return;++n;--m;km=k[m];k11=k1[m];}else{foo=Aj[km];if(x[foo]===0){x[foo]=1;k[m]=km;++m;j[m]=foo;foo=Pinv[foo];km=Ai[foo];k1[m]=k11=Ai[foo+1];}else++km;}}};numeric.ccsLPSolve0=function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs){var Ai=A[0],Aj=A[1],Av=A[2],m=Ai.length-1,n=0;var Bi=B[0],Bj=B[1],Bv=B[2];var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;i0=Bi[I];i1=Bi[I+1];xj.length=0;for(i=i0;i<i1;++i){dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P);}for(i=xj.length-1;i!==-1;--i){j=xj[i];y[P[j]]=0;}for(i=i0;i!==i1;++i){j=Bj[i];y[j]=Bv[i];}for(i=xj.length-1;i!==-1;--i){j=xj[i];l=P[j];j0=Ai[j];j1=Ai[j+1];for(k=j0;k<j1;++k){if(Aj[k]===l){y[l]/=Av[k];break;}}a=y[l];for(k=j0;k<j1;++k){y[Aj[k]]-=a*Av[k];}y[l]=a;}};numeric.ccsLUP0=function ccsLUP0(A,threshold){var m=A[0].length-1;var L=[numeric.rep([m+1],0),[],[]],U=[numeric.rep([m+1],0),[],[]];var Li=L[0],Lj=L[1],Lv=L[2],Ui=U[0],Uj=U[1],Uv=U[2];var y=numeric.rep([m],0),xj=numeric.rep([m],0);var i,j,k,j0,j1,a,e,c,d,K;var sol=numeric.ccsLPSolve0,max=Math.max,abs=Math.abs;var P=numeric.linspace(0,m-1),Pinv=numeric.linspace(0,m-1);var dfs=new numeric.ccsDFS0(m);if(typeof threshold===\"undefined\"){threshold=1;}for(i=0;i<m;++i){sol(L,A,y,xj,i,Pinv,P,dfs);a=-1;e=-1;for(j=xj.length-1;j!==-1;--j){k=xj[j];if(k<=i)continue;c=abs(y[P[k]]);if(c>a){e=k;a=c;}}if(abs(y[P[i]])<threshold*a){j=P[i];a=P[e];P[i]=a;Pinv[a]=i;P[e]=j;Pinv[j]=e;}a=Li[i];e=Ui[i];d=y[P[i]];Lj[a]=P[i];Lv[a]=1;++a;for(j=xj.length-1;j!==-1;--j){k=xj[j];c=y[P[k]];xj[j]=0;y[P[k]]=0;if(k<=i){Uj[e]=k;Uv[e]=c;++e;}else{Lj[a]=P[k];Lv[a]=c/d;++a;}}Li[i+1]=a;Ui[i+1]=e;}for(j=Lj.length-1;j!==-1;--j){Lj[j]=Pinv[Lj[j]];}return{L:L,U:U,P:P,Pinv:Pinv};};numeric.ccsLUP=numeric.ccsLUP0;numeric.ccsDim=function ccsDim(A){return[numeric.sup(A[1])+1,A[0].length-1];};numeric.ccsGetBlock=function ccsGetBlock(A,i,j){var s=numeric.ccsDim(A),m=s[0],n=s[1];if(typeof i===\"undefined\"){i=numeric.linspace(0,m-1);}else if(typeof i===\"number\"){i=[i];}if(typeof j===\"undefined\"){j=numeric.linspace(0,n-1);}else if(typeof j===\"number\"){j=[j];}var p,p0,p1,P=i.length,q,Q=j.length,r,jq,ip;var Bi=numeric.rep([n],0),Bj=[],Bv=[],B=[Bi,Bj,Bv];var Ai=A[0],Aj=A[1],Av=A[2];var x=numeric.rep([m],0),count=0,flags=numeric.rep([m],0);for(q=0;q<Q;++q){jq=j[q];var q0=Ai[jq];var q1=Ai[jq+1];for(p=q0;p<q1;++p){r=Aj[p];flags[r]=1;x[r]=Av[p];}for(p=0;p<P;++p){ip=i[p];if(flags[ip]){Bj[count]=p;Bv[count]=x[i[p]];++count;}}for(p=q0;p<q1;++p){r=Aj[p];flags[r]=0;}Bi[q+1]=count;}return B;};numeric.ccsDot=function ccsDot(A,B){var Ai=A[0],Aj=A[1],Av=A[2];var Bi=B[0],Bj=B[1],Bv=B[2];var sA=numeric.ccsDim(A),sB=numeric.ccsDim(B);var m=sA[0],n=sA[1],o=sB[1];var x=numeric.rep([m],0),flags=numeric.rep([m],0),xj=Array(m);var Ci=numeric.rep([o],0),Cj=[],Cv=[],C=[Ci,Cj,Cv];var i,j,k,j0,j1,i0,i1,l,p,a,b;for(k=0;k!==o;++k){j0=Bi[k];j1=Bi[k+1];p=0;for(j=j0;j<j1;++j){a=Bj[j];b=Bv[j];i0=Ai[a];i1=Ai[a+1];for(i=i0;i<i1;++i){l=Aj[i];if(flags[l]===0){xj[p]=l;flags[l]=1;p=p+1;}x[l]=x[l]+Av[i]*b;}}j0=Ci[k];j1=j0+p;Ci[k+1]=j1;for(j=p-1;j!==-1;--j){b=j0+j;i=xj[j];Cj[b]=i;Cv[b]=x[i];flags[i]=0;x[i]=0;}Ci[k+1]=Ci[k]+p;}return C;};numeric.ccsLUPSolve=function ccsLUPSolve(LUP,B){var L=LUP.L,U=LUP.U,P=LUP.P;var Bi=B[0];var flag=false;if(_typeof2(Bi)!==\"object\"){B=[[0,B.length],numeric.linspace(0,B.length-1),B];Bi=B[0];flag=true;}var Bj=B[1],Bv=B[2];var n=L[0].length-1,m=Bi.length-1;var x=numeric.rep([n],0),xj=Array(n);var b=numeric.rep([n],0),bj=Array(n);var Xi=numeric.rep([m+1],0),Xj=[],Xv=[];var sol=numeric.ccsTSolve;var i,j,j0,j1,k,J,N=0;for(i=0;i<m;++i){k=0;j0=Bi[i];j1=Bi[i+1];for(j=j0;j<j1;++j){J=LUP.Pinv[Bj[j]];bj[k]=J;b[J]=Bv[j];++k;}bj.length=k;sol(L,b,x,bj,xj);for(j=bj.length-1;j!==-1;--j){b[bj[j]]=0;}sol(U,x,b,xj,bj);if(flag)return b;for(j=xj.length-1;j!==-1;--j){x[xj[j]]=0;}for(j=bj.length-1;j!==-1;--j){J=bj[j];Xj[N]=J;Xv[N]=b[J];b[J]=0;++N;}Xi[i+1]=N;}return[Xi,Xj,Xv];};numeric.ccsbinop=function ccsbinop(body,setup){if(typeof setup===\"undefined\")setup='';return Function('X','Y','var Xi = X[0], Xj = X[1], Xv = X[2];\\n'+'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\\n'+'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\n'+'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\n'+'var x = numeric.rep([m],0),y = numeric.rep([m],0);\\n'+'var xk,yk,zk;\\n'+'var i,j,j0,j1,k,p=0;\\n'+setup+'for(i=0;i<n;++i) {\\n'+'  j0 = Xi[i]; j1 = Xi[i+1];\\n'+'  for(j=j0;j!==j1;++j) {\\n'+'    k = Xj[j];\\n'+'    x[k] = 1;\\n'+'    Zj[p] = k;\\n'+'    ++p;\\n'+'  }\\n'+'  j0 = Yi[i]; j1 = Yi[i+1];\\n'+'  for(j=j0;j!==j1;++j) {\\n'+'    k = Yj[j];\\n'+'    y[k] = Yv[j];\\n'+'    if(x[k] === 0) {\\n'+'      Zj[p] = k;\\n'+'      ++p;\\n'+'    }\\n'+'  }\\n'+'  Zi[i+1] = p;\\n'+'  j0 = Xi[i]; j1 = Xi[i+1];\\n'+'  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n'+'  j0 = Zi[i]; j1 = Zi[i+1];\\n'+'  for(j=j0;j!==j1;++j) {\\n'+'    k = Zj[j];\\n'+'    xk = x[k];\\n'+'    yk = y[k];\\n'+body+'\\n'+'    Zv[j] = zk;\\n'+'  }\\n'+'  j0 = Xi[i]; j1 = Xi[i+1];\\n'+'  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n'+'  j0 = Yi[i]; j1 = Yi[i+1];\\n'+'  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n'+'}\\n'+'return [Zi,Zj,Zv];');};(function(){var k,A,B,C;for(k in numeric.ops2){if(isFinite(eval('1'+numeric.ops2[k]+'0')))A='[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';else A='NaN';if(isFinite(eval('0'+numeric.ops2[k]+'1')))B='[X[0],X[1],numeric.'+k+'(X[2],Y)]';else B='NaN';if(isFinite(eval('1'+numeric.ops2[k]+'0'))&&isFinite(eval('0'+numeric.ops2[k]+'1')))C='numeric.ccs'+k+'MM(X,Y)';else C='NaN';numeric['ccs'+k+'MM']=numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');numeric['ccs'+k]=Function('X','Y','if(typeof X === \"number\") return '+A+';\\n'+'if(typeof Y === \"number\") return '+B+';\\n'+'return '+C+';\\n');}})();numeric.ccsScatter=function ccsScatter(A){var Ai=A[0],Aj=A[1],Av=A[2];var n=numeric.sup(Aj)+1,m=Ai.length;var Ri=numeric.rep([n],0),Rj=Array(m),Rv=Array(m);var counts=numeric.rep([n],0),i;for(i=0;i<m;++i){counts[Aj[i]]++;}for(i=0;i<n;++i){Ri[i+1]=Ri[i]+counts[i];}var ptr=Ri.slice(0),k,Aii;for(i=0;i<m;++i){Aii=Aj[i];k=ptr[Aii];Rj[k]=Ai[i];Rv[k]=Av[i];ptr[Aii]=ptr[Aii]+1;}return[Ri,Rj,Rv];};numeric.ccsGather=function ccsGather(A){var Ai=A[0],Aj=A[1],Av=A[2];var n=Ai.length-1,m=Aj.length;var Ri=Array(m),Rj=Array(m),Rv=Array(m);var i,j,j0,j1,p;p=0;for(i=0;i<n;++i){j0=Ai[i];j1=Ai[i+1];for(j=j0;j!==j1;++j){Rj[p]=i;Ri[p]=Aj[j];Rv[p]=Av[j];++p;}}return[Ri,Rj,Rv];};// The following sparse linear algebra routines are deprecated.\nnumeric.sdim=function dim(A,ret,k){if(typeof ret===\"undefined\"){ret=[];}if(_typeof2(A)!==\"object\")return ret;if(typeof k===\"undefined\"){k=0;}if(!(k in ret)){ret[k]=0;}if(A.length>ret[k])ret[k]=A.length;var i;for(i in A){if(A.hasOwnProperty(i))dim(A[i],ret,k+1);}return ret;};numeric.sclone=function clone(A,k,n){if(typeof k===\"undefined\"){k=0;}if(typeof n===\"undefined\"){n=numeric.sdim(A).length;}var i,ret=Array(A.length);if(k===n-1){for(i in A){if(A.hasOwnProperty(i))ret[i]=A[i];}return ret;}for(i in A){if(A.hasOwnProperty(i))ret[i]=clone(A[i],k+1,n);}return ret;};numeric.sdiag=function diag(d){var n=d.length,i,ret=Array(n),i1,i2,i3;for(i=n-1;i>=1;i-=2){i1=i-1;ret[i]=[];ret[i][i]=d[i];ret[i1]=[];ret[i1][i1]=d[i1];}if(i===0){ret[0]=[];ret[0][0]=d[i];}return ret;};numeric.sidentity=function identity(n){return numeric.sdiag(numeric.rep([n],1));};numeric.stranspose=function transpose(A){var ret=[],n=A.length,i,j,Ai;for(i in A){if(!A.hasOwnProperty(i))continue;Ai=A[i];for(j in Ai){if(!Ai.hasOwnProperty(j))continue;if(_typeof2(ret[j])!==\"object\"){ret[j]=[];}ret[j][i]=Ai[j];}}return ret;};numeric.sLUP=function LUP(A,tol){throw new Error(\"The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.\");};numeric.sdotMM=function dotMM(A,B){var p=A.length,q=B.length,BT=numeric.stranspose(B),r=BT.length,Ai,BTk;var i,j,k,accum;var ret=Array(p),reti;for(i=p-1;i>=0;i--){reti=[];Ai=A[i];for(k=r-1;k>=0;k--){accum=0;BTk=BT[k];for(j in Ai){if(!Ai.hasOwnProperty(j))continue;if(j in BTk){accum+=Ai[j]*BTk[j];}}if(accum)reti[k]=accum;}ret[i]=reti;}return ret;};numeric.sdotMV=function dotMV(A,x){var p=A.length,Ai,i,j;var ret=Array(p),accum;for(i=p-1;i>=0;i--){Ai=A[i];accum=0;for(j in Ai){if(!Ai.hasOwnProperty(j))continue;if(x[j])accum+=Ai[j]*x[j];}if(accum)ret[i]=accum;}return ret;};numeric.sdotVM=function dotMV(x,A){var i,j,Ai,alpha;var ret=[],accum;for(i in x){if(!x.hasOwnProperty(i))continue;Ai=A[i];alpha=x[i];for(j in Ai){if(!Ai.hasOwnProperty(j))continue;if(!ret[j]){ret[j]=0;}ret[j]+=alpha*Ai[j];}}return ret;};numeric.sdotVV=function dotVV(x,y){var i,ret=0;for(i in x){if(x[i]&&y[i])ret+=x[i]*y[i];}return ret;};numeric.sdot=function dot(A,B){var m=numeric.sdim(A).length,n=numeric.sdim(B).length;var k=m*1000+n;switch(k){case 0:return A*B;case 1001:return numeric.sdotVV(A,B);case 2001:return numeric.sdotMV(A,B);case 1002:return numeric.sdotVM(A,B);case 2002:return numeric.sdotMM(A,B);default:throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);}};numeric.sscatter=function scatter(V){var n=V[0].length,Vij,i,j,m=V.length,A=[],Aj;for(i=n-1;i>=0;--i){if(!V[m-1][i])continue;Aj=A;for(j=0;j<m-2;j++){Vij=V[j][i];if(!Aj[Vij])Aj[Vij]=[];Aj=Aj[Vij];}Aj[V[j][i]]=V[j+1][i];}return A;};numeric.sgather=function gather(A,ret,k){if(typeof ret===\"undefined\")ret=[];if(typeof k===\"undefined\")k=[];var n,i,Ai;n=k.length;for(i in A){if(A.hasOwnProperty(i)){k[n]=parseInt(i);Ai=A[i];if(typeof Ai===\"number\"){if(Ai){if(ret.length===0){for(i=n+1;i>=0;--i){ret[i]=[];}}for(i=n;i>=0;--i){ret[i].push(k[i]);}ret[n+1].push(Ai);}}else gather(Ai,ret,k);}}if(k.length>n)k.pop();return ret;};// 6. Coordinate matrices\nnumeric.cLU=function LU(A){var I=A[0],J=A[1],V=A[2];var p=I.length,m=0,i,j,k,a,b,c;for(i=0;i<p;i++){if(I[i]>m)m=I[i];}m++;var L=Array(m),U=Array(m),left=numeric.rep([m],Infinity),right=numeric.rep([m],-Infinity);var Ui,Uj,alpha;for(k=0;k<p;k++){i=I[k];j=J[k];if(j<left[i])left[i]=j;if(j>right[i])right[i]=j;}for(i=0;i<m-1;i++){if(right[i]>right[i+1])right[i+1]=right[i];}for(i=m-1;i>=1;i--){if(left[i]<left[i-1])left[i-1]=left[i];}var countL=0,countU=0;for(i=0;i<m;i++){U[i]=numeric.rep([right[i]-left[i]+1],0);L[i]=numeric.rep([i-left[i]],0);countL+=i-left[i]+1;countU+=right[i]-i+1;}for(k=0;k<p;k++){i=I[k];U[i][J[k]-left[i]]=V[k];}for(i=0;i<m-1;i++){a=i-left[i];Ui=U[i];for(j=i+1;left[j]<=i&&j<m;j++){b=i-left[j];c=right[i]-i;Uj=U[j];alpha=Uj[b]/Ui[a];if(alpha){for(k=1;k<=c;k++){Uj[k+b]-=alpha*Ui[k+a];}L[j][i-left[j]]=alpha;}}}var Ui=[],Uj=[],Uv=[],Li=[],Lj=[],Lv=[];var p,q,foo;p=0;q=0;for(i=0;i<m;i++){a=left[i];b=right[i];foo=U[i];for(j=i;j<=b;j++){if(foo[j-a]){Ui[p]=i;Uj[p]=j;Uv[p]=foo[j-a];p++;}}foo=L[i];for(j=a;j<i;j++){if(foo[j-a]){Li[q]=i;Lj[q]=j;Lv[q]=foo[j-a];q++;}}Li[q]=i;Lj[q]=i;Lv[q]=1;q++;}return{U:[Ui,Uj,Uv],L:[Li,Lj,Lv]};};numeric.cLUsolve=function LUsolve(lu,b){var L=lu.L,U=lu.U,ret=numeric.clone(b);var Li=L[0],Lj=L[1],Lv=L[2];var Ui=U[0],Uj=U[1],Uv=U[2];var p=Ui.length,q=Li.length;var m=ret.length,i,j,k;k=0;for(i=0;i<m;i++){while(Lj[k]<i){ret[i]-=Lv[k]*ret[Lj[k]];k++;}k++;}k=p-1;for(i=m-1;i>=0;i--){while(Uj[k]>i){ret[i]-=Uv[k]*ret[Uj[k]];k--;}ret[i]/=Uv[k];k--;}return ret;};numeric.cgrid=function grid(n,shape){if(typeof n===\"number\")n=[n,n];var ret=numeric.rep(n,-1);var i,j,count;if(typeof shape!==\"function\"){switch(shape){case'L':shape=function shape(i,j){return i>=n[0]/2||j<n[1]/2;};break;default:shape=function shape(i,j){return true;};break;}}count=0;for(i=1;i<n[0]-1;i++){for(j=1;j<n[1]-1;j++){if(shape(i,j)){ret[i][j]=count;count++;}}}return ret;};numeric.cdelsq=function delsq(g){var dir=[[-1,0],[0,-1],[0,1],[1,0]];var s=numeric.dim(g),m=s[0],n=s[1],i,j,k,p,q;var Li=[],Lj=[],Lv=[];for(i=1;i<m-1;i++){for(j=1;j<n-1;j++){if(g[i][j]<0)continue;for(k=0;k<4;k++){p=i+dir[k][0];q=j+dir[k][1];if(g[p][q]<0)continue;Li.push(g[i][j]);Lj.push(g[p][q]);Lv.push(-1);}Li.push(g[i][j]);Lj.push(g[i][j]);Lv.push(4);}}return[Li,Lj,Lv];};numeric.cdotMV=function dotMV(A,x){var ret,Ai=A[0],Aj=A[1],Av=A[2],k,p=Ai.length,N;N=0;for(k=0;k<p;k++){if(Ai[k]>N)N=Ai[k];}N++;ret=numeric.rep([N],0);for(k=0;k<p;k++){ret[Ai[k]]+=Av[k]*x[Aj[k]];}return ret;};// 7. Splines\nnumeric.Spline=function Spline(x,yl,yr,kl,kr){this.x=x;this.yl=yl;this.yr=yr;this.kl=kl;this.kr=kr;};numeric.Spline.prototype._at=function _at(x1,p){var x=this.x;var yl=this.yl;var yr=this.yr;var kl=this.kl;var kr=this.kr;var x1,a,b,t;var add=numeric.add,sub=numeric.sub,mul=numeric.mul;a=sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));b=add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));t=(x1-x[p])/(x[p+1]-x[p]);var s=t*(1-t);return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));};numeric.Spline.prototype.at=function at(x0){if(typeof x0===\"number\"){var x=this.x;var n=x.length;var p,q,mid,floor=Math.floor,a,b,t;p=0;q=n-1;while(q-p>1){mid=floor((p+q)/2);if(x[mid]<=x0)p=mid;else q=mid;}return this._at(x0,p);}var n=x0.length,i,ret=Array(n);for(i=n-1;i!==-1;--i){ret[i]=this.at(x0[i]);}return ret;};numeric.Spline.prototype.diff=function diff(){var x=this.x;var yl=this.yl;var yr=this.yr;var kl=this.kl;var kr=this.kr;var n=yl.length;var i,dx,dy;var zl=kl,zr=kr,pl=Array(n),pr=Array(n);var add=numeric.add,mul=numeric.mul,div=numeric.div,sub=numeric.sub;for(i=n-1;i!==-1;--i){dx=x[i+1]-x[i];dy=sub(yr[i+1],yl[i]);pl[i]=div(add(mul(dy,6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);pr[i+1]=div(add(mul(dy,-6),mul(kl[i],2*dx),mul(kr[i+1],4*dx)),dx*dx);}return new numeric.Spline(x,zl,zr,pl,pr);};numeric.Spline.prototype.roots=function roots(){function sqr(x){return x*x;}function heval(y0,y1,k0,k1,x){var A=k0*2-(y1-y0);var B=-k1*2+(y1-y0);var t=(x+1)*0.5;var s=t*(1-t);return(1-t)*y0+t*y1+A*s*(1-t)+B*s*t;}var ret=[];var x=this.x,yl=this.yl,yr=this.yr,kl=this.kl,kr=this.kr;if(typeof yl[0]===\"number\"){yl=[yl];yr=[yr];kl=[kl];kr=[kr];}var m=yl.length,n=x.length-1,i,j,k,y,s,t;var ai,bi,ci,di,ret=Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;var sqrt=Math.sqrt;for(i=0;i!==m;++i){ai=yl[i];bi=yr[i];ci=kl[i];di=kr[i];ri=[];for(j=0;j!==n;j++){if(j>0&&bi[j]*ai[j]<0)ri.push(x[j]);dx=x[j+1]-x[j];cx=x[j];y0=ai[j];y1=bi[j+1];k0=ci[j]/dx;k1=di[j+1]/dx;D=sqr(k0-k1+3*(y0-y1))+12*k1*y0;A=k1+3*y0+2*k0-3*y1;B=3*(k1+k0+2*(y0-y1));if(D<=0){z0=A/B;if(z0>x[j]&&z0<x[j+1])stops=[x[j],z0,x[j+1]];else stops=[x[j],x[j+1]];}else{z0=(A-sqrt(D))/B;z1=(A+sqrt(D))/B;stops=[x[j]];if(z0>x[j]&&z0<x[j+1])stops.push(z0);if(z1>x[j]&&z1<x[j+1])stops.push(z1);stops.push(x[j+1]);}t0=stops[0];z0=this._at(t0,j);for(k=0;k<stops.length-1;k++){t1=stops[k+1];z1=this._at(t1,j);if(z0===0){ri.push(t0);t0=t1;z0=z1;continue;}if(z1===0||z0*z1>0){t0=t1;z0=z1;continue;}var side=0;while(1){tm=(z0*t1-z1*t0)/(z0-z1);if(tm<=t0||tm>=t1){break;}zm=this._at(tm,j);if(zm*z1>0){t1=tm;z1=zm;if(side===-1)z0*=0.5;side=-1;}else if(zm*z0>0){t0=tm;z0=zm;if(side===1)z1*=0.5;side=1;}else break;}ri.push(tm);t0=stops[k+1];z0=this._at(t0,j);}if(z1===0)ri.push(t1);}ret[i]=ri;}if(typeof this.yl[0]===\"number\")return ret[0];return ret;};numeric.spline=function spline(x,y,k1,kn){var n=x.length,b=[],dx=[],dy=[];var i;var sub=numeric.sub,mul=numeric.mul,add=numeric.add;for(i=n-2;i>=0;i--){dx[i]=x[i+1]-x[i];dy[i]=sub(y[i+1],y[i]);}if(typeof k1===\"string\"||typeof kn===\"string\"){k1=kn=\"periodic\";}// Build sparse tridiagonal system\nvar T=[[],[],[]];switch(_typeof2(k1)){case\"undefined\":b[0]=mul(3/(dx[0]*dx[0]),dy[0]);T[0].push(0,0);T[1].push(0,1);T[2].push(2/dx[0],1/dx[0]);break;case\"string\":b[0]=add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));T[0].push(0,0,0);T[1].push(n-2,0,1);T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);break;default:b[0]=k1;T[0].push(0);T[1].push(0);T[2].push(1);break;}for(i=1;i<n-1;i++){b[i]=add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));T[0].push(i,i,i);T[1].push(i-1,i,i+1);T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);}switch(_typeof2(kn)){case\"undefined\":b[n-1]=mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);T[0].push(n-1,n-1);T[1].push(n-2,n-1);T[2].push(1/dx[n-2],2/dx[n-2]);break;case\"string\":T[1][T[1].length-1]=0;break;default:b[n-1]=kn;T[0].push(n-1);T[1].push(n-1);T[2].push(1);break;}if(typeof b[0]!==\"number\")b=numeric.transpose(b);else b=[b];var k=Array(b.length);if(typeof k1===\"string\"){for(i=k.length-1;i!==-1;--i){k[i]=numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);k[i][n-1]=k[i][0];}}else{for(i=k.length-1;i!==-1;--i){k[i]=numeric.cLUsolve(numeric.cLU(T),b[i]);}}if(typeof y[0]===\"number\")k=k[0];else k=numeric.transpose(k);return new numeric.Spline(x,y,y,k,k);};// 8. FFT\nnumeric.fftpow2=function fftpow2(x,y){var n=x.length;if(n===1)return;var cos=Math.cos,sin=Math.sin,i,j;var xe=Array(n/2),ye=Array(n/2),xo=Array(n/2),yo=Array(n/2);j=n/2;for(i=n-1;i!==-1;--i){--j;xo[j]=x[i];yo[j]=y[i];--i;xe[j]=x[i];ye[j]=y[i];}fftpow2(xe,ye);fftpow2(xo,yo);j=n/2;var t,k=-6.2831853071795864769252867665590057683943387987502116419/n,ci,si;for(i=n-1;i!==-1;--i){--j;if(j===-1)j=n/2-1;t=k*i;ci=cos(t);si=sin(t);x[i]=xe[j]+ci*xo[j]-si*yo[j];y[i]=ye[j]+ci*yo[j]+si*xo[j];}};numeric._ifftpow2=function _ifftpow2(x,y){var n=x.length;if(n===1)return;var cos=Math.cos,sin=Math.sin,i,j;var xe=Array(n/2),ye=Array(n/2),xo=Array(n/2),yo=Array(n/2);j=n/2;for(i=n-1;i!==-1;--i){--j;xo[j]=x[i];yo[j]=y[i];--i;xe[j]=x[i];ye[j]=y[i];}_ifftpow2(xe,ye);_ifftpow2(xo,yo);j=n/2;var t,k=6.2831853071795864769252867665590057683943387987502116419/n,ci,si;for(i=n-1;i!==-1;--i){--j;if(j===-1)j=n/2-1;t=k*i;ci=cos(t);si=sin(t);x[i]=xe[j]+ci*xo[j]-si*yo[j];y[i]=ye[j]+ci*yo[j]+si*xo[j];}};numeric.ifftpow2=function ifftpow2(x,y){numeric._ifftpow2(x,y);numeric.diveq(x,x.length);numeric.diveq(y,y.length);};numeric.convpow2=function convpow2(ax,ay,bx,by){numeric.fftpow2(ax,ay);numeric.fftpow2(bx,by);var i,n=ax.length,axi,bxi,ayi,byi;for(i=n-1;i!==-1;--i){axi=ax[i];ayi=ay[i];bxi=bx[i];byi=by[i];ax[i]=axi*bxi-ayi*byi;ay[i]=axi*byi+ayi*bxi;}numeric.ifftpow2(ax,ay);};numeric.T.prototype.fft=function fft(){var x=this.x,y=this.y;var n=x.length,log=Math.log,log2=log(2),p=Math.ceil(log(2*n-1)/log2),m=Math.pow(2,p);var cx=numeric.rep([m],0),cy=numeric.rep([m],0),cos=Math.cos,sin=Math.sin;var k,c=-3.141592653589793238462643383279502884197169399375105820/n,t;var a=numeric.rep([m],0),b=numeric.rep([m],0),nhalf=Math.floor(n/2);for(k=0;k<n;k++){a[k]=x[k];}if(typeof y!==\"undefined\")for(k=0;k<n;k++){b[k]=y[k];}cx[0]=1;for(k=1;k<=m/2;k++){t=c*k*k;cx[k]=cos(t);cy[k]=sin(t);cx[m-k]=cos(t);cy[m-k]=sin(t);}var X=new numeric.T(a,b),Y=new numeric.T(cx,cy);X=X.mul(Y);numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));X=X.mul(Y);X.x.length=n;X.y.length=n;return X;};numeric.T.prototype.ifft=function ifft(){var x=this.x,y=this.y;var n=x.length,log=Math.log,log2=log(2),p=Math.ceil(log(2*n-1)/log2),m=Math.pow(2,p);var cx=numeric.rep([m],0),cy=numeric.rep([m],0),cos=Math.cos,sin=Math.sin;var k,c=3.141592653589793238462643383279502884197169399375105820/n,t;var a=numeric.rep([m],0),b=numeric.rep([m],0),nhalf=Math.floor(n/2);for(k=0;k<n;k++){a[k]=x[k];}if(typeof y!==\"undefined\")for(k=0;k<n;k++){b[k]=y[k];}cx[0]=1;for(k=1;k<=m/2;k++){t=c*k*k;cx[k]=cos(t);cy[k]=sin(t);cx[m-k]=cos(t);cy[m-k]=sin(t);}var X=new numeric.T(a,b),Y=new numeric.T(cx,cy);X=X.mul(Y);numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));X=X.mul(Y);X.x.length=n;X.y.length=n;return X.div(n);};//9. Unconstrained optimization\nnumeric.gradient=function gradient(f,x){var n=x.length;var f0=f(x);if(isNaN(f0))throw new Error('gradient: f(x) is a NaN!');var max=Math.max;var i,x0=numeric.clone(x),f1,f2,J=Array(n);var div=numeric.div,sub=numeric.sub,errest,roundoff,max=Math.max,eps=1e-3,abs=Math.abs,min=Math.min;var t0,t1,t2,it=0,d1,d2,N;for(i=0;i<n;i++){var h=max(1e-6*f0,1e-8);while(1){++it;if(it>20){throw new Error(\"Numerical gradient fails\");}x0[i]=x[i]+h;f1=f(x0);x0[i]=x[i]-h;f2=f(x0);x0[i]=x[i];if(isNaN(f1)||isNaN(f2)){h/=16;continue;}J[i]=(f1-f2)/(2*h);t0=x[i]-h;t1=x[i];t2=x[i]+h;d1=(f1-f0)/h;d2=(f0-f2)/h;N=max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);errest=min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);if(errest>eps){h/=16;}else break;}}return J;};numeric.uncmin=function uncmin(f,x0,tol,gradient,maxit,callback,options){var grad=numeric.gradient;if(typeof options===\"undefined\"){options={};}if(typeof tol===\"undefined\"){tol=1e-8;}if(typeof gradient===\"undefined\"){gradient=function gradient(x){return grad(f,x);};}if(typeof maxit===\"undefined\")maxit=1000;x0=numeric.clone(x0);var n=x0.length;var f0=f(x0),f1,df0;if(isNaN(f0))throw new Error('uncmin: f(x0) is a NaN!');var max=Math.max,norm2=numeric.norm2;tol=max(tol,numeric.epsilon);var step,g0,g1,H1=options.Hinv||numeric.identity(n);var dot=numeric.dot,inv=numeric.inv,sub=numeric.sub,add=numeric.add,ten=numeric.tensor,div=numeric.div,mul=numeric.mul;var all=numeric.all,isfinite=numeric.isFinite,neg=numeric.neg;var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;var msg=\"\";g0=gradient(x0);while(it<maxit){if(typeof callback===\"function\"){if(callback(it,x0,f0,g0,H1)){msg=\"Callback returned true\";break;}}if(!all(isfinite(g0))){msg=\"Gradient has Infinity or NaN\";break;}step=neg(dot(H1,g0));if(!all(isfinite(step))){msg=\"Search direction has Infinity or NaN\";break;}nstep=norm2(step);if(nstep<tol){msg=\"Newton step smaller than tol\";break;}t=1;df0=dot(g0,step);// line search\nx1=x0;while(it<maxit){if(t*nstep<tol){break;}s=mul(step,t);x1=add(x0,s);f1=f(x1);if(f1-f0>=0.1*t*df0||isNaN(f1)){t*=0.5;++it;continue;}break;}if(t*nstep<tol){msg=\"Line search step size smaller than tol\";break;}if(it===maxit){msg=\"maxit reached during line search\";break;}g1=gradient(x1);y=sub(g1,g0);ys=dot(y,s);Hy=dot(H1,y);H1=sub(add(H1,mul((ys+dot(y,Hy))/(ys*ys),ten(s,s))),div(add(ten(Hy,s),ten(s,Hy)),ys));x0=x1;f0=f1;g0=g1;++it;}return{solution:x0,f:f0,gradient:g0,invHessian:H1,iterations:it,message:msg};};// 10. Ode solver (Dormand-Prince)\nnumeric.Dopri=function Dopri(x,y,f,ymid,iterations,msg,events){this.x=x;this.y=y;this.f=f;this.ymid=ymid;this.iterations=iterations;this.events=events;this.message=msg;};numeric.Dopri.prototype._at=function _at(xi,j){function sqr(x){return x*x;}var sol=this;var xs=sol.x;var ys=sol.y;var k1=sol.f;var ymid=sol.ymid;var n=xs.length;var x0,x1,xh,y0,y1,yh,xi;var floor=Math.floor,h;var c=0.5;var add=numeric.add,mul=numeric.mul,sub=numeric.sub,p,q,w;x0=xs[j];x1=xs[j+1];y0=ys[j];y1=ys[j+1];h=x1-x0;xh=x0+c*h;yh=ymid[j];p=sub(k1[j],mul(y0,1/(x0-xh)+2/(x0-x1)));q=sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));w=[sqr(xi-x1)*(xi-xh)/sqr(x0-x1)/(x0-xh),sqr(xi-x0)*sqr(xi-x1)/sqr(x0-xh)/sqr(x1-xh),sqr(xi-x0)*(xi-xh)/sqr(x1-x0)/(x1-xh),(xi-x0)*sqr(xi-x1)*(xi-xh)/sqr(x0-x1)/(x0-xh),(xi-x1)*sqr(xi-x0)*(xi-xh)/sqr(x0-x1)/(x1-xh)];return add(add(add(add(mul(y0,w[0]),mul(yh,w[1])),mul(y1,w[2])),mul(p,w[3])),mul(q,w[4]));};numeric.Dopri.prototype.at=function at(x){var i,j,k,floor=Math.floor;if(typeof x!==\"number\"){var n=x.length,ret=Array(n);for(i=n-1;i!==-1;--i){ret[i]=this.at(x[i]);}return ret;}var x0=this.x;i=0;j=x0.length-1;while(j-i>1){k=floor(0.5*(i+j));if(x0[k]<=x)i=k;else j=k;}return this._at(x,i);};numeric.dopri=function dopri(x0,x1,y0,f,tol,maxit,event){if(typeof tol===\"undefined\"){tol=1e-6;}if(typeof maxit===\"undefined\"){maxit=1000;}var xs=[x0],ys=[y0],k1=[f(x0,y0)],k2,k3,k4,k5,k6,k7,ymid=[];var A2=1/5;var A3=[3/40,9/40];var A4=[44/45,-56/15,32/9];var A5=[19372/6561,-25360/2187,64448/6561,-212/729];var A6=[9017/3168,-355/33,46732/5247,49/176,-5103/18656];var b=[35/384,0,500/1113,125/192,-2187/6784,11/84];var bm=[0.5*6025192743/30085553152,0,0.5*51252292925/65400821598,0.5*-2691868925/45128329728,0.5*187940372067/1594534317056,0.5*-1776094331/19743644256,0.5*11237099/235043384];var c=[1/5,3/10,4/5,8/9,1,1];var e=[-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];var i=0,er,j;var h=(x1-x0)/10;var it=0;var add=numeric.add,mul=numeric.mul,y1,erinf;var max=Math.max,min=Math.min,abs=Math.abs,norminf=numeric.norminf,pow=Math.pow;var any=numeric.any,lt=numeric.lt,and=numeric.and,sub=numeric.sub;var e0,e1,ev;var ret=new numeric.Dopri(xs,ys,k1,ymid,-1,\"\");if(typeof event===\"function\")e0=event(x0,y0);while(x0<x1&&it<maxit){++it;if(x0+h>x1)h=x1-x0;k2=f(x0+c[0]*h,add(y0,mul(A2*h,k1[i])));k3=f(x0+c[1]*h,add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));k4=f(x0+c[2]*h,add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));k5=f(x0+c[3]*h,add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));k6=f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));y1=add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));k7=f(x0+h,y1);er=add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));if(typeof er===\"number\")erinf=abs(er);else erinf=norminf(er);if(erinf>tol){// reject\nh=0.2*h*pow(tol/erinf,0.25);if(x0+h===x0){ret.msg=\"Step size became too small\";break;}continue;}ymid[i]=add(add(add(add(add(add(y0,mul(k1[i],h*bm[0])),mul(k3,h*bm[2])),mul(k4,h*bm[3])),mul(k5,h*bm[4])),mul(k6,h*bm[5])),mul(k7,h*bm[6]));++i;xs[i]=x0+h;ys[i]=y1;k1[i]=k7;if(typeof event===\"function\"){var yi,xl=x0,xr=x0+0.5*h,xi;e1=event(xr,ymid[i-1]);ev=and(lt(e0,0),lt(0,e1));if(!any(ev)){xl=xr;xr=x0+h;e0=e1;e1=event(xr,y1);ev=and(lt(e0,0),lt(0,e1));}if(any(ev)){var xc,yc,en,ei;var side=0,sl=1.0,sr=1.0;while(1){if(typeof e0===\"number\")xi=(sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);else{xi=xr;for(j=e0.length-1;j!==-1;--j){if(e0[j]<0&&e1[j]>0)xi=min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));}}if(xi<=xl||xi>=xr)break;yi=ret._at(xi,i-1);ei=event(xi,yi);en=and(lt(e0,0),lt(0,ei));if(any(en)){xr=xi;e1=ei;ev=en;sr=1.0;if(side===-1)sl*=0.5;else sl=1.0;side=-1;}else{xl=xi;e0=ei;sl=1.0;if(side===1)sr*=0.5;else sr=1.0;side=1;}}y1=ret._at(0.5*(x0+xi),i-1);ret.f[i]=f(xi,yi);ret.x[i]=xi;ret.y[i]=yi;ret.ymid[i-1]=y1;ret.events=ev;ret.iterations=it;return ret;}}x0+=h;y0=y1;e0=e1;h=min(0.8*h*pow(tol/erinf,0.25),4*h);}ret.iterations=it;return ret;};// 11. Ax = b\nnumeric.LU=function(A,fast){fast=fast||false;var abs=Math.abs;var i,j,k,absAjk,Akk,Ak,Pk,Ai;var max;var n=A.length,n1=n-1;var P=new Array(n);if(!fast)A=numeric.clone(A);for(k=0;k<n;++k){Pk=k;Ak=A[k];max=abs(Ak[k]);for(j=k+1;j<n;++j){absAjk=abs(A[j][k]);if(max<absAjk){max=absAjk;Pk=j;}}P[k]=Pk;if(Pk!=k){A[k]=A[Pk];A[Pk]=Ak;Ak=A[k];}Akk=Ak[k];for(i=k+1;i<n;++i){A[i][k]/=Akk;}for(i=k+1;i<n;++i){Ai=A[i];for(j=k+1;j<n1;++j){Ai[j]-=Ai[k]*Ak[j];++j;Ai[j]-=Ai[k]*Ak[j];}if(j===n1)Ai[j]-=Ai[k]*Ak[j];}}return{LU:A,P:P};};numeric.LUsolve=function LUsolve(LUP,b){var i,j;var LU=LUP.LU;var n=LU.length;var x=numeric.clone(b);var P=LUP.P;var Pi,LUi,LUii,tmp;for(i=n-1;i!==-1;--i){x[i]=b[i];}for(i=0;i<n;++i){Pi=P[i];if(P[i]!==i){tmp=x[i];x[i]=x[Pi];x[Pi]=tmp;}LUi=LU[i];for(j=0;j<i;++j){x[i]-=x[j]*LUi[j];}}for(i=n-1;i>=0;--i){LUi=LU[i];for(j=i+1;j<n;++j){x[i]-=x[j]*LUi[j];}x[i]/=LUi[i];}return x;};numeric.solve=function solve(A,b,fast){return numeric.LUsolve(numeric.LU(A,fast),b);};// 12. Linear programming\nnumeric.echelonize=function echelonize(A){var s=numeric.dim(A),m=s[0],n=s[1];var I=numeric.identity(m);var P=Array(m);var i,j,k,l,Ai,Ii,Z,a;var abs=Math.abs;var diveq=numeric.diveq;A=numeric.clone(A);for(i=0;i<m;++i){k=0;Ai=A[i];Ii=I[i];for(j=1;j<n;++j){if(abs(Ai[k])<abs(Ai[j]))k=j;}P[i]=k;diveq(Ii,Ai[k]);diveq(Ai,Ai[k]);for(j=0;j<m;++j){if(j!==i){Z=A[j];a=Z[k];for(l=n-1;l!==-1;--l){Z[l]-=Ai[l]*a;}Z=I[j];for(l=m-1;l!==-1;--l){Z[l]-=Ii[l]*a;}}}}return{I:I,A:A,P:P};};numeric.__solveLP=function __solveLP(c,A,b,tol,maxit,x,flag){var sum=numeric.sum,log=numeric.log,mul=numeric.mul,sub=numeric.sub,dot=numeric.dot,div=numeric.div,add=numeric.add;var m=c.length,n=b.length,y;var unbounded=false,cb,i0=0;var alpha=1.0;var f0,df0,AT=numeric.transpose(A),svd=numeric.svd,transpose=numeric.transpose,leq=numeric.leq,sqrt=Math.sqrt,abs=Math.abs;var muleq=numeric.muleq;var norm=numeric.norminf,any=numeric.any,min=Math.min;var all=numeric.all,gt=numeric.gt;var p=Array(m),A0=Array(n),e=numeric.rep([n],1),H;var solve=numeric.solve,z=sub(b,dot(A,x)),count;var dotcc=dot(c,c);var g;for(count=i0;count<maxit;++count){var i,j,d;for(i=n-1;i!==-1;--i){A0[i]=div(A[i],z[i]);}var A1=transpose(A0);for(i=m-1;i!==-1;--i){p[i]=/*x[i]+*/sum(A1[i]);}alpha=0.25*abs(dotcc/dot(c,p));var a1=100*sqrt(dotcc/dot(p,p));if(!isFinite(alpha)||alpha>a1)alpha=a1;g=add(c,mul(alpha,p));H=dot(A1,A0);for(i=m-1;i!==-1;--i){H[i][i]+=1;}d=solve(H,div(g,alpha),true);var t0=div(z,dot(A,d));var t=1.0;for(i=n-1;i!==-1;--i){if(t0[i]<0)t=min(t,-0.999*t0[i]);}y=sub(x,mul(d,t));z=sub(b,dot(A,y));if(!all(gt(z,0)))return{solution:x,message:\"\",iterations:count};x=y;if(alpha<tol)return{solution:y,message:\"\",iterations:count};if(flag){var s=dot(c,g),Ag=dot(A,g);unbounded=true;for(i=n-1;i!==-1;--i){if(s*Ag[i]<0){unbounded=false;break;}}}else{if(x[m-1]>=0)unbounded=false;else unbounded=true;}if(unbounded)return{solution:y,message:\"Unbounded\",iterations:count};}return{solution:x,message:\"maximum iteration count exceeded\",iterations:count};};numeric._solveLP=function _solveLP(c,A,b,tol,maxit){var m=c.length,n=b.length,y;var sum=numeric.sum,log=numeric.log,mul=numeric.mul,sub=numeric.sub,dot=numeric.dot,div=numeric.div,add=numeric.add;var c0=numeric.rep([m],0).concat([1]);var J=numeric.rep([n,1],-1);var A0=numeric.blockMatrix([[A,J]]);var b0=b;var y=numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);var x0=numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);var x=numeric.clone(x0.solution);x.length=m;var foo=numeric.inf(sub(b,dot(A,x)));if(foo<0){return{solution:NaN,message:\"Infeasible\",iterations:x0.iterations};}var ret=numeric.__solveLP(c,A,b,tol,maxit-x0.iterations,x,true);ret.iterations+=x0.iterations;return ret;};numeric.solveLP=function solveLP(c,A,b,Aeq,beq,tol,maxit){if(typeof maxit===\"undefined\")maxit=1000;if(typeof tol===\"undefined\")tol=numeric.epsilon;if(typeof Aeq===\"undefined\")return numeric._solveLP(c,A,b,tol,maxit);var m=Aeq.length,n=Aeq[0].length,o=A.length;var B=numeric.echelonize(Aeq);var flags=numeric.rep([n],0);var P=B.P;var Q=[];var i;for(i=P.length-1;i!==-1;--i){flags[P[i]]=1;}for(i=n-1;i!==-1;--i){if(flags[i]===0)Q.push(i);}var g=numeric.getRange;var I=numeric.linspace(0,m-1),J=numeric.linspace(0,o-1);var Aeq2=g(Aeq,I,Q),A1=g(A,J,P),A2=g(A,J,Q),dot=numeric.dot,sub=numeric.sub;var A3=dot(A1,B.I);var A4=sub(A2,dot(A3,Aeq2)),b4=sub(b,dot(A3,beq));var c1=Array(P.length),c2=Array(Q.length);for(i=P.length-1;i!==-1;--i){c1[i]=c[P[i]];}for(i=Q.length-1;i!==-1;--i){c2[i]=c[Q[i]];}var c4=sub(c2,dot(c1,dot(B.I,Aeq2)));var S=numeric._solveLP(c4,A4,b4,tol,maxit);var x2=S.solution;if(x2!==x2)return S;var x1=dot(B.I,sub(beq,dot(Aeq2,x2)));var x=Array(c.length);for(i=P.length-1;i!==-1;--i){x[P[i]]=x1[i];}for(i=Q.length-1;i!==-1;--i){x[Q[i]]=x2[i];}return{solution:x,message:S.message,iterations:S.iterations};};numeric.MPStoLP=function MPStoLP(MPS){if(MPS instanceof String){MPS.split('\\n');}var state=0;var states=['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];var n=MPS.length;var i,j,z,N=0,rows={},sign=[],rl=0,vars={},nv=0;var name;var c=[],A=[],b=[];function err(e){throw new Error('MPStoLP: '+e+'\\nLine '+i+': '+MPS[i]+'\\nCurrent state: '+states[state]+'\\n');}for(i=0;i<n;++i){z=MPS[i];var w0=z.match(/\\S*/g);var w=[];for(j=0;j<w0.length;++j){if(w0[j]!==\"\")w.push(w0[j]);}if(w.length===0)continue;for(j=0;j<states.length;++j){if(z.substr(0,states[j].length)===states[j])break;}if(j<states.length){state=j;if(j===1){name=w[1];}if(j===6)return{name:name,c:c,A:numeric.transpose(A),b:b,rows:rows,vars:vars};continue;}switch(state){case 0:case 1:err('Unexpected line');case 2:switch(w[0]){case'N':if(N===0)N=w[1];else err('Two or more N rows');break;case'L':rows[w[1]]=rl;sign[rl]=1;b[rl]=0;++rl;break;case'G':rows[w[1]]=rl;sign[rl]=-1;b[rl]=0;++rl;break;case'E':rows[w[1]]=rl;sign[rl]=0;b[rl]=0;++rl;break;default:err('Parse error '+numeric.prettyPrint(w));}break;case 3:if(!vars.hasOwnProperty(w[0])){vars[w[0]]=nv;c[nv]=0;A[nv]=numeric.rep([rl],0);++nv;}var p=vars[w[0]];for(j=1;j<w.length;j+=2){if(w[j]===N){c[p]=parseFloat(w[j+1]);continue;}var q=rows[w[j]];A[p][q]=(sign[q]<0?-1:1)*parseFloat(w[j+1]);}break;case 4:for(j=1;j<w.length;j+=2){b[rows[w[j]]]=(sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);}break;case 5:/*FIXME*/break;case 6:err('Internal error');}}err('Reached end of file without ENDATA');};// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method Math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for Math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets Math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(Math.random());       // Always 0.5463663768140734\n//   document.write(Math.random());       // Always 0.43973793770592234\n//   var rng1 = Math.random;              // Remember the current prng.\n//\n//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n//   document.write(Math.random());       // Pretty much unpredictable.\n//\n//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(Math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of Math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our Math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n// \n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n// \n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\r\n * All code is in an anonymous closure to keep the global namespace clean.\r\n *\r\n * @param {number=} overflow \r\n * @param {number=} startdenom\r\n */ // Patched by Seb so that seedrandom.js does not pollute the Math object.\n// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%\n// slower.\nnumeric.seedrandom={pow:Math.pow,random:Math.random};(function(pool,math,width,chunks,significance,overflow,startdenom){//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nmath['seedrandom']=function seedrandom(seed,use_entropy){var key=[];var arc4;// Flatten the seed string or build one from local entropy if needed.\nseed=mixkey(flatten(use_entropy?[seed,pool]:arguments.length?seed:[new Date().getTime(),pool,window],3),key);// Use the seed to initialize an ARC4 generator.\narc4=new ARC4(key);// Mix the randomness into accumulated entropy.\nmixkey(arc4.S,pool);// Override Math.random\n// This function returns a random double in [0, 1) that contains\n// randomness in every bit of the mantissa of the IEEE 754 value.\nmath['random']=function random(){// Closure to return a random double:\nvar n=arc4.g(chunks);// Start with a numerator n < 2 ^ 48\nvar d=startdenom;//   and denominator d = 2 ^ 48.\nvar x=0;//   and no 'extra last byte'.\nwhile(n<significance){// Fill up all significant digits by\nn=(n+x)*width;//   shifting numerator and\nd*=width;//   denominator and generating a\nx=arc4.g(1);//   new least-significant-byte.\n}while(n>=overflow){// To avoid rounding up, before adding\nn/=2;//   last byte, shift everything\nd/=2;//   right using integer math until\nx>>>=1;//   we have exactly the desired bits.\n}return(n+x)/d;// Form the number within [0, 1).\n};// Return the seed that was used\nreturn seed;};//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n/** @constructor */function ARC4(key){var t,u,me=this,keylen=key.length;var i=0,j=me.i=me.j=me.m=0;me.S=[];me.c=[];// The empty key [] is treated as [0].\nif(!keylen){key=[keylen++];}// Set up S using the standard key scheduling algorithm.\nwhile(i<width){me.S[i]=i++;}for(i=0;i<width;i++){t=me.S[i];j=lowbits(j+t+key[i%keylen]);u=me.S[j];me.S[i]=u;me.S[j]=t;}// The \"g\" method returns the next (count) outputs as one number.\nme.g=function getnext(count){var s=me.S;var i=lowbits(me.i+1);var t=s[i];var j=lowbits(me.j+t);var u=s[j];s[i]=u;s[j]=t;var r=s[lowbits(t+u)];while(--count){i=lowbits(i+1);t=s[i];j=lowbits(j+t);u=s[j];s[i]=u;s[j]=t;r=r*width+s[lowbits(t+u)];}me.i=i;me.j=j;return r;};// For robust unpredictability discard an initial batch of values.\n// See http://www.rsa.com/rsalabs/node.asp?id=2009\nme.g(width);}//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\n/** @param {Object=} result \r\n  * @param {string=} prop\r\n  * @param {string=} typ */function flatten(obj,depth,result,prop,typ){result=[];typ=_typeof2(obj);if(depth&&typ=='object'){for(prop in obj){if(prop.indexOf('S')<5){// Avoid FF3 bug (local/sessionStorage)\ntry{result.push(flatten(obj[prop],depth-1));}catch(e){}}}}return result.length?result:obj+(typ!='string'?'\\0':'');}//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\n/** @param {number=} smear \r\n  * @param {number=} j */function mixkey(seed,key,smear,j){seed+='';// Ensure the seed is a string\nsmear=0;for(j=0;j<seed.length;j++){key[lowbits(j)]=lowbits((smear^=key[lowbits(j)]*19)+seed.charCodeAt(j));}seed='';for(j in key){seed+=String.fromCharCode(key[j]);}return seed;}//\n// lowbits()\n// A quick \"n mod width\" for width a power of 2.\n//\nfunction lowbits(n){return n&width-1;}//\n// The following constants are related to IEEE 754 limits.\n//\nstartdenom=math.pow(width,chunks);significance=math.pow(2,significance);overflow=significance*2;//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to intefere with determinstic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(),pool);// End anonymous scope, and pass initial values.\n})([],// pool: entropy pool starts empty\nnumeric.seedrandom,// math: package containing random, pow, and seedrandom\n256,// width: each RC4 output is 0 <= x < 256\n6,// chunks: at least six RC4 outputs for each double\n52// significance: there are 52 significant digits in a double\n);/* This file is a slightly modified version of quadprog.js from Alberto Santini.\r\n * It has been slightly modified by Sébastien Loisel to make sure that it handles\r\n * 0-based Arrays instead of 1-based Arrays.\r\n * License is in resources/LICENSE.quadprog */(function(exports){function base0to1(A){if(_typeof2(A)!==\"object\"){return A;}var ret=[],i,n=A.length;for(i=0;i<n;i++){ret[i+1]=base0to1(A[i]);}return ret;}function base1to0(A){if(_typeof2(A)!==\"object\"){return A;}var ret=[],i,n=A.length;for(i=1;i<n;i++){ret[i-1]=base1to0(A[i]);}return ret;}function dpori(a,lda,n){var i,j,k,kp1,t;for(k=1;k<=n;k=k+1){a[k][k]=1/a[k][k];t=-a[k][k];//~ dscal(k - 1, t, a[1][k], 1);\nfor(i=1;i<k;i=i+1){a[i][k]=t*a[i][k];}kp1=k+1;if(n<kp1){break;}for(j=kp1;j<=n;j=j+1){t=a[k][j];a[k][j]=0;//~ daxpy(k, t, a[1][k], 1, a[1][j], 1);\nfor(i=1;i<=k;i=i+1){a[i][j]=a[i][j]+t*a[i][k];}}}}function dposl(a,lda,n,b){var i,k,kb,t;for(k=1;k<=n;k=k+1){//~ t = ddot(k - 1, a[1][k], 1, b[1], 1);\nt=0;for(i=1;i<k;i=i+1){t=t+a[i][k]*b[i];}b[k]=(b[k]-t)/a[k][k];}for(kb=1;kb<=n;kb=kb+1){k=n+1-kb;b[k]=b[k]/a[k][k];t=-b[k];//~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);\nfor(i=1;i<k;i=i+1){b[i]=b[i]+t*a[i][k];}}}function dpofa(a,lda,n,info){var i,j,jm1,k,t,s;for(j=1;j<=n;j=j+1){info[1]=j;s=0;jm1=j-1;if(jm1<1){s=a[j][j]-s;if(s<=0){break;}a[j][j]=Math.sqrt(s);}else{for(k=1;k<=jm1;k=k+1){//~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);\nt=a[k][j];for(i=1;i<k;i=i+1){t=t-a[i][j]*a[i][k];}t=t/a[k][k];a[k][j]=t;s=s+t*t;}s=a[j][j]-s;if(s<=0){break;}a[j][j]=Math.sqrt(s);}info[1]=0;}}function qpgen2(dmat,dvec,fddmat,n,sol,crval,amat,bvec,fdamat,q,meq,iact,nact,iter,work,ierr){var i,j,l,l1,info,it1,iwzv,iwrv,iwrm,iwsv,iwuv,nvl,r,iwnbv,temp,sum,t1,tt,gc,gs,nu,t1inf,t2min,vsmall,tmpa,tmpb,go;r=Math.min(n,q);l=2*n+r*(r+5)/2+2*q+1;vsmall=1.0e-60;do{vsmall=vsmall+vsmall;tmpa=1+0.1*vsmall;tmpb=1+0.2*vsmall;}while(tmpa<=1||tmpb<=1);for(i=1;i<=n;i=i+1){work[i]=dvec[i];}for(i=n+1;i<=l;i=i+1){work[i]=0;}for(i=1;i<=q;i=i+1){iact[i]=0;}info=[];if(ierr[1]===0){dpofa(dmat,fddmat,n,info);if(info[1]!==0){ierr[1]=2;return;}dposl(dmat,fddmat,n,dvec);dpori(dmat,fddmat,n);}else{for(j=1;j<=n;j=j+1){sol[j]=0;for(i=1;i<=j;i=i+1){sol[j]=sol[j]+dmat[i][j]*dvec[i];}}for(j=1;j<=n;j=j+1){dvec[j]=0;for(i=j;i<=n;i=i+1){dvec[j]=dvec[j]+dmat[j][i]*sol[i];}}}crval[1]=0;for(j=1;j<=n;j=j+1){sol[j]=dvec[j];crval[1]=crval[1]+work[j]*sol[j];work[j]=0;for(i=j+1;i<=n;i=i+1){dmat[i][j]=0;}}crval[1]=-crval[1]/2;ierr[1]=0;iwzv=n;iwrv=iwzv+n;iwuv=iwrv+r;iwrm=iwuv+r+1;iwsv=iwrm+r*(r+1)/2;iwnbv=iwsv+q;for(i=1;i<=q;i=i+1){sum=0;for(j=1;j<=n;j=j+1){sum=sum+amat[j][i]*amat[j][i];}work[iwnbv+i]=Math.sqrt(sum);}nact=0;iter[1]=0;iter[2]=0;function fn_goto_50(){iter[1]=iter[1]+1;l=iwsv;for(i=1;i<=q;i=i+1){l=l+1;sum=-bvec[i];for(j=1;j<=n;j=j+1){sum=sum+amat[j][i]*sol[j];}if(Math.abs(sum)<vsmall){sum=0;}if(i>meq){work[l]=sum;}else{work[l]=-Math.abs(sum);if(sum>0){for(j=1;j<=n;j=j+1){amat[j][i]=-amat[j][i];}bvec[i]=-bvec[i];}}}for(i=1;i<=nact;i=i+1){work[iwsv+iact[i]]=0;}nvl=0;temp=0;for(i=1;i<=q;i=i+1){if(work[iwsv+i]<temp*work[iwnbv+i]){nvl=i;temp=work[iwsv+i]/work[iwnbv+i];}}if(nvl===0){return 999;}return 0;}function fn_goto_55(){for(i=1;i<=n;i=i+1){sum=0;for(j=1;j<=n;j=j+1){sum=sum+dmat[j][i]*amat[j][nvl];}work[i]=sum;}l1=iwzv;for(i=1;i<=n;i=i+1){work[l1+i]=0;}for(j=nact+1;j<=n;j=j+1){for(i=1;i<=n;i=i+1){work[l1+i]=work[l1+i]+dmat[i][j]*work[j];}}t1inf=true;for(i=nact;i>=1;i=i-1){sum=work[i];l=iwrm+i*(i+3)/2;l1=l-i;for(j=i+1;j<=nact;j=j+1){sum=sum-work[l]*work[iwrv+j];l=l+j;}sum=sum/work[l1];work[iwrv+i]=sum;if(iact[i]<meq){// continue;\nbreak;}if(sum<0){// continue;\nbreak;}t1inf=false;it1=i;}if(!t1inf){t1=work[iwuv+it1]/work[iwrv+it1];for(i=1;i<=nact;i=i+1){if(iact[i]<meq){// continue;\nbreak;}if(work[iwrv+i]<0){// continue;\nbreak;}temp=work[iwuv+i]/work[iwrv+i];if(temp<t1){t1=temp;it1=i;}}}sum=0;for(i=iwzv+1;i<=iwzv+n;i=i+1){sum=sum+work[i]*work[i];}if(Math.abs(sum)<=vsmall){if(t1inf){ierr[1]=1;// GOTO 999\nreturn 999;}else{for(i=1;i<=nact;i=i+1){work[iwuv+i]=work[iwuv+i]-t1*work[iwrv+i];}work[iwuv+nact+1]=work[iwuv+nact+1]+t1;// GOTO 700\nreturn 700;}}else{sum=0;for(i=1;i<=n;i=i+1){sum=sum+work[iwzv+i]*amat[i][nvl];}tt=-work[iwsv+nvl]/sum;t2min=true;if(!t1inf){if(t1<tt){tt=t1;t2min=false;}}for(i=1;i<=n;i=i+1){sol[i]=sol[i]+tt*work[iwzv+i];if(Math.abs(sol[i])<vsmall){sol[i]=0;}}crval[1]=crval[1]+tt*sum*(tt/2+work[iwuv+nact+1]);for(i=1;i<=nact;i=i+1){work[iwuv+i]=work[iwuv+i]-tt*work[iwrv+i];}work[iwuv+nact+1]=work[iwuv+nact+1]+tt;if(t2min){nact=nact+1;iact[nact]=nvl;l=iwrm+(nact-1)*nact/2+1;for(i=1;i<=nact-1;i=i+1){work[l]=work[i];l=l+1;}if(nact===n){work[l]=work[n];}else{for(i=n;i>=nact+1;i=i-1){if(work[i]===0){// continue;\nbreak;}gc=Math.max(Math.abs(work[i-1]),Math.abs(work[i]));gs=Math.min(Math.abs(work[i-1]),Math.abs(work[i]));if(work[i-1]>=0){temp=Math.abs(gc*Math.sqrt(1+gs*gs/(gc*gc)));}else{temp=-Math.abs(gc*Math.sqrt(1+gs*gs/(gc*gc)));}gc=work[i-1]/temp;gs=work[i]/temp;if(gc===1){// continue;\nbreak;}if(gc===0){work[i-1]=gs*temp;for(j=1;j<=n;j=j+1){temp=dmat[j][i-1];dmat[j][i-1]=dmat[j][i];dmat[j][i]=temp;}}else{work[i-1]=temp;nu=gs/(1+gc);for(j=1;j<=n;j=j+1){temp=gc*dmat[j][i-1]+gs*dmat[j][i];dmat[j][i]=nu*(dmat[j][i-1]+temp)-dmat[j][i];dmat[j][i-1]=temp;}}}work[l]=work[nact];}}else{sum=-bvec[nvl];for(j=1;j<=n;j=j+1){sum=sum+sol[j]*amat[j][nvl];}if(nvl>meq){work[iwsv+nvl]=sum;}else{work[iwsv+nvl]=-Math.abs(sum);if(sum>0){for(j=1;j<=n;j=j+1){amat[j][nvl]=-amat[j][nvl];}bvec[nvl]=-bvec[nvl];}}// GOTO 700\nreturn 700;}}return 0;}function fn_goto_797(){l=iwrm+it1*(it1+1)/2+1;l1=l+it1;if(work[l1]===0){// GOTO 798\nreturn 798;}gc=Math.max(Math.abs(work[l1-1]),Math.abs(work[l1]));gs=Math.min(Math.abs(work[l1-1]),Math.abs(work[l1]));if(work[l1-1]>=0){temp=Math.abs(gc*Math.sqrt(1+gs*gs/(gc*gc)));}else{temp=-Math.abs(gc*Math.sqrt(1+gs*gs/(gc*gc)));}gc=work[l1-1]/temp;gs=work[l1]/temp;if(gc===1){// GOTO 798\nreturn 798;}if(gc===0){for(i=it1+1;i<=nact;i=i+1){temp=work[l1-1];work[l1-1]=work[l1];work[l1]=temp;l1=l1+i;}for(i=1;i<=n;i=i+1){temp=dmat[i][it1];dmat[i][it1]=dmat[i][it1+1];dmat[i][it1+1]=temp;}}else{nu=gs/(1+gc);for(i=it1+1;i<=nact;i=i+1){temp=gc*work[l1-1]+gs*work[l1];work[l1]=nu*(work[l1-1]+temp)-work[l1];work[l1-1]=temp;l1=l1+i;}for(i=1;i<=n;i=i+1){temp=gc*dmat[i][it1]+gs*dmat[i][it1+1];dmat[i][it1+1]=nu*(dmat[i][it1]+temp)-dmat[i][it1+1];dmat[i][it1]=temp;}}return 0;}function fn_goto_798(){l1=l-it1;for(i=1;i<=it1;i=i+1){work[l1]=work[l];l=l+1;l1=l1+1;}work[iwuv+it1]=work[iwuv+it1+1];iact[it1]=iact[it1+1];it1=it1+1;if(it1<nact){// GOTO 797\nreturn 797;}return 0;}function fn_goto_799(){work[iwuv+nact]=work[iwuv+nact+1];work[iwuv+nact+1]=0;iact[nact]=0;nact=nact-1;iter[2]=iter[2]+1;return 0;}go=0;while(true){go=fn_goto_50();if(go===999){return;}while(true){go=fn_goto_55();if(go===0){break;}if(go===999){return;}if(go===700){if(it1===nact){fn_goto_799();}else{while(true){fn_goto_797();go=fn_goto_798();if(go!==797){break;}}fn_goto_799();}}}}}function solveQP(Dmat,dvec,Amat,bvec,meq,factorized){Dmat=base0to1(Dmat);dvec=base0to1(dvec);Amat=base0to1(Amat);var i,n,q,nact,r,crval=[],iact=[],sol=[],work=[],iter=[],message;meq=meq||0;factorized=factorized?base0to1(factorized):[undefined,0];bvec=bvec?base0to1(bvec):[];// In Fortran the array index starts from 1\nn=Dmat.length-1;q=Amat[1].length-1;if(!bvec){for(i=1;i<=q;i=i+1){bvec[i]=0;}}for(i=1;i<=q;i=i+1){iact[i]=0;}nact=0;r=Math.min(n,q);for(i=1;i<=n;i=i+1){sol[i]=0;}crval[1]=0;for(i=1;i<=2*n+r*(r+5)/2+2*q+1;i=i+1){work[i]=0;}for(i=1;i<=2;i=i+1){iter[i]=0;}qpgen2(Dmat,dvec,n,n,sol,crval,Amat,bvec,n,q,meq,iact,nact,iter,work,factorized);message=\"\";if(factorized[1]===1){message=\"constraints are inconsistent, no solution!\";}if(factorized[1]===2){message=\"matrix D in quadratic function is not positive definite!\";}return{solution:base1to0(sol),value:base1to0(crval),unconstrained_solution:base1to0(dvec),iterations:base1to0(iter),iact:base1to0(iact),message:message};}exports.solveQP=solveQP;})(numeric);/*\r\nShanti Rao sent me this routine by private email. I had to modify it\r\nslightly to work on Arrays instead of using a Matrix object.\r\nIt is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n*/numeric.svd=function svd(A){var temp;//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\nvar prec=numeric.epsilon;//Math.pow(2,-52) // assumes double prec\nvar tolerance=1.e-64/prec;var itmax=50;var c=0;var i=0;var j=0;var k=0;var l=0;var u=numeric.clone(A);var m=u.length;var n=u[0].length;if(m<n)throw\"Need more rows than columns\";var e=new Array(n);var q=new Array(n);for(i=0;i<n;i++){e[i]=q[i]=0.0;}var v=numeric.rep([n,n],0);//\tv.zero();\nfunction pythag(a,b){a=Math.abs(a);b=Math.abs(b);if(a>b)return a*Math.sqrt(1.0+b*b/a/a);else if(b==0.0)return a;return b*Math.sqrt(1.0+a*a/b/b);}//Householder's reduction to bidiagonal form\nvar f=0.0;var g=0.0;var h=0.0;var x=0.0;var y=0.0;var z=0.0;var s=0.0;for(i=0;i<n;i++){e[i]=g;s=0.0;l=i+1;for(j=i;j<m;j++){s+=u[j][i]*u[j][i];}if(s<=tolerance)g=0.0;else{f=u[i][i];g=Math.sqrt(s);if(f>=0.0)g=-g;h=f*g-s;u[i][i]=f-g;for(j=l;j<n;j++){s=0.0;for(k=i;k<m;k++){s+=u[k][i]*u[k][j];}f=s/h;for(k=i;k<m;k++){u[k][j]+=f*u[k][i];}}}q[i]=g;s=0.0;for(j=l;j<n;j++){s=s+u[i][j]*u[i][j];}if(s<=tolerance)g=0.0;else{f=u[i][i+1];g=Math.sqrt(s);if(f>=0.0)g=-g;h=f*g-s;u[i][i+1]=f-g;for(j=l;j<n;j++){e[j]=u[i][j]/h;}for(j=l;j<m;j++){s=0.0;for(k=l;k<n;k++){s+=u[j][k]*u[i][k];}for(k=l;k<n;k++){u[j][k]+=s*e[k];}}}y=Math.abs(q[i])+Math.abs(e[i]);if(y>x)x=y;}// accumulation of right hand gtransformations\nfor(i=n-1;i!=-1;i+=-1){if(g!=0.0){h=g*u[i][i+1];for(j=l;j<n;j++){v[j][i]=u[i][j]/h;}for(j=l;j<n;j++){s=0.0;for(k=l;k<n;k++){s+=u[i][k]*v[k][j];}for(k=l;k<n;k++){v[k][j]+=s*v[k][i];}}}for(j=l;j<n;j++){v[i][j]=0;v[j][i]=0;}v[i][i]=1;g=e[i];l=i;}// accumulation of left hand transformations\nfor(i=n-1;i!=-1;i+=-1){l=i+1;g=q[i];for(j=l;j<n;j++){u[i][j]=0;}if(g!=0.0){h=u[i][i]*g;for(j=l;j<n;j++){s=0.0;for(k=l;k<m;k++){s+=u[k][i]*u[k][j];}f=s/h;for(k=i;k<m;k++){u[k][j]+=f*u[k][i];}}for(j=i;j<m;j++){u[j][i]=u[j][i]/g;}}else for(j=i;j<m;j++){u[j][i]=0;}u[i][i]+=1;}// diagonalization of the bidiagonal form\nprec=prec*x;for(k=n-1;k!=-1;k+=-1){for(var iteration=0;iteration<itmax;iteration++){// test f splitting\nvar test_convergence=false;for(l=k;l!=-1;l+=-1){if(Math.abs(e[l])<=prec){test_convergence=true;break;}if(Math.abs(q[l-1])<=prec)break;}if(!test_convergence){// cancellation of e[l] if l>0\nc=0.0;s=1.0;var l1=l-1;for(i=l;i<k+1;i++){f=s*e[i];e[i]=c*e[i];if(Math.abs(f)<=prec)break;g=q[i];h=pythag(f,g);q[i]=h;c=g/h;s=-f/h;for(j=0;j<m;j++){y=u[j][l1];z=u[j][i];u[j][l1]=y*c+z*s;u[j][i]=-y*s+z*c;}}}// test f convergence\nz=q[k];if(l==k){//convergence\nif(z<0.0){//q[k] is made non-negative\nq[k]=-z;for(j=0;j<n;j++){v[j][k]=-v[j][k];}}break;//break out of iteration loop and move on to next k value\n}if(iteration>=itmax-1)throw'Error: no convergence.';// shift from bottom 2x2 minor\nx=q[l];y=q[k-1];g=e[k-1];h=e[k];f=((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);g=pythag(f,1.0);if(f<0.0)f=((x-z)*(x+z)+h*(y/(f-g)-h))/x;else f=((x-z)*(x+z)+h*(y/(f+g)-h))/x;// next QR transformation\nc=1.0;s=1.0;for(i=l+1;i<k+1;i++){g=e[i];y=q[i];h=s*g;g=c*g;z=pythag(f,h);e[i-1]=z;c=f/z;s=h/z;f=x*c+g*s;g=-x*s+g*c;h=y*s;y=y*c;for(j=0;j<n;j++){x=v[j][i-1];z=v[j][i];v[j][i-1]=x*c+z*s;v[j][i]=-x*s+z*c;}z=pythag(f,h);q[i-1]=z;c=f/z;s=h/z;f=c*g+s*y;x=-s*g+c*y;for(j=0;j<m;j++){y=u[j][i-1];z=u[j][i];u[j][i-1]=y*c+z*s;u[j][i]=-y*s+z*c;}}e[l]=0.0;e[k]=f;q[k]=x;}}//vt= transpose(v)\n//return (u,q,vt)\nfor(i=0;i<q.length;i++){if(q[i]<prec)q[i]=0;}//sort eigenvalues\t\nfor(i=0;i<n;i++){//writeln(q)\nfor(j=i-1;j>=0;j--){if(q[j]<q[i]){//  writeln(i,'-',j)\nc=q[j];q[j]=q[i];q[i]=c;for(k=0;k<u.length;k++){temp=u[k][i];u[k][i]=u[k][j];u[k][j]=temp;}for(k=0;k<v.length;k++){temp=v[k][i];v[k][i]=v[k][j];v[k][j]=temp;}//\t   u.swapCols(i,j)\n//\t   v.swapCols(i,j)\ni=j;}}}return{U:u,S:q,V:v};};/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27));/***/},/* 13 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(Buffer){/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return encodeWeights;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return decodeWeights;});/* unused harmony export concatenateTypedArrays */ /* unused harmony export stringByteLength */ /* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return arrayBufferToBase64String;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return base64StringToArrayBuffer;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return concatenateArrayBuffers;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return basename;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"g\",function(){return getModelArtifactsInfoForJSON;});/* unused harmony export getFloat16Decoder */ /* harmony import */var _ops_complex__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(18);/* harmony import */var _ops_tensor_ops__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8);/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1);/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(34);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /** Number of bytes reserved for the length of the string. (32bit integer). */var NUM_BYTES_STRING_LENGTH=4;/**\r\n * Encode a map from names to weight values as an ArrayBuffer, along with an\r\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\r\n *\r\n * This function does not perform sharding.\r\n *\r\n * This function is the reverse of `decodeWeights`.\r\n *\r\n * @param tensors A map (\"dict\") from names to tensors.\r\n * @param group Group to which the weights belong (optional).\r\n * @returns A `Promise` of\r\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\r\n *     concatenated.\r\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\r\n *     tensor names, `dtype`s and shapes.\r\n * @throws Error: on unsupported tensor `dtype`.\r\n */function encodeWeights(_x62,_x63){return _encodeWeights.apply(this,arguments);}/**\r\n * Decode flat ArrayBuffer as weights.\r\n *\r\n * This function does not handle sharding.\r\n *\r\n * This function is the reverse of `encodeWeights`.\r\n *\r\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\r\n *   concatenated in the order specified in `specs`.\r\n * @param specs Specifications of the names, dtypes and shapes of the tensors\r\n *   whose value are encoded by `buffer`.\r\n * @return A map from tensor name to tensor value, with the names corresponding\r\n *   to names in `specs`.\r\n * @throws Error, if any of the tensors has unsupported dtype.\r\n */function _encodeWeights(){_encodeWeights=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee60(tensors,group){var specs,dataPromises,names,_loop7,i,tensorValues;return regeneratorRuntime.wrap(function _callee60$(_context60){while(1){switch(_context60.prev=_context60.next){case 0:// TODO(adarob, cais): Support quantization.\nspecs=[];dataPromises=[];names=Array.isArray(tensors)?tensors.map(function(tensor){return tensor.name;}):Object.keys(tensors);_loop7=function _loop7(i){var name=names[i];var t=Array.isArray(tensors)?tensors[i].tensor:tensors[name];if(t.dtype!=='float32'&&t.dtype!=='int32'&&t.dtype!=='bool'&&t.dtype!=='string'&&t.dtype!=='complex64'){throw new Error(\"Unsupported dtype in weight '\".concat(name,\"': \").concat(t.dtype));}var spec={name:name,shape:t.shape,dtype:t.dtype};if(t.dtype==='string'){var utf8bytes=new Promise(/*#__PURE__*/function(){var _ref11=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee59(resolve){var vals,totalNumBytes,bytes,offset,_i36,val,bytesOfLength;return regeneratorRuntime.wrap(function _callee59$(_context59){while(1){switch(_context59.prev=_context59.next){case 0:_context59.next=2;return t.bytes();case 2:vals=_context59.sent;totalNumBytes=vals.reduce(function(p,c){return p+c.length;},0)+NUM_BYTES_STRING_LENGTH*vals.length;bytes=new Uint8Array(totalNumBytes);offset=0;for(_i36=0;_i36<vals.length;_i36++){val=vals[_i36];bytesOfLength=new Uint8Array(new Uint32Array([val.length]).buffer);bytes.set(bytesOfLength,offset);offset+=NUM_BYTES_STRING_LENGTH;bytes.set(val,offset);offset+=val.length;}resolve(bytes);case 8:case\"end\":return _context59.stop();}}},_callee59);}));return function(_x64){return _ref11.apply(this,arguments);};}());dataPromises.push(utf8bytes);}else{dataPromises.push(t.data());}if(group!=null){spec.group=group;}specs.push(spec);};for(i=0;i<names.length;++i){_loop7(i);}_context60.next=7;return Promise.all(dataPromises);case 7:tensorValues=_context60.sent;return _context60.abrupt(\"return\",{data:concatenateTypedArrays(tensorValues),specs:specs});case 9:case\"end\":return _context60.stop();}}},_callee60);}));return _encodeWeights.apply(this,arguments);}function decodeWeights(buffer,specs){// TODO(adarob, cais): Support quantization.\nvar out={};var float16Decode;var offset=0;var _iterator6=_createForOfIteratorHelper(specs),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var spec=_step6.value;var name=spec.name;var dtype=spec.dtype;var shape=spec.shape;var size=Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"sizeFromShape\"])(shape);var values=void 0;if('quantization'in spec){var quantization=spec.quantization;if(quantization.dtype==='uint8'||quantization.dtype==='uint16'){if(!('min'in quantization&&'scale'in quantization)){throw new Error(\"Weight \".concat(spec.name,\" with quantization \").concat(quantization.dtype,\" \")+\"doesn't have corresponding metadata min and scale.\");}}else if(quantization.dtype==='float16'){if(dtype!=='float32'){throw new Error(\"Weight \".concat(spec.name,\" is quantized with \").concat(quantization.dtype,\" \")+\"which only supports weights of type float32 not \".concat(dtype,\".\"));}}else{throw new Error(\"Weight \".concat(spec.name,\" has unknown \")+\"quantization dtype \".concat(quantization.dtype,\". \")+\"Supported quantization dtypes are: \"+\"'uint8', 'uint16', and 'float16'.\");}var quantizationSizeFactor=_types__WEBPACK_IMPORTED_MODULE_3__[/* DTYPE_VALUE_SIZE_MAP */\"a\"][quantization.dtype];var byteBuffer=buffer.slice(offset,offset+size*quantizationSizeFactor);var quantizedArray=quantization.dtype==='uint8'?new Uint8Array(byteBuffer):new Uint16Array(byteBuffer);if(dtype==='float32'){if(quantization.dtype==='uint8'||quantization.dtype==='uint16'){values=new Float32Array(quantizedArray.length);for(var i=0;i<quantizedArray.length;i++){var v=quantizedArray[i];values[i]=v*quantization.scale+quantization.min;}}else if(quantization.dtype==='float16'){if(float16Decode===undefined){float16Decode=getFloat16Decoder();}values=float16Decode(quantizedArray);}else{throw new Error(\"Unsupported quantization type \".concat(quantization.dtype,\" \")+\"for weight type float32.\");}}else if(dtype==='int32'){if(quantization.dtype!=='uint8'&&quantization.dtype!=='uint16'){throw new Error(\"Unsupported quantization type \".concat(quantization.dtype,\" \")+\"for weight type int32.\");}values=new Int32Array(quantizedArray.length);for(var _i31=0;_i31<quantizedArray.length;_i31++){var _v=quantizedArray[_i31];values[_i31]=Math.round(_v*quantization.scale+quantization.min);}}else{throw new Error(\"Unsupported dtype in weight '\".concat(name,\"': \").concat(dtype));}offset+=size*quantizationSizeFactor;}else if(dtype==='string'){var _size3=Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"sizeFromShape\"])(spec.shape);values=[];for(var _i32=0;_i32<_size3;_i32++){var byteLength=new Uint32Array(buffer.slice(offset,offset+NUM_BYTES_STRING_LENGTH))[0];offset+=NUM_BYTES_STRING_LENGTH;var bytes=new Uint8Array(buffer.slice(offset,offset+byteLength));values.push(bytes);offset+=byteLength;}}else{var dtypeFactor=_types__WEBPACK_IMPORTED_MODULE_3__[/* DTYPE_VALUE_SIZE_MAP */\"a\"][dtype];var _byteBuffer=buffer.slice(offset,offset+size*dtypeFactor);if(dtype==='float32'){values=new Float32Array(_byteBuffer);}else if(dtype==='int32'){values=new Int32Array(_byteBuffer);}else if(dtype==='bool'){values=new Uint8Array(_byteBuffer);}else if(dtype==='complex64'){values=new Float32Array(_byteBuffer);var real=new Float32Array(values.length/2);var image=new Float32Array(values.length/2);for(var _i33=0;_i33<real.length;_i33++){real[_i33]=values[_i33*2];image[_i33]=values[_i33*2+1];}var realTensor=Object(_ops_tensor_ops__WEBPACK_IMPORTED_MODULE_1__[/* tensor */\"f\"])(real,shape,'float32');var imageTensor=Object(_ops_tensor_ops__WEBPACK_IMPORTED_MODULE_1__[/* tensor */\"f\"])(image,shape,'float32');out[name]=Object(_ops_complex__WEBPACK_IMPORTED_MODULE_0__[/* complex */\"a\"])(realTensor,imageTensor);}else{throw new Error(\"Unsupported dtype in weight '\".concat(name,\"': \").concat(dtype));}offset+=size*dtypeFactor;}if(dtype!=='complex64'){out[name]=Object(_ops_tensor_ops__WEBPACK_IMPORTED_MODULE_1__[/* tensor */\"f\"])(values,shape,dtype);}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return out;}/**\r\n * Concatenate TypedArrays into an ArrayBuffer.\r\n */function concatenateTypedArrays(xs){// TODO(adarob, cais): Support quantization.\nif(xs===null){throw new Error(\"Invalid input value: \".concat(JSON.stringify(xs)));}var totalByteLength=0;// `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n// can have a different byte length from that of the `TypedArray` itself,\n// for example, when the `TypedArray` is created from an offset in an\n// `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n// the `TypedArray` in byte length. If an element of `xs` does not show\n// this property, a new `TypedArray` that satisfy this property will be\n// constructed and pushed into `normalizedXs`.\nvar normalizedXs=[];xs.forEach(function(x){totalByteLength+=x.byteLength;// tslint:disable:no-any\nnormalizedXs.push(x.byteLength===x.buffer.byteLength?x:new x.constructor(x));if(!(x instanceof Float32Array||x instanceof Int32Array||x instanceof Uint8Array)){throw new Error(\"Unsupported TypedArray subtype: \".concat(x.constructor.name));}// tslint:enable:no-any\n});var y=new Uint8Array(totalByteLength);var offset=0;normalizedXs.forEach(function(x){y.set(new Uint8Array(x.buffer),offset);offset+=x.byteLength;});return y.buffer;}// Use Buffer on Node.js instead of Blob/atob/btoa\nvar useNodeBuffer=typeof Buffer!=='undefined'&&(typeof Blob==='undefined'||typeof atob==='undefined'||typeof btoa==='undefined');/**\r\n * Calculate the byte length of a JavaScript string.\r\n *\r\n * Note that a JavaScript string can contain wide characters, therefore the\r\n * length of the string is not necessarily equal to the byte length.\r\n *\r\n * @param str Input string.\r\n * @returns Byte length.\r\n */function stringByteLength(str){if(useNodeBuffer){return Buffer.byteLength(str);}return new Blob([str]).size;}/**\r\n * Encode an ArrayBuffer as a base64 encoded string.\r\n *\r\n * @param buffer `ArrayBuffer` to be converted.\r\n * @returns A string that base64-encodes `buffer`.\r\n */function arrayBufferToBase64String(buffer){if(useNodeBuffer){return Buffer.from(buffer).toString('base64');}var buf=new Uint8Array(buffer);var s='';for(var i=0,l=buf.length;i<l;i++){s+=String.fromCharCode(buf[i]);}return btoa(s);}/**\r\n * Decode a base64 string as an ArrayBuffer.\r\n *\r\n * @param str Base64 string.\r\n * @returns Decoded `ArrayBuffer`.\r\n */function base64StringToArrayBuffer(str){if(useNodeBuffer){var buf=Buffer.from(str,'base64');return buf.buffer.slice(buf.byteOffset,buf.byteOffset+buf.byteLength);}var s=atob(str);var buffer=new Uint8Array(s.length);for(var i=0;i<s.length;++i){buffer.set([s.charCodeAt(i)],i);}return buffer.buffer;}/**\r\n * Concatenate a number of ArrayBuffers into one.\r\n *\r\n * @param buffers A number of array buffers to concatenate.\r\n * @returns Result of concatenating `buffers` in order.\r\n */function concatenateArrayBuffers(buffers){if(buffers.length===1){return buffers[0];}var totalByteLength=0;buffers.forEach(function(buffer){totalByteLength+=buffer.byteLength;});var temp=new Uint8Array(totalByteLength);var offset=0;buffers.forEach(function(buffer){temp.set(new Uint8Array(buffer),offset);offset+=buffer.byteLength;});return temp.buffer;}/**\r\n * Get the basename of a path.\r\n *\r\n * Behaves in a way analogous to Linux's basename command.\r\n *\r\n * @param path\r\n */function basename(path){var SEPARATOR='/';path=path.trim();while(path.endsWith(SEPARATOR)){path=path.slice(0,path.length-1);}var items=path.split(SEPARATOR);return items[items.length-1];}/**\r\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\r\n * @param modelArtifacts\r\n * @returns A ModelArtifactsInfo object.\r\n */function getModelArtifactsInfoForJSON(modelArtifacts){if(modelArtifacts.modelTopology instanceof ArrayBuffer){throw new Error('Expected JSON model topology, received ArrayBuffer.');}return{dateSaved:new Date(),modelTopologyType:'JSON',modelTopologyBytes:modelArtifacts.modelTopology==null?0:stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),weightSpecsBytes:modelArtifacts.weightSpecs==null?0:stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),weightDataBytes:modelArtifacts.weightData==null?0:modelArtifacts.weightData.byteLength};}/**\r\n * Computes mantisa table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 2048 mantissa lookup values.\r\n */function computeFloat16MantisaTable(){var convertMantissa=function convertMantissa(i){var m=i<<13;var e=0;while((m&0x00800000)===0){e-=0x00800000;m<<=1;}m&=~0x00800000;e+=0x38800000;return m|e;};var mantisaTable=new Uint32Array(2048);mantisaTable[0]=0;for(var i=1;i<1024;i++){mantisaTable[i]=convertMantissa(i);}for(var _i34=1024;_i34<2048;_i34++){mantisaTable[_i34]=0x38000000+(_i34-1024<<13);}return mantisaTable;}/**\r\n * Computes exponent table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 64 exponent lookup values.\r\n */function computeFloat16ExponentTable(){var exponentTable=new Uint32Array(64);exponentTable[0]=0;exponentTable[31]=0x47800000;exponentTable[32]=0x80000000;exponentTable[63]=0xc7800000;for(var i=1;i<31;i++){exponentTable[i]=i<<23;}for(var _i35=33;_i35<63;_i35++){exponentTable[_i35]=0x80000000+(_i35-32<<23);}return exponentTable;}/**\r\n * Computes offset table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 6d offset values.\r\n */function computeFloat16OffsetTable(){var offsetTable=new Uint32Array(64);for(var i=0;i<64;i++){offsetTable[i]=1024;}offsetTable[0]=offsetTable[32]=0;return offsetTable;}/**\r\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\r\n * to a Float32Array.\r\n *\r\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\r\n *          the Uint16Array of Float16 bytes to a Float32Array.\r\n */function getFloat16Decoder(){// Algorithm is based off of http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n// Cache lookup tables\nvar mantisaTable=computeFloat16MantisaTable();var exponentTable=computeFloat16ExponentTable();var offsetTable=computeFloat16OffsetTable();return function(quantizedArray){var buffer=new ArrayBuffer(4*quantizedArray.length);var bufferUint32View=new Uint32Array(buffer);for(var index=0;index<quantizedArray.length;index++){var float16Bits=quantizedArray[index];var float32Bits=mantisaTable[offsetTable[float16Bits>>10]+(float16Bits&0x3ff)]+exponentTable[float16Bits>>10];bufferUint32View[index]=float32Bits;}return new Float32Array(buffer);};}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(39).Buffer);/***/},/* 14 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"f\",function(){return(/* binding */iteratorFromItems);});__webpack_require__.d(__webpack_exports__,\"e\",function(){return(/* binding */iteratorFromFunction);});__webpack_require__.d(__webpack_exports__,\"d\",function(){return(/* binding */iteratorFromConcatenated);});__webpack_require__.d(__webpack_exports__,\"g\",function(){return(/* binding */iteratorFromZipped);});__webpack_require__.d(__webpack_exports__,\"a\",function(){return(/* binding */lazy_iterator_LazyIterator);});__webpack_require__.d(__webpack_exports__,\"b\",function(){return(/* binding */lazy_iterator_OneToManyIterator);});__webpack_require__.d(__webpack_exports__,\"c\",function(){return(/* binding */ZipMismatchMode);});// UNUSED EXPORTS: iteratorFromIncrementing, iteratorFromConcatenatedFunction, ChainedIterator, PrefetchIterator, ShuffleIterator\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// EXTERNAL MODULE: ./node_modules/seedrandom/index.js\nvar seedrandom=__webpack_require__(20);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js\nvar deep_map=__webpack_require__(19);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/deep_clone.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */function deepClone(container){return Object(deep_map[\"b\"/* deepMap */])(container,cloneIfTensor);}// tslint:disable-next-line: no-any\nfunction cloneIfTensor(item){if(item instanceof dist[\"Tensor\"]){return{value:item.clone(),recurse:false};}else if(Object(deep_map[\"e\"/* isIterable */])(item)){return{value:null,recurse:true};}else{return{value:item,recurse:false};}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/ring_buffer.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\r\n */var RingBuffer=/*#__PURE__*/function(){/**\r\n     * Constructs a `RingBuffer`.\r\n     * @param capacity The number of items that the buffer can accomodate.\r\n     */function RingBuffer(capacity){_classCallCheck2(this,RingBuffer);this.capacity=capacity;// Note we store the indices in the range 0 <= index < 2*capacity.\n// This allows us to distinguish the full from the empty case.\n// See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\nthis.begin=0;// inclusive\nthis.end=0;// exclusive\nif(capacity==null){throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');}if(capacity<1){throw new RangeError('Can\\'t create ring buffer of capacity < 1.');}this.data=new Array(capacity);this.doubledCapacity=2*capacity;}/**\r\n     * Map any index into the range 0 <= index < 2*capacity.\r\n     */_createClass(RingBuffer,[{key:\"wrap\",value:function wrap(index){// don't trust % on negative numbers\nwhile(index<0){index+=this.doubledCapacity;}return index%this.doubledCapacity;}},{key:\"get\",value:function get(index){if(index<0){throw new RangeError('Can\\'t get item at a negative index.');}return this.data[index%this.capacity];}},{key:\"set\",value:function set(index,value){if(index<0){throw new RangeError('Can\\'t set item at a negative index.');}this.data[index%this.capacity]=value;}/**\r\n     * Returns the current number of items in the buffer.\r\n     */},{key:\"length\",value:function length(){var length=this.end-this.begin;if(length<0){length=this.doubledCapacity+length;}return length;}/**\r\n     * Reports whether the buffer is full.\r\n     * @returns true if the number of items in the buffer equals its capacity, and\r\n     *   false otherwise.\r\n     */},{key:\"isFull\",value:function isFull(){return this.length()===this.capacity;}/**\r\n     * Reports whether the buffer is empty.\r\n     * @returns true if the number of items in the buffer equals zero, and\r\n     *   false otherwise.\r\n     */},{key:\"isEmpty\",value:function isEmpty(){return this.length()===0;}/**\r\n     * Adds an item to the end of the buffer.\r\n     */},{key:\"push\",value:function push(value){if(this.isFull()){throw new RangeError('Ring buffer is full.');}this.set(this.end,value);this.end=this.wrap(this.end+1);}/**\r\n     * Adds many items to the end of the buffer, in order.\r\n     */},{key:\"pushAll\",value:function pushAll(values){var _iterator7=_createForOfIteratorHelper(values),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var value=_step7.value;this.push(value);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}}/**\r\n     * Removes and returns the last item in the buffer.\r\n     */},{key:\"pop\",value:function pop(){if(this.isEmpty()){throw new RangeError('Ring buffer is empty.');}this.end=this.wrap(this.end-1);var result=this.get(this.end);this.set(this.end,undefined);return result;}/**\r\n     * Adds an item to the beginning of the buffer.\r\n     */},{key:\"unshift\",value:function unshift(value){if(this.isFull()){throw new RangeError('Ring buffer is full.');}this.begin=this.wrap(this.begin-1);this.set(this.begin,value);}/**\r\n     * Removes and returns the first item in the buffer.\r\n     */},{key:\"shift\",value:function shift(){if(this.isEmpty()){throw new RangeError('Ring buffer is empty.');}var result=this.get(this.begin);this.set(this.begin,undefined);this.begin=this.wrap(this.begin+1);return result;}/**\r\n     * Removes and returns a specific item in the buffer, and moves the last item\r\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\r\n     * Note that this operation necessarily scrambles the original order.\r\n     *\r\n     * @param relativeIndex: the index of the item to remove, relative to the\r\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\r\n     *   storage).\r\n     */},{key:\"shuffleExcise\",value:function shuffleExcise(relativeIndex){if(this.isEmpty()){throw new RangeError('Ring buffer is empty.');}var index=this.wrap(this.begin+relativeIndex);var result=this.get(index);this.set(index,this.pop());return result;}}]);return RingBuffer;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */var growing_ring_buffer_GrowingRingBuffer=/*#__PURE__*/function(_RingBuffer){_inherits(growing_ring_buffer_GrowingRingBuffer,_RingBuffer);var _super10=_createSuper(growing_ring_buffer_GrowingRingBuffer);/**\r\n     * Constructs a `GrowingRingBuffer`.\r\n     */function growing_ring_buffer_GrowingRingBuffer(){_classCallCheck2(this,growing_ring_buffer_GrowingRingBuffer);return _super10.call(this,growing_ring_buffer_GrowingRingBuffer.INITIAL_CAPACITY);}_createClass(growing_ring_buffer_GrowingRingBuffer,[{key:\"isFull\",value:function isFull(){return false;}},{key:\"push\",value:function push(value){if(_get(_getPrototypeOf(growing_ring_buffer_GrowingRingBuffer.prototype),\"isFull\",this).call(this)){this.expand();}_get(_getPrototypeOf(growing_ring_buffer_GrowingRingBuffer.prototype),\"push\",this).call(this,value);}},{key:\"unshift\",value:function unshift(value){if(_get(_getPrototypeOf(growing_ring_buffer_GrowingRingBuffer.prototype),\"isFull\",this).call(this)){this.expand();}_get(_getPrototypeOf(growing_ring_buffer_GrowingRingBuffer.prototype),\"unshift\",this).call(this,value);}/**\r\n     * Doubles the capacity of the buffer.\r\n     */},{key:\"expand\",value:function expand(){var newCapacity=this.capacity*2;var newData=new Array(newCapacity);var len=this.length();// Rotate the buffer to start at index 0 again, since we can't just\n// allocate more space at the end.\nfor(var i=0;i<len;i++){newData[i]=this.get(this.wrap(this.begin+i));}this.data=newData;this.capacity=newCapacity;this.doubledCapacity=2*this.capacity;this.begin=0;this.end=len;}}]);return growing_ring_buffer_GrowingRingBuffer;}(RingBuffer);growing_ring_buffer_GrowingRingBuffer.INITIAL_CAPACITY=32;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ // Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n/**\r\n * Create a `LazyIterator` from an array of items.\r\n */function iteratorFromItems(items){return new lazy_iterator_ArrayIterator(items);}/**\r\n * Create a `LazyIterator` of incrementing integers.\r\n */function iteratorFromIncrementing(start){var i=start;return iteratorFromFunction(function(){return{value:i++,done:false};});}/**\r\n * Create a `LazyIterator` from a function.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const iter = tf.data.iteratorFromFunction(func);\r\n * await iter.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param func A function that produces data on each call.\r\n */function iteratorFromFunction(func){return new FunctionCallIterator(func);}/**\r\n * Create a `LazyIterator` by concatenating underlying streams, which are\r\n * themselves provided as a stream.\r\n *\r\n * This can also be thought of as a \"stream flatten\" operation.\r\n *\r\n * @param baseIterators A stream of streams to be concatenated.\r\n * @param baseErrorHandler An optional function that can intercept `Error`s\r\n *   raised during a `next()` call on the base stream.  This function can decide\r\n *   whether the error should be propagated, whether the error should be\r\n *   ignored, or whether the base stream should be terminated.\r\n */function iteratorFromConcatenated(baseIterators,baseErrorHandler){return new ChainedIterator(baseIterators,baseErrorHandler);}/**\r\n * Create a `LazyIterator` by concatenating streams produced by calling a\r\n * stream-generating function a given number of times.\r\n *\r\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\r\n * function can be used to achieve a similar effect:\r\n *\r\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\r\n *\r\n * @param iteratorFunc: A function that produces a new stream on each call.\r\n * @param count: The number of times to call the function.\r\n * @param baseErrorHandler An optional function that can intercept `Error`s\r\n *   raised during a `next()` call on the base stream.  This function can decide\r\n *   whether the error should be propagated, whether the error should be\r\n *   ignored, or whether the base stream should be terminated.\r\n */function iteratorFromConcatenatedFunction(iteratorFunc,count,baseErrorHandler){return iteratorFromConcatenated(iteratorFromFunction(iteratorFunc).take(count),baseErrorHandler);}/**\r\n * Create a `LazyIterator` by zipping together an array, dict, or nested\r\n * structure of `LazyIterator`s (and perhaps additional constants).\r\n *\r\n * The underlying streams must provide elements in a consistent order such\r\n * that they correspond.\r\n *\r\n * Typically, the underlying streams should have the same number of\r\n * elements. If they do not, the behavior is determined by the\r\n * `mismatchMode` argument.\r\n *\r\n * The nested structure of the `iterators` argument determines the\r\n * structure of elements in the resulting iterator.\r\n *\r\n * @param iterators: An array or object containing LazyIterators at the\r\n * leaves.\r\n * @param mismatchMode: Determines what to do when one underlying iterator\r\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\r\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\r\n * causes the zipped iterator to terminate with the furst underlying\r\n * streams, so elements remaining on the longer streams are ignored.\r\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\r\n * in nulls for the exhausted streams, until all streams are exhausted.\r\n */function iteratorFromZipped(iterators){var mismatchMode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ZipMismatchMode.FAIL;return new lazy_iterator_ZipIterator(iterators,mismatchMode);}/**\r\n * An asynchronous iterator, providing lazy access to a potentially\r\n * unbounded stream of elements.\r\n *\r\n * Iterator can be obtained from a dataset:\r\n * `const iter = await dataset.iterator();`\r\n */var lazy_iterator_LazyIterator=/*#__PURE__*/function(){function lazy_iterator_LazyIterator(){_classCallCheck2(this,lazy_iterator_LazyIterator);}_createClass(lazy_iterator_LazyIterator,[{key:\"toArray\",value:/**\r\n     * Collect all remaining elements of a bounded stream into an array.\r\n     * Obviously this will succeed only for small streams that fit in memory.\r\n     * Useful for testing.\r\n     *\r\n     * @returns A Promise for an array of stream elements, which will resolve\r\n     *   when the stream is exhausted.\r\n     */function(){var _toArray=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee61(){var result,x;return regeneratorRuntime.wrap(function _callee61$(_context61){while(1){switch(_context61.prev=_context61.next){case 0:result=[];_context61.next=3;return this.next();case 3:x=_context61.sent;case 4:if(x.done){_context61.next=11;break;}result.push(x.value);_context61.next=8;return this.next();case 8:x=_context61.sent;_context61.next=4;break;case 11:return _context61.abrupt(\"return\",result);case 12:case\"end\":return _context61.stop();}}},_callee61,this);}));function toArray(){return _toArray.apply(this,arguments);}return toArray;}()/**\r\n     * Collect all elements of this dataset into an array with prefetching 100\r\n     * elements. This is useful for testing, because the prefetch changes the\r\n     * order in which the Promises are resolved along the processing pipeline.\r\n     * This may help expose bugs where results are dependent on the order of\r\n     * Promise resolution rather than on the logical order of the stream (i.e.,\r\n     * due to hidden mutable state).\r\n     *\r\n     * @returns A Promise for an array of stream elements, which will resolve\r\n     *   when the stream is exhausted.\r\n     */},{key:\"toArrayForTest\",value:function(){var _toArrayForTest=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee62(){var stream,result,x;return regeneratorRuntime.wrap(function _callee62$(_context62){while(1){switch(_context62.prev=_context62.next){case 0:stream=this.prefetch(100);result=[];_context62.next=4;return stream.next();case 4:x=_context62.sent;case 5:if(x.done){_context62.next=12;break;}result.push(x.value);_context62.next=9;return stream.next();case 9:x=_context62.sent;_context62.next=5;break;case 12:return _context62.abrupt(\"return\",result);case 13:case\"end\":return _context62.stop();}}},_callee62,this);}));function toArrayForTest(){return _toArrayForTest.apply(this,arguments);}return toArrayForTest;}()/**\r\n     * Draw items from the stream until it is exhausted.\r\n     *\r\n     * This can be useful when the stream has side effects but no output.  In\r\n     * that case, calling this function guarantees that the stream will be\r\n     * fully processed.\r\n     */},{key:\"resolveFully\",value:function(){var _resolveFully=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee63(){var x;return regeneratorRuntime.wrap(function _callee63$(_context63){while(1){switch(_context63.prev=_context63.next){case 0:_context63.next=2;return this.next();case 2:x=_context63.sent;case 3:if(x.done){_context63.next=9;break;}_context63.next=6;return this.next();case 6:x=_context63.sent;_context63.next=3;break;case 9:case\"end\":return _context63.stop();}}},_callee63,this);}));function resolveFully(){return _resolveFully.apply(this,arguments);}return resolveFully;}()/**\r\n     * Draw items from the stream until it is exhausted, or a predicate fails.\r\n     *\r\n     * This can be useful when the stream has side effects but no output.  In\r\n     * that case, calling this function guarantees that the stream will be\r\n     * fully processed.\r\n     */},{key:\"resolveWhile\",value:function(){var _resolveWhile=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee64(predicate){var x,shouldContinue;return regeneratorRuntime.wrap(function _callee64$(_context64){while(1){switch(_context64.prev=_context64.next){case 0:_context64.next=2;return this.next();case 2:x=_context64.sent;shouldContinue=predicate(x.value);case 4:if(!(!x.done&&shouldContinue)){_context64.next=11;break;}_context64.next=7;return this.next();case 7:x=_context64.sent;shouldContinue=predicate(x.value);_context64.next=4;break;case 11:case\"end\":return _context64.stop();}}},_callee64,this);}));function resolveWhile(_x65){return _resolveWhile.apply(this,arguments);}return resolveWhile;}()/**\r\n     * Handles errors thrown on this stream using a provided handler function.\r\n     *\r\n     * @param handler A function that handles any `Error` thrown during a `next()`\r\n     *   call and returns true if the stream should continue (dropping the failed\r\n     *   call) or false if the stream should quietly terminate.  If the handler\r\n     *   itself throws (or rethrows) an `Error`, that will be propagated.\r\n     *\r\n     * @returns A `LazyIterator` of elements passed through from upstream,\r\n     *   possibly filtering or terminating on upstream `next()` calls that\r\n     *   throw an `Error`.\r\n     */},{key:\"handleErrors\",value:function handleErrors(handler){return new ErrorHandlingLazyIterator(this,handler);}// TODO(soergel): Implement reduce() etc.\n/**\r\n     * Filters this stream according to `predicate`.\r\n     *\r\n     * @param predicate A function mapping a stream element to a boolean or a\r\n     * `Promise` for one.\r\n     *\r\n     * @returns A `LazyIterator` of elements for which the predicate was true.\r\n     */},{key:\"filter\",value:function filter(predicate){return new lazy_iterator_FilterIterator(this,predicate);}/**\r\n     * Maps this stream through a 1-to-1 transform.\r\n     *\r\n     * @param transform A function mapping a stream element to a transformed\r\n     *   element.\r\n     *\r\n     * @returns A `LazyIterator` of transformed elements.\r\n     */},{key:\"map\",value:function map(transform){return new lazy_iterator_MapIterator(this,transform);}/**\r\n     * Maps this stream through an async 1-to-1 transform.\r\n     *\r\n     * @param transform A function mapping a stream element to a `Promise` for a\r\n     *   transformed stream element.\r\n     *\r\n     * @returns A `LazyIterator` of transformed elements.\r\n     */},{key:\"mapAsync\",value:function mapAsync(transform){return new lazy_iterator_AsyncMapIterator(this,transform);}/**\r\n     * Maps this stream through a 1-to-1 transform, forcing serial execution.\r\n     *\r\n     * @param transform A function mapping a stream element to a transformed\r\n     *   element.\r\n     *\r\n     * @returns A `LazyIterator` of transformed elements.\r\n     */},{key:\"serialMapAsync\",value:function serialMapAsync(transform){return new lazy_iterator_AsyncMapIterator(this,transform).serial();}/**\r\n     * Maps this stream through a 1-to-many transform.\r\n     *\r\n     * @param transform A function mapping a stream element to an array of\r\n     *   transformed elements.\r\n     *\r\n     * @returns A `DataStream` of transformed elements.\r\n     */},{key:\"flatmap\",value:function flatmap(transform){return new lazy_iterator_FlatmapIterator(this,transform);}/**\r\n     * Apply a function to every element of the stream.\r\n     *\r\n     * @param f A function to apply to each stream element.\r\n     */},{key:\"forEachAsync\",value:function(){var _forEachAsync=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee65(f){return regeneratorRuntime.wrap(function _callee65$(_context65){while(1){switch(_context65.prev=_context65.next){case 0:return _context65.abrupt(\"return\",this.map(f).resolveFully());case 1:case\"end\":return _context65.stop();}}},_callee65,this);}));function forEachAsync(_x66){return _forEachAsync.apply(this,arguments);}return forEachAsync;}()/**\r\n     * Apply a function to every element of the stream, forcing serial execution.\r\n     *\r\n     * @param f A function to apply to each stream element.  Should return 'true'\r\n     *   to indicate that the stream should continue, or 'false' to cause it to\r\n     *   terminate.\r\n     */},{key:\"serialForEach\",value:function(){var _serialForEach=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee66(f){return regeneratorRuntime.wrap(function _callee66$(_context66){while(1){switch(_context66.prev=_context66.next){case 0:return _context66.abrupt(\"return\",this.serialMapAsync(f).resolveWhile(function(x){return x===true;}));case 1:case\"end\":return _context66.stop();}}},_callee66,this);}));function serialForEach(_x67){return _serialForEach.apply(this,arguments);}return serialForEach;}()/**\r\n     * Groups elements into batches, represented as arrays of elements.\r\n     *\r\n     * We can think of the elements of this iterator as 'rows' (even if they are\r\n     * nested structures).  By the same token, consecutive values for a given\r\n     * key within the elements form a 'column'.  This matches the usual sense of\r\n     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\r\n     *\r\n     * Thus, \"Row-major\" means that the resulting batch is simply a collection of\r\n     * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\r\n     * form, which is needed for vectorized computation.\r\n     *\r\n     * @param batchSize The number of elements desired per batch.\r\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\r\n     *   than batchSize elements. Default true.\r\n     * @returns A `LazyIterator` of batches of elements, represented as arrays\r\n     *   of the original element type.\r\n     */},{key:\"rowMajorBatch\",value:function rowMajorBatch(batchSize){var smallLastBatch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return new RowMajorBatchIterator(this,batchSize,smallLastBatch);}/**\r\n     * Groups elements into batches, represented in column-major form.\r\n     *\r\n     * We can think of the elements of this iterator as 'rows' (even if they are\r\n     * nested structures).  By the same token, consecutive values for a given\r\n     * key within the elements form a 'column'.  This matches the usual sense of\r\n     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\r\n     *\r\n     * Thus, \"column-major\" means that the resulting batch is a (potentially\r\n     * nested) structure representing the columns.  Each column entry, then,\r\n     * contains a collection of the values found in that column for a range of\r\n     * input elements.  This representation allows for vectorized computation, in\r\n     * contrast to the row-major form.\r\n     *\r\n     * The inputs should all have the same nested structure (i.e., of arrays and\r\n     * dicts).  The result is a single object with the same nested structure,\r\n     * where the leaves are arrays collecting the values of the inputs at that\r\n     * location (or, optionally, the result of a custom function applied to those\r\n     * arrays).\r\n     *\r\n     * @param batchSize The number of elements desired per batch.\r\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\r\n     *   than batchSize elements. Default true.\r\n     * @param zipFn: (optional) A function that expects an array of elements at a\r\n     *   single node of the object tree, and returns a `DeepMapResult`.  The\r\n     *   `DeepMapResult` either provides a result value for that node (i.e.,\r\n     *   representing the subtree), or indicates that the node should be processed\r\n     *   recursively.  The default zipFn recurses as far as possible and places\r\n     *   arrays at the leaves.\r\n     * @returns A `LazyIterator` of batches of elements, represented as an object\r\n     *   with collections at the leaves.\r\n     */},{key:\"columnMajorBatch\",value:function columnMajorBatch(batchSize){var smallLastBatch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var zipFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:deep_map[\"f\"/* zipToList */];// First collect the desired number of input elements as a row-major batch.\nvar rowBatches=this.rowMajorBatch(batchSize,smallLastBatch);// Now 'rotate' or 'pivot' the data, collecting all values from each column\n// in the batch (i.e., for each key within the elements) into an array.\nreturn rowBatches.map(function(x){return Object(deep_map[\"d\"/* deepZip */])(x,zipFn);});}/**\r\n     * Concatenate this `LazyIterator` with another.\r\n     *\r\n     * @param iterator A `LazyIterator` to be concatenated onto this one.\r\n     * @param baseErrorHandler An optional function that can intercept `Error`s\r\n     *   raised during a `next()` call on the base stream.  This function can\r\n     *   decide whether the error should be propagated, whether the error should\r\n     *   be ignored, or whether the base stream should be terminated.\r\n     * @returns A `LazyIterator`.\r\n     */},{key:\"concatenate\",value:function concatenate(iterator,baseErrorHandler){return new ChainedIterator(iteratorFromItems([this,iterator]),baseErrorHandler);}/**\r\n     * Limits this stream to return at most `count` items.\r\n     *\r\n     * @param count The maximum number of items to provide from the stream. If\r\n     * a negative or undefined value is given, the entire stream is returned\r\n     *   unaltered.\r\n     */},{key:\"take\",value:function take(count){if(count<0||count==null){return this;}return new TakeIterator(this,count);}/**\r\n     * Skips the first `count` items in this stream.\r\n     *\r\n     * @param count The number of items to skip.  If a negative or undefined\r\n     * value is given, the entire stream is returned unaltered.\r\n     */},{key:\"skip\",value:function skip(count){if(count<0||count==null){return this;}return new lazy_iterator_SkipIterator(this,count);}/**\r\n     * Prefetch the first `bufferSize` items in this stream.\r\n     *\r\n     * Note this prefetches Promises, but makes no guarantees about when those\r\n     * Promises resolve.\r\n     *\r\n     * @param bufferSize: An integer specifying the number of elements to be\r\n     *   prefetched.\r\n     */},{key:\"prefetch\",value:function prefetch(bufferSize){return new lazy_iterator_PrefetchIterator(this,bufferSize);}// TODO(soergel): deep sharded shuffle, where supported\n/**\r\n     * Randomly shuffles the elements of this stream.\r\n     *\r\n     * @param bufferSize: An integer specifying the number of elements from\r\n     * this stream from which the new stream will sample.\r\n     * @param seed: (Optional.) An integer specifying the random seed that\r\n     * will be used to create the distribution.\r\n     */},{key:\"shuffle\",value:function shuffle(windowSize,seed){return new lazy_iterator_ShuffleIterator(this,windowSize,seed);}/**\r\n     * Force an iterator to execute serially: each next() call will await the\r\n     * prior one, so that they cannot execute concurrently.\r\n     */},{key:\"serial\",value:function serial(){return new SerialIterator(this);}}]);return lazy_iterator_LazyIterator;}();// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// Iterators that just extend LazyIterator directly\n// ============================================================================\nvar lazy_iterator_ArrayIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt){_inherits(lazy_iterator_ArrayIterator,_lazy_iterator_LazyIt);var _super11=_createSuper(lazy_iterator_ArrayIterator);function lazy_iterator_ArrayIterator(items){var _this37;_classCallCheck2(this,lazy_iterator_ArrayIterator);_this37=_super11.call(this);_this37.items=items;_this37.trav=0;return _this37;}_createClass(lazy_iterator_ArrayIterator,[{key:\"summary\",value:function summary(){return\"Array of \".concat(this.items.length,\" items\");}},{key:\"next\",value:function(){var _next=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee67(){var item;return regeneratorRuntime.wrap(function _callee67$(_context67){while(1){switch(_context67.prev=_context67.next){case 0:if(!(this.trav>=this.items.length)){_context67.next=2;break;}return _context67.abrupt(\"return\",{value:null,done:true});case 2:item=this.items[this.trav];this.trav++;return _context67.abrupt(\"return\",{value:deepClone(item),done:false});case 5:case\"end\":return _context67.stop();}}},_callee67,this);}));function next(){return _next.apply(this,arguments);}return next;}()}]);return lazy_iterator_ArrayIterator;}(lazy_iterator_LazyIterator);var FunctionCallIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt2){_inherits(FunctionCallIterator,_lazy_iterator_LazyIt2);var _super12=_createSuper(FunctionCallIterator);function FunctionCallIterator(nextFn){var _this38;_classCallCheck2(this,FunctionCallIterator);_this38=_super12.call(this);_this38.nextFn=nextFn;return _this38;}_createClass(FunctionCallIterator,[{key:\"summary\",value:function summary(){return\"Function call\";}},{key:\"next\",value:function(){var _next2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee68(){return regeneratorRuntime.wrap(function _callee68$(_context68){while(1){switch(_context68.prev=_context68.next){case 0:_context68.prev=0;return _context68.abrupt(\"return\",this.nextFn());case 4:_context68.prev=4;_context68.t0=_context68[\"catch\"](0);// Modify the error message but leave the stack trace intact\n_context68.t0.message=\"Error thrown while iterating through a dataset: \".concat(_context68.t0.message);throw _context68.t0;case 8:case\"end\":return _context68.stop();}}},_callee68,this,[[0,4]]);}));function next(){return _next2.apply(this,arguments);}return next;}()}]);return FunctionCallIterator;}(lazy_iterator_LazyIterator);var SerialIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt3){_inherits(SerialIterator,_lazy_iterator_LazyIt3);var _super13=_createSuper(SerialIterator);function SerialIterator(upstream){var _this39;_classCallCheck2(this,SerialIterator);_this39=_super13.call(this);_this39.upstream=upstream;_this39.lastRead=Promise.resolve({value:null,done:false});return _this39;}_createClass(SerialIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Serial\");}},{key:\"next\",value:function(){var _next3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee69(){var _this40=this;return regeneratorRuntime.wrap(function _callee69$(_context69){while(1){switch(_context69.prev=_context69.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this40.serialNext();});return _context69.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context69.stop();}}},_callee69,this);}));function next(){return _next3.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee70(){return regeneratorRuntime.wrap(function _callee70$(_context70){while(1){switch(_context70.prev=_context70.next){case 0:return _context70.abrupt(\"return\",this.upstream.next());case 1:case\"end\":return _context70.stop();}}},_callee70,this);}));function serialNext(){return _serialNext.apply(this,arguments);}return serialNext;}()}]);return SerialIterator;}(lazy_iterator_LazyIterator);var lazy_iterator_SkipIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt4){_inherits(lazy_iterator_SkipIterator,_lazy_iterator_LazyIt4);var _super14=_createSuper(lazy_iterator_SkipIterator);function lazy_iterator_SkipIterator(upstream,maxCount){var _this41;_classCallCheck2(this,lazy_iterator_SkipIterator);_this41=_super14.call(this);_this41.upstream=upstream;_this41.maxCount=maxCount;// Local state that should not be clobbered by out-of-order execution.\n_this41.count=0;_this41.lastRead=Promise.resolve({value:null,done:false});return _this41;}_createClass(lazy_iterator_SkipIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Skip\");}},{key:\"next\",value:function(){var _next4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee71(){var _this42=this;return regeneratorRuntime.wrap(function _callee71$(_context71){while(1){switch(_context71.prev=_context71.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this42.serialNext();});return _context71.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context71.stop();}}},_callee71,this);}));function next(){return _next4.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee72(){var skipped;return regeneratorRuntime.wrap(function _callee72$(_context72){while(1){switch(_context72.prev=_context72.next){case 0:if(!(this.count++<this.maxCount)){_context72.next=9;break;}_context72.next=3;return this.upstream.next();case 3:skipped=_context72.sent;if(!skipped.done){_context72.next=6;break;}return _context72.abrupt(\"return\",skipped);case 6:dist[\"dispose\"](skipped.value);_context72.next=0;break;case 9:return _context72.abrupt(\"return\",this.upstream.next());case 10:case\"end\":return _context72.stop();}}},_callee72,this);}));function serialNext(){return _serialNext2.apply(this,arguments);}return serialNext;}()}]);return lazy_iterator_SkipIterator;}(lazy_iterator_LazyIterator);var TakeIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt5){_inherits(TakeIterator,_lazy_iterator_LazyIt5);var _super15=_createSuper(TakeIterator);function TakeIterator(upstream,maxCount){var _this43;_classCallCheck2(this,TakeIterator);_this43=_super15.call(this);_this43.upstream=upstream;_this43.maxCount=maxCount;_this43.count=0;return _this43;}_createClass(TakeIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Take\");}},{key:\"next\",value:function(){var _next5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee73(){return regeneratorRuntime.wrap(function _callee73$(_context73){while(1){switch(_context73.prev=_context73.next){case 0:if(!(this.count++>=this.maxCount)){_context73.next=2;break;}return _context73.abrupt(\"return\",{value:null,done:true});case 2:return _context73.abrupt(\"return\",this.upstream.next());case 3:case\"end\":return _context73.stop();}}},_callee73,this);}));function next(){return _next5.apply(this,arguments);}return next;}()}]);return TakeIterator;}(lazy_iterator_LazyIterator);// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nvar RowMajorBatchIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt6){_inherits(RowMajorBatchIterator,_lazy_iterator_LazyIt6);var _super16=_createSuper(RowMajorBatchIterator);function RowMajorBatchIterator(upstream,batchSize){var _this44;var enableSmallLastBatch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;_classCallCheck2(this,RowMajorBatchIterator);_this44=_super16.call(this);_this44.upstream=upstream;_this44.batchSize=batchSize;_this44.enableSmallLastBatch=enableSmallLastBatch;_this44.lastRead=Promise.resolve({value:null,done:false});return _this44;}_createClass(RowMajorBatchIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> RowMajorBatch\");}},{key:\"next\",value:function(){var _next6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee74(){var _this45=this;return regeneratorRuntime.wrap(function _callee74$(_context74){while(1){switch(_context74.prev=_context74.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this45.serialNext();});return _context74.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context74.stop();}}},_callee74,this);}));function next(){return _next6.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee75(){var batch,item;return regeneratorRuntime.wrap(function _callee75$(_context75){while(1){switch(_context75.prev=_context75.next){case 0:batch=[];case 1:if(!(batch.length<this.batchSize)){_context75.next=12;break;}_context75.next=4;return this.upstream.next();case 4:item=_context75.sent;if(!item.done){_context75.next=9;break;}if(!(this.enableSmallLastBatch&&batch.length>0)){_context75.next=8;break;}return _context75.abrupt(\"return\",{value:batch,done:false});case 8:return _context75.abrupt(\"return\",{value:null,done:true});case 9:batch.push(item.value);_context75.next=1;break;case 12:return _context75.abrupt(\"return\",{value:batch,done:false});case 13:case\"end\":return _context75.stop();}}},_callee75,this);}));function serialNext(){return _serialNext3.apply(this,arguments);}return serialNext;}()}]);return RowMajorBatchIterator;}(lazy_iterator_LazyIterator);var lazy_iterator_FilterIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt7){_inherits(lazy_iterator_FilterIterator,_lazy_iterator_LazyIt7);var _super17=_createSuper(lazy_iterator_FilterIterator);function lazy_iterator_FilterIterator(upstream,predicate){var _this46;_classCallCheck2(this,lazy_iterator_FilterIterator);_this46=_super17.call(this);_this46.upstream=upstream;_this46.predicate=predicate;_this46.lastRead=Promise.resolve({value:null,done:false});return _this46;}_createClass(lazy_iterator_FilterIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Filter\");}},{key:\"next\",value:function(){var _next7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee76(){var _this47=this;return regeneratorRuntime.wrap(function _callee76$(_context76){while(1){switch(_context76.prev=_context76.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this47.serialNext();});return _context76.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context76.stop();}}},_callee76,this);}));function next(){return _next7.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee77(){var item;return regeneratorRuntime.wrap(function _callee77$(_context77){while(1){switch(_context77.prev=_context77.next){case 0:if(false){}_context77.next=3;return this.upstream.next();case 3:item=_context77.sent;if(!(item.done||this.predicate(item.value))){_context77.next=6;break;}return _context77.abrupt(\"return\",item);case 6:dist[\"dispose\"](item.value);_context77.next=0;break;case 9:case\"end\":return _context77.stop();}}},_callee77,this);}));function serialNext(){return _serialNext4.apply(this,arguments);}return serialNext;}()}]);return lazy_iterator_FilterIterator;}(lazy_iterator_LazyIterator);var lazy_iterator_MapIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt8){_inherits(lazy_iterator_MapIterator,_lazy_iterator_LazyIt8);var _super18=_createSuper(lazy_iterator_MapIterator);function lazy_iterator_MapIterator(upstream,transform){var _this48;_classCallCheck2(this,lazy_iterator_MapIterator);_this48=_super18.call(this);_this48.upstream=upstream;_this48.transform=transform;return _this48;}_createClass(lazy_iterator_MapIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Map\");}},{key:\"next\",value:function(){var _next8=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee78(){var item,inputTensors,mapped,outputTensors,_iterator8,_step8,t;return regeneratorRuntime.wrap(function _callee78$(_context78){while(1){switch(_context78.prev=_context78.next){case 0:_context78.next=2;return this.upstream.next();case 2:item=_context78.sent;if(!item.done){_context78.next=5;break;}return _context78.abrupt(\"return\",{value:null,done:true});case 5:inputTensors=dist[\"tensor_util\"].getTensorsInContainer(item.value);// Careful: the transform may mutate the item in place.\n// That's why we have to remember the input Tensors above, and then\n// below dispose only those that were not passed through to the output.\n// Note too that the transform function is responsible for tidying\n// any intermediate Tensors.  Here we are concerned only about the\n// inputs.\nmapped=this.transform(item.value);outputTensors=dist[\"tensor_util\"].getTensorsInContainer(mapped);// TODO(soergel) faster intersection\n// TODO(soergel) move to tf.disposeExcept(in, out)?\n_iterator8=_createForOfIteratorHelper(inputTensors);try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){t=_step8.value;if(!dist[\"tensor_util\"].isTensorInList(t,outputTensors)){t.dispose();}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}return _context78.abrupt(\"return\",{value:mapped,done:false});case 11:case\"end\":return _context78.stop();}}},_callee78,this);}));function next(){return _next8.apply(this,arguments);}return next;}()}]);return lazy_iterator_MapIterator;}(lazy_iterator_LazyIterator);var ErrorHandlingLazyIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt9){_inherits(ErrorHandlingLazyIterator,_lazy_iterator_LazyIt9);var _super19=_createSuper(ErrorHandlingLazyIterator);function ErrorHandlingLazyIterator(upstream,handler){var _this49;_classCallCheck2(this,ErrorHandlingLazyIterator);_this49=_super19.call(this);_this49.upstream=upstream;_this49.handler=handler;_this49.count=0;_this49.lastRead=Promise.resolve({value:null,done:false});return _this49;}_createClass(ErrorHandlingLazyIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> handleErrors\");}},{key:\"next\",value:function(){var _next9=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee79(){var _this50=this;return regeneratorRuntime.wrap(function _callee79$(_context79){while(1){switch(_context79.prev=_context79.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this50.serialNext();});return _context79.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context79.stop();}}},_callee79,this);}));function next(){return _next9.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee80(){return regeneratorRuntime.wrap(function _callee80$(_context80){while(1){switch(_context80.prev=_context80.next){case 0:if(false){}_context80.prev=1;_context80.next=4;return this.upstream.next();case 4:return _context80.abrupt(\"return\",_context80.sent);case 7:_context80.prev=7;_context80.t0=_context80[\"catch\"](1);if(this.handler(_context80.t0)){_context80.next=11;break;}return _context80.abrupt(\"return\",{value:null,done:true});case 11:_context80.next=0;break;case 13:case\"end\":return _context80.stop();}}},_callee80,this,[[1,7]]);}));function serialNext(){return _serialNext5.apply(this,arguments);}return serialNext;}()}]);return ErrorHandlingLazyIterator;}(lazy_iterator_LazyIterator);var lazy_iterator_AsyncMapIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt10){_inherits(lazy_iterator_AsyncMapIterator,_lazy_iterator_LazyIt10);var _super20=_createSuper(lazy_iterator_AsyncMapIterator);function lazy_iterator_AsyncMapIterator(upstream,transform){var _this51;_classCallCheck2(this,lazy_iterator_AsyncMapIterator);_this51=_super20.call(this);_this51.upstream=upstream;_this51.transform=transform;return _this51;}_createClass(lazy_iterator_AsyncMapIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> AsyncMap\");}},{key:\"next\",value:function(){var _next10=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee81(){var item,inputTensors,mapped,outputTensors,_iterator9,_step9,t;return regeneratorRuntime.wrap(function _callee81$(_context81){while(1){switch(_context81.prev=_context81.next){case 0:_context81.next=2;return this.upstream.next();case 2:item=_context81.sent;if(!item.done){_context81.next=5;break;}return _context81.abrupt(\"return\",{value:null,done:true});case 5:inputTensors=dist[\"tensor_util\"].getTensorsInContainer(item.value);// Careful: the transform may mutate the item in place.\n// That's why we have to remember the input Tensors above, and then\n// below dispose only those that were not passed through to the output.\n// Note too that the transform function is responsible for tidying\n// any intermediate Tensors.  Here we are concerned only about the\n// inputs.\n_context81.next=8;return this.transform(item.value);case 8:mapped=_context81.sent;outputTensors=dist[\"tensor_util\"].getTensorsInContainer(mapped);// TODO(soergel) faster intersection\n// TODO(soergel) move to tf.disposeExcept(in, out)?\n_iterator9=_createForOfIteratorHelper(inputTensors);try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){t=_step9.value;if(!dist[\"tensor_util\"].isTensorInList(t,outputTensors)){t.dispose();}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}return _context81.abrupt(\"return\",{value:mapped,done:false});case 13:case\"end\":return _context81.stop();}}},_callee81,this);}));function next(){return _next10.apply(this,arguments);}return next;}()}]);return lazy_iterator_AsyncMapIterator;}(lazy_iterator_LazyIterator);// Iterators that maintain a queue of pending items\n// ============================================================================\n/**\r\n * A base class for transforming streams that operate by maintaining an\r\n * output queue of elements that are ready to return via next().  This is\r\n * commonly required when the transformation is 1-to-many:  A call to next()\r\n * may trigger a call to the underlying stream, which will produce many\r\n * mapped elements of this stream-- of which we need to return only one, so\r\n * we have to queue the rest.\r\n */var lazy_iterator_OneToManyIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt11){_inherits(lazy_iterator_OneToManyIterator,_lazy_iterator_LazyIt11);var _super21=_createSuper(lazy_iterator_OneToManyIterator);function lazy_iterator_OneToManyIterator(){var _this52;_classCallCheck2(this,lazy_iterator_OneToManyIterator);_this52=_super21.call(this);_this52.outputQueue=new growing_ring_buffer_GrowingRingBuffer();_this52.lastRead=Promise.resolve({value:null,done:false});return _this52;}_createClass(lazy_iterator_OneToManyIterator,[{key:\"next\",value:function(){var _next11=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee82(){var _this53=this;return regeneratorRuntime.wrap(function _callee82$(_context82){while(1){switch(_context82.prev=_context82.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this53.serialNext();});return _context82.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context82.stop();}}},_callee82,this);}));function next(){return _next11.apply(this,arguments);}return next;}()},{key:\"serialNext\",value:function(){var _serialNext6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee83(){return regeneratorRuntime.wrap(function _callee83$(_context83){while(1){switch(_context83.prev=_context83.next){case 0:if(!(this.outputQueue.length()===0)){_context83.next=7;break;}_context83.next=3;return this.pump();case 3:if(_context83.sent){_context83.next=5;break;}return _context83.abrupt(\"return\",{value:null,done:true});case 5:_context83.next=0;break;case 7:return _context83.abrupt(\"return\",{value:this.outputQueue.shift(),done:false});case 8:case\"end\":return _context83.stop();}}},_callee83,this);}));function serialNext(){return _serialNext6.apply(this,arguments);}return serialNext;}()}]);return lazy_iterator_OneToManyIterator;}(lazy_iterator_LazyIterator);var lazy_iterator_FlatmapIterator=/*#__PURE__*/function(_lazy_iterator_OneToM){_inherits(lazy_iterator_FlatmapIterator,_lazy_iterator_OneToM);var _super22=_createSuper(lazy_iterator_FlatmapIterator);function lazy_iterator_FlatmapIterator(upstream,transform){var _this54;_classCallCheck2(this,lazy_iterator_FlatmapIterator);_this54=_super22.call(this);_this54.upstream=upstream;_this54.transform=transform;return _this54;}_createClass(lazy_iterator_FlatmapIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Flatmap\");}},{key:\"pump\",value:function(){var _pump=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee84(){var item,inputTensors,mappedArray,outputTensors,_iterator10,_step10,t;return regeneratorRuntime.wrap(function _callee84$(_context84){while(1){switch(_context84.prev=_context84.next){case 0:_context84.next=2;return this.upstream.next();case 2:item=_context84.sent;if(!item.done){_context84.next=5;break;}return _context84.abrupt(\"return\",false);case 5:inputTensors=dist[\"tensor_util\"].getTensorsInContainer(item.value);// Careful: the transform may mutate the item in place.\n// that's why we have to remember the input Tensors above, and then\n// below dispose only those that were not passed through to the output.\n// Note too that the transform function is responsible for tidying any\n// intermediate Tensors.  Here we are concerned only about the inputs.\nmappedArray=this.transform(item.value);outputTensors=dist[\"tensor_util\"].getTensorsInContainer(mappedArray);this.outputQueue.pushAll(mappedArray);// TODO(soergel) faster intersection, and deduplicate outputTensors\n// TODO(soergel) move to tf.disposeExcept(in, out)?\n_iterator10=_createForOfIteratorHelper(inputTensors);try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){t=_step10.value;if(!dist[\"tensor_util\"].isTensorInList(t,outputTensors)){t.dispose();}}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}return _context84.abrupt(\"return\",true);case 12:case\"end\":return _context84.stop();}}},_callee84,this);}));function pump(){return _pump.apply(this,arguments);}return pump;}()}]);return lazy_iterator_FlatmapIterator;}(lazy_iterator_OneToManyIterator);/**\r\n * Provides a `LazyIterator` that concatenates a stream of underlying\r\n * streams.\r\n *\r\n * Doing this in a concurrency-safe way requires some trickery.  In\r\n * particular, we want this stream to return the elements from the\r\n * underlying streams in the correct order according to when next() was\r\n * called, even if the resulting Promises resolve in a different order.\r\n */var ChainedIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt12){_inherits(ChainedIterator,_lazy_iterator_LazyIt12);var _super23=_createSuper(ChainedIterator);function ChainedIterator(iterators,baseErrorHandler){var _this55;_classCallCheck2(this,ChainedIterator);_this55=_super23.call(this);_this55.baseErrorHandler=baseErrorHandler;// Strict Promise execution order:\n// a next() call may not even begin until the previous one completes.\n_this55.lastRead=null;// Local state that should not be clobbered by out-of-order execution.\n_this55.iterator=null;_this55.moreIterators=iterators;return _this55;}_createClass(ChainedIterator,[{key:\"summary\",value:function summary(){var upstreamSummaries='TODO: fill in upstream of chained summaries';return\"\".concat(upstreamSummaries,\" -> Chained\");}},{key:\"next\",value:function(){var _next12=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee85(){return regeneratorRuntime.wrap(function _callee85$(_context85){while(1){switch(_context85.prev=_context85.next){case 0:this.lastRead=this.readFromChain(this.lastRead);return _context85.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context85.stop();}}},_callee85,this);}));function next(){return _next12.apply(this,arguments);}return next;}()},{key:\"readFromChain\",value:function(){var _readFromChain=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee86(lastRead){var iteratorResult,itemResult;return regeneratorRuntime.wrap(function _callee86$(_context86){while(1){switch(_context86.prev=_context86.next){case 0:_context86.next=2;return lastRead;case 2:if(!(this.iterator==null)){_context86.next=10;break;}_context86.next=5;return this.moreIterators.next();case 5:iteratorResult=_context86.sent;if(!iteratorResult.done){_context86.next=8;break;}return _context86.abrupt(\"return\",{value:null,done:true});case 8:this.iterator=iteratorResult.value;if(this.baseErrorHandler!=null){this.iterator=this.iterator.handleErrors(this.baseErrorHandler);}case 10:_context86.next=12;return this.iterator.next();case 12:itemResult=_context86.sent;if(!itemResult.done){_context86.next=16;break;}this.iterator=null;return _context86.abrupt(\"return\",this.readFromChain(lastRead));case 16:return _context86.abrupt(\"return\",itemResult);case 17:case\"end\":return _context86.stop();}}},_callee86,this);}));function readFromChain(_x68){return _readFromChain.apply(this,arguments);}return readFromChain;}()}]);return ChainedIterator;}(lazy_iterator_LazyIterator);var ZipMismatchMode;(function(ZipMismatchMode){ZipMismatchMode[ZipMismatchMode[\"FAIL\"]=0]=\"FAIL\";ZipMismatchMode[ZipMismatchMode[\"SHORTEST\"]=1]=\"SHORTEST\";ZipMismatchMode[ZipMismatchMode[\"LONGEST\"]=2]=\"LONGEST\";// use nulls for exhausted streams; use up the longest stream.\n})(ZipMismatchMode||(ZipMismatchMode={}));/**\r\n * Provides a `LazyIterator` that zips together an array, dict, or nested\r\n * structure of `LazyIterator`s (and perhaps additional constants).\r\n *\r\n * The underlying streams must provide elements in a consistent order such\r\n * that they correspond.\r\n *\r\n * Typically, the underlying streams should have the same number of\r\n * elements. If they do not, the behavior is determined by the\r\n * `mismatchMode` argument.\r\n *\r\n * The nested structure of the `iterators` argument determines the\r\n * structure of elements in the resulting iterator.\r\n *\r\n * Doing this in a concurrency-safe way requires some trickery.  In\r\n * particular, we want this stream to return the elements from the\r\n * underlying streams in the correct order according to when next() was\r\n * called, even if the resulting Promises resolve in a different order.\r\n *\r\n * @param iterators: An array or object containing LazyIterators at the\r\n * leaves.\r\n * @param mismatchMode: Determines what to do when one underlying iterator\r\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\r\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\r\n * causes the zipped iterator to terminate with the furst underlying\r\n * streams, so elements remaining on the longer streams are ignored.\r\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\r\n * in nulls for the exhausted streams, until all streams are exhausted.\r\n */var lazy_iterator_ZipIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt13){_inherits(lazy_iterator_ZipIterator,_lazy_iterator_LazyIt13);var _super24=_createSuper(lazy_iterator_ZipIterator);function lazy_iterator_ZipIterator(iterators){var _this56;var mismatchMode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ZipMismatchMode.FAIL;_classCallCheck2(this,lazy_iterator_ZipIterator);_this56=_super24.call(this);_this56.iterators=iterators;_this56.mismatchMode=mismatchMode;_this56.count=0;_this56.currentPromise=null;return _this56;}_createClass(lazy_iterator_ZipIterator,[{key:\"summary\",value:function summary(){var upstreamSummaries='TODO: fill in upstream of zip summaries';return\"{\".concat(upstreamSummaries,\"} -> Zip\");}},{key:\"nextState\",value:function(){var _nextState=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee87(afterState){var numIterators,iteratorsDone,getNext,mapped;return regeneratorRuntime.wrap(function _callee87$(_context87){while(1){switch(_context87.prev=_context87.next){case 0:getNext=function _getNext(container){if(container instanceof lazy_iterator_LazyIterator){var result=container.next();return{value:result.then(function(x){numIterators++;if(x.done){iteratorsDone++;}return x.value;}),recurse:false};}else{return{value:null,recurse:true};}};_context87.next=3;return afterState;case 3:// Collect underlying iterator \"done\" signals as a side effect in\n// getNext()\nnumIterators=0;iteratorsDone=0;_context87.next=7;return Object(deep_map[\"c\"/* deepMapAndAwaitAll */])(this.iterators,getNext);case 7:mapped=_context87.sent;if(!(numIterators===iteratorsDone)){_context87.next=10;break;}return _context87.abrupt(\"return\",{value:null,done:true});case 10:if(!(iteratorsDone>0)){_context87.next=16;break;}_context87.t0=this.mismatchMode;_context87.next=_context87.t0===ZipMismatchMode.FAIL?14:_context87.t0===ZipMismatchMode.SHORTEST?15:_context87.t0===ZipMismatchMode.LONGEST?16:16;break;case 14:throw new Error('Zipped streams should have the same length. '+\"Mismatched at element \".concat(this.count,\".\"));case 15:return _context87.abrupt(\"return\",{value:null,done:true});case 16:this.count++;return _context87.abrupt(\"return\",{value:mapped,done:false});case 18:case\"end\":return _context87.stop();}}},_callee87,this);}));function nextState(_x69){return _nextState.apply(this,arguments);}return nextState;}()},{key:\"next\",value:function(){var _next13=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee88(){return regeneratorRuntime.wrap(function _callee88$(_context88){while(1){switch(_context88.prev=_context88.next){case 0:this.currentPromise=this.nextState(this.currentPromise);return _context88.abrupt(\"return\",this.currentPromise);case 2:case\"end\":return _context88.stop();}}},_callee88,this);}));function next(){return _next13.apply(this,arguments);}return next;}()}]);return lazy_iterator_ZipIterator;}(lazy_iterator_LazyIterator);// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n/**\r\n * A stream that prefetches a given number of items from an upstream source,\r\n * returning them in FIFO order.\r\n *\r\n * Note this prefetches Promises, but makes no guarantees about when those\r\n * Promises resolve.\r\n */var lazy_iterator_PrefetchIterator=/*#__PURE__*/function(_lazy_iterator_LazyIt14){_inherits(lazy_iterator_PrefetchIterator,_lazy_iterator_LazyIt14);var _super25=_createSuper(lazy_iterator_PrefetchIterator);function lazy_iterator_PrefetchIterator(upstream,bufferSize){var _this57;_classCallCheck2(this,lazy_iterator_PrefetchIterator);_this57=_super25.call(this);_this57.upstream=upstream;_this57.bufferSize=bufferSize;_this57.buffer=new RingBuffer(bufferSize);return _this57;}_createClass(lazy_iterator_PrefetchIterator,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Prefetch\");}/**\r\n     * Refill the prefetch buffer.  Returns only after the buffer is full, or\r\n     * the upstream source is exhausted.\r\n     */},{key:\"refill\",value:function refill(){while(!this.buffer.isFull()){var v=this.upstream.next();this.buffer.push(v);}}},{key:\"next\",value:function next(){this.refill();// This shift will never throw an error because the buffer is always\n// full after a refill. If the stream is exhausted, the buffer will be\n// full of Promises that will resolve to the end-of-stream signal.\nreturn this.buffer.shift();}}]);return lazy_iterator_PrefetchIterator;}(lazy_iterator_LazyIterator);/**\r\n * A stream that performs a sliding-window random shuffle on an upstream\r\n * source. This is like a `PrefetchIterator` except that the items are\r\n * returned in randomized order.  Mixing naturally improves as the buffer\r\n * size increases.\r\n */var lazy_iterator_ShuffleIterator=/*#__PURE__*/function(_lazy_iterator_Prefet){_inherits(lazy_iterator_ShuffleIterator,_lazy_iterator_Prefet);var _super26=_createSuper(lazy_iterator_ShuffleIterator);function lazy_iterator_ShuffleIterator(upstream,windowSize,seed){var _this58;_classCallCheck2(this,lazy_iterator_ShuffleIterator);_this58=_super26.call(this,upstream,windowSize);_this58.upstream=upstream;_this58.windowSize=windowSize;// Local state that should not be clobbered by out-of-order execution.\n_this58.upstreamExhausted=false;_this58.random=seedrandom[\"alea\"](seed||dist[\"util\"].now().toString());_this58.lastRead=Promise.resolve({value:null,done:false});return _this58;}_createClass(lazy_iterator_ShuffleIterator,[{key:\"next\",value:function(){var _next14=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee89(){var _this59=this;return regeneratorRuntime.wrap(function _callee89$(_context89){while(1){switch(_context89.prev=_context89.next){case 0:// This sets this.lastRead to a new Promise right away, as opposed to\n// saying `await this.lastRead; this.lastRead = this.serialNext();` which\n// would not work because this.nextRead would be updated only after the\n// promise resolves.\nthis.lastRead=this.lastRead.then(function(){return _this59.serialNext();});return _context89.abrupt(\"return\",this.lastRead);case 2:case\"end\":return _context89.stop();}}},_callee89,this);}));function next(){return _next14.apply(this,arguments);}return next;}()},{key:\"randomInt\",value:function randomInt(max){return Math.floor(this.random()*max);}},{key:\"chooseIndex\",value:function chooseIndex(){return this.randomInt(this.buffer.length());}},{key:\"serialNext\",value:function(){var _serialNext7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee90(){var chosenIndex,result;return regeneratorRuntime.wrap(function _callee90$(_context90){while(1){switch(_context90.prev=_context90.next){case 0:// TODO(soergel): consider performance\nif(!this.upstreamExhausted){this.refill();}case 1:if(this.buffer.isEmpty()){_context90.next=14;break;}chosenIndex=this.chooseIndex();_context90.next=5;return this.buffer.shuffleExcise(chosenIndex);case 5:result=_context90.sent;if(!result.done){_context90.next=10;break;}this.upstreamExhausted=true;_context90.next=12;break;case 10:this.refill();return _context90.abrupt(\"return\",result);case 12:_context90.next=1;break;case 14:return _context90.abrupt(\"return\",{value:null,done:true});case 15:case\"end\":return _context90.stop();}}},_callee90,this);}));function serialNext(){return _serialNext7.apply(this,arguments);}return serialNext;}()}]);return lazy_iterator_ShuffleIterator;}(lazy_iterator_PrefetchIterator);/***/},/* 15 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(Buffer){/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return OperationMapper;});/* unused harmony export decodeBase64 */ /* unused harmony export parseStringParam */ /* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"i\",function(){return getStringParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return getBoolParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return getNumberParam;});/* unused harmony export parseDtypeParam */ /* unused harmony export getFuncParam */ /* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return getDtypeParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return getDtypeArrayParam;});/* unused harmony export parseTensorShapeParam */ /* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"k\",function(){return getTensorShapeParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"g\",function(){return getNumericArrayParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"h\",function(){return getStringArrayParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"j\",function(){return getTensorShapeArrayParam;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return getBoolArrayParam;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/* harmony import */var _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(21);/* harmony import */var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(24);/* harmony import */var _executors_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(2);/* harmony import */var _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(41);/* harmony import */var _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(42);/* harmony import */var _op_list_control__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(43);/* harmony import */var _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(44);/* harmony import */var _op_list_creation__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(45);/* harmony import */var _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(46);/* harmony import */var _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(47);/* harmony import */var _op_list_graph__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(48);/* harmony import */var _op_list_image__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(49);/* harmony import */var _op_list_logical__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(50);/* harmony import */var _op_list_matrices__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(51);/* harmony import */var _op_list_normalization__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(52);/* harmony import */var _op_list_reduction__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(53);/* harmony import */var _op_list_slice_join__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(54);/* harmony import */var _op_list_spectral__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(55);/* harmony import */var _op_list_transformation__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(56);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var OperationMapper=/*#__PURE__*/function(){// Loads the op mapping from the JSON file.\nfunction OperationMapper(){var _ref12;_classCallCheck2(this,OperationMapper);var ops=[_op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__,_op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__,_op_list_control__WEBPACK_IMPORTED_MODULE_6__,_op_list_convolution__WEBPACK_IMPORTED_MODULE_7__,_op_list_creation__WEBPACK_IMPORTED_MODULE_8__,_op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__,_op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__,_op_list_logical__WEBPACK_IMPORTED_MODULE_13__,_op_list_image__WEBPACK_IMPORTED_MODULE_12__,_op_list_graph__WEBPACK_IMPORTED_MODULE_11__,_op_list_matrices__WEBPACK_IMPORTED_MODULE_14__,_op_list_normalization__WEBPACK_IMPORTED_MODULE_15__,_op_list_reduction__WEBPACK_IMPORTED_MODULE_16__,_op_list_slice_join__WEBPACK_IMPORTED_MODULE_17__,_op_list_spectral__WEBPACK_IMPORTED_MODULE_18__,_op_list_transformation__WEBPACK_IMPORTED_MODULE_19__];var mappersJson=(_ref12=[]).concat.apply(_ref12,_toConsumableArray2(ops.map(function(op){return op.json;})));this.opMappers=mappersJson.reduce(function(map,mapper){map[mapper.tfOpName]=mapper;return map;},{});}// Converts the model from Tensorflow GraphDef to local representation for\n// TensorFlow.js API\n_createClass(OperationMapper,[{key:\"transformGraph\",value:function transformGraph(graph){var _this60=this;var signature=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var tfNodes=graph.node;var placeholders=[];var weights=[];var nodes=tfNodes.reduce(function(map,node){map[node.name]=_this60.mapNode(node);if(node.op.startsWith('Placeholder')){placeholders.push(map[node.name]);}if(node.op==='Const'){weights.push(map[node.name]);}return map;},{});var inputs=[];var outputs=[];var inputNodeNameToKey={};var outputNodeNameToKey={};if(signature!=null){inputNodeNameToKey=this.mapSignatureEntries(signature.inputs);outputNodeNameToKey=this.mapSignatureEntries(signature.outputs);}var allNodes=Object.keys(nodes);allNodes.forEach(function(key){var node=nodes[key];node.inputNames.forEach(function(name){var _Object47=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(name),_Object48=_slicedToArray(_Object47,1),nodeName=_Object48[0];node.inputs.push(nodes[nodeName]);nodes[nodeName].children.push(node);});});// if signature has not outputs set, add any node that does not have\n// outputs.\nif(Object.keys(outputNodeNameToKey).length===0){allNodes.forEach(function(key){var node=nodes[key];if(node.children.length===0){outputs.push(node);}});}else{Object.keys(outputNodeNameToKey).forEach(function(name){var _Object49=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(name),_Object50=_slicedToArray(_Object49,1),nodeName=_Object50[0];var node=nodes[nodeName];if(node!=null){node.signatureKey=outputNodeNameToKey[name];outputs.push(node);}});}if(Object.keys(inputNodeNameToKey).length>0){Object.keys(inputNodeNameToKey).forEach(function(name){var _Object51=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(name),_Object52=_slicedToArray(_Object51,1),nodeName=_Object52[0];var node=nodes[nodeName];if(node){node.signatureKey=inputNodeNameToKey[name];inputs.push(node);}});}else{inputs=placeholders;}var functions={};if(graph.library!=null&&graph.library.function!=null){functions=graph.library.function.reduce(function(functions,func){functions[func.signature.name]=_this60.mapFunction(func);return functions;},{});}return{nodes:nodes,inputs:inputs,outputs:outputs,weights:weights,placeholders:placeholders,signature:signature,functions:functions};}},{key:\"mapSignatureEntries\",value:function mapSignatureEntries(entries){return Object.keys(entries||{}).reduce(function(prev,curr){prev[entries[curr].name]=curr;return prev;},{});}},{key:\"mapNode\",value:function mapNode(node){// Unsupported ops will cause an error at run-time (not parse time), since\n// they may not be used by the actual execution subgraph.\nvar mapper=Object(_custom_op_register__WEBPACK_IMPORTED_MODULE_2__[/* getRegisteredOp */\"b\"])(node.op)||this.opMappers[node.op]||{};if(node.attr==null){node.attr={};}var newNode={name:node.name,op:node.op,category:mapper.category,inputNames:(node.input||[]).map(function(input){return input.startsWith('^')?input.substr(1):input;}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:node.attr};if(mapper.inputs!=null){newNode.inputParams=mapper.inputs.reduce(function(map,param){map[param.name]={type:param.type,inputIndexStart:param.start,inputIndexEnd:param.end};return map;},{});}if(mapper.attrs!=null){newNode.attrParams=mapper.attrs.reduce(function(map,param){var type=param.type;var value=undefined;switch(param.type){case'string':value=getStringParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getStringParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'string[]':value=getStringArrayParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getStringArrayParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'number':value=getNumberParam(node.attr,param.tfName,param.defaultValue||0);if(value===undefined&&!!param.tfDeprecatedName){value=getNumberParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'number[]':value=getNumericArrayParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getNumericArrayParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'bool':value=getBoolParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getBoolParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'bool[]':value=getBoolArrayParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getBoolArrayParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'shape':value=getTensorShapeParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getTensorShapeParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'shape[]':value=getTensorShapeArrayParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getTensorShapeArrayParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'dtype':value=getDtypeParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getDtypeParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'dtype[]':value=getDtypeArrayParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getDtypeArrayParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'func':value=getFuncParam(node.attr,param.tfName,param.defaultValue);if(value===undefined&&!!param.tfDeprecatedName){value=getFuncParam(node.attr,param.tfDeprecatedName,param.defaultValue);}break;case'tensor':case'tensors':break;default:throw new Error(\"Unsupported param type: \".concat(param.type,\" for op: \").concat(node.op));}map[param.name]={value:value,type:type};return map;},{});}return newNode;}// map the TFunctionDef to TFJS graph object\n},{key:\"mapFunction\",value:function mapFunction(functionDef){var _this61=this;var tfNodes=functionDef.nodeDef;var placeholders=[];var weights=[];var nodes={};if(tfNodes!=null){nodes=tfNodes.reduce(function(map,node){map[node.name]=_this61.mapNode(node);if(node.op==='Const'){weights.push(map[node.name]);}return map;},{});}var inputs=[];var outputs=[];functionDef.signature.inputArg.forEach(function(arg){var _Object53=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(arg.name),_Object54=_slicedToArray(_Object53,1),nodeName=_Object54[0];var node={name:nodeName,op:'Placeholder',inputs:[],inputNames:[],category:'graph',inputParams:{},attrParams:{dtype:{value:parseDtypeParam(arg.type),type:'dtype'}},children:[]};node.signatureKey=arg.name;inputs.push(node);nodes[nodeName]=node;});var allNodes=Object.keys(nodes);allNodes.forEach(function(key){var node=nodes[key];node.inputNames.forEach(function(name){var _Object55=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(name),_Object56=_slicedToArray(_Object55,1),nodeName=_Object56[0];node.inputs.push(nodes[nodeName]);nodes[nodeName].children.push(node);});});var returnNodeMap=functionDef.ret;functionDef.signature.outputArg.forEach(function(output){var _Object57=Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__[/* getNodeNameAndIndex */\"a\"])(returnNodeMap[output.name]),_Object58=_slicedToArray(_Object57,2),nodeName=_Object58[0],index=_Object58[1];var node=nodes[nodeName];if(node!=null){node.defaultOutput=index;outputs.push(node);}});var signature=this.mapArgsToSignature(functionDef);return{nodes:nodes,inputs:inputs,outputs:outputs,weights:weights,placeholders:placeholders,signature:signature};}},{key:\"mapArgsToSignature\",value:function mapArgsToSignature(functionDef){var _this62=this;return{methodName:functionDef.signature.name,inputs:functionDef.signature.inputArg.reduce(function(map,arg){map[arg.name]=_this62.mapArgToTensorInfo(arg);return map;},{}),outputs:functionDef.signature.outputArg.reduce(function(map,arg){map[arg.name]=_this62.mapArgToTensorInfo(arg,functionDef.ret);return map;},{})};}},{key:\"mapArgToTensorInfo\",value:function mapArgToTensorInfo(arg,nameMap){var name=arg.name;if(nameMap!=null){name=nameMap[name];}return{name:name,dtype:arg.type};}}],[{key:\"Instance\",get:// Singleton instance for the mapper\nfunction get(){return this._instance||(this._instance=new this());}}]);return OperationMapper;}();function decodeBase64(text){var global=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"env\"])().global;if(typeof global.atob!=='undefined'){return global.atob(text);}else if(typeof Buffer!=='undefined'){return new Buffer(text,'base64').toString();}else{throw new Error('Unable to decode base64 in this environment. '+'Missing built-in atob() or Buffer()');}}function parseStringParam(s,keepCase){var value=Array.isArray(s)?String.fromCharCode.apply(null,s):decodeBase64(s);return keepCase?value:value.toLowerCase();}function getStringParam(attrs,name,def){var keepCase=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var param=attrs[name];if(param!=null){return parseStringParam(param.s,keepCase);}return def;}function getBoolParam(attrs,name,def){var param=attrs[name];return param?param.b:def;}function getNumberParam(attrs,name,def){var param=attrs[name]||{};var value=param['i']!=null?param['i']:param['f']!=null?param['f']:def;return typeof value==='number'?value:parseInt(value,10);}function parseDtypeParam(value){if(typeof value==='string'){// tslint:disable-next-line:no-any\nvalue=_data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"][value];}switch(value){case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_FLOAT:return'float32';case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_INT32:case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_INT64:case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_INT8:case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_UINT8:return'int32';case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_BOOL:return'bool';case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_DOUBLE:return'float32';case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__[/* DataType */\"a\"].DT_STRING:return'string';default:// Unknown dtype error will happen at runtime (instead of parse time),\n// since these nodes might not be used by the actual subgraph execution.\nreturn null;}}function getFuncParam(attrs,name,def){var param=attrs[name];if(param&&param.func){return param.func.name;}return def;}function getDtypeParam(attrs,name,def){var param=attrs[name];if(param&&param.type){return parseDtypeParam(param.type);}return def;}function getDtypeArrayParam(attrs,name,def){var param=attrs[name];if(param&&param.list&&param.list.type){return param.list.type.map(function(v){return parseDtypeParam(v);});}return def;}function parseTensorShapeParam(shape){if(shape.unknownRank){return undefined;}if(shape.dim!=null){return shape.dim.map(function(dim){return typeof dim.size==='number'?dim.size:parseInt(dim.size,10);});}return[];}function getTensorShapeParam(attrs,name,def){var param=attrs[name];if(param&&param.shape){return parseTensorShapeParam(param.shape);}return def;}function getNumericArrayParam(attrs,name,def){var param=attrs[name];if(param){return((param.list.f&&param.list.f.length?param.list.f:param.list.i)||[]).map(function(v){return typeof v==='number'?v:parseInt(v,10);});}return def;}function getStringArrayParam(attrs,name,def){var keepCase=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var param=attrs[name];if(param&&param.list&&param.list.s){return param.list.s.map(function(v){return parseStringParam(v,keepCase);});}return def;}function getTensorShapeArrayParam(attrs,name,def){var param=attrs[name];if(param&&param.list&&param.list.shape){return param.list.shape.map(function(v){return parseTensorShapeParam(v);});}return def;}function getBoolArrayParam(attrs,name,def){var param=attrs[name];if(param&&param.list&&param.list.b){return param.list.b;}return def;}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(39).Buffer);/***/},/* 16 */ /***/function(module,exports){module.exports=function(){throw new Error(\"define cannot be used indirect\");};/***/},/* 17 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return getKernel;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return getGradient;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return getKernelsForBackend;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return registerKernel;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return registerGradient;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"g\",function(){return unregisterKernel;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return unregisterGradient;});/* harmony import */var _global_util__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(33);/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var kernelRegistry=Object(_global_util__WEBPACK_IMPORTED_MODULE_0__[/* getGlobal */\"a\"])('kernelRegistry',function(){return new Map();});var gradRegistry=Object(_global_util__WEBPACK_IMPORTED_MODULE_0__[/* getGlobal */\"a\"])('gradRegistry',function(){return new Map();});/**\r\n * Returns the kernel function (code) associated with the provided names.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n */function getKernel(kernelName,backendName){var key=makeKey(kernelName,backendName);return kernelRegistry.get(key);}/**\r\n * Returns the registered gradient info associated with the provided kernel.\r\n * @param kernelName The official TF kernel name.\r\n */function getGradient(kernelName){return gradRegistry.get(kernelName);}function getKernelsForBackend(backendName){var it=kernelRegistry.entries();var result=[];while(true){var _it$next=it.next(),done=_it$next.done,value=_it$next.value;if(done){break;}var _value=_slicedToArray(value,2),key=_value[0],config=_value[1];var _key$split=key.split('_'),_key$split2=_slicedToArray(_key$split,1),backend=_key$split2[0];if(backend===backendName){result.push(config);}}return result;}/**\r\n * Registers the function (forward pass) for the kernel in a global registry.\r\n *\r\n * @param config A config object with the following properties:\r\n * - `kernelName` The official name of the kernel.\r\n * - `backendName` The official name of the backend.\r\n * - `kernelFunc` The function to run during the forward pass of the kernel.\r\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\r\n * - `disposeFunc` Optional. Gets called once, right before the backend is\r\n * disposed.\r\n */function registerKernel(config){var kernelName=config.kernelName,backendName=config.backendName;var key=makeKey(kernelName,backendName);if(kernelRegistry.has(key)){console.warn(\"The kernel '\".concat(kernelName,\"' for backend \")+\"'\".concat(backendName,\"' is already registered\"));}kernelRegistry.set(key,config);}/**\r\n * Registers a gradient function for a given kernel in the global registry,\r\n * to be used during the back-propagation of that kernel.\r\n *\r\n * @param config An object with the following properties:\r\n * - `kernelName` The name of the kernel that the gradient function is for.\r\n * - `gradFunc` The function to run during back-propagation.\r\n */function registerGradient(config){var kernelName=config.kernelName;if(gradRegistry.has(kernelName)){console.warn(\"Overriding the gradient for '\".concat(kernelName,\"'\"));}gradRegistry.set(kernelName,config);}/**\r\n * Removes the kernel function from the registry.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n *\r\n */function unregisterKernel(kernelName,backendName){var key=makeKey(kernelName,backendName);if(!kernelRegistry.has(key)){throw new Error(\"The kernel '\".concat(kernelName,\"' for backend \")+\"'\".concat(backendName,\"' is not registered\"));}kernelRegistry.delete(key);}/** Removes the registered gradient from the global registry. */function unregisterGradient(kernelName){if(!gradRegistry.has(kernelName)){throw new Error(\"The gradient '\".concat(kernelName,\"' for backend is not registered\"));}gradRegistry.delete(kernelName);}function makeKey(kernelName,backendName){return\"\".concat(backendName,\"_\").concat(kernelName);}/***/},/* 18 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return complex;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/* harmony import */var _kernel_names__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(6);/* harmony import */var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3);/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1);/* harmony import */var _operation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(4);/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Converts two real numbers to a complex number.\r\n *\r\n * Given a tensor `real` representing the real part of a complex number, and a\r\n * tensor `imag` representing the imaginary part of a complex number, this\r\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\r\n * where r represents the real part and i represents the imag part.\r\n *\r\n * The input tensors real and imag must have the same shape.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([2.25, 3.25]);\r\n * const imag = tf.tensor1d([4.75, 5.75]);\r\n * const complex = tf.complex(real, imag);\r\n *\r\n * complex.print();\r\n * ```\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function complex_(real,imag){var $real=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(real,'real','complex');var $imag=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(imag,'imag','complex');_util__WEBPACK_IMPORTED_MODULE_3__[\"assertShapesMatch\"]($real.shape,$imag.shape,\"real and imag shapes, \".concat($real.shape,\" and \").concat($imag.shape,\", \")+\"must match in call to tf.complex().\");var forward=function forward(backend){return backend.complex($real,$imag);};var inputs={real:$real,imag:$imag};return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(forward,inputs,null/* gradient */,_kernel_names__WEBPACK_IMPORTED_MODULE_1__[/* Complex */\"k\"]);}var complex=Object(_operation__WEBPACK_IMPORTED_MODULE_4__[/* op */\"a\"])({complex_:complex_});/***/},/* 19 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return deepMap;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"d\",function(){return deepZip;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"f\",function(){return zipToList;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return deepMapAndAwaitAll;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"e\",function(){return isIterable;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return canTensorify;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Apply a mapping function to a nested structure in a recursive manner.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\r\n *   replacement value for that node (i.e., replacing the subtree), or indicates\r\n *   that the node should be processed recursively.\r\n */function deepMap(input,mapFn){return deepMapInternal(input,mapFn);}/**\r\n * @param seen: A Map of known object mappings (i.e., memoized results of\r\n *   `mapFn()`)\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */function deepMapInternal(input,mapFn){var seen=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Map();var containedIn=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new Set();if(input==null){return null;}if(containedIn.has(input)){throw new Error('Circular references are not supported.');}if(seen.has(input)){return seen.get(input);}var result=mapFn(input);if(result.recurse&&result.value!==null){throw new Error('A deep map function may not return both a value and recurse=true.');}if(!result.recurse){seen.set(input,result.value);return result.value;}else if(isIterable(input)){// tslint:disable-next-line:no-any\nvar mappedIterable=Array.isArray(input)?[]:{};containedIn.add(input);for(var k in input){var child=input[k];var childResult=deepMapInternal(child,mapFn,seen,containedIn);mappedIterable[k]=childResult;}containedIn.delete(input);return mappedIterable;}else{throw new Error(\"Can't recurse into non-iterable type: \".concat(input));}}// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\r\n * Zip nested structures together in a recursive manner.\r\n *\r\n * This has the effect of transposing or pivoting data, e.g. converting it from\r\n * a row-major representation to a column-major representation.\r\n *\r\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\r\n * `{a: [1, 3], b: [2, 4]}`.\r\n *\r\n * The inputs should all have the same nested structure (i.e., of arrays and\r\n * dicts).  The result is a single object with the same nested structure, where\r\n * the leaves are arrays collecting the values of the inputs at that location\r\n * (or, optionally, the result of a custom function applied to those arrays).\r\n *\r\n * @param inputs: An array of the objects to zip together.\r\n * @param zipFn: (optional) A function that expects an array of elements at a\r\n *   single node of the object tree, and returns a `DeepMapResult`.  The\r\n *   `DeepMapResult` either provides a result value for that node (i.e.,\r\n *   representing the subtree), or indicates that the node should be processed\r\n *   recursively.  The default zipFn recurses as far as possible and places\r\n *   arrays at the leaves.\r\n */function deepZip(inputs){var zipFn=arguments.length>1&&arguments[1]!==undefined?arguments[1]:zipToList;return deepZipInternal(inputs,zipFn);}/**\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */function deepZipInternal(inputs,zipFn){var containedIn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Set();// The recursion follows the structure of input 0; it's assumed that all the\n// other inputs have the same structure.\nvar input=inputs[0];if(containedIn.has(input)){throw new Error('Circular references are not supported.');}var result=zipFn(inputs);if(result.recurse&&result.value!==null){throw new Error('A deep zip function may not return both a value and recurse=true.');}if(!result.recurse){return result.value;}else if(isIterable(input)){// tslint:disable-next-line:no-any\nvar mappedIterable=Array.isArray(input)?[]:{};containedIn.add(input);var _loop8=function _loop8(k){var children=inputs.map(function(x){return x[k];});var childResult=deepZipInternal(children,zipFn,containedIn);mappedIterable[k]=childResult;};for(var k in input){_loop8(k);}containedIn.delete(input);return mappedIterable;}else{throw new Error(\"Can't recurse into non-iterable type: \".concat(input));}}// tslint:disable-next-line:no-any\nfunction zipToList(x){if(x===null){return null;}// TODO(soergel): validate array type?\nif(isIterable(x[0])){return{value:null,recurse:true};}else{return{value:x,recurse:false};}}/**\r\n * Apply an async mapping function to a nested structure in a recursive manner.\r\n *\r\n * This first creates a nested structure of Promises, and then awaits all of\r\n * those, resulting in a single Promise for a resolved nested structure.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\r\n *   a `Promise` for a replacement value for that node (i.e., replacing the\r\n *   subtree), or indicates that the node should be processed recursively.  Note\r\n *   that the decision whether or not to recurse must be made immediately; only\r\n *   the mapped value may be promised.\r\n */function deepMapAndAwaitAll(_x70,_x71){return _deepMapAndAwaitAll.apply(this,arguments);}/**\r\n * Determine whether the argument is iterable.\r\n *\r\n * @returns true if the argument is an array or any non-Tensor object.\r\n */ // tslint:disable-next-line:no-any\nfunction _deepMapAndAwaitAll(){_deepMapAndAwaitAll=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee91(input,mapFn){var seen,_i37,_Array$from,key,value,mappedValue,result;return regeneratorRuntime.wrap(function _callee91$(_context91){while(1){switch(_context91.prev=_context91.next){case 0:seen=new Map();// First do a normal deepMap, collecting Promises in 'seen' as a side effect.\ndeepMapInternal(input,mapFn,seen);// Replace the Promises in 'seen' in place.\n// Note TypeScript provides no async map iteration, and regular map iteration\n// is broken too, so sadly we have to do Array.from() to make it work.\n// (There's no advantage to Promise.all(), and that would be tricky anyway.)\n_i37=0,_Array$from=Array.from(seen.keys());case 3:if(!(_i37<_Array$from.length)){_context91.next=14;break;}key=_Array$from[_i37];value=seen.get(key);if(!(value instanceof Promise)){_context91.next=11;break;}_context91.next=9;return value;case 9:mappedValue=_context91.sent;seen.set(key,mappedValue);case 11:_i37++;_context91.next=3;break;case 14:// Normal deepMap again, this time filling in the resolved values.\n// It's unfortunate that we have to do two passes.\n// TODO(soergel): test performance and think harder about a fast solution.\nresult=deepMapInternal(input,mapFn,seen);return _context91.abrupt(\"return\",result);case 16:case\"end\":return _context91.stop();}}},_callee91);}));return _deepMapAndAwaitAll.apply(this,arguments);}function isIterable(obj){return obj!=null&&!ArrayBuffer.isView(obj)&&(Array.isArray(obj)||_typeof2(obj)==='object'&&!(obj instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]));}/**\r\n * Determine whether the argument can be converted to Tensor.\r\n *\r\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\r\n * not.\r\n *\r\n * @returns true if the argument can be converted to Tensor.\r\n */ // tslint:disable-next-line:no-any\nfunction canTensorify(obj){return obj==null||isPrimitive(obj)||Array.isArray(obj)||_typeof2(obj)==='object'&&obj instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]||_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].isTypedArray(obj);}/**\r\n * Returns true if the given `value` is a primitive type. Otherwise returns\r\n * false. This is equivalant to node util.isPrimitive\r\n */function isPrimitive(value){return value===null||_typeof2(value)!=='object'&&typeof value!=='function';}/***/},/* 20 */ /***/function(module,exports,__webpack_require__){// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea=__webpack_require__(68);// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128=__webpack_require__(69);// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow=__webpack_require__(70);// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7=__webpack_require__(71);// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096=__webpack_require__(72);// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei=__webpack_require__(73);// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr=__webpack_require__(74);sr.alea=alea;sr.xor128=xor128;sr.xorwow=xorwow;sr.xorshift7=xorshift7;sr.xor4096=xor4096;sr.tychei=tychei;module.exports=sr;/***/},/* 21 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return DataType;});/* unused harmony export SaverDef */ /**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /** DataType enum. */var DataType;(function(DataType){DataType[DataType[\"DT_INVALID\"]=0]=\"DT_INVALID\";DataType[DataType[\"DT_FLOAT\"]=1]=\"DT_FLOAT\";DataType[DataType[\"DT_DOUBLE\"]=2]=\"DT_DOUBLE\";DataType[DataType[\"DT_INT32\"]=3]=\"DT_INT32\";DataType[DataType[\"DT_UINT8\"]=4]=\"DT_UINT8\";DataType[DataType[\"DT_INT16\"]=5]=\"DT_INT16\";DataType[DataType[\"DT_INT8\"]=6]=\"DT_INT8\";DataType[DataType[\"DT_STRING\"]=7]=\"DT_STRING\";DataType[DataType[\"DT_COMPLEX64\"]=8]=\"DT_COMPLEX64\";DataType[DataType[\"DT_INT64\"]=9]=\"DT_INT64\";DataType[DataType[\"DT_BOOL\"]=10]=\"DT_BOOL\";DataType[DataType[\"DT_QINT8\"]=11]=\"DT_QINT8\";DataType[DataType[\"DT_QUINT8\"]=12]=\"DT_QUINT8\";DataType[DataType[\"DT_QINT32\"]=13]=\"DT_QINT32\";DataType[DataType[\"DT_BFLOAT16\"]=14]=\"DT_BFLOAT16\";DataType[DataType[\"DT_FLOAT_REF\"]=101]=\"DT_FLOAT_REF\";DataType[DataType[\"DT_DOUBLE_REF\"]=102]=\"DT_DOUBLE_REF\";DataType[DataType[\"DT_INT32_REF\"]=103]=\"DT_INT32_REF\";DataType[DataType[\"DT_UINT8_REF\"]=104]=\"DT_UINT8_REF\";DataType[DataType[\"DT_INT16_REF\"]=105]=\"DT_INT16_REF\";DataType[DataType[\"DT_INT8_REF\"]=106]=\"DT_INT8_REF\";DataType[DataType[\"DT_STRING_REF\"]=107]=\"DT_STRING_REF\";DataType[DataType[\"DT_COMPLEX64_REF\"]=108]=\"DT_COMPLEX64_REF\";DataType[DataType[\"DT_INT64_REF\"]=109]=\"DT_INT64_REF\";DataType[DataType[\"DT_BOOL_REF\"]=110]=\"DT_BOOL_REF\";DataType[DataType[\"DT_QINT8_REF\"]=111]=\"DT_QINT8_REF\";DataType[DataType[\"DT_QUINT8_REF\"]=112]=\"DT_QUINT8_REF\";DataType[DataType[\"DT_QINT32_REF\"]=113]=\"DT_QINT32_REF\";DataType[DataType[\"DT_BFLOAT16_REF\"]=114]=\"DT_BFLOAT16_REF\";})(DataType||(DataType={}));var SaverDef;(function(SaverDef){/** CheckpointFormatVersion enum. */var CheckpointFormatVersion;(function(CheckpointFormatVersion){CheckpointFormatVersion[CheckpointFormatVersion[\"LEGACY\"]=0]=\"LEGACY\";CheckpointFormatVersion[CheckpointFormatVersion[\"V1\"]=1]=\"V1\";CheckpointFormatVersion[CheckpointFormatVersion[\"V2\"]=2]=\"V2\";})(CheckpointFormatVersion=SaverDef.CheckpointFormatVersion||(SaverDef.CheckpointFormatVersion={}));})(SaverDef||(SaverDef={}));/***/},/* 22 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return real;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/* harmony import */var _kernel_names__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(6);/* harmony import */var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3);/* harmony import */var _operation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4);/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the real part of a complex (or real) tensor.\r\n *\r\n * Given a tensor input, this operation returns a tensor of type float that is\r\n * the real part of each element in input considered as a complex number.\r\n *\r\n * If the input is real, it simply makes a clone.\r\n *\r\n * ```js\r\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\r\n * tf.real(x).print();\r\n * ```\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function real_(input){var $input=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(input,'input','real');var forward=function forward(backend){return backend.real($input);};var inputs={input:$input};return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(forward,inputs,null/* gradient */,_kernel_names__WEBPACK_IMPORTED_MODULE_1__[/* Real */\"hb\"]);}var real=Object(_operation__WEBPACK_IMPORTED_MODULE_3__[/* op */\"a\"])({real_:real_});/***/},/* 23 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return Rank;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return upcastType;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return sumOutType;});/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Rank;(function(Rank){Rank[\"R0\"]=\"R0\";Rank[\"R1\"]=\"R1\";Rank[\"R2\"]=\"R2\";Rank[\"R3\"]=\"R3\";Rank[\"R4\"]=\"R4\";Rank[\"R5\"]=\"R5\";Rank[\"R6\"]=\"R6\";})(Rank||(Rank={}));// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;(function(UpcastInt32AndMap){UpcastInt32AndMap[\"float32\"]=\"float32\";UpcastInt32AndMap[\"int32\"]=\"int32\";UpcastInt32AndMap[\"bool\"]=\"int32\";UpcastInt32AndMap[\"complex64\"]=\"complex64\";})(UpcastInt32AndMap||(UpcastInt32AndMap={}));var UpcastBoolAndMap;(function(UpcastBoolAndMap){UpcastBoolAndMap[\"float32\"]=\"float32\";UpcastBoolAndMap[\"int32\"]=\"int32\";UpcastBoolAndMap[\"bool\"]=\"bool\";UpcastBoolAndMap[\"complex64\"]=\"complex64\";})(UpcastBoolAndMap||(UpcastBoolAndMap={}));var UpcastFloat32AndMap;(function(UpcastFloat32AndMap){UpcastFloat32AndMap[\"float32\"]=\"float32\";UpcastFloat32AndMap[\"int32\"]=\"float32\";UpcastFloat32AndMap[\"bool\"]=\"float32\";UpcastFloat32AndMap[\"complex64\"]=\"complex64\";})(UpcastFloat32AndMap||(UpcastFloat32AndMap={}));var UpcastComplex64AndMap;(function(UpcastComplex64AndMap){UpcastComplex64AndMap[\"float32\"]=\"complex64\";UpcastComplex64AndMap[\"int32\"]=\"complex64\";UpcastComplex64AndMap[\"bool\"]=\"complex64\";UpcastComplex64AndMap[\"complex64\"]=\"complex64\";})(UpcastComplex64AndMap||(UpcastComplex64AndMap={}));var upcastTypeMap={'float32':UpcastFloat32AndMap,'int32':UpcastInt32AndMap,'bool':UpcastBoolAndMap,'complex64':UpcastComplex64AndMap};function upcastType(typeA,typeB){if(typeA==='string'||typeB==='string'){if(typeA==='string'&&typeB==='string'){return'string';}throw new Error(\"Can not upcast \".concat(typeA,\" with \").concat(typeB));}return upcastTypeMap[typeA][typeB];}/** Returns the output type after summation. */function sumOutType(type){return upcastType(type,'int32');}/***/},/* 24 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"c\",function(){return registerOp;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return getRegisteredOp;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return deregisterOp;});/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var CUSTOM_OPS={};/**\r\n * Register an Op for graph model executor. This allow you to register\r\n * TensorFlow custom op or override existing op.\r\n *\r\n * Here is an example of registering a new MatMul Op.\r\n * ```js\r\n * const customMatmul = (node) =>\r\n *    tf.matMul(\r\n *        node.inputs[0], node.inputs[1],\r\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\r\n *\r\n * tf.registerOp('MatMul', customMatmul);\r\n * ```\r\n * The inputs and attrs of the node object is based on the TensorFlow op\r\n * registry.\r\n *\r\n * @param name The Tensorflow Op name.\r\n * @param opFunc An op function which is called with the current graph node\r\n * during execution and needs to return a tensor or a list of tensors. The node\r\n * has the following attributes:\r\n *    - attr: A map from attribute name to its value\r\n *    - inputs: A list of input tensors\r\n */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */function registerOp(name,opFunc){var opMapper={tfOpName:name,category:'custom',inputs:[],attrs:[],customExecutor:opFunc};CUSTOM_OPS[name]=opMapper;}/**\r\n * Retrieve the OpMapper object for the registered op.\r\n *\r\n * @param name The Tensorflow Op name.\r\n */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */function getRegisteredOp(name){return CUSTOM_OPS[name];}/**\r\n * Deregister the Op for graph model executor.\r\n *\r\n * @param name The Tensorflow Op name.\r\n */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */function deregisterOp(name){delete CUSTOM_OPS[name];}/***/},/* 25 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return imag;});/* harmony import */var _engine__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);/* harmony import */var _kernel_names__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(6);/* harmony import */var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3);/* harmony import */var _operation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4);/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Returns the imaginary part of a complex (or real) tensor.\r\n *\r\n * Given a tensor input, this operation returns a tensor of type float that is\r\n * the imaginary part of each element in input considered as a complex number.\r\n * If input is real, a tensor of all zeros is returned.\r\n *\r\n * ```js\r\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\r\n * tf.imag(x).print();\r\n * ```\r\n */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */function imag_(input){var $input=Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__[/* convertToTensor */\"a\"])(input,'input','imag');var forward=function forward(backend){return backend.imag($input);};var inputs={input:$input};return _engine__WEBPACK_IMPORTED_MODULE_0__[/* ENGINE */\"a\"].runKernelFunc(forward,inputs,null/* gradient */,_kernel_names__WEBPACK_IMPORTED_MODULE_1__[/* Imag */\"K\"]);}var imag=Object(_operation__WEBPACK_IMPORTED_MODULE_3__[/* op */\"a\"])({imag_:imag_});/***/},/* 26 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return pool;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return maxPoolPositions;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function pool(xValues,xShape,dtype,strides,convInfo,poolType){var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var initialValue=poolType==='max'?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY;var output=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"buffer\"])(convInfo.outShape,dtype);var outputVals=output.values;var outputBatchStrides=convInfo.outShape[1]*convInfo.outShape[2]*convInfo.outShape[3];var outputRowStrides=convInfo.outShape[2]*convInfo.outShape[3];var outputColStrides=convInfo.outShape[3];for(var b=0;b<convInfo.batchSize;++b){var outputBatchOffset=b*outputBatchStrides;var inputBatchOffset=b*strides[0];for(var d=0;d<convInfo.inChannels;++d){for(var yR=0;yR<convInfo.outHeight;++yR){var xRCorner=yR*strideHeight-padTop;var xRMin=Math.max(0,xRCorner);var xRMax=Math.min(convInfo.inHeight,effectiveFilterHeight+xRCorner);var outputRowOffset=outputBatchOffset+yR*outputRowStrides;for(var yC=0;yC<convInfo.outWidth;++yC){var xCCorner=yC*strideWidth-padLeft;var xCMin=Math.max(0,xCCorner);var xCMax=Math.min(convInfo.inWidth,effectiveFilterWidth+xCCorner);var minMaxValue=initialValue;var avgValue=0;var count=0;for(var xR=xRMin;xR<xRMax;xR+=dilationHeight){var xROffset=inputBatchOffset+xR*strides[1];for(var xC=xCMin;xC<xCMax;xC+=dilationWidth){var xCOffset=xROffset+xC*strides[2];var pixel=xValues[xCOffset+d];if(poolType==='max'&&pixel>minMaxValue){minMaxValue=pixel;}else if(poolType==='avg'){avgValue+=pixel;count++;}}if(isNaN(minMaxValue)){break;}}var outputOffset=outputRowOffset+yC*outputColStrides+d;outputVals[outputOffset]=poolType==='avg'?avgValue/count:minMaxValue;}}}}return output;}function maxPoolPositions(xValues,xShape,dtype,convInfo){var flattenPositions=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var includeBatchInIndex=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;var maxPositions=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"buffer\"])(convInfo.outShape,'int32');var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var xBuf=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"buffer\"])(xShape,dtype,xValues);for(var b=0;b<convInfo.batchSize;++b){for(var d=0;d<convInfo.inChannels;++d){for(var yR=0;yR<convInfo.outHeight;++yR){var xRCorner=yR*strideHeight-padTop;var xRMin=xRCorner;while(xRMin<0){xRMin+=dilationHeight;}// const xRMin = Math.max(0, xRCorner);\nvar xRMax=Math.min(convInfo.inHeight,effectiveFilterHeight+xRCorner);for(var yC=0;yC<convInfo.outWidth;++yC){var xCCorner=yC*strideWidth-padLeft;var xCMin=xCCorner;while(xCMin<0){xCMin+=dilationWidth;}var xCMax=Math.min(convInfo.inWidth,effectiveFilterWidth+xCCorner);var maxValue=Number.NEGATIVE_INFINITY;var maxPosition=-1;for(var xR=xRMin;xR<xRMax;xR+=dilationHeight){var wR=xR-xRCorner;for(var xC=xCMin;xC<xCMax;xC+=dilationWidth){var wC=xC-xCCorner;var pixel=xBuf.get(b,xR,xC,d);if(pixel>maxValue){maxValue=pixel;if(flattenPositions){maxPosition=includeBatchInIndex?((b*convInfo.inHeight+xR)*convInfo.inWidth+xC)*convInfo.inChannels+d:(xR*convInfo.inWidth+xC)*convInfo.inChannels+d;}else{maxPosition=wR*effectiveFilterWidth+wC;}}}}maxPositions.set(maxPosition,b,yR,yC,d);}}}}return maxPositions;}/***/},/* 27 */ /***/function(module,exports){var g;// This works in non-strict mode\ng=function(){return this;}();try{// This works if eval is allowed (see CSP)\ng=g||new Function(\"return this\")();}catch(e){// This works if the window reference is available\nif((typeof window===\"undefined\"?\"undefined\":_typeof2(window))===\"object\")g=window;}// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\nmodule.exports=g;/***/},/* 28 */ /***/function(module,exports){module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default\nif(!module.children)module.children=[];Object.defineProperty(module,\"loaded\",{enumerable:true,get:function get(){return module.l;}});Object.defineProperty(module,\"id\",{enumerable:true,get:function get(){return module.i;}});module.webpackPolyfill=1;}return module;};/***/},/* 29 */ /***/function(module,exports){/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__){/* globals __webpack_amd_options__ */module.exports=__webpack_amd_options__;/* WEBPACK VAR INJECTION */}).call(this,{});/***/},/* 30 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return transposeImpl;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function transposeImpl(xVals,xShape,dtype,perm,newShape){var xRank=xShape.length;var xSize=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].sizeFromShape(xShape);var xStrides=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].computeStrides(xShape);var newStrides=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].computeStrides(newShape);var result=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].getTypedArrayFromDType(dtype,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].sizeFromShape(newShape));for(var i=0;i<xSize;++i){var loc=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].indexToLoc(i,xRank,xStrides);// Permute location.\nvar newLoc=new Array(loc.length);for(var _i38=0;_i38<newLoc.length;_i38++){newLoc[_i38]=loc[perm[_i38]];}var newIndex=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].locToIndex(newLoc,xRank,newStrides);result[newIndex]=xVals[i];}return result;}/***/},/* 31 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"a\",function(){return(/* reexport */backend_cpu_MathBackendCPU);});__webpack_require__.d(__webpack_exports__,\"c\",function(){return(/* reexport */version);});__webpack_require__.d(__webpack_exports__,\"b\",function(){return(/* reexport */shared_namespaceObject);});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js\nvar shared_namespaceObject={};__webpack_require__.r(shared_namespaceObject);__webpack_require__.d(shared_namespaceObject,\"maxImpl\",function(){return Max_impl[\"a\"/* maxImpl */];});__webpack_require__.d(shared_namespaceObject,\"transposeImpl\",function(){return Transpose_impl[\"a\"/* transposeImpl */];});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js\nvar Max_impl=__webpack_require__(37);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js\nvar Transpose_impl=__webpack_require__(30);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Shared kernel impls for use in other backends.\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// EXTERNAL MODULE: ./node_modules/seedrandom/index.js\nvar seedrandom=__webpack_require__(20);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\nvar cpu_util=__webpack_require__(9);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js\nvar pool_utils=__webpack_require__(26);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var nonMaxSuppressionV3=dist[\"kernel_impls\"].nonMaxSuppressionV3;var _split=dist[\"kernel_impls\"].split;var _tile=dist[\"kernel_impls\"].tile;var topkImpl=dist[\"kernel_impls\"].topkImpl;var whereImpl=dist[\"kernel_impls\"].whereImpl;function mapActivation(backend,x,activation,preluActivationWeights){if(activation==='linear'){return backend.linear(x);}else if(activation==='relu'){return backend.relu(x);}else if(activation==='elu'){return backend.elu(x);}else if(activation==='relu6'){return backend.relu6(x);}else if(activation==='prelu'){return backend.prelu(x,preluActivationWeights);}throw new Error(\"Activation \".concat(activation,\" has not been implemented for the CPU backend.\"));}var backend_cpu_MathBackendCPU=/*#__PURE__*/function(_dist$KernelBackend){_inherits(backend_cpu_MathBackendCPU,_dist$KernelBackend);var _super27=_createSuper(backend_cpu_MathBackendCPU);function backend_cpu_MathBackendCPU(){var _this63;_classCallCheck2(this,backend_cpu_MathBackendCPU);_this63=_super27.call(this);_this63.blockSize=48;_this63.firstUse=true;_this63.data=new dist[\"DataStorage\"](_assertThisInitialized(_this63),Object(dist[\"engine\"])());return _this63;}_createClass(backend_cpu_MathBackendCPU,[{key:\"write\",value:function write(values,shape,dtype){if(this.firstUse){this.firstUse=false;if(Object(dist[\"env\"])().get('IS_NODE')){dist[\"backend_util\"].warn('\\n============================\\n'+'Hi there 👋. Looks like you are running TensorFlow.js in '+'Node.js. To speed things up dramatically, install our node '+'backend, which binds to TensorFlow C++, by running '+'npm i @tensorflow/tfjs-node, '+'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. '+'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu '+'suffix for CUDA) at the start of your program. '+'Visit https://github.com/tensorflow/tfjs-node for more details.'+'\\n============================');}}var dataId={};this.data.set(dataId,{values:values,dtype:dtype});return dataId;}},{key:\"move\",value:function move(dataId,values,shape,dtype){this.data.set(dataId,{values:values,dtype:dtype});}},{key:\"numDataIds\",value:function numDataIds(){return this.data.numDataIds();}},{key:\"read\",value:function(){var _read=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee92(dataId){return regeneratorRuntime.wrap(function _callee92$(_context92){while(1){switch(_context92.prev=_context92.next){case 0:return _context92.abrupt(\"return\",this.readSync(dataId));case 1:case\"end\":return _context92.stop();}}},_callee92,this);}));function read(_x72){return _read.apply(this,arguments);}return read;}()},{key:\"readSync\",value:function readSync(dataId){var _this$data$get=this.data.get(dataId),dtype=_this$data$get.dtype,complexTensors=_this$data$get.complexTensors;if(dtype==='complex64'){var realValues=this.readSync(complexTensors.real.dataId);var imagValues=this.readSync(complexTensors.imag.dataId);return dist[\"backend_util\"].mergeRealAndImagArrays(realValues,imagValues);}return this.data.get(dataId).values;}},{key:\"bufferSync\",value:function bufferSync(t){var data=this.readSync(t.dataId);var decodedData=data;if(t.dtype==='string'){try{// Decode the bytes into string.\ndecodedData=data.map(function(d){return dist[\"util\"].decodeString(d);});}catch(_a){throw new Error('Failed to decode encoded string bytes into utf-8');}}return dist[\"buffer\"](t.shape,t.dtype,decodedData);}},{key:\"makeOutput\",value:function makeOutput(values,shape,dtype){var dataId=this.write(values,shape,dtype);return Object(dist[\"engine\"])().makeTensorFromDataId(dataId,shape,dtype,this);}},{key:\"disposeData\",value:function disposeData(dataId){if(this.data.has(dataId)){var _this$data$get2=this.data.get(dataId),complexTensors=_this$data$get2.complexTensors;if(complexTensors!=null){complexTensors.real.dispose();complexTensors.imag.dispose();}this.data.delete(dataId);}}},{key:\"time\",value:function(){var _time2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee93(f){var start,kernelMs;return regeneratorRuntime.wrap(function _callee93$(_context93){while(1){switch(_context93.prev=_context93.next){case 0:start=dist[\"util\"].now();f();kernelMs=dist[\"util\"].now()-start;return _context93.abrupt(\"return\",{kernelMs:kernelMs});case 4:case\"end\":return _context93.stop();}}},_callee93);}));function time(_x73){return _time2.apply(this,arguments);}return time;}()},{key:\"memory\",value:function memory(){return{// Unreliable due to automatic gc. The numbers above are cumulative.\nunreliable:true,reasons:['The reported memory is an upper bound. Due to automatic garbage '+'collection, the true allocated memory may be less.']};}},{key:\"complex\",value:function complex(real,imag){var result=this.makeOutput(null,real.shape,'complex64');var resultData=this.data.get(result.dataId);// The backend owns the reference to the underlying real and imaginary\n// clones. These will explicitly get disposed when the complex tensor is\n// disposed.\nresultData.complexTensors={real:Object(dist[\"engine\"])().keep(real.clone()),imag:Object(dist[\"engine\"])().keep(imag.clone())};return result;}},{key:\"real\",value:function real(input){var resultData=this.data.get(input.dataId);return resultData.complexTensors.real.clone();}},{key:\"imag\",value:function imag(input){var resultData=this.data.get(input.dataId);return resultData.complexTensors.imag.clone();}},{key:\"slice\",value:function slice(x,begin,size){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'slice');var isContinous=dist[\"slice_util\"].isSliceContinous(x.shape,begin,size);if(isContinous){var flatOffset=dist[\"slice_util\"].computeFlatOffset(begin,x.strides);var length=dist[\"util\"].sizeFromShape(size);var vals=this.readSync(x.dataId);return dist[\"tensor\"](vals.subarray(flatOffset,flatOffset+length),size,x.dtype);}var buffer=dist[\"buffer\"](size,x.dtype);var xBuf=this.bufferSync(x);for(var i=0;i<buffer.size;++i){var loc=buffer.indexToLoc(i);var xLoc=loc.map(function(idx,j){return idx+begin[j];});buffer.values[i]=xBuf.get.apply(xBuf,_toConsumableArray2(xLoc));}return buffer.toTensor();}},{key:\"stridedSlice\",value:function stridedSlice(x,begin,end,strides){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'stridedSlice');var outShape=dist[\"slice_util\"].computeOutShape(begin,end,strides);if(outShape.some(function(axis){return axis===0;})){return dist[\"tensor\"]([],outShape);}var buffer=dist[\"buffer\"](outShape,x.dtype);var xBuf=this.bufferSync(x);for(var i=0;i<buffer.size;i++){var loc=buffer.indexToLoc(i);var newLoc=new Array(loc.length);for(var j=0;j<newLoc.length;j++){newLoc[j]=loc[j]*strides[j]+begin[j];}buffer.set.apply(buffer,[xBuf.get.apply(xBuf,newLoc)].concat(_toConsumableArray2(loc)));}return buffer.toTensor();}},{key:\"diag\",value:function diag(x){var xVals=this.readSync(x.dataId);var buffer=dist[\"buffer\"]([x.size,x.size],x.dtype);var vals=buffer.values;for(var i=0;i<xVals.length;i++){vals[i*x.size+i]=xVals[i];}return buffer.toTensor();}},{key:\"unstack\",value:function unstack(x,axis){var num=x.shape[axis];var outShape=new Array(x.rank-1);var outIndex=0;for(var i=0;i<x.rank;i++){if(i!==axis){outShape[outIndex++]=x.shape[i];}}var begin=new Array(x.rank).fill(0);var size=x.shape.slice();size[axis]=1;var res=new Array(num);for(var _i39=0;_i39<res.length;_i39++){begin[axis]=_i39;res[_i39]=this.slice(x,begin,size).reshape(outShape);}return res;}},{key:\"reverse\",value:function reverse(x,axis){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'reverse');var buffer=dist[\"buffer\"](x.shape,x.dtype);var xBuf=this.bufferSync(x);var _loop9=function _loop9(i){var outLoc=buffer.indexToLoc(i);var inLoc=outLoc.slice();axis.forEach(function(ax){return inLoc[ax]=x.shape[ax]-1-inLoc[ax];});buffer.set.apply(buffer,[xBuf.get.apply(xBuf,_toConsumableArray2(inLoc))].concat(_toConsumableArray2(outLoc)));};for(var i=0;i<buffer.size;i++){_loop9(i);}return buffer.toTensor();}},{key:\"concat\",value:function concat(tensors,axis){var _this64=this;if(tensors[0].dtype==='complex64'){var reals=tensors.map(function(t){return dist[\"real\"](t);});var imags=tensors.map(function(t){return dist[\"imag\"](t);});return dist[\"complex\"](this.concat(reals,axis),this.concat(imags,axis));}var tensors2D=tensors.map(function(t){var innerSize=dist[\"util\"].sizeFromShape(t.shape.slice(axis));return t.as2D(-1,innerSize);});var outShape=dist[\"backend_util\"].computeOutShape(tensors2D.map(function(t){return t.shape;}),1/* axis\r\n          */);var values=dist[\"buffer\"](outShape,tensors[0].dtype).values;if(tensors2D[0].shape[0]===1){// Use built-in TypedArray.set() method for speed.\nvar offset=0;tensors2D.forEach(function(t){values.set(_this64.readSync(t.dataId),offset);offset+=t.size;});}else{var colOffset=0;tensors2D.forEach(function(t){var tVals=_this64.readSync(t.dataId);var tIdx=0;for(var row=0;row<t.shape[0];++row){var resIdx=row*outShape[1]+colOffset;for(var col=0;col<t.shape[1];++col){values[resIdx+col]=tVals[tIdx++];}}colOffset+=t.shape[1];});}var finalOutShape=dist[\"backend_util\"].computeOutShape(tensors.map(function(t){return t.shape;}),axis);return dist[\"tensor\"](values,finalOutShape,tensors[0].dtype);}},{key:\"neg\",value:function neg(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'neg');return this.multiply(dist[\"scalar\"](-1),x);}},{key:\"add\",value:function add(a,b){if(a.dtype==='complex64'||b.dtype==='complex64'){return this.broadcastedBinaryComplexOp(a.cast('complex64'),b.cast('complex64'),function(aReal,aImag,bReal,bImag){return{real:aReal+bReal,imag:aImag+bImag};});}return this.broadcastedBinaryOp(a,b,Object(dist[\"upcastType\"])(a.dtype,b.dtype),function(aValue,bValue){return aValue+bValue;});}},{key:\"addN\",value:function addN(tensors){var _this65=this;Object(cpu_util[\"a\"/* assertNotComplex */])(tensors,'addN');var vals=tensors.map(function(t){return _this65.readSync(t.dataId);});var result=dist[\"buffer\"](tensors[0].shape,tensors[0].dtype);var resultVals=result.values;for(var i=0;i<tensors.length;i++){var currVals=vals[i];for(var j=0;j<resultVals.length;j++){resultVals[j]+=currVals[j];}}return result.toTensor();}},{key:\"softmax\",value:function softmax(logits,dim){var axes=dist[\"util\"].parseAxisParam([dim],logits.shape);// TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n// modularization.\nvar maxLogit=Object(dist[\"max\"])(logits,axes);var expandedShape=dist[\"backend_util\"].expandShapeToKeepDim(maxLogit.shape,axes);var a=this.subtract(logits,maxLogit.reshape(expandedShape));var b=this.exp(a);var sumExp=this.sum(b,axes).reshape(expandedShape);// TODO(annxingyuan): Call divImpl rather than op as part of softmax\n// kernel modularization.\nreturn dist[\"div\"](b,sumExp);}},{key:\"subtract\",value:function subtract(a,b){if(a.dtype==='complex64'||b.dtype==='complex64'){return this.broadcastedBinaryComplexOp(a.cast('complex64'),b.cast('complex64'),function(aReal,aImag,bReal,bImag){return{real:aReal-bReal,imag:aImag-bImag};});}return this.broadcastedBinaryOp(a,b,Object(dist[\"upcastType\"])(a.dtype,b.dtype),function(aValue,bValue){return aValue-bValue;});}},{key:\"pow\",value:function pow(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'pow');return this.broadcastedBinaryOp(a,b,a.dtype,function(aValue,bValue){return Math.pow(aValue,bValue);});}},{key:\"batchMatMul\",value:function batchMatMul(a,b,transposeA,transposeB){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'matMul');var sharedDim=transposeA?a.shape[1]:a.shape[2];var leftDim=transposeA?a.shape[2]:a.shape[1];var rightDim=transposeB?b.shape[1]:b.shape[2];var batchDim=a.shape[0];var aValues=this.readSync(a.dataId);var bValues=this.readSync(b.dataId);var _ref13=transposeA?[a.strides[0],1,a.strides[1]]:[a.strides[0],a.strides[1],1],_ref14=_slicedToArray(_ref13,3),aBatch=_ref14[0],aOuterStep=_ref14[1],aInnerStep=_ref14[2];var _ref15=transposeB?[1,b.strides[1],b.strides[0]]:[b.strides[1],1,b.strides[0]],_ref16=_slicedToArray(_ref15,3),bInnerStep=_ref16[0],bOuterStep=_ref16[1],bBatch=_ref16[2];var size=leftDim*rightDim;var result=dist[\"buffer\"]([batchDim,leftDim,rightDim],a.dtype);var resVals=result.values;var blockSize=this.blockSize;for(var _b2=0;_b2<batchDim;_b2++){for(var i0=0;i0<leftDim;i0+=blockSize){for(var j0=0;j0<rightDim;j0+=blockSize){for(var k0=0;k0<sharedDim;k0+=blockSize){// for when blockSize doesn't evenly divide the input\nvar iBlock=Math.min(i0+blockSize,leftDim);var jBlock=Math.min(j0+blockSize,rightDim);var kBlock=Math.min(k0+blockSize,sharedDim);for(var i=i0;i<iBlock;i++){for(var j=j0;j<jBlock;j++){var sum=0.0;for(var k=k0;k<kBlock;k++){sum+=aValues[_b2*aBatch+i*aOuterStep+k*aInnerStep]*bValues[k*bInnerStep+j*bOuterStep+_b2*bBatch];}resVals[_b2*size+(i*rightDim+j)]+=sum;}}}}}}return result.toTensor();}},{key:\"fusedBatchMatMul\",value:function fusedBatchMatMul(_ref17){var a=_ref17.a,b=_ref17.b,transposeA=_ref17.transposeA,transposeB=_ref17.transposeB,bias=_ref17.bias,activation=_ref17.activation,preluActivationWeights=_ref17.preluActivationWeights;var result=this.batchMatMul(a,b,transposeA,transposeB);if(bias){result=this.add(result,bias);}if(activation){result=mapActivation(this,result,activation,preluActivationWeights);}return result;}},{key:\"multiply\",value:function multiply(a,b){if(a.dtype==='complex64'||b.dtype==='complex64'){return this.broadcastedBinaryComplexOp(a.cast('complex64'),b.cast('complex64'),function(aReal,aImag,bReal,bImag){return{real:aReal*bReal-aImag*bImag,imag:aReal*bImag+aImag*bReal};});}return this.broadcastedBinaryOp(a,b,Object(dist[\"upcastType\"])(a.dtype,b.dtype),function(aValue,bValue){return aValue*bValue;});}},{key:\"floorDiv\",value:function floorDiv(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'floorDiv');var op=function op(a,b){return Math.floor(a/b);};var outputDtype='int32';return this.broadcastedBinaryOp(a,b,outputDtype,op);}},{key:\"sum\",value:function sum(x,axes){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sum');dist[\"backend_util\"].assertAxesAreInnerMostDims('sum',axes,x.rank);var _dist$backend_util$co=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co2=_slicedToArray(_dist$backend_util$co,2),outShape=_dist$backend_util$co2[0],reduceShape=_dist$backend_util$co2[1];var resultDtype=Object(dist[\"upcastType\"])(x.dtype,'int32');var result=dist[\"zeros\"](outShape,resultDtype);var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var sum=0;for(var j=0;j<reduceSize;++j){sum+=aVals[offset+j];}vals[i]=sum;}return result;}},{key:\"prod\",value:function prod(x,axes){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sum');var _dist$backend_util$co3=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co4=_slicedToArray(_dist$backend_util$co3,2),outShape=_dist$backend_util$co4[0],reduceShape=_dist$backend_util$co4[1];var resultDtype=Object(dist[\"upcastType\"])(x.dtype,'int32');var result=dist[\"zeros\"](outShape,resultDtype);var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var prod=1;for(var j=0;j<reduceSize;++j){prod*=aVals[offset+j];}vals[i]=prod;}return result;}},{key:\"unsortedSegmentSum\",value:function unsortedSegmentSum(x,segmentIds,numSegments){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'unsortedSegmentSum');var res=[];// Reshape the segment id's so that they can be broadcast with\n// x. The new shape should be [segmentIds.shape, 1, ..., 1]\nvar numIters=x.rank-segmentIds.rank;for(var i=0;i<numIters;++i){segmentIds=segmentIds.expandDims(i+1);}for(var _i40=0;_i40<numSegments;++_i40){var segmentId=dist[\"scalar\"](_i40,'int32');var mask=dist[\"equal\"](segmentId,segmentIds).asType('float32');var sum=mask.mul(x).sum(0);res.push(sum);}return dist[\"stack\"](res);}},{key:\"argMin\",value:function argMin(x,axis){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'argMin');var axes=[axis];dist[\"backend_util\"].assertAxesAreInnerMostDims('argMin',axes,x.rank);var _dist$backend_util$co5=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co6=_slicedToArray(_dist$backend_util$co5,2),outShape=_dist$backend_util$co6[0],reduceShape=_dist$backend_util$co6[1];var result=dist[\"zeros\"](outShape,'int32');var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var min=aVals[offset];var minIndex=0;for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];if(value<min){min=value;minIndex=j;}}vals[i]=minIndex;}return result;}},{key:\"argMax\",value:function argMax(x,axis){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'argMax');var axes=[axis];dist[\"backend_util\"].assertAxesAreInnerMostDims('argMax',axes,x.rank);var _dist$backend_util$co7=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co8=_slicedToArray(_dist$backend_util$co7,2),outShape=_dist$backend_util$co8[0],reduceShape=_dist$backend_util$co8[1];var result=dist[\"zeros\"](outShape,'int32');var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var max=aVals[offset];var maxIndex=0;for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];if(value>max){max=value;maxIndex=j;}}vals[i]=maxIndex;}return result;}},{key:\"cumsum\",value:function cumsum(x,axis,exclusive,reverse){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'cumsum');if(axis!==x.rank-1){throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\".concat(x.rank-1,\" \")+\"but got axis=\".concat(axis));}var resultDtype=Object(dist[\"upcastType\"])(x.dtype,'int32');var result=dist[\"zeros\"](x.shape,resultDtype);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);var finalDim=x.shape[x.rank-1];var indexAdjuster=reverse?function(i,j){return i+finalDim-j-1;}:function(i,j){return i+j;};for(var i=0;i<aVals.length;i+=finalDim){for(var j=0;j<finalDim;j++){var idx=indexAdjuster(i,j);if(j===0){vals[idx]=exclusive?0:aVals[idx];}else{var prevIdx=indexAdjuster(i,j-1);vals[idx]=exclusive?aVals[prevIdx]+vals[prevIdx]:aVals[idx]+vals[prevIdx];}}}return result;}},{key:\"equal\",value:function equal(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'equal');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal===bVal?1:0;});}},{key:\"notEqual\",value:function notEqual(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'notEqual');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal!==bVal?1:0;});}},{key:\"less\",value:function less(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'less');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal<bVal?1:0;});}},{key:\"lessEqual\",value:function lessEqual(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'lessEqual');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal<=bVal?1:0;});}},{key:\"greater\",value:function greater(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'greater');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal>bVal?1:0;});}},{key:\"greaterEqual\",value:function greaterEqual(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'greaterEqual');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal>=bVal?1:0;});}},{key:\"logicalNot\",value:function logicalNot(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'logicalNot');var values=this.readSync(x.dataId);var newValues=new Uint8Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=values[i]?0:1;}return this.makeOutput(newValues,x.shape,'bool');}},{key:\"logicalAnd\",value:function logicalAnd(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'logicalAnd');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal&&bVal;});}},{key:\"logicalOr\",value:function logicalOr(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'logicalOr');return this.broadcastedBinaryOp(a,b,'bool',function(aVal,bVal){return aVal||bVal;});}},{key:\"select\",value:function select(condition,a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([condition,a,b],'select');var values=this.readSync(condition.dataId);var aValues=this.readSync(a.dataId);var bValues=this.readSync(b.dataId);var result=dist[\"zeros\"](a.shape,Object(dist[\"upcastType\"])(a.dtype,b.dtype));var newValues=this.readSync(result.dataId);var index=0;var offset=condition.rank===0||condition.rank>1||a.rank===1?1:dist[\"util\"].sizeFromShape(a.shape.slice(1));for(var i=0;i<values.length;i++){for(var j=0;j<offset;j++){if(values[i]===1){newValues[index++]=aValues[i];}else{newValues[index++]=bValues[i];}}}return result;}},{key:\"where\",value:function where(condition){Object(cpu_util[\"a\"/* assertNotComplex */])([condition],'where');var condVals=this.readSync(condition.dataId);return whereImpl(condition.shape,condVals);}},{key:\"topk\",value:function topk(x,k,sorted){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'topk');var xVals=this.readSync(x.dataId);return topkImpl(xVals,x.shape,x.dtype,k,sorted);}},{key:\"min\",value:function min(x,axes){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'min');dist[\"backend_util\"].assertAxesAreInnerMostDims('min',axes,x.rank);var _dist$backend_util$co9=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co10=_slicedToArray(_dist$backend_util$co9,2),outShape=_dist$backend_util$co10[0],reduceShape=_dist$backend_util$co10[1];var result=dist[\"zeros\"](outShape,x.dtype);var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var min=aVals[offset];for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];if(value<min){min=value;}}vals[i]=min;}return result;}},{key:\"minimum\",value:function minimum(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'minimum');return this.broadcastedBinaryOp(a,b,a.dtype,function(aVal,bVal){return Math.min(aVal,bVal);});}},{key:\"mod\",value:function mod(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'mod');return this.broadcastedBinaryOp(a,b,a.dtype,function(aVal,bVal){var rem=aVal%bVal;if(aVal<0&&bVal<0||aVal>=0&&bVal>=0){return rem;}else{return(rem+bVal)%bVal;}});}},{key:\"maximum\",value:function maximum(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'maximum');return this.broadcastedBinaryOp(a,b,a.dtype,function(aVal,bVal){return Math.max(aVal,bVal);});}},{key:\"all\",value:function all(x,axes){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'all');dist[\"backend_util\"].assertAxesAreInnerMostDims('all',axes,x.rank);var _dist$backend_util$co11=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co12=_slicedToArray(_dist$backend_util$co11,2),outShape=_dist$backend_util$co12[0],reduceShape=_dist$backend_util$co12[1];var result=dist[\"zeros\"](outShape,x.dtype);var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var all=aVals[offset];for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];all=all&&value;}vals[i]=all;}return result;}},{key:\"any\",value:function any(x,axes){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'any');dist[\"backend_util\"].assertAxesAreInnerMostDims('any',axes,x.rank);var _dist$backend_util$co13=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co14=_slicedToArray(_dist$backend_util$co13,2),outShape=_dist$backend_util$co14[0],reduceShape=_dist$backend_util$co14[1];var result=dist[\"zeros\"](outShape,x.dtype);var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var vals=this.readSync(result.dataId);var aVals=this.readSync(x.dataId);for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var anyVal=aVals[offset];for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];anyVal=anyVal||value;}vals[i]=anyVal;}return result;}},{key:\"squaredDifference\",value:function squaredDifference(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'squaredDifference');return this.broadcastedBinaryOp(a,b,a.dtype,function(aVal,bVal){var diff=aVal-bVal;return diff*diff;});}},{key:\"ceil\",value:function ceil(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'ceil');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=Math.ceil(values[i]);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"floor\",value:function floor(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'floor');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=Math.floor(values[i]);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"sign\",value:function sign(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'x');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){if(values[i]<0){newValues[i]=-1;}else if(values[i]>0){newValues[i]=1;}else{newValues[i]=0;}}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"isNaN\",value:function isNaN(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'x');var values=this.readSync(x.dataId);var newValues=new Uint8Array(values.length);for(var i=0;i<values.length;++i){if(Number.isNaN(values[i])){newValues[i]=1;}}return this.makeOutput(newValues,x.shape,'bool');}},{key:\"isInf\",value:function isInf(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'x');var values=this.readSync(x.dataId);var newValues=new Uint8Array(values.length);for(var i=0;i<values.length;++i){if(Math.abs(values[i])===Infinity){newValues[i]=1;}}return this.makeOutput(newValues,x.shape,'bool');}},{key:\"isFinite\",value:function isFinite(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'x');var values=this.readSync(x.dataId);var newValues=new Uint8Array(values.length);for(var i=0;i<values.length;++i){if(Number.isFinite(values[i])){newValues[i]=1;}}return this.makeOutput(newValues,x.shape,'bool');}},{key:\"round\",value:function round(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'round');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){// The algorithm is based on banker's rounding.\nvar base=Math.floor(values[i]);if(values[i]-base<0.5){newValues[i]=Math.floor(values[i]);}else if(values[i]-base>0.5){newValues[i]=Math.ceil(values[i]);}else{if(base%2.0===0.0){newValues[i]=base;}else{newValues[i]=base+1.0;}}}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"exp\",value:function exp(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'exp');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=Math.exp(values[i]);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"expm1\",value:function expm1(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'expm1');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=Math.expm1(values[i]);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"log\",value:function log(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'log');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){var value=values[i];newValues[i]=Math.log(value);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"log1p\",value:function log1p(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'log1p');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){var value=values[i];newValues[i]=Math.log1p(value);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"sqrt\",value:function sqrt(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sqrt');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){var value=values[i];newValues[i]=Math.sqrt(value);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"rsqrt\",value:function rsqrt(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'rsqrt');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){var value=values[i];newValues[i]=1/Math.sqrt(value);}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"reciprocal\",value:function reciprocal(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'reciprocal');var values=this.readSync(x.dataId);var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){newValues[i]=1/values[i];}return this.makeOutput(newValues,x.shape,'float32');}},{key:\"linear\",value:function linear(x){return x;}},{key:\"relu\",value:function relu(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'relu');var res=dist[\"zeros\"](x.shape,x.dtype);var resVals=this.readSync(res.dataId);var inVals=this.readSync(x.dataId);for(var i=0;i<inVals.length;++i){resVals[i]=Math.max(0,inVals[i]);}return res;}},{key:\"relu6\",value:function relu6(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'relu');var res=dist[\"zeros\"](x.shape,x.dtype);var resVals=this.readSync(res.dataId);var inVals=this.readSync(x.dataId);for(var i=0;i<inVals.length;++i){resVals[i]=Math.min(Math.max(0,inVals[i]),6);}return res;}},{key:\"prelu\",value:function prelu(x,a){Object(cpu_util[\"a\"/* assertNotComplex */])([x,a],'prelu');return this.broadcastedBinaryOp(x,a,x.dtype,function(xValue,aValue){return xValue<0?aValue*xValue:xValue;});}},{key:\"elu\",value:function elu(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'elu');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){var v=values[i];if(v>=0){resultValues[i]=v;}else{resultValues[i]=Math.exp(v)-1;}}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"eluDer\",value:function eluDer(dy,y){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,y],'eluDer');var resultValues=new Float32Array(y.size);var values=this.readSync(y.dataId);var dyValues=this.readSync(dy.dataId);for(var i=0;i<values.length;++i){var v=values[i];if(v>=1){resultValues[i]=dyValues[i];}else{resultValues[i]=dyValues[i]*(v+1);}}return this.makeOutput(resultValues,y.shape,'float32');}},{key:\"selu\",value:function selu(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'selu');// Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n// see: https://arxiv.org/abs/1706.02515\nvar scaleAlpha=dist[\"backend_util\"].SELU_SCALEALPHA;var scale=dist[\"backend_util\"].SELU_SCALE;var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){var v=values[i];if(v>=0){resultValues[i]=scale*v;}else{resultValues[i]=scaleAlpha*(Math.exp(v)-1);}}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"clip\",value:function clip(x,min,max){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'clip');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){var v=values[i];resultValues[i]=v>max?max:v<min?min:v;}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"abs\",value:function abs(x){var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.abs(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"complexAbs\",value:function complexAbs(x){var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<x.size;++i){var real=values[i*2];var imag=values[i*2+1];resultValues[i]=Math.hypot(real,imag);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"int\",value:function int(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'int');var resultValues=new Int32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=values[i];}return this.makeOutput(resultValues,x.shape,'int32');}},{key:\"sigmoid\",value:function sigmoid(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sigmoid');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=1/(1+Math.exp(-values[i]));}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"softplus\",value:function softplus(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'softplus');// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nvar epsilon=1.1920928955078125e-7;var threshold=Math.log(epsilon)+2.0;var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){// Value above which exp(x) may overflow, but softplus(x) == x\n// is within machine epsilon.\nvar tooLarge=values[i]>-threshold;// Value below which exp(x) may underflow, but softplus(x) == exp(x)\n// is within machine epsilon.\nvar tooSmall=values[i]<threshold;var expX=Math.exp(values[i]);var result=void 0;if(tooSmall){result=expX;}else if(tooLarge){result=values[i];}else{result=Math.log(1.0+expX);}resultValues[i]=result;}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"sin\",value:function sin(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sin');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.sin(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"cos\",value:function cos(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'cos');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.cos(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"tan\",value:function tan(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'tan');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.tan(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"asin\",value:function asin(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'asin');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.asin(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"acos\",value:function acos(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'acos');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.acos(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"atan\",value:function atan(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'atan');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.atan(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"atan2\",value:function atan2(a,b){Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],'atan2');return this.broadcastedBinaryOp(a,b,a.dtype,function(aValue,bValue){return Math.atan2(aValue,bValue);});}},{key:\"sinh\",value:function sinh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'sinh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.sinh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"cosh\",value:function cosh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'cosh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.cosh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"tanh\",value:function tanh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'tanh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=dist[\"util\"].tanh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"asinh\",value:function asinh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'asinh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.asinh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"acosh\",value:function acosh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'acosh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.acosh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"atanh\",value:function atanh(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'atanh');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){resultValues[i]=Math.atanh(values[i]);}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"erf\",value:function erf(x){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'erf');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);var p=dist[\"backend_util\"].ERF_P;var a1=dist[\"backend_util\"].ERF_A1;var a2=dist[\"backend_util\"].ERF_A2;var a3=dist[\"backend_util\"].ERF_A3;var a4=dist[\"backend_util\"].ERF_A4;var a5=dist[\"backend_util\"].ERF_A5;for(var i=0;i<values.length;++i){var sign=Math.sign(values[i]);var v=Math.abs(values[i]);var t=1.0/(1.0+p*v);resultValues[i]=sign*(1.0-((((a5*t+a4)*t+a3)*t+a2)*t+a1)*t*Math.exp(-v*v));}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"step\",value:function step(x){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;Object(cpu_util[\"a\"/* assertNotComplex */])(x,'step');var resultValues=new Float32Array(x.size);var values=this.readSync(x.dataId);for(var i=0;i<values.length;++i){var value=values[i];if(isNaN(value)){resultValues[i]=NaN;}else{resultValues[i]=value>0?1:alpha;}}return this.makeOutput(resultValues,x.shape,'float32');}},{key:\"fusedConv2d\",value:function fusedConv2d(_ref18){var input=_ref18.input,filter=_ref18.filter,convInfo=_ref18.convInfo,bias=_ref18.bias,activation=_ref18.activation,preluActivationWeights=_ref18.preluActivationWeights;var result=this.conv2d(input,filter,convInfo);if(bias){result=this.add(result,bias);}if(activation){result=mapActivation(this,result,activation,preluActivationWeights);}return result;}},{key:\"conv2d\",value:function conv2d(x,filter,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,filter],'conv2d');var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var padLeft=convInfo.padInfo.left;var padTop=convInfo.padInfo.top;var isChannelsLast=convInfo.dataFormat==='channelsLast';var y=dist[\"buffer\"](convInfo.outShape,x.dtype);var xBatchStride=x.strides[0];var xRowStride=isChannelsLast?x.strides[1]:x.strides[2];var xColStride=isChannelsLast?x.strides[2]:1;var xChannelStride=isChannelsLast?1:x.strides[1];var yBatchStride=y.strides[0];var yRowStride=isChannelsLast?y.strides[1]:y.strides[2];var yColStride=isChannelsLast?y.strides[2]:1;var yChannelStride=isChannelsLast?1:y.strides[1];var xVals=this.readSync(x.dataId);var wVals=this.readSync(filter.dataId);var yVals=y.values;for(var b=0;b<convInfo.batchSize;++b){var xOffset1=b*xBatchStride;var yOffset1=b*yBatchStride;for(var yR=0;yR<convInfo.outHeight;++yR){var yOffset2=yOffset1+yR*yRowStride;var xRCorner=yR*convInfo.strideHeight-padTop;for(var wR=0;wR<filterHeight;wR++){var xR=xRCorner+wR*dilationHeight;if(xR<0||xR>=convInfo.inHeight){continue;}var wOffset1=wR*filter.strides[0];var xOffset2=xOffset1+xR*xRowStride;for(var yC=0;yC<convInfo.outWidth;++yC){var yOffset3=yOffset2+yC*yColStride;var xCCorner=yC*convInfo.strideWidth-padLeft;for(var wC=0;wC<filterWidth;wC++){var xC=xCCorner+wC*dilationWidth;if(xC<0||xC>=convInfo.inWidth){continue;}var wOffset2=wOffset1+wC*filter.strides[1];var xOffset3=xOffset2+xC*xColStride;var wOffset3=wOffset2;for(var d1=0;d1<convInfo.inChannels;++d1){var xVal=xVals[xOffset3+d1*xChannelStride];for(var d2=0;d2<convInfo.outChannels;++d2){yVals[yOffset3+d2*yChannelStride]+=xVal*wVals[wOffset3+d2];}wOffset3+=convInfo.outChannels;}}}}}}return y.toTensor();}},{key:\"conv3d\",value:function conv3d(x,filter,convInfo){var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var padFront=convInfo.padInfo.front;var padLeft=convInfo.padInfo.left;var padTop=convInfo.padInfo.top;var y=dist[\"buffer\"](convInfo.outShape,x.dtype);var xVals=this.readSync(x.dataId);var wVals=this.readSync(filter.dataId);var yVals=y.values;for(var b=0;b<convInfo.batchSize;++b){var xOffset1=b*x.strides[0];var yOffset1=b*y.strides[0];for(var yF=0;yF<convInfo.outDepth;++yF){var yOffset2=yOffset1+yF*y.strides[1];var xFCorner=yF*convInfo.strideDepth-padFront;for(var wF=0;wF<filterDepth;wF++){var xF=xFCorner+wF*dilationDepth;if(xF<0||xF>=convInfo.inDepth){continue;}var wOffset1=wF*filter.strides[0];var xOffset2=xOffset1+xF*x.strides[1];for(var yR=0;yR<convInfo.outHeight;++yR){var yOffset3=yOffset2+yR*y.strides[2];var xRCorner=yR*convInfo.strideHeight-padTop;for(var wR=0;wR<filterHeight;wR++){var xR=xRCorner+wR*dilationHeight;if(xR<0||xR>=convInfo.inHeight){continue;}var wOffset2=wOffset1+wR*filter.strides[1];var xOffset3=xOffset2+xR*x.strides[2];for(var yC=0;yC<convInfo.outWidth;++yC){var yOffset4=yOffset3+yC*convInfo.outChannels;var xCCorner=yC*convInfo.strideWidth-padLeft;for(var wC=0;wC<filterWidth;wC++){var xC=xCCorner+wC*dilationWidth;if(xC<0||xC>=convInfo.inWidth){continue;}var wOffset3=wOffset2+wC*filter.strides[2];var xOffset4=xOffset3+xC*convInfo.inChannels;var wOffset4=wOffset3;for(var d1=0;d1<convInfo.inChannels;++d1){var xVal=xVals[xOffset4+d1];for(var d2=0;d2<convInfo.outChannels;++d2){yVals[yOffset4+d2]+=xVal*wVals[wOffset4+d2];}wOffset4+=convInfo.outChannels;}}}}}}}}return y.toTensor();}},{key:\"conv2dDerInput\",value:function conv2dDerInput(dy,filter,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,filter],'conv2dDerInput');var dx=dist[\"buffer\"](convInfo.inShape,'float32');var dxValues=dx.values;var dyValues=this.readSync(dy.dataId);var fltValues=this.readSync(filter.dataId);var _filter$strides=_slicedToArray(filter.strides,3),fltS0=_filter$strides[0],fltS1=_filter$strides[1],fltS2=_filter$strides[2];var batchSize=convInfo.batchSize,filterHeight=convInfo.filterHeight,filterWidth=convInfo.filterWidth,inChannels=convInfo.inChannels,inHeight=convInfo.inHeight,inWidth=convInfo.inWidth,outChannels=convInfo.outChannels,outHeight=convInfo.outHeight,outWidth=convInfo.outWidth,strideHeight=convInfo.strideHeight,strideWidth=convInfo.strideWidth,dataFormat=convInfo.dataFormat;var topPad=filterHeight-1-convInfo.padInfo.top;var leftPad=filterWidth-1-convInfo.padInfo.left;var isChannelsLast=dataFormat==='channelsLast';var xBatchStride=dx.strides[0];var xRowStride=isChannelsLast?dx.strides[1]:dx.strides[2];var xColStride=isChannelsLast?dx.strides[2]:1;var xChannelStride=isChannelsLast?1:dx.strides[1];var yBatchStride=dy.strides[0];var yRowStride=isChannelsLast?dy.strides[1]:dy.strides[2];var yColStride=isChannelsLast?dy.strides[2]:1;var yChannelStride=isChannelsLast?1:dy.strides[1];for(var b=0;b<batchSize;++b){for(var d1=0;d1<inChannels;++d1){for(var xR=0;xR<inHeight;++xR){var xRCorner=xR-topPad;var xRMin=Math.max(0,Math.ceil(xRCorner/strideHeight));var yRMax=Math.min(outHeight,(filterHeight+xRCorner)/strideHeight);for(var xC=0;xC<inWidth;++xC){var xCCorner=xC-leftPad;var xCMin=Math.max(0,Math.ceil(xCCorner/strideWidth));var yCMax=Math.min(outWidth,(filterWidth+xCCorner)/strideWidth);var dotProd=0;for(var yR=xRMin;yR<yRMax;++yR){var wR=yR*strideHeight-xRCorner;for(var yC=xCMin;yC<yCMax;++yC){var wC=yC*strideWidth-xCCorner;var dyOffset=yBatchStride*b+yRowStride*yR+yColStride*yC;var fltOffset=fltS0*(filterHeight-1-wR)+fltS1*(filterWidth-1-wC)+fltS2*d1;for(var d2=0;d2<outChannels;++d2){var pixel=dyValues[dyOffset+yChannelStride*d2];var weight=fltValues[fltOffset+d2];dotProd+=pixel*weight;}}}var dxOffset=xBatchStride*b+xRowStride*xR+xColStride*xC+xChannelStride*d1;dxValues[dxOffset]=dotProd;}}}}return dx.toTensor();}},{key:\"conv3dDerInput\",value:function conv3dDerInput(dy,filter,convInfo){var dx=dist[\"buffer\"](convInfo.inShape,'float32');var dxValues=dx.values;var _dx$strides=_slicedToArray(dx.strides,4),dxS0=_dx$strides[0],dxS1=_dx$strides[1],dxS2=_dx$strides[2],dxS3=_dx$strides[3];var dyValues=this.readSync(dy.dataId);var _dy$strides=_slicedToArray(dy.strides,4),dyS0=_dy$strides[0],dyS1=_dy$strides[1],dyS2=_dy$strides[2],dyS3=_dy$strides[3];var fltValues=this.readSync(filter.dataId);var _filter$strides2=_slicedToArray(filter.strides,4),fltS0=_filter$strides2[0],fltS1=_filter$strides2[1],fltS2=_filter$strides2[2],fltS3=_filter$strides2[3];var batchSize=convInfo.batchSize,filterDepth=convInfo.filterDepth,filterHeight=convInfo.filterHeight,filterWidth=convInfo.filterWidth,inChannels=convInfo.inChannels,inDepth=convInfo.inDepth,inHeight=convInfo.inHeight,inWidth=convInfo.inWidth,outChannels=convInfo.outChannels,outDepth=convInfo.outDepth,outHeight=convInfo.outHeight,outWidth=convInfo.outWidth,strideDepth=convInfo.strideDepth,strideHeight=convInfo.strideHeight,strideWidth=convInfo.strideWidth;var frontPad=filterDepth-1-convInfo.padInfo.front;var topPad=filterHeight-1-convInfo.padInfo.top;var leftPad=filterWidth-1-convInfo.padInfo.left;for(var b=0;b<batchSize;++b){for(var d1=0;d1<inChannels;++d1){// Frames of depth\nfor(var xF=0;xF<inDepth;++xF){var xFCorner=xF-frontPad;var xFMin=Math.max(0,Math.ceil(xFCorner/strideDepth));var yFMax=Math.min(outDepth,(filterDepth+xFCorner)/strideDepth);// Rows as per standard 2d matrix notation\nfor(var xR=0;xR<inHeight;++xR){var xRCorner=xR-topPad;var xRMin=Math.max(0,Math.ceil(xRCorner/strideHeight));var yRMax=Math.min(outHeight,(filterHeight+xRCorner)/strideHeight);// Columns as per standard 2d matrix notation\nfor(var xC=0;xC<inWidth;++xC){var xCCorner=xC-leftPad;var xCMin=Math.max(0,Math.ceil(xCCorner/strideWidth));var yCMax=Math.min(outWidth,(filterWidth+xCCorner)/strideWidth);var dotProd=0;for(var yF=xFMin;yF<yFMax;++yF){var wF=yF*strideDepth-xFCorner;for(var yR=xRMin;yR<yRMax;++yR){var wR=yR*strideHeight-xRCorner;for(var yC=xCMin;yC<yCMax;++yC){var wC=yC*strideWidth-xCCorner;var dyOffset=dyS0*b+dyS1*yF+dyS2*yR+dyS3*yC;var fltOffset=fltS0*(filterDepth-1-wF)+fltS1*(filterHeight-1-wR)+fltS2*(filterWidth-1-wC)+fltS3*d1;for(var d2=0;d2<outChannels;++d2){var pixel=dyValues[dyOffset+d2];var weight=fltValues[fltOffset+d2];dotProd+=pixel*weight;}}}}dxValues[dxS0*b+dxS1*xF+dxS2*xR+dxS3*xC+d1]=dotProd;}}}}}return dx.toTensor();}},{key:\"conv2dDerFilter\",value:function conv2dDerFilter(x,dy,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,dy],'conv2dDerFilter');var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var isChannelsLast=convInfo.dataFormat==='channelsLast';var dW=dist[\"buffer\"](convInfo.filterShape,'float32');var leftPad=convInfo.padInfo.left;var topPad=convInfo.padInfo.top;var xBuf=this.bufferSync(x);var dyBuf=this.bufferSync(dy);for(var wR=0;wR<filterHeight;++wR){var yRMin=Math.max(0,Math.ceil((topPad-wR)/strideHeight));var yRMax=Math.min(convInfo.outHeight,(convInfo.inHeight+topPad-wR)/strideHeight);for(var wC=0;wC<filterWidth;++wC){var yCMin=Math.max(0,Math.ceil((leftPad-wC)/strideWidth));var yCMax=Math.min(convInfo.outWidth,(convInfo.inWidth+leftPad-wC)/strideWidth);for(var d1=0;d1<convInfo.inChannels;++d1){for(var d2=0;d2<convInfo.outChannels;++d2){// Need to convolve.\nvar dotProd=0;for(var b=0;b<convInfo.batchSize;++b){for(var yR=yRMin;yR<yRMax;++yR){var xR=wR+yR*strideHeight-topPad;for(var yC=yCMin;yC<yCMax;++yC){var xC=wC+yC*strideWidth-leftPad;if(isChannelsLast){dotProd+=xBuf.get(b,xR,xC,d1)*dyBuf.get(b,yR,yC,d2);}else{dotProd+=xBuf.get(b,d1,xR,xC)*dyBuf.get(b,d2,yR,yC);}}}}dW.set(dotProd,wR,wC,d1,d2);}}}}return dW.toTensor();}},{key:\"conv3dDerFilter\",value:function conv3dDerFilter(x,dy,convInfo){var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dw=dist[\"buffer\"](convInfo.filterShape,'float32');var dwValues=dw.values;var _dw$strides=_slicedToArray(dw.strides,4),dwS0=_dw$strides[0],dwS1=_dw$strides[1],dwS2=_dw$strides[2],dwS3=_dw$strides[3];var dyValues=this.readSync(dy.dataId);var _dy$strides2=_slicedToArray(dy.strides,4),dyS0=_dy$strides2[0],dyS1=_dy$strides2[1],dyS2=_dy$strides2[2],dyS3=_dy$strides2[3];var xValues=this.readSync(x.dataId);var _x$strides=_slicedToArray(x.strides,4),xS0=_x$strides[0],xS1=_x$strides[1],xS2=_x$strides[2],xS3=_x$strides[3];var frontPad=convInfo.padInfo.front;var leftPad=convInfo.padInfo.left;var topPad=convInfo.padInfo.top;for(var wF=0;wF<filterDepth;++wF){var yFMin=Math.max(0,Math.ceil((frontPad-wF)/strideDepth));var yFMax=Math.min(convInfo.outDepth,(convInfo.inDepth+frontPad-wF)/strideDepth);var wOffset1=wF*dwS0;for(var wR=0;wR<filterHeight;++wR){var yRMin=Math.max(0,Math.ceil((topPad-wR)/strideHeight));var yRMax=Math.min(convInfo.outHeight,(convInfo.inHeight+topPad-wR)/strideHeight);var wOffset2=wR*dwS1+wOffset1;for(var wC=0;wC<filterWidth;++wC){var yCMin=Math.max(0,Math.ceil((leftPad-wC)/strideWidth));var yCMax=Math.min(convInfo.outWidth,(convInfo.inWidth+leftPad-wC)/strideWidth);var wOffset3=wC*dwS2+wOffset2;for(var d1=0;d1<convInfo.inChannels;++d1){var wOffset4=d1*dwS3+wOffset3;for(var d2=0;d2<convInfo.outChannels;++d2){var dotProd=0;for(var b=0;b<convInfo.batchSize;++b){var xOffset1=b*xS0;var yOffset1=b*dyS0;for(var yF=yFMin;yF<yFMax;++yF){var xF=wF+yF*strideDepth-frontPad;var xOffset2=xF*xS1+xOffset1;var yOffset2=yF*dyS1+yOffset1;for(var yR=yRMin;yR<yRMax;++yR){var xR=wR+yR*strideHeight-topPad;var xOffset3=xR*xS2+xOffset2;var yOffset3=yR*dyS2+yOffset2;for(var yC=yCMin;yC<yCMax;++yC){var xC=wC+yC*strideWidth-leftPad;var xOffset4=xC*xS3+xOffset3;var yOffset4=yC*dyS3+yOffset3;dotProd+=xValues[xOffset4+d1]*dyValues[yOffset4+d2];}}}}dwValues[wOffset4+d2]=dotProd;}}}}}return dw.toTensor();}},{key:\"fusedDepthwiseConv2D\",value:function fusedDepthwiseConv2D(_ref19){var input=_ref19.input,filter=_ref19.filter,convInfo=_ref19.convInfo,bias=_ref19.bias,activation=_ref19.activation,preluActivationWeights=_ref19.preluActivationWeights;var result=this.depthwiseConv2D(input,filter,convInfo);if(bias){result=this.add(result,bias);}if(activation){result=mapActivation(this,result,activation,preluActivationWeights);}return result;}},{key:\"depthwiseConv2D\",value:function depthwiseConv2D(x,filter,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,filter],'depthwiseConv2D');var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var padLeft=convInfo.padInfo.left;var padTop=convInfo.padInfo.top;var chMul=convInfo.outChannels/convInfo.inChannels;var y=dist[\"buffer\"](convInfo.outShape,x.dtype);var xVals=this.readSync(x.dataId);var wVals=this.readSync(filter.dataId);var yVals=y.values;for(var b=0;b<convInfo.batchSize;++b){var xOffset1=b*x.strides[0];var yOffset1=b*y.strides[0];for(var yR=0;yR<convInfo.outHeight;++yR){var yOffset2=yOffset1+yR*y.strides[1];var xRCorner=yR*convInfo.strideHeight-padLeft;for(var wR=0;wR<filterHeight;++wR){var xR=xRCorner+wR*dilationHeight;if(xR<0||xR>=convInfo.inHeight){continue;}var wOffset1=wR*filter.strides[0];var xOffset2=xOffset1+xR*x.strides[1];for(var yC=0;yC<convInfo.outWidth;++yC){var yOffset3=yOffset2+yC*y.strides[2];var xCCorner=yC*convInfo.strideWidth-padTop;for(var wC=0;wC<filterWidth;++wC){var xC=xCCorner+wC*dilationWidth;if(xC<0||xC>=convInfo.inWidth){continue;}var wOffset2=wOffset1+wC*filter.strides[1];var xOffset3=xOffset2+xC*convInfo.inChannels;var yOffset4=yOffset3;var wOffset3=wOffset2;for(var d1=0;d1<convInfo.inChannels;++d1){var xVal=xVals[xOffset3+d1];for(var q=0;q<chMul;++q){yVals[yOffset4+q]+=xVal*wVals[wOffset3+q];}yOffset4+=chMul;wOffset3+=chMul;}}}}}}return y.toTensor();}},{key:\"depthwiseConv2DDerInput\",value:function depthwiseConv2DDerInput(dy,filter,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,filter],'depthwiseConv2DDerInput');var dx=dist[\"buffer\"](convInfo.inShape,'float32');var dxValues=dx.values;var _dx$strides2=_slicedToArray(dx.strides,3),dxS0=_dx$strides2[0],dxS1=_dx$strides2[1],dxS2=_dx$strides2[2];var dyValues=this.readSync(dy.dataId);var _dy$strides3=_slicedToArray(dy.strides,3),dyS0=_dy$strides3[0],dyS1=_dy$strides3[1],dyS2=_dy$strides3[2];var fltValues=this.readSync(filter.dataId);var _filter$strides3=_slicedToArray(filter.strides,3),fltS0=_filter$strides3[0],fltS1=_filter$strides3[1],fltS2=_filter$strides3[2];var batchSize=convInfo.batchSize,filterHeight=convInfo.filterHeight,filterWidth=convInfo.filterWidth,inChannels=convInfo.inChannels,inHeight=convInfo.inHeight,inWidth=convInfo.inWidth,outChannels=convInfo.outChannels,outHeight=convInfo.outHeight,outWidth=convInfo.outWidth,strideHeight=convInfo.strideHeight,strideWidth=convInfo.strideWidth;var topPad=filterHeight-1-convInfo.padInfo.top;var leftPad=filterWidth-1-convInfo.padInfo.left;var chMul=outChannels/inChannels;for(var b=0;b<batchSize;++b){for(var d1=0;d1<inChannels;++d1){for(var xR=0;xR<inHeight;++xR){var xRCorner=xR-topPad;var xRMin=Math.max(0,Math.ceil(xRCorner/strideHeight));var yRMax=Math.min(outHeight,(filterHeight+xRCorner)/strideHeight);for(var xC=0;xC<inWidth;++xC){var xCCorner=xC-leftPad;var xCMin=Math.max(0,Math.ceil(xCCorner/strideWidth));var yCMax=Math.min(outWidth,(filterWidth+xCCorner)/strideWidth);var dotProd=0;for(var yR=xRMin;yR<yRMax;++yR){var wR=yR*strideHeight-xRCorner;for(var yC=xCMin;yC<yCMax;++yC){var wC=yC*strideWidth-xCCorner;var dyOffset=dyS0*b+dyS1*yR+dyS2*yC;var fltOffset=fltS0*(filterHeight-1-wR)+fltS1*(filterWidth-1-wC)+fltS2*d1;for(var dm=0;dm<chMul;++dm){var d2=d1*chMul+dm;var pixel=dyValues[dyOffset+d2];var weight=fltValues[fltOffset+dm];dotProd+=pixel*weight;}}}dxValues[dxS0*b+dxS1*xR+dxS2*xC+d1]=dotProd;}}}}return dx.toTensor();}},{key:\"depthwiseConv2DDerFilter\",value:function depthwiseConv2DDerFilter(x,dy,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,dy],'depthwiseConv2DDerFilter');var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dW=dist[\"buffer\"](convInfo.filterShape,'float32');var leftPad=convInfo.padInfo.left;var topPad=convInfo.padInfo.top;var chMul=convInfo.outChannels/convInfo.inChannels;var xBuf=this.bufferSync(x);var dyBuf=this.bufferSync(dy);for(var wR=0;wR<filterHeight;++wR){var yRMin=Math.max(0,Math.ceil((topPad-wR)/strideHeight));var yRMax=Math.min(convInfo.outHeight,(convInfo.inHeight+topPad-wR)/strideHeight);for(var wC=0;wC<filterWidth;++wC){var yCMin=Math.max(0,Math.ceil((leftPad-wC)/strideWidth));var yCMax=Math.min(convInfo.outWidth,(convInfo.inWidth+leftPad-wC)/strideWidth);for(var d2=0;d2<convInfo.outChannels;++d2){var d1=Math.trunc(d2/chMul);var dm=d2%chMul;var dotProd=0;for(var b=0;b<convInfo.batchSize;++b){for(var yR=yRMin;yR<yRMax;++yR){var xR=wR+yR*strideHeight-topPad;for(var yC=yCMin;yC<yCMax;++yC){var xC=wC+yC*strideWidth-leftPad;dotProd+=xBuf.get(b,xR,xC,d1)*dyBuf.get(b,yR,yC,d2);}}}dW.set(dotProd,wR,wC,d1,dm);}}}return dW.toTensor();}},{key:\"tile\",value:function tile(x,reps){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'tile');return _tile(this.bufferSync(x),reps);}},{key:\"pad\",value:function pad(x,paddings,constantValue){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'pad');var outShape=paddings.map(function(p,i){return p[0]/* beforePad */+x.shape[i]+p[1];}/* afterPad */);var start=paddings.map(function(p){return p[0];});var xBuffer=this.bufferSync(x);var buffer=dist[\"buffer\"](outShape,x.dtype);if(constantValue!==0){buffer.values.fill(constantValue);}for(var i=0;i<x.size;i++){var coords=xBuffer.indexToLoc(i);var outCoords=coords.map(function(c,i){return c+start[i];});buffer.set.apply(buffer,[xBuffer.get.apply(xBuffer,_toConsumableArray2(coords))].concat(_toConsumableArray2(outCoords)));}return buffer.toTensor();}},{key:\"gather\",value:function gather(x,indices,axis){Object(cpu_util[\"a\"/* assertNotComplex */])([x,indices],'gather');var newShape=x.shape.slice();var indicesValues=this.readSync(indices.dataId);newShape[axis]=indicesValues.length;var result=dist[\"buffer\"](newShape,x.dtype);var xBuf=this.bufferSync(x);for(var i=0;i<result.size;++i){var newLoc=result.indexToLoc(i);var originalLoc=newLoc.slice();originalLoc[axis]=indicesValues[newLoc[axis]];var originalIndex=xBuf.locToIndex(originalLoc);result.values[i]=xBuf.values[originalIndex];}return result.toTensor();}},{key:\"batchToSpaceND\",value:function batchToSpaceND(x,blockShape,crops){Object(cpu_util[\"a\"/* assertNotComplex */])([x],'batchToSpaceND');var prod=blockShape.reduce(function(a,b){return a*b;});var reshaped=dist[\"backend_util\"].getReshaped(x.shape,blockShape,prod);var permuted=dist[\"backend_util\"].getPermuted(reshaped.length,blockShape.length);var reshapedPermuted=dist[\"backend_util\"].getReshapedPermuted(x.shape,blockShape,prod);var sliceBeginCoords=dist[\"backend_util\"].getSliceBeginCoords(crops,blockShape.length);var sliceSize=dist[\"backend_util\"].getSliceSize(reshapedPermuted,crops,blockShape.length);return dist[\"transpose\"](x.reshape(reshaped),permuted).reshape(reshapedPermuted).slice(sliceBeginCoords,sliceSize);}},{key:\"spaceToBatchND\",value:function spaceToBatchND(x,blockShape,paddings){Object(cpu_util[\"a\"/* assertNotComplex */])([x],'spaceToBatchND');var prod=blockShape.reduce(function(a,b){return a*b;});var completePaddings=[[0,0]];completePaddings.push.apply(completePaddings,_toConsumableArray2(paddings));for(var i=1+blockShape.length;i<x.shape.length;++i){completePaddings.push([0,0]);}var paddedX=x.pad(completePaddings);var reshapedPaddedShape=dist[\"backend_util\"].getReshaped(paddedX.shape,blockShape,prod,false);var permutedReshapedPaddedPermutation=dist[\"backend_util\"].getPermuted(reshapedPaddedShape.length,blockShape.length,false);var flattenShape=dist[\"backend_util\"].getReshapedPermuted(paddedX.shape,blockShape,prod,false);return dist[\"transpose\"](paddedX.reshape(reshapedPaddedShape),permutedReshapedPaddedPermutation).reshape(flattenShape);}},{key:\"maxPool\",value:function maxPool(x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'maxPool');var xValues=this.readSync(x.dataId);return Object(pool_utils[\"b\"/* pool */])(xValues,x.shape,x.dtype,x.strides,convInfo,'max').toTensor();}},{key:\"maxPoolBackprop\",value:function maxPoolBackprop(dy,x,y,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,y],'maxPoolBackprop');var xValues=this.readSync(x.dataId);var maxPosBuf=Object(dist[\"buffer\"])(convInfo.outShape,x.dtype,Object(pool_utils[\"a\"/* maxPoolPositions */])(xValues,x.shape,x.dtype,convInfo).values);var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var dx=dist[\"buffer\"](x.shape,'float32');var dyBuf=this.bufferSync(dy);for(var b=0;b<convInfo.batchSize;++b){for(var d=0;d<convInfo.inChannels;++d){for(var dxR=0;dxR<convInfo.inHeight;++dxR){for(var dxC=0;dxC<convInfo.inWidth;++dxC){// Shader code begins.\nvar dyRCorner=dxR-padTop;var dyCCorner=dxC-padLeft;var dotProd=0;for(var wR=0;wR<effectiveFilterHeight;wR+=dilationHeight){var dyR=(dyRCorner+wR)/strideHeight;if(dyR<0||dyR>=convInfo.outHeight||Math.floor(dyR)!==dyR){continue;}for(var wC=0;wC<effectiveFilterWidth;wC+=dilationWidth){var dyC=(dyCCorner+wC)/strideWidth;if(dyC<0||dyC>=convInfo.outWidth||Math.floor(dyC)!==dyC){continue;}var maxPos=effectiveFilterHeight*effectiveFilterWidth-1-maxPosBuf.get(b,dyR,dyC,d);var curPos=wR*effectiveFilterWidth+wC;var mask=maxPos===curPos?1:0;if(mask===0){continue;}var pixel=dyBuf.get(b,dyR,dyC,d);dotProd+=pixel*mask;}}dx.set(dotProd,b,dxR,dxC,d);}}}}return dx.toTensor();}},{key:\"avgPoolBackprop\",value:function avgPoolBackprop(dy,x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,x],'avgPoolBackprop');var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var dx=dist[\"buffer\"](x.shape,'float32');var avgMultiplier=1/(filterHeight*filterWidth);var dyBuf=this.bufferSync(dy);for(var b=0;b<convInfo.batchSize;++b){for(var d=0;d<convInfo.inChannels;++d){for(var dxR=0;dxR<convInfo.inHeight;++dxR){for(var dxC=0;dxC<convInfo.inWidth;++dxC){// Shader code begins.\nvar dyRCorner=dxR-padTop;var dyCCorner=dxC-padLeft;var dotProd=0;for(var wR=0;wR<effectiveFilterHeight;wR+=dilationHeight){var dyR=(dyRCorner+wR)/strideHeight;if(dyR<0||dyR>=convInfo.outHeight||Math.floor(dyR)!==dyR){continue;}for(var wC=0;wC<effectiveFilterWidth;wC+=dilationWidth){var dyC=(dyCCorner+wC)/strideWidth;if(dyC<0||dyC>=convInfo.outWidth||Math.floor(dyC)!==dyC){continue;}var pixel=dyBuf.get(b,dyR,dyC,d);dotProd+=pixel;}}dx.set(dotProd*avgMultiplier,b,dxR,dxC,d);}}}}return dx.toTensor();}},{key:\"pool3d\",value:function pool3d(x,convInfo,poolType){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'pool3d');var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=convInfo.padInfo.front;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var initialValue=poolType==='max'?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY;var xValues=this.readSync(x.dataId);var output=dist[\"buffer\"](convInfo.outShape,x.dtype);var outputVals=output.values;var outputBatchStrides=convInfo.outShape[1]*convInfo.outShape[2]*convInfo.outShape[3]*convInfo.outShape[4];var outputDepthStrides=convInfo.outShape[2]*convInfo.outShape[3]*convInfo.outShape[4];var outputRowStrides=convInfo.outShape[3]*convInfo.outShape[4];var outputColStrides=convInfo.outShape[4];for(var batch=0;batch<convInfo.batchSize;++batch){var outputBatchOffset=batch*outputBatchStrides;var inputBatchOffset=batch*x.strides[0];for(var channel=0;channel<convInfo.inChannels;++channel){for(var yDepth=0;yDepth<convInfo.outDepth;++yDepth){var xDepthCorner=yDepth*strideDepth-padFront;var xDepthMin=xDepthCorner;while(xDepthMin<0){xDepthMin+=dilationDepth;}var xDepthMax=Math.min(convInfo.inDepth,effectiveFilterDepth+xDepthCorner);var outputDepthOffset=outputBatchOffset+yDepth*outputDepthStrides;for(var yRow=0;yRow<convInfo.outHeight;++yRow){var xRowCorner=yRow*strideHeight-padTop;var xRowMin=xRowCorner;while(xRowMin<0){xRowMin+=dilationHeight;}var xRowMax=Math.min(convInfo.inHeight,effectiveFilterHeight+xRowCorner);var outputRowOffset=outputDepthOffset+yRow*outputRowStrides;for(var yCol=0;yCol<convInfo.outWidth;++yCol){var xColCorner=yCol*strideWidth-padLeft;var xColMin=xColCorner;while(xColMin<0){xColMin+=dilationWidth;}var xColMax=Math.min(convInfo.inWidth,effectiveFilterWidth+xColCorner);// Shader code begins\nvar outputColOffset=outputRowOffset+yCol*outputColStrides;var minMaxValue=initialValue;var avgValue=0;var count=0;for(var xDepth=xDepthMin;xDepth<xDepthMax;xDepth+=dilationDepth){var xDepthOffset=inputBatchOffset+xDepth*x.strides[1];for(var xRow=xRowMin;xRow<xRowMax;xRow+=dilationHeight){var xRowOffset=xDepthOffset+xRow*x.strides[2];for(var xCol=xColMin;xCol<xColMax;xCol+=dilationWidth){var xColOffset=xRowOffset+xCol*x.strides[3];var pixel=xValues[xColOffset+channel];if(poolType==='max'&&pixel>minMaxValue){minMaxValue=pixel;}else if(poolType==='avg'){avgValue+=pixel;count++;}if(isNaN(minMaxValue)){break;}}if(isNaN(minMaxValue)){break;}}if(isNaN(minMaxValue)){break;}}var outputOffset=outputColOffset+channel;outputVals[outputOffset]=poolType==='avg'?avgValue/count:minMaxValue;}}}}}return output.toTensor();}},{key:\"avgPool3d\",value:function avgPool3d(x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'avgPool3d');return this.pool3d(x,convInfo,'avg').toFloat();}},{key:\"avgPool3dBackprop\",value:function avgPool3dBackprop(dy,x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,x],'avgPool3dBackprop');var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=effectiveFilterDepth-1-convInfo.padInfo.front;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var dx=dist[\"buffer\"](x.shape,'float32');var avgMultiplier=1/(filterDepth*filterHeight*filterWidth);var dyBuf=this.bufferSync(dy);for(var batch=0;batch<convInfo.batchSize;++batch){for(var channel=0;channel<convInfo.inChannels;++channel){for(var dxDepth=0;dxDepth<convInfo.inDepth;++dxDepth){for(var dxRow=0;dxRow<convInfo.inHeight;++dxRow){for(var dxCol=0;dxCol<convInfo.inWidth;++dxCol){// Shader code begins.\nvar dyDepthCorner=dxDepth-padFront;var dyRowCorner=dxRow-padTop;var dyColCorner=dxCol-padLeft;var dotProd=0;for(var wDepth=0;wDepth<effectiveFilterDepth;wDepth+=dilationDepth){var dyDepth=(dyDepthCorner+wDepth)/strideDepth;if(dyDepth<0||dyDepth>=convInfo.outDepth||Math.floor(dyDepth)!==dyDepth){continue;}for(var wRow=0;wRow<effectiveFilterHeight;wRow+=dilationHeight){var dyRow=(dyRowCorner+wRow)/strideHeight;if(dyRow<0||dyRow>=convInfo.outHeight||Math.floor(dyRow)!==dyRow){continue;}for(var wCol=0;wCol<effectiveFilterWidth;wCol+=dilationWidth){var dyCol=(dyColCorner+wCol)/strideWidth;if(dyCol<0||dyCol>=convInfo.outWidth||Math.floor(dyCol)!==dyCol){continue;}var pixel=dyBuf.get(batch,dyDepth,dyRow,dyCol,channel);dotProd+=pixel;}}}dx.set(dotProd*avgMultiplier,batch,dxDepth,dxRow,dxCol,channel);}}}}}return dx.toTensor();}},{key:\"maxPool3d\",value:function maxPool3d(x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'maxPool3d');return this.pool3d(x,convInfo,'max').toFloat();}},{key:\"maxPool3dPositions\",value:function maxPool3dPositions(x,convInfo){var maxPositions=dist[\"buffer\"](convInfo.outShape,'int32');var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=convInfo.padInfo.front;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var xBuf=this.bufferSync(x);for(var batch=0;batch<convInfo.batchSize;++batch){for(var channel=0;channel<convInfo.inChannels;++channel){for(var yDepth=0;yDepth<convInfo.outDepth;++yDepth){var xDepthCorner=yDepth*strideDepth-padFront;var xDepthMin=xDepthCorner;while(xDepthMin<0){xDepthMin+=dilationDepth;}var xDepthMax=Math.min(convInfo.inDepth,effectiveFilterDepth+xDepthCorner);for(var yRow=0;yRow<convInfo.outHeight;++yRow){var xRowCorner=yRow*strideHeight-padTop;var xRowMin=xRowCorner;while(xRowMin<0){xRowMin+=dilationHeight;}var xRowMax=Math.min(convInfo.inHeight,effectiveFilterHeight+xRowCorner);for(var yCol=0;yCol<convInfo.outWidth;++yCol){var xColCorner=yCol*strideWidth-padLeft;var xColMin=xColCorner;while(xColMin<0){xColMin+=dilationWidth;}var xColMax=Math.min(convInfo.inWidth,effectiveFilterWidth+xColCorner);// Shader code begins\nvar maxValue=Number.NEGATIVE_INFINITY;var maxPosition=-1;for(var xDepth=xDepthMin;xDepth<xDepthMax;xDepth+=dilationDepth){var wDepth=xDepth-xDepthCorner;for(var xRow=xRowMin;xRow<xRowMax;xRow+=dilationHeight){var wRow=xRow-xRowCorner;for(var xCol=xColMin;xCol<xColMax;xCol+=dilationWidth){var wCol=xCol-xColCorner;var pixel=xBuf.get(batch,xDepth,xRow,xCol,channel);if(pixel>=maxValue){maxValue=pixel;maxPosition=wDepth*effectiveFilterHeight*effectiveFilterWidth+wRow*effectiveFilterHeight+wCol;}}}}maxPositions.set(maxPosition,batch,yDepth,yRow,yCol,channel);}}}}}return maxPositions.toTensor();}},{key:\"maxPool3dBackprop\",value:function maxPool3dBackprop(dy,x,y,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])([x,y],'maxPool3dBackprop');var maxPositions=this.maxPool3dPositions(x,convInfo);var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=effectiveFilterDepth-1-convInfo.padInfo.front;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var dx=dist[\"buffer\"](x.shape,'float32');var maxPosBuf=this.bufferSync(maxPositions);var dyBuf=this.bufferSync(dy);for(var batch=0;batch<convInfo.batchSize;++batch){for(var channel=0;channel<convInfo.inChannels;++channel){for(var dxDepth=0;dxDepth<convInfo.inDepth;++dxDepth){for(var dxRow=0;dxRow<convInfo.inHeight;++dxRow){for(var dxCol=0;dxCol<convInfo.inWidth;++dxCol){// Shader code begins\nvar dyDepthCorner=dxDepth-padFront;var dyRowCorner=dxRow-padTop;var dyColCorner=dxCol-padLeft;var dotProd=0;for(var wDepth=0;wDepth<effectiveFilterDepth;wDepth+=dilationDepth){var dyDepth=(dyDepthCorner+wDepth)/strideDepth;if(dyDepth<0||dyDepth>=convInfo.outDepth||Math.floor(dyDepth)!==dyDepth){continue;}for(var wRow=0;wRow<effectiveFilterHeight;wRow+=dilationHeight){var dyRow=(dyRowCorner+wRow)/strideHeight;if(dyRow<0||dyRow>=convInfo.outHeight||Math.floor(dyRow)!==dyRow){continue;}for(var wCol=0;wCol<effectiveFilterWidth;wCol+=dilationWidth){var dyCol=(dyColCorner+wCol)/strideWidth;if(dyCol<0||dyCol>=convInfo.outWidth||Math.floor(dyCol)!==dyCol){continue;}var maxPos=effectiveFilterDepth*effectiveFilterHeight*effectiveFilterWidth-1-maxPosBuf.get(batch,dyDepth,dyRow,dyCol,channel);var curPos=wDepth*effectiveFilterHeight*effectiveFilterWidth+wRow*effectiveFilterWidth+wCol;var mask=maxPos===curPos?1:0;if(mask===0){continue;}var pixel=dyBuf.get(batch,dyDepth,dyRow,dyCol,channel);dotProd+=pixel*mask;}}}dx.set(dotProd,batch,dxDepth,dxRow,dxCol,channel);}}}}}return dx.toTensor();}},{key:\"cast\",value:function cast(x,dtype){return dist[\"backend_util\"].castTensor(x,dtype,this);}},{key:\"reshape\",value:function reshape(x,shape){return dist[\"backend_util\"].reshapeTensor(x,shape);}},{key:\"avgPool\",value:function avgPool(x,convInfo){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'avgPool');Object(cpu_util[\"a\"/* assertNotComplex */])(x,'maxPool');var xValues=this.readSync(x.dataId);return Object(pool_utils[\"b\"/* pool */])(xValues,x.shape,x.dtype,x.strides,convInfo,'avg').toTensor().toFloat();}},{key:\"resizeBilinear\",value:function resizeBilinear(x,newHeight,newWidth,alignCorners){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'resizeBilinear');var _x$shape=_slicedToArray(x.shape,4),batch=_x$shape[0],oldHeight=_x$shape[1],oldWidth=_x$shape[2],numChannels=_x$shape[3];var xValues=this.readSync(x.dataId);var result=new Float32Array(dist[\"util\"].sizeFromShape([batch,newHeight,newWidth,numChannels]));var effectiveInputSize=[alignCorners&&newHeight>1?oldHeight-1:oldHeight,alignCorners&&newWidth>1?oldWidth-1:oldWidth];var effectiveOutputSize=[alignCorners&&newHeight>1?newHeight-1:newHeight,alignCorners&&newWidth>1?newWidth-1:newWidth];var outputIdx=0;var effectiveRowSizeRatio=effectiveInputSize[0]/effectiveOutputSize[0];var effectiveColSizeRatio=effectiveInputSize[1]/effectiveOutputSize[1];for(var b=0;b<batch;b++){for(var r=0;r<newHeight;r++){var sourceFracRow=effectiveRowSizeRatio*r;var sourceRowFloor=Math.floor(sourceFracRow);var rowFrac=sourceFracRow-sourceRowFloor;var sourceRowCeil=Math.min(oldHeight-1,Math.ceil(sourceFracRow));var topRowOffset=b*x.strides[0]+sourceRowFloor*x.strides[1];var botRowOffset=b*x.strides[0]+sourceRowCeil*x.strides[1];for(var c=0;c<newWidth;c++){var sourceFracCol=effectiveColSizeRatio*c;var sourceColFloor=Math.floor(sourceFracCol);var colFrac=sourceFracCol-sourceColFloor;var sourceColCeil=Math.min(oldWidth-1,Math.ceil(sourceFracCol));var topLeftOffest=topRowOffset+sourceColFloor*x.strides[2];var botLeftOffset=botRowOffset+sourceColFloor*x.strides[2];var topRightOffset=topRowOffset+sourceColCeil*x.strides[2];var botRightOffest=botRowOffset+sourceColCeil*x.strides[2];for(var d=0;d<numChannels;d++){// Begin shader.\n// Compute the fractional index of the source.\nvar topLeft=xValues[topLeftOffest+d];var bottomLeft=xValues[botLeftOffset+d];var topRight=xValues[topRightOffset+d];var bottomRight=xValues[botRightOffest+d];var top=topLeft+(topRight-topLeft)*colFrac;var bottom=bottomLeft+(bottomRight-bottomLeft)*colFrac;var newValue=top+(bottom-top)*rowFrac;result[outputIdx++]=newValue;}}}}return dist[\"tensor\"](result,[batch,newHeight,newWidth,numChannels]);}},{key:\"resizeBilinearBackprop\",value:function resizeBilinearBackprop(dy,x,alignCorners){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,x],'resizeBilinearBackprop');var _x$shape2=_slicedToArray(x.shape,4),batch=_x$shape2[0],xHeight=_x$shape2[1],xWidth=_x$shape2[2],depth=_x$shape2[3];var _dy$shape=_slicedToArray(dy.shape,3),yHeight=_dy$shape[1],yWidth=_dy$shape[2];var output=new Float32Array(batch*xHeight*xWidth*depth);// In the backwards pass, we want to find the pixels that were generated\n// for each pixel in the input image the forward pass and add the\n// corresponding coefficient from dy to the gradient (with some\n// interpolation).\nvar effectiveXSize=[alignCorners&&yHeight>1?xHeight-1:xHeight,alignCorners&&yWidth>1?xWidth-1:xWidth];var effectiveYSize=[alignCorners&&yHeight>1?yHeight-1:yHeight,alignCorners&&yWidth>1?yWidth-1:yWidth];var heightScale=effectiveXSize[0]/effectiveYSize[0];var widthScale=effectiveXSize[1]/effectiveYSize[1];// Reference implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\nvar dyValues=this.readSync(dy.dataId);var offset=0;for(var b=0;b<batch;b++){var bOffset=b*x.strides[0];for(var r=0;r<yHeight;r++){var dxR=r*heightScale;var topDxRIndex=Math.floor(dxR);var bottomDxRIndex=Math.min(Math.ceil(dxR),xHeight-1);var topDxROffset=bOffset+topDxRIndex*x.strides[1];var bottomDxROffset=bOffset+bottomDxRIndex*x.strides[1];var dxRLerp=dxR-topDxRIndex;var inverseDxRLerp=1.0-dxRLerp;for(var c=0;c<yWidth;c++){var dxC=c*widthScale;var leftDxCIndex=Math.floor(dxC);var rightDxCIndex=Math.min(Math.ceil(dxC),xWidth-1);var dxCLerp=dxC-leftDxCIndex;var inverseDxCLerp=1.0-dxCLerp;var topLeftRCOffset=topDxROffset+leftDxCIndex*x.strides[2];var topRightRCOffset=topDxROffset+rightDxCIndex*x.strides[2];var bottomLeftRCOffset=bottomDxROffset+leftDxCIndex*x.strides[2];var bottomRightRCOffset=bottomDxROffset+rightDxCIndex*x.strides[2];var inverseDxRLerpTimesInverseDxCLerp=inverseDxRLerp*inverseDxCLerp;var inverseDxRLerpTimesDxCLerp=inverseDxRLerp*dxCLerp;var dxRLerpTimesInverseDxCLerp=dxRLerp*inverseDxCLerp;var dxRLerpTimesDxCLerp=dxRLerp*dxCLerp;for(var d=0;d<depth;d++){var dyVal=dyValues[offset++];output[topLeftRCOffset+d]+=dyVal*inverseDxRLerpTimesInverseDxCLerp;output[topRightRCOffset+d]+=dyVal*inverseDxRLerpTimesDxCLerp;output[bottomLeftRCOffset+d]+=dyVal*dxRLerpTimesInverseDxCLerp;output[bottomRightRCOffset+d]+=dyVal*dxRLerpTimesDxCLerp;}}}}return dist[\"tensor4d\"](output,[batch,xWidth,xHeight,depth],x.dtype);}},{key:\"resizeNearestNeighbor\",value:function resizeNearestNeighbor(x,newHeight,newWidth,alignCorners){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'resizeNearestNeighbor');var _x$shape3=_slicedToArray(x.shape,4),batch=_x$shape3[0],oldHeight=_x$shape3[1],oldWidth=_x$shape3[2],numChannels=_x$shape3[3];var xValues=this.readSync(x.dataId);var output=new Float32Array(batch*newHeight*newWidth*numChannels);var effectiveInputSize=[alignCorners&&newHeight>1?oldHeight-1:oldHeight,alignCorners&&newWidth>1?oldWidth-1:oldWidth];var effectiveOutputSize=[alignCorners&&newHeight>1?newHeight-1:newHeight,alignCorners&&newWidth>1?newWidth-1:newWidth];var effectiveRowSizeRatio=effectiveInputSize[0]/effectiveOutputSize[0];var effectiveColSizeRatio=effectiveInputSize[1]/effectiveOutputSize[1];var outputOffset=0;for(var b=0;b<batch;b++){var batchOffset=b*x.strides[0];for(var r=0;r<newHeight;r++){var sourceFracRow=effectiveRowSizeRatio*r;var sourceNearestRow=Math.min(oldHeight-1,alignCorners?Math.round(sourceFracRow):Math.floor(sourceFracRow));var rowOffset=batchOffset+sourceNearestRow*x.strides[1];for(var c=0;c<newWidth;c++){var sourceFracCol=effectiveColSizeRatio*c;var sourceNearestCol=Math.min(oldWidth-1,alignCorners?Math.round(sourceFracCol):Math.floor(sourceFracCol));var colOffset=rowOffset+sourceNearestCol*x.strides[2];for(var d=0;d<numChannels;d++){// Begin shader.\n// Compute the fractional index of the source.\nvar newVal=xValues[colOffset+d];output[outputOffset++]=newVal;}}}}return dist[\"tensor\"](output,[batch,newHeight,newWidth,numChannels],x.dtype);}},{key:\"resizeNearestNeighborBackprop\",value:function resizeNearestNeighborBackprop(dy,x,alignCorners){Object(cpu_util[\"a\"/* assertNotComplex */])([dy,x],'resizeNearestNeighborBackprop');var _x$shape4=_slicedToArray(x.shape,4),batch=_x$shape4[0],xHeight=_x$shape4[1],xWidth=_x$shape4[2],depth=_x$shape4[3];var _dy$shape2=_slicedToArray(dy.shape,3),yHeight=_dy$shape2[1],yWidth=_dy$shape2[2];var output=new Float32Array(batch*xHeight*xWidth*depth);var dyValues=this.readSync(dy.dataId);// In the backwards pass, we want to find the pixels that were generated\n// for each pixel in the input image the forward pass\nvar effectiveXSize=[alignCorners&&yHeight>1?xHeight-1:xHeight,alignCorners&&yWidth>1?xWidth-1:xWidth];var effectiveYSize=[alignCorners&&yHeight>1?yHeight-1:yHeight,alignCorners&&yWidth>1?yWidth-1:yWidth];var heightScale=effectiveXSize[0]/effectiveYSize[0];var widthScale=effectiveXSize[1]/effectiveYSize[1];var invHeightScale=1/heightScale;var invWidthScale=1/widthScale;// This defines the size of the window of values around a particular\n// index in dy that we want to search for contributions to dx.\nvar winHeight=Math.ceil(invHeightScale)*2+2;var winWidth=Math.ceil(invWidthScale)*2+2;// Loop over the output space.\nfor(var b=0;b<batch;b++){var batchOffset=b*x.strides[0];for(var r=0;r<xHeight;r++){var rowOffset=batchOffset+r*x.strides[1];// Compute bounds for where in dy we will look\nvar startRLerp=Math.floor(r*invHeightScale);var startDyR=Math.floor(startRLerp-winHeight/2);for(var c=0;c<xWidth;c++){var colOffset=rowOffset+c*x.strides[2];// Compute bounds for where in dy we will look\nvar startCLerp=Math.floor(c*invWidthScale);var startDyC=Math.floor(startCLerp-winWidth/2);for(var d=0;d<depth;d++){var accum=0;// loop over dy\nfor(var dyRIndex=0;dyRIndex<winHeight;dyRIndex++){var dyR=dyRIndex+startDyR;// Guard against the window exceeding the bounds of dy\nif(dyR<0||dyR>=yHeight){continue;}var dyROffset=batchOffset+dyR*dy.strides[1];var sourceFracRow=dyR*heightScale;var sourceNearestRow=Math.min(xHeight-1,alignCorners?Math.round(sourceFracRow):Math.floor(sourceFracRow));if(r!==sourceNearestRow){continue;}for(var dyCIndex=0;dyCIndex<winWidth;dyCIndex++){var dyC=dyCIndex+startDyC;// Guard against the window exceeding the bounds of dy\nif(dyC<0||dyC>=yWidth){continue;}var dyCOffset=dyROffset+dyC*dy.strides[2];var sourceFracCol=dyC*widthScale;var sourceNearestCol=Math.min(xWidth-1,alignCorners?Math.round(sourceFracCol):Math.floor(sourceFracCol));if(c===sourceNearestCol){accum+=dyValues[dyCOffset+d];}}}output[colOffset+d]=accum;}}}}return dist[\"tensor4d\"](output,x.shape,x.dtype);}},{key:\"batchNorm\",value:function batchNorm(x,mean,variance,offset,scale,varianceEpsilon){Object(cpu_util[\"a\"/* assertNotComplex */])([x,mean,variance,scale,offset],'batchNorm');var xVals=this.readSync(x.dataId);var mVals=this.readSync(mean.dataId);var varVals=this.readSync(variance.dataId);var sVals=scale?this.readSync(scale.dataId):new Float32Array([1]);var offVals=offset?this.readSync(offset.dataId):new Float32Array([0]);var outVals=new Float32Array(xVals.length);var offValsLength=offVals.length;var sValsLength=sVals.length;var varValsLength=varVals.length;var mValsLength=mVals.length;var offi=0;var mi=0;var si=0;var vi=0;for(var i=0;i<xVals.length;++i){outVals[i]=offVals[offi++]+(xVals[i]-mVals[mi++])*sVals[si++]/Math.sqrt(varVals[vi++]+varianceEpsilon);if(offi>=offValsLength){offi=0;}if(mi>=mValsLength){mi=0;}if(si>=sValsLength){si=0;}if(vi>=varValsLength){vi=0;}}return dist[\"tensor4d\"](outVals,x.shape);}},{key:\"localResponseNormalization4D\",value:function localResponseNormalization4D(x,depthRadius,bias,alpha,beta){Object(cpu_util[\"a\"/* assertNotComplex */])(x,'localResponseNormalization4D');var channels=x.shape[3];var maxD=channels-1;var xValues=this.readSync(x.dataId);var size=x.size;var result=new Float32Array(size);function sumAcrossChannels(offset){var currentChannel=offset%channels;var beginSumOffset=offset-currentChannel+Math.max(0,currentChannel-depthRadius);var endSumOffset=offset-currentChannel+Math.min(currentChannel+depthRadius,maxD);var sum=0.0;for(;beginSumOffset<=endSumOffset;beginSumOffset++){var z=xValues[beginSumOffset];sum+=z*z;}return sum;}for(var offset=0;offset<size;offset++){var sum=sumAcrossChannels(offset);var val=xValues[offset]*Math.pow(bias+alpha*sum,-beta);result[offset]=val;}return dist[\"tensor4d\"](result,x.shape);}},{key:\"LRNGrad\",value:function LRNGrad(dy,inputImage,outputImage,depthRadius,bias,alpha,beta){Object(cpu_util[\"a\"/* assertNotComplex */])(dy,'LRNGrad');var channels=dy.shape[3];var dyValues=this.readSync(dy.dataId);var inputImageValues=this.readSync(inputImage.dataId);var outputImageValues=this.readSync(outputImage.dataId);var result=new Float32Array(dy.size);var size=dy.size;for(var offset=0;offset<size;offset++){var currentChannel=offset%channels;var depthBegin=offset-currentChannel+Math.max(0,currentChannel-depthRadius);var depthEnd=offset-currentChannel+Math.min(channels,currentChannel+depthRadius+1);var norm=0;for(var k=depthBegin;k<depthEnd;k++){norm+=Math.pow(inputImageValues[k],2);}norm=alpha*norm+bias;for(var _k4=depthBegin;_k4<depthEnd;_k4++){var dyi=-2*alpha*beta*inputImageValues[_k4]*outputImageValues[offset]/norm;if(offset===_k4){dyi+=Math.pow(norm,-beta);}dyi*=dyValues[offset];result[_k4]+=dyi;}}return dist[\"tensor4d\"](result,dy.shape);}},{key:\"multinomial\",value:function multinomial(logits,normalized,numSamples,seed){Object(cpu_util[\"a\"/* assertNotComplex */])(logits,'multinomial');var probabilities=normalized?logits:dist[\"softmax\"](logits);var batchSize=probabilities.shape[0];var numEvents=probabilities.shape[1];var res=dist[\"zeros\"]([batchSize,numSamples],'int32');var resVals=this.readSync(res.dataId);var probVals=this.readSync(probabilities.dataId);for(var b=0;b<batchSize;++b){var offset=b*numEvents;// The cdf won't include the last event. It will be implicit if no other\n// event happened.\nvar cdf=new Float32Array(numEvents-1);cdf[0]=probVals[offset];for(var event=1;event<cdf.length;++event){cdf[event]=cdf[event-1]+probVals[offset+event];}var random=seedrandom[\"alea\"](seed.toString());var outOffset=b*numSamples;for(var sampleId=0;sampleId<numSamples;++sampleId){var r=random();// Assume last event happened by default.\nresVals[outOffset+sampleId]=cdf.length;for(var _event=0;_event<cdf.length;_event++){if(r<cdf[_event]){resVals[outOffset+sampleId]=_event;break;}}}}return res;}},{key:\"oneHot\",value:function oneHot(indices,depth,onValue,offValue){Object(cpu_util[\"a\"/* assertNotComplex */])(indices,'oneHot');var res=new Float32Array(indices.size*depth);res.fill(offValue);var indicesVal=this.readSync(indices.dataId);for(var event=0;event<indices.size;++event){if(indicesVal[event]>=0&&indicesVal[event]<depth){res[event*depth+indicesVal[event]]=onValue;}}return dist[\"tensor2d\"](res,[indices.size,depth],'int32');}},{key:\"nonMaxSuppression\",value:function nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold){Object(cpu_util[\"a\"/* assertNotComplex */])(boxes,'nonMaxSuppression');var boxesVals=this.readSync(boxes.dataId);var scoresVals=this.readSync(scores.dataId);return nonMaxSuppressionV3(boxesVals,scoresVals,maxOutputSize,iouThreshold,scoreThreshold);}},{key:\"fft\",value:function fft(x){return this.fftBatch(x,false);}},{key:\"ifft\",value:function ifft(x){return this.fftBatch(x,true);}/**\r\n     * Calculate FFT of inner most elements of batch tensor.\r\n     */},{key:\"fftBatch\",value:function fftBatch(x,inverse){var batch=x.shape[0];var innerDim=x.shape[1];// Collects real and imaginary values separately.\nvar realResult=dist[\"buffer\"](x.shape,'float32');var imagResult=dist[\"buffer\"](x.shape,'float32');var real=dist[\"real\"](x).as2D(batch,innerDim);var imag=dist[\"imag\"](x).as2D(batch,innerDim);for(var b=0;b<batch;b++){// TODO: Support slice ops for complex type.\nvar r=real.slice([b,0],[1,innerDim]);var i=imag.slice([b,0],[1,innerDim]);var input=dist[\"complex\"](r,i);// Run FFT by batch element.\nvar res=this.readSync(this.fftImpl(input,inverse).dataId);for(var d=0;d<innerDim;d++){var c=dist[\"backend_util\"].getComplexWithIndex(res,d);realResult.values[b*innerDim+d]=c.real;imagResult.values[b*innerDim+d]=c.imag;}}var t=dist[\"complex\"](realResult.toTensor(),imagResult.toTensor());return t.as2D(batch,innerDim);}},{key:\"fftImpl\",value:function fftImpl(x,inverse){var x1D=x.as1D();var n=x1D.size;if(this.isExponentOf2(n)){var result=this.fftRadix2(x1D,n,inverse).as2D(x.shape[0],x.shape[1]);if(inverse){result=dist[\"complex\"](dist[\"real\"](result).div(dist[\"scalar\"](n)),dist[\"imag\"](result).div(dist[\"scalar\"](n)));}return result;}else{var data=this.readSync(x.dataId);var rawOutput=this.fourierTransformByMatmul(data,n,inverse);var output=dist[\"backend_util\"].splitRealAndImagArrays(rawOutput);return dist[\"complex\"](output.real,output.imag).as2D(x.shape[0],x.shape[1]);}}},{key:\"isExponentOf2\",value:function isExponentOf2(size){return(size&size-1)===0;}// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n},{key:\"fftRadix2\",value:function fftRadix2(input,size,inverse){if(size===1){return input;}var data=this.readSync(input.dataId);var half=size/2;var evenComplex=dist[\"backend_util\"].complexWithEvenIndex(data);var evenTensor=dist[\"complex\"](evenComplex.real,evenComplex.imag).as1D();var oddComplex=dist[\"backend_util\"].complexWithOddIndex(data);var oddTensor=dist[\"complex\"](oddComplex.real,oddComplex.imag).as1D();// Recursive call for half part of original input.\nevenTensor=this.fftRadix2(evenTensor,half,inverse);oddTensor=this.fftRadix2(oddTensor,half,inverse);var e=dist[\"backend_util\"].exponents(size,inverse);var exponent=dist[\"complex\"](e.real,e.imag).mul(oddTensor);var addPart=evenTensor.add(exponent);var subPart=evenTensor.sub(exponent);var realTensor=dist[\"real\"](addPart).concat(dist[\"real\"](subPart));var imagTensor=dist[\"imag\"](addPart).concat(dist[\"imag\"](subPart));return dist[\"complex\"](realTensor,imagTensor).as1D();}// Calculate fourier transform by multplying sinusoid matrix.\n},{key:\"fourierTransformByMatmul\",value:function fourierTransformByMatmul(data,size,inverse){var ret=new Float32Array(size*2);// TODO: Use matmul instead once it supports complex64 type.\nfor(var r=0;r<size;r++){var real=0.0;var imag=0.0;for(var c=0;c<size;c++){var e=dist[\"backend_util\"].exponent(r*c,size,inverse);var term=dist[\"backend_util\"].getComplexWithIndex(data,c);real+=term.real*e.real-term.imag*e.imag;imag+=term.real*e.imag+term.imag*e.real;}if(inverse){real/=size;imag/=size;}dist[\"backend_util\"].assignToTypedArray(ret,real,imag,r);}return ret;}},{key:\"depthToSpace\",value:function depthToSpace(x,blockSize,dataFormat){dist[\"util\"].assert(dataFormat==='NHWC',function(){return\"Only NHWC dataFormat supported on CPU for depthToSpace. Got \".concat(dataFormat);});dist[\"util\"].assert(blockSize>1,function(){return\"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);});var batchSize=x.shape[0];var inputHeight=x.shape[1];var inputWidth=x.shape[2];var inputDepth=x.shape[3];var outputHeight=inputHeight*blockSize;var outputWidth=inputWidth*blockSize;var outputDepth=inputDepth/(blockSize*blockSize);var xValues=this.readSync(x.dataId);var result=new Float32Array(batchSize*outputHeight*outputWidth*outputDepth);var outputIdx=0;for(var b=0;b<batchSize;++b){for(var h=0;h<outputHeight;++h){var inH=Math.floor(h/blockSize);var offsetH=h%blockSize;for(var w=0;w<outputWidth;++w){var inW=Math.floor(w/blockSize);var offsetW=w%blockSize;var offsetD=(offsetH*blockSize+offsetW)*outputDepth;for(var d=0;d<outputDepth;++d){var inD=d+offsetD;var inputIdx=inD+inputDepth*(inW+inputWidth*(inH+inputHeight*b));result[outputIdx++]=xValues[inputIdx];}}}}return dist[\"tensor4d\"](result,[batchSize,outputHeight,outputWidth,outputDepth]);}},{key:\"broadcastedBinaryOp\",value:function broadcastedBinaryOp(a,b,dtype,op){var newShape=dist[\"backend_util\"].assertAndGetBroadcastShape(a.shape,b.shape);var result=dist[\"buffer\"](newShape,dtype);var aVals=this.readSync(a.dataId);var bVals=this.readSync(b.dataId);var aBroadcastDims=dist[\"backend_util\"].getBroadcastDims(a.shape,newShape);var bBroadcastDims=dist[\"backend_util\"].getBroadcastDims(b.shape,newShape);var resVals=result.values;if(aBroadcastDims.length+bBroadcastDims.length===0){for(var i=0;i<resVals.length;++i){resVals[i]=op(aVals[i%aVals.length],bVals[i%bVals.length]);}}else{var aBuf=this.bufferSync(a);var bBuf=this.bufferSync(b);var _loop10=function _loop10(_i41){var loc=result.indexToLoc(_i41);var aLoc=loc.slice(-a.rank);aBroadcastDims.forEach(function(d){return aLoc[d]=0;});var aIndex=aBuf.locToIndex(aLoc);var bLoc=loc.slice(-b.rank);bBroadcastDims.forEach(function(d){return bLoc[d]=0;});var bIndex=bBuf.locToIndex(bLoc);resVals[_i41]=op(aVals[aIndex],bVals[bIndex]);};for(var _i41=0;_i41<resVals.length;++_i41){_loop10(_i41);}}return result.toTensor();}},{key:\"broadcastedBinaryComplexOp\",value:function broadcastedBinaryComplexOp(a,b,op){var newShape=dist[\"backend_util\"].assertAndGetBroadcastShape(a.shape,b.shape);var realResult=dist[\"buffer\"](newShape,'float32');var imagResult=dist[\"buffer\"](newShape,'float32');var aVals=this.readSync(a.dataId);var bVals=this.readSync(b.dataId);var aBroadcastDims=dist[\"backend_util\"].getBroadcastDims(a.shape,newShape);var bBroadcastDims=dist[\"backend_util\"].getBroadcastDims(b.shape,newShape);var realVals=realResult.values;var imagVals=imagResult.values;if(aBroadcastDims.length+bBroadcastDims.length===0){for(var i=0;i<realVals.length;i++){var aIdx=i%aVals.length;var bIdx=i%bVals.length;var result=op(aVals[aIdx*2],aVals[aIdx*2+1],bVals[bIdx*2],bVals[bIdx*2+1]);realVals[i]=result.real;imagVals[i]=result.imag;}}else{var aRealBuf=this.bufferSync(this.data.get(a.dataId).complexTensors.real);var bRealBuf=this.bufferSync(this.data.get(b.dataId).complexTensors.real);var _loop11=function _loop11(_i42){var loc=realResult.indexToLoc(_i42);var aLoc=loc.slice(-a.rank);aBroadcastDims.forEach(function(d){return aLoc[d]=0;});var aIndex=aRealBuf.locToIndex(aLoc);var bLoc=loc.slice(-b.rank);bBroadcastDims.forEach(function(d){return bLoc[d]=0;});var bIndex=bRealBuf.locToIndex(bLoc);var opResult=op(aVals[aIndex*2],aVals[aIndex*2+1],bVals[bIndex*2],bVals[bIndex*2+1]);realVals[_i42]=opResult.real;imagVals[_i42]=opResult.imag;};for(var _i42=0;_i42<realVals.length;_i42++){_loop11(_i42);}}return this.complex(realResult.toTensor(),imagResult.toTensor());}},{key:\"split\",value:function split(x,sizeSplits,axis){return _split(x,sizeSplits,axis);}},{key:\"dispose\",value:function dispose(){}},{key:\"floatPrecision\",value:function floatPrecision(){return 32;}/** Returns the smallest representable number.  */},{key:\"epsilon\",value:function epsilon(){return _get(_getPrototypeOf(backend_cpu_MathBackendCPU.prototype),\"epsilon\",this).call(this);}},{key:\"cropAndResize\",value:function cropAndResize(images,boxes,boxIndex,cropSize,method,extrapolationValue){var _images$shape=_slicedToArray(images.shape,4),batch=_images$shape[0],imageHeight=_images$shape[1],imageWidth=_images$shape[2],numChannels=_images$shape[3];var numBoxes=boxes.shape[0];var _cropSize=_slicedToArray(cropSize,2),cropHeight=_cropSize[0],cropWidth=_cropSize[1];var output=dist[\"buffer\"]([numBoxes,cropHeight,cropWidth,numChannels],'float32');var boxVals=this.readSync(boxes.dataId);var boxIndVals=this.readSync(boxIndex.dataId);var imageVals=this.readSync(images.dataId);var inStride=images.strides;// to calculate flat indexes into image\nvar outStride=output.strides;// to calculate flat indexes into output\n// Reference implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\nfor(var b=0;b<numBoxes;b++){var startInd=b*4;var y1=boxVals[startInd];var x1=boxVals[startInd+1];var y2=boxVals[startInd+2];var x2=boxVals[startInd+3];var bInd=boxIndVals[b];if(bInd>=batch){continue;}var heightScale=cropHeight>1?(y2-y1)*(imageHeight-1)/(cropHeight-1):0;var widthScale=cropWidth>1?(x2-x1)*(imageWidth-1)/(cropWidth-1):0;for(var y=0;y<cropHeight;y++){var yInd=cropHeight>1?y1*(imageHeight-1)+y*heightScale:0.5*(y1+y2)*(imageHeight-1);if(yInd<0||yInd>imageHeight-1){for(var x=0;x<cropWidth;x++){for(var c=0;c<numChannels;c++){var ind=c+x*outStride[2]+y*outStride[1]+b*outStride[0];output.values[ind]=extrapolationValue;}}continue;}if(method==='bilinear'){var topInd=Math.floor(yInd);var bottomInd=Math.ceil(yInd);var yLerp=yInd-topInd;for(var _x74=0;_x74<cropWidth;_x74++){var xInd=cropWidth>1?x1*(imageWidth-1)+_x74*widthScale:0.5*(x1+x2)*(imageWidth-1);if(xInd<0||xInd>imageWidth-1){for(var _c=0;_c<numChannels;_c++){var _ind=_c+_x74*outStride[2]+y*outStride[1]+b*outStride[0];output.values[_ind]=extrapolationValue;}continue;}var leftInd=Math.floor(xInd);var rightInd=Math.ceil(xInd);var xLerp=xInd-leftInd;for(var _c2=0;_c2<numChannels;_c2++){var _ind2=_c2+leftInd*inStride[2]+topInd*inStride[1]+bInd*inStride[0];var topLeft=imageVals[_ind2];_ind2=_c2+rightInd*inStride[2]+topInd*inStride[1]+bInd*inStride[0];var topRight=imageVals[_ind2];_ind2=_c2+leftInd*inStride[2]+bottomInd*inStride[1]+bInd*inStride[0];var bottomLeft=imageVals[_ind2];_ind2=_c2+rightInd*inStride[2]+bottomInd*inStride[1]+bInd*inStride[0];var bottomRight=imageVals[_ind2];var top=topLeft+(topRight-topLeft)*xLerp;var bottom=bottomLeft+(bottomRight-bottomLeft)*xLerp;_ind2=_c2+_x74*outStride[2]+y*outStride[1]+b*outStride[0];output.values[_ind2]=top+(bottom-top)*yLerp;}}}else{// method == \"nearest\"\nfor(var _x75=0;_x75<cropWidth;++_x75){var _xInd=cropWidth>1?x1*(imageWidth-1)+_x75*widthScale:0.5*(x1+x2)*(imageWidth-1);if(_xInd<0||_xInd>imageWidth-1){for(var _c3=0;_c3<numChannels;_c3++){var _ind3=_c3+_x75*outStride[2]+y*outStride[1]+b*outStride[0];output.values[_ind3]=extrapolationValue;}continue;}var closestX=Math.round(_xInd);var closestY=Math.round(yInd);for(var _c4=0;_c4<numChannels;_c4++){var inInd=_c4+closestX*inStride[2]+closestY*inStride[1]+bInd*inStride[0];var outInd=_c4+_x75*outStride[2]+y*outStride[1]+b*outStride[0];output.values[outInd]=imageVals[inInd];}}}}}return output.toTensor();}},{key:\"sparseToDense\",value:function sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue){var _dist$backend_util$ca=dist[\"backend_util\"].calculateShapes(sparseValues,sparseIndices,outputShape),sliceRank=_dist$backend_util$ca.sliceRank,numUpdates=_dist$backend_util$ca.numUpdates,sliceSize=_dist$backend_util$ca.sliceSize,strides=_dist$backend_util$ca.strides,outputSize=_dist$backend_util$ca.outputSize;var sumDupeIndices=false;return this.scatter(sparseIndices,sparseValues,outputShape,outputSize,sliceSize,numUpdates,sliceRank,strides,defaultValue,sumDupeIndices);}},{key:\"gatherND\",value:function gatherND(x,indices){var indicesShape=indices.shape;var sliceRank=indicesShape[indicesShape.length-1];var _dist$backend_util$pr=dist[\"backend_util\"].prepareAndValidate(x,indices),_dist$backend_util$pr2=_slicedToArray(_dist$backend_util$pr,4),resultShape=_dist$backend_util$pr2[0],numSlices=_dist$backend_util$pr2[1],sliceSize=_dist$backend_util$pr2[2],strides=_dist$backend_util$pr2[3];if(numSlices===0){return dist[\"tensor\"]([],resultShape,x.dtype);}var buffer=new dist[\"TensorBuffer\"]([numSlices,sliceSize],x.dtype);var indicesData=this.readSync(indices.dataId);var xData=this.readSync(x.dataId);for(var i=0;i<numSlices;i++){var index=[];var flattenIndex=0;for(var j=0;j<sliceRank;j++){var dim=indicesData[i*sliceRank+j];flattenIndex+=dim*strides[j];index.push(dim);}if(flattenIndex<0||flattenIndex>=x.size/sliceSize){throw new Error(\"Invalid indices: \".concat(index,\" does not index into \").concat(x.shape));}for(var k=0;k<sliceSize;k++){buffer.values[i*sliceSize+k]=xData[flattenIndex*sliceSize+k];}}return buffer.toTensor().reshape(resultShape);}},{key:\"scatterND\",value:function scatterND(indices,updates,shape){var _dist$backend_util$ca2=dist[\"backend_util\"].calculateShapes(updates,indices,shape),sliceRank=_dist$backend_util$ca2.sliceRank,numUpdates=_dist$backend_util$ca2.numUpdates,sliceSize=_dist$backend_util$ca2.sliceSize,strides=_dist$backend_util$ca2.strides,outputSize=_dist$backend_util$ca2.outputSize;var defaultValue=dist[\"scalar\"](0);var sumDupeIndices=true;return this.scatter(indices,updates,shape,outputSize,sliceSize,numUpdates,sliceRank,strides,defaultValue,sumDupeIndices);}},{key:\"fill\",value:function fill(shape,value,dtype){dtype=dtype||dist[\"util\"].inferDtype(value);var values=dist[\"util\"].getArrayFromDType(dtype,dist[\"util\"].sizeFromShape(shape));values.fill(value);return Object(dist[\"engine\"])().makeTensor(values,shape,dtype,this);}},{key:\"onesLike\",value:function onesLike(x){if(x.dtype==='string'){throw new Error('onesLike is not supported for string tensors');}else{return this.fill(x.shape,1,x.dtype);}}},{key:\"zerosLike\",value:function zerosLike(x){var values=dist[\"util\"].getArrayFromDType(x.dtype,dist[\"util\"].sizeFromShape(x.shape));return this.makeOutput(values,x.shape,x.dtype);}},{key:\"linspace\",value:function linspace(start,stop,num){return dist[\"backend_util\"].linspaceImpl(start,stop,num);}},{key:\"scatter\",value:function scatter(indices,updates,shape,outputSize,sliceSize,numUpdates,sliceRank,strides,defaultValue,sumDupeIndices){var flattenShape=[outputSize/sliceSize,sliceSize];var indicesData=this.readSync(indices.dataId);var updatesData=this.readSync(updates.dataId);if(outputSize===0){return dist[\"tensor\"]([],shape,updates.dtype);}var buffer=new dist[\"TensorBuffer\"](flattenShape,updates.dtype);buffer.values.fill(this.readSync(defaultValue.dataId)[0]);for(var i=0;i<numUpdates;i++){var index=[];var flattenIndex=0;for(var j=0;j<sliceRank;j++){var dim=indicesData[i*sliceRank+j];index.push(dim);flattenIndex+=dim*strides[j];}if(flattenIndex<0||flattenIndex>=outputSize/sliceSize){throw new Error(\"Invalid indices: \".concat(index,\" does not index into \").concat(shape));}for(var k=0;k<sliceSize;k++){if(sumDupeIndices){buffer.values[flattenIndex*sliceSize+k]+=updatesData[i*sliceSize+k];}else{buffer.values[flattenIndex*sliceSize+k]=updates.rank===0?updatesData[0]:updatesData[i*sliceSize+k];}}}return buffer.toTensor().reshape(shape);}}]);return backend_cpu_MathBackendCPU;}(dist[\"KernelBackend\"]);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nvar version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /*\r\n * base.ts contains all the exports from tfjs-backend-cpu\r\n * that do not trigger side effects.\r\n */ /***/},/* 32 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){var require;var require;/*!\r\n    localForage -- Offline Storage, Improved\r\n    Version 1.7.3\r\n    https://localforage.github.io/localForage\r\n    (c) 2013-2017 Mozilla, Apache License 2.0\r\n*/(function(f){if(true){module.exports=f();}else{ var g; }})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++){s(r[o]);}return s;}({1:[function(_dereq_,module,exports){(function(global){'use strict';var Mutation=global.MutationObserver||global.WebKitMutationObserver;var scheduleDrain;{if(Mutation){var called=0;var observer=new Mutation(nextTick);var element=global.document.createTextNode('');observer.observe(element,{characterData:true});scheduleDrain=function scheduleDrain(){element.data=called=++called%2;};}else if(!global.setImmediate&&typeof global.MessageChannel!=='undefined'){var channel=new global.MessageChannel();channel.port1.onmessage=nextTick;scheduleDrain=function scheduleDrain(){channel.port2.postMessage(0);};}else if('document'in global&&'onreadystatechange'in global.document.createElement('script')){scheduleDrain=function scheduleDrain(){// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\nvar scriptEl=global.document.createElement('script');scriptEl.onreadystatechange=function(){nextTick();scriptEl.onreadystatechange=null;scriptEl.parentNode.removeChild(scriptEl);scriptEl=null;};global.document.documentElement.appendChild(scriptEl);};}else{scheduleDrain=function scheduleDrain(){setTimeout(nextTick,0);};}}var draining;var queue=[];//named nextTick for less confusing stack traces\nfunction nextTick(){draining=true;var i,oldQueue;var len=queue.length;while(len){oldQueue=queue;queue=[];i=-1;while(++i<len){oldQueue[i]();}len=queue.length;}draining=false;}module.exports=immediate;function immediate(task){if(queue.push(task)===1&&!draining){scheduleDrain();}}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],2:[function(_dereq_,module,exports){'use strict';var immediate=_dereq_(1);/* istanbul ignore next */function INTERNAL(){}var handlers={};var REJECTED=['REJECTED'];var FULFILLED=['FULFILLED'];var PENDING=['PENDING'];module.exports=Promise;function Promise(resolver){if(typeof resolver!=='function'){throw new TypeError('resolver must be a function');}this.state=PENDING;this.queue=[];this.outcome=void 0;if(resolver!==INTERNAL){safelyResolveThenable(this,resolver);}}Promise.prototype[\"catch\"]=function(onRejected){return this.then(null,onRejected);};Promise.prototype.then=function(onFulfilled,onRejected){if(typeof onFulfilled!=='function'&&this.state===FULFILLED||typeof onRejected!=='function'&&this.state===REJECTED){return this;}var promise=new this.constructor(INTERNAL);if(this.state!==PENDING){var resolver=this.state===FULFILLED?onFulfilled:onRejected;unwrap(promise,resolver,this.outcome);}else{this.queue.push(new QueueItem(promise,onFulfilled,onRejected));}return promise;};function QueueItem(promise,onFulfilled,onRejected){this.promise=promise;if(typeof onFulfilled==='function'){this.onFulfilled=onFulfilled;this.callFulfilled=this.otherCallFulfilled;}if(typeof onRejected==='function'){this.onRejected=onRejected;this.callRejected=this.otherCallRejected;}}QueueItem.prototype.callFulfilled=function(value){handlers.resolve(this.promise,value);};QueueItem.prototype.otherCallFulfilled=function(value){unwrap(this.promise,this.onFulfilled,value);};QueueItem.prototype.callRejected=function(value){handlers.reject(this.promise,value);};QueueItem.prototype.otherCallRejected=function(value){unwrap(this.promise,this.onRejected,value);};function unwrap(promise,func,value){immediate(function(){var returnValue;try{returnValue=func(value);}catch(e){return handlers.reject(promise,e);}if(returnValue===promise){handlers.reject(promise,new TypeError('Cannot resolve promise with itself'));}else{handlers.resolve(promise,returnValue);}});}handlers.resolve=function(self,value){var result=tryCatch(getThen,value);if(result.status==='error'){return handlers.reject(self,result.value);}var thenable=result.value;if(thenable){safelyResolveThenable(self,thenable);}else{self.state=FULFILLED;self.outcome=value;var i=-1;var len=self.queue.length;while(++i<len){self.queue[i].callFulfilled(value);}}return self;};handlers.reject=function(self,error){self.state=REJECTED;self.outcome=error;var i=-1;var len=self.queue.length;while(++i<len){self.queue[i].callRejected(error);}return self;};function getThen(obj){// Make sure we only access the accessor once as required by the spec\nvar then=obj&&obj.then;if(obj&&(_typeof2(obj)==='object'||typeof obj==='function')&&typeof then==='function'){return function appyThen(){then.apply(obj,arguments);};}}function safelyResolveThenable(self,thenable){// Either fulfill, reject or reject with error\nvar called=false;function onError(value){if(called){return;}called=true;handlers.reject(self,value);}function onSuccess(value){if(called){return;}called=true;handlers.resolve(self,value);}function tryToUnwrap(){thenable(onSuccess,onError);}var result=tryCatch(tryToUnwrap);if(result.status==='error'){onError(result.value);}}function tryCatch(func,value){var out={};try{out.value=func(value);out.status='success';}catch(e){out.status='error';out.value=e;}return out;}Promise.resolve=resolve;function resolve(value){if(value instanceof this){return value;}return handlers.resolve(new this(INTERNAL),value);}Promise.reject=reject;function reject(reason){var promise=new this(INTERNAL);return handlers.reject(promise,reason);}Promise.all=all;function all(iterable){var self=this;if(Object.prototype.toString.call(iterable)!=='[object Array]'){return this.reject(new TypeError('must be an array'));}var len=iterable.length;var called=false;if(!len){return this.resolve([]);}var values=new Array(len);var resolved=0;var i=-1;var promise=new this(INTERNAL);while(++i<len){allResolver(iterable[i],i);}return promise;function allResolver(value,i){self.resolve(value).then(resolveFromAll,function(error){if(!called){called=true;handlers.reject(promise,error);}});function resolveFromAll(outValue){values[i]=outValue;if(++resolved===len&&!called){called=true;handlers.resolve(promise,values);}}}}Promise.race=race;function race(iterable){var self=this;if(Object.prototype.toString.call(iterable)!=='[object Array]'){return this.reject(new TypeError('must be an array'));}var len=iterable.length;var called=false;if(!len){return this.resolve([]);}var i=-1;var promise=new this(INTERNAL);while(++i<len){resolver(iterable[i]);}return promise;function resolver(value){self.resolve(value).then(function(response){if(!called){called=true;handlers.resolve(promise,response);}},function(error){if(!called){called=true;handlers.reject(promise,error);}});}}},{\"1\":1}],3:[function(_dereq_,module,exports){(function(global){'use strict';if(typeof global.Promise!=='function'){global.Promise=_dereq_(2);}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"2\":2}],4:[function(_dereq_,module,exports){'use strict';var _typeof=typeof Symbol===\"function\"&&_typeof2(Symbol.iterator)===\"symbol\"?function(obj){return _typeof2(obj);}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":_typeof2(obj);};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function getIDB(){/* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */try{if(typeof indexedDB!=='undefined'){return indexedDB;}if(typeof webkitIndexedDB!=='undefined'){return webkitIndexedDB;}if(typeof mozIndexedDB!=='undefined'){return mozIndexedDB;}if(typeof OIndexedDB!=='undefined'){return OIndexedDB;}if(typeof msIndexedDB!=='undefined'){return msIndexedDB;}}catch(e){return;}}var idb=getIDB();function isIndexedDBValid(){try{// Initialize IndexedDB; fall back to vendor-prefixed versions\n// if needed.\nif(!idb){return false;}// We mimic PouchDB here;\n//\n// We test for openDatabase because IE Mobile identifies itself\n// as Safari. Oh the lulz...\nvar isSafari=typeof openDatabase!=='undefined'&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform);var hasFetch=typeof fetch==='function'&&fetch.toString().indexOf('[native code')!==-1;// Safari <10.1 does not meet our requirements for IDB support (#5572)\n// since Safari 10.1 shipped with fetch, we can use that to detect it\nreturn(!isSafari||hasFetch)&&typeof indexedDB!=='undefined'&&// some outdated implementations of IDB that appear on Samsung\n// and HTC Android devices <4.4 are missing IDBKeyRange\n// See: https://github.com/mozilla/localForage/issues/128\n// See: https://github.com/mozilla/localForage/issues/272\ntypeof IDBKeyRange!=='undefined';}catch(e){return false;}}// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts,properties){/* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */parts=parts||[];properties=properties||{};try{return new Blob(parts,properties);}catch(e){if(e.name!=='TypeError'){throw e;}var Builder=typeof BlobBuilder!=='undefined'?BlobBuilder:typeof MSBlobBuilder!=='undefined'?MSBlobBuilder:typeof MozBlobBuilder!=='undefined'?MozBlobBuilder:WebKitBlobBuilder;var builder=new Builder();for(var i=0;i<parts.length;i+=1){builder.append(parts[i]);}return builder.getBlob(properties.type);}}// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif(typeof Promise==='undefined'){// In the \"nopromises\" build this will just throw if you don't have\n// a global promise object, but it would throw anyway later.\n_dereq_(3);}var Promise$1=Promise;function executeCallback(promise,callback){if(callback){promise.then(function(result){callback(null,result);},function(error){callback(error);});}}function executeTwoCallbacks(promise,callback,errorCallback){if(typeof callback==='function'){promise.then(callback);}if(typeof errorCallback==='function'){promise[\"catch\"](errorCallback);}}function normalizeKey(key){// Cast the key to a string, as that's all we can set as a key.\nif(typeof key!=='string'){console.warn(key+' used as a key, but it is not a string.');key=String(key);}return key;}function getCallback(){if(arguments.length&&typeof arguments[arguments.length-1]==='function'){return arguments[arguments.length-1];}}// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\nvar DETECT_BLOB_SUPPORT_STORE='local-forage-detect-blob-support';var supportsBlobs=void 0;var dbContexts={};var toString=Object.prototype.toString;// Transaction Modes\nvar READ_ONLY='readonly';var READ_WRITE='readwrite';// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin){var length=bin.length;var buf=new ArrayBuffer(length);var arr=new Uint8Array(buf);for(var i=0;i<length;i++){arr[i]=bin.charCodeAt(i);}return buf;}//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb){return new Promise$1(function(resolve){var txn=idb.transaction(DETECT_BLOB_SUPPORT_STORE,READ_WRITE);var blob=createBlob(['']);txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob,'key');txn.onabort=function(e){// If the transaction aborts now its due to not being able to\n// write to the database, likely due to the disk being full\ne.preventDefault();e.stopPropagation();resolve(false);};txn.oncomplete=function(){var matchedChrome=navigator.userAgent.match(/Chrome\\/(\\d+)/);var matchedEdge=navigator.userAgent.match(/Edge\\//);// MS Edge pretends to be Chrome 42:\n// https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\nresolve(matchedEdge||!matchedChrome||parseInt(matchedChrome[1],10)>=43);};})[\"catch\"](function(){return false;// error, so assume unsupported\n});}function _checkBlobSupport(idb){if(typeof supportsBlobs==='boolean'){return Promise$1.resolve(supportsBlobs);}return _checkBlobSupportWithoutCaching(idb).then(function(value){supportsBlobs=value;return supportsBlobs;});}function _deferReadiness(dbInfo){var dbContext=dbContexts[dbInfo.name];// Create a deferred object representing the current database operation.\nvar deferredOperation={};deferredOperation.promise=new Promise$1(function(resolve,reject){deferredOperation.resolve=resolve;deferredOperation.reject=reject;});// Enqueue the deferred operation.\ndbContext.deferredOperations.push(deferredOperation);// Chain its promise to the database readiness.\nif(!dbContext.dbReady){dbContext.dbReady=deferredOperation.promise;}else{dbContext.dbReady=dbContext.dbReady.then(function(){return deferredOperation.promise;});}}function _advanceReadiness(dbInfo){var dbContext=dbContexts[dbInfo.name];// Dequeue a deferred operation.\nvar deferredOperation=dbContext.deferredOperations.pop();// Resolve its promise (which is part of the database readiness\n// chain of promises).\nif(deferredOperation){deferredOperation.resolve();return deferredOperation.promise;}}function _rejectReadiness(dbInfo,err){var dbContext=dbContexts[dbInfo.name];// Dequeue a deferred operation.\nvar deferredOperation=dbContext.deferredOperations.pop();// Reject its promise (which is part of the database readiness\n// chain of promises).\nif(deferredOperation){deferredOperation.reject(err);return deferredOperation.promise;}}function _getConnection(dbInfo,upgradeNeeded){return new Promise$1(function(resolve,reject){dbContexts[dbInfo.name]=dbContexts[dbInfo.name]||createDbContext();if(dbInfo.db){if(upgradeNeeded){_deferReadiness(dbInfo);dbInfo.db.close();}else{return resolve(dbInfo.db);}}var dbArgs=[dbInfo.name];if(upgradeNeeded){dbArgs.push(dbInfo.version);}var openreq=idb.open.apply(idb,dbArgs);if(upgradeNeeded){openreq.onupgradeneeded=function(e){var db=openreq.result;try{db.createObjectStore(dbInfo.storeName);if(e.oldVersion<=1){// Added when support for blob shims was added\ndb.createObjectStore(DETECT_BLOB_SUPPORT_STORE);}}catch(ex){if(ex.name==='ConstraintError'){console.warn('The database \"'+dbInfo.name+'\"'+' has been upgraded from version '+e.oldVersion+' to version '+e.newVersion+', but the storage \"'+dbInfo.storeName+'\" already exists.');}else{throw ex;}}};}openreq.onerror=function(e){e.preventDefault();reject(openreq.error);};openreq.onsuccess=function(){resolve(openreq.result);_advanceReadiness(dbInfo);};});}function _getOriginalConnection(dbInfo){return _getConnection(dbInfo,false);}function _getUpgradedConnection(dbInfo){return _getConnection(dbInfo,true);}function _isUpgradeNeeded(dbInfo,defaultVersion){if(!dbInfo.db){return true;}var isNewStore=!dbInfo.db.objectStoreNames.contains(dbInfo.storeName);var isDowngrade=dbInfo.version<dbInfo.db.version;var isUpgrade=dbInfo.version>dbInfo.db.version;if(isDowngrade){// If the version is not the default one\n// then warn for impossible downgrade.\nif(dbInfo.version!==defaultVersion){console.warn('The database \"'+dbInfo.name+'\"'+\" can't be downgraded from version \"+dbInfo.db.version+' to version '+dbInfo.version+'.');}// Align the versions to prevent errors.\ndbInfo.version=dbInfo.db.version;}if(isUpgrade||isNewStore){// If the store is new then increment the version (if needed).\n// This will trigger an \"upgradeneeded\" event which is required\n// for creating a store.\nif(isNewStore){var incVersion=dbInfo.db.version+1;if(incVersion>dbInfo.version){dbInfo.version=incVersion;}}return true;}return false;}// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob){return new Promise$1(function(resolve,reject){var reader=new FileReader();reader.onerror=reject;reader.onloadend=function(e){var base64=btoa(e.target.result||'');resolve({__local_forage_encoded_blob:true,data:base64,type:blob.type});};reader.readAsBinaryString(blob);});}// decode an encoded blob\nfunction _decodeBlob(encodedBlob){var arrayBuff=_binStringToArrayBuffer(atob(encodedBlob.data));return createBlob([arrayBuff],{type:encodedBlob.type});}// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value){return value&&value.__local_forage_encoded_blob;}// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback){var self=this;var promise=self._initReady().then(function(){var dbContext=dbContexts[self._dbInfo.name];if(dbContext&&dbContext.dbReady){return dbContext.dbReady;}});executeTwoCallbacks(promise,callback,callback);return promise;}// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo){_deferReadiness(dbInfo);var dbContext=dbContexts[dbInfo.name];var forages=dbContext.forages;for(var i=0;i<forages.length;i++){var forage=forages[i];if(forage._dbInfo.db){forage._dbInfo.db.close();forage._dbInfo.db=null;}}dbInfo.db=null;return _getOriginalConnection(dbInfo).then(function(db){dbInfo.db=db;if(_isUpgradeNeeded(dbInfo)){// Reopen the database for upgrading.\nreturn _getUpgradedConnection(dbInfo);}return db;}).then(function(db){// store the latest db reference\n// in case the db was upgraded\ndbInfo.db=dbContext.db=db;for(var i=0;i<forages.length;i++){forages[i]._dbInfo.db=db;}})[\"catch\"](function(err){_rejectReadiness(dbInfo,err);throw err;});}// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo,mode,callback,retries){if(retries===undefined){retries=1;}try{var tx=dbInfo.db.transaction(dbInfo.storeName,mode);callback(null,tx);}catch(err){if(retries>0&&(!dbInfo.db||err.name==='InvalidStateError'||err.name==='NotFoundError')){return Promise$1.resolve().then(function(){if(!dbInfo.db||err.name==='NotFoundError'&&!dbInfo.db.objectStoreNames.contains(dbInfo.storeName)&&dbInfo.version<=dbInfo.db.version){// increase the db version, to create the new ObjectStore\nif(dbInfo.db){dbInfo.version=dbInfo.db.version+1;}// Reopen the database for upgrading.\nreturn _getUpgradedConnection(dbInfo);}}).then(function(){return _tryReconnect(dbInfo).then(function(){createTransaction(dbInfo,mode,callback,retries-1);});})[\"catch\"](callback);}callback(err);}}function createDbContext(){return{// Running localForages sharing a database.\nforages:[],// Shared database.\ndb:null,// Database readiness (promise).\ndbReady:null,// Deferred operations on the database.\ndeferredOperations:[]};}// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options){var self=this;var dbInfo={db:null};if(options){for(var i in options){dbInfo[i]=options[i];}}// Get the current context of the database;\nvar dbContext=dbContexts[dbInfo.name];// ...or create a new context.\nif(!dbContext){dbContext=createDbContext();// Register the new context in the global container.\ndbContexts[dbInfo.name]=dbContext;}// Register itself as a running localForage in the current context.\ndbContext.forages.push(self);// Replace the default `ready()` function with the specialized one.\nif(!self._initReady){self._initReady=self.ready;self.ready=_fullyReady;}// Create an array of initialization states of the related localForages.\nvar initPromises=[];function ignoreErrors(){// Don't handle errors here,\n// just makes sure related localForages aren't pending.\nreturn Promise$1.resolve();}for(var j=0;j<dbContext.forages.length;j++){var forage=dbContext.forages[j];if(forage!==self){// Don't wait for itself...\ninitPromises.push(forage._initReady()[\"catch\"](ignoreErrors));}}// Take a snapshot of the related localForages.\nvar forages=dbContext.forages.slice(0);// Initialize the connection process only when\n// all the related localForages aren't pending.\nreturn Promise$1.all(initPromises).then(function(){dbInfo.db=dbContext.db;// Get the connection or open a new one without upgrade.\nreturn _getOriginalConnection(dbInfo);}).then(function(db){dbInfo.db=db;if(_isUpgradeNeeded(dbInfo,self._defaultConfig.version)){// Reopen the database for upgrading.\nreturn _getUpgradedConnection(dbInfo);}return db;}).then(function(db){dbInfo.db=dbContext.db=db;self._dbInfo=dbInfo;// Share the final connection amongst related localForages.\nfor(var k=0;k<forages.length;k++){var forage=forages[k];if(forage!==self){// Self is already up-to-date.\nforage._dbInfo.db=dbInfo.db;forage._dbInfo.version=dbInfo.version;}}});}function getItem(key,callback){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_ONLY,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var req=store.get(key);req.onsuccess=function(){var value=req.result;if(value===undefined){value=null;}if(_isEncodedBlob(value)){value=_decodeBlob(value);}resolve(value);};req.onerror=function(){reject(req.error);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}// Iterate over all items stored in database.\nfunction iterate(iterator,callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_ONLY,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var req=store.openCursor();var iterationNumber=1;req.onsuccess=function(){var cursor=req.result;if(cursor){var value=cursor.value;if(_isEncodedBlob(value)){value=_decodeBlob(value);}var result=iterator(value,cursor.key,iterationNumber++);// when the iterator callback retuns any\n// (non-`undefined`) value, then we stop\n// the iteration immediately\nif(result!==void 0){resolve(result);}else{cursor[\"continue\"]();}}else{resolve();}};req.onerror=function(){reject(req.error);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function setItem(key,value,callback){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){var dbInfo;self.ready().then(function(){dbInfo=self._dbInfo;if(toString.call(value)==='[object Blob]'){return _checkBlobSupport(dbInfo.db).then(function(blobSupport){if(blobSupport){return value;}return _encodeBlob(value);});}return value;}).then(function(value){createTransaction(self._dbInfo,READ_WRITE,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);// The reason we don't _save_ null is because IE 10 does\n// not support saving the `null` type in IndexedDB. How\n// ironic, given the bug below!\n// See: https://github.com/mozilla/localForage/issues/161\nif(value===null){value=undefined;}var req=store.put(value,key);transaction.oncomplete=function(){// Cast to undefined so the value passed to\n// callback/promise is the same as what one would get out\n// of `getItem()` later. This leads to some weirdness\n// (setItem('foo', undefined) will return `null`), but\n// it's not my fault localStorage is our baseline and that\n// it's weird.\nif(value===undefined){value=null;}resolve(value);};transaction.onabort=transaction.onerror=function(){var err=req.error?req.error:req.transaction.error;reject(err);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function removeItem(key,callback){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_WRITE,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);// We use a Grunt task to make this safe for IE and some\n// versions of Android (including those used by Cordova).\n// Normally IE won't like `.delete()` and will insist on\n// using `['delete']()`, but we have a build step that\n// fixes this for us now.\nvar req=store[\"delete\"](key);transaction.oncomplete=function(){resolve();};transaction.onerror=function(){reject(req.error);};// The request will be also be aborted if we've exceeded our storage\n// space.\ntransaction.onabort=function(){var err=req.error?req.error:req.transaction.error;reject(err);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function clear(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_WRITE,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var req=store.clear();transaction.oncomplete=function(){resolve();};transaction.onabort=transaction.onerror=function(){var err=req.error?req.error:req.transaction.error;reject(err);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function length(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_ONLY,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var req=store.count();req.onsuccess=function(){resolve(req.result);};req.onerror=function(){reject(req.error);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function key(n,callback){var self=this;var promise=new Promise$1(function(resolve,reject){if(n<0){resolve(null);return;}self.ready().then(function(){createTransaction(self._dbInfo,READ_ONLY,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var advanced=false;var req=store.openCursor();req.onsuccess=function(){var cursor=req.result;if(!cursor){// this means there weren't enough keys\nresolve(null);return;}if(n===0){// We have the first key, return it if that's what they\n// wanted.\nresolve(cursor.key);}else{if(!advanced){// Otherwise, ask the cursor to skip ahead n\n// records.\nadvanced=true;cursor.advance(n);}else{// When we get here, we've got the nth key.\nresolve(cursor.key);}}};req.onerror=function(){reject(req.error);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function keys(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){createTransaction(self._dbInfo,READ_ONLY,function(err,transaction){if(err){return reject(err);}try{var store=transaction.objectStore(self._dbInfo.storeName);var req=store.openCursor();var keys=[];req.onsuccess=function(){var cursor=req.result;if(!cursor){resolve(keys);return;}keys.push(cursor.key);cursor[\"continue\"]();};req.onerror=function(){reject(req.error);};}catch(e){reject(e);}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function dropInstance(options,callback){callback=getCallback.apply(this,arguments);var currentConfig=this.config();options=typeof options!=='function'&&options||{};if(!options.name){options.name=options.name||currentConfig.name;options.storeName=options.storeName||currentConfig.storeName;}var self=this;var promise;if(!options.name){promise=Promise$1.reject('Invalid arguments');}else{var isCurrentDb=options.name===currentConfig.name&&self._dbInfo.db;var dbPromise=isCurrentDb?Promise$1.resolve(self._dbInfo.db):_getOriginalConnection(options).then(function(db){var dbContext=dbContexts[options.name];var forages=dbContext.forages;dbContext.db=db;for(var i=0;i<forages.length;i++){forages[i]._dbInfo.db=db;}return db;});if(!options.storeName){promise=dbPromise.then(function(db){_deferReadiness(options);var dbContext=dbContexts[options.name];var forages=dbContext.forages;db.close();for(var i=0;i<forages.length;i++){var forage=forages[i];forage._dbInfo.db=null;}var dropDBPromise=new Promise$1(function(resolve,reject){var req=idb.deleteDatabase(options.name);req.onerror=req.onblocked=function(err){var db=req.result;if(db){db.close();}reject(err);};req.onsuccess=function(){var db=req.result;if(db){db.close();}resolve(db);};});return dropDBPromise.then(function(db){dbContext.db=db;for(var i=0;i<forages.length;i++){var _forage=forages[i];_advanceReadiness(_forage._dbInfo);}})[\"catch\"](function(err){(_rejectReadiness(options,err)||Promise$1.resolve())[\"catch\"](function(){});throw err;});});}else{promise=dbPromise.then(function(db){if(!db.objectStoreNames.contains(options.storeName)){return;}var newVersion=db.version+1;_deferReadiness(options);var dbContext=dbContexts[options.name];var forages=dbContext.forages;db.close();for(var i=0;i<forages.length;i++){var forage=forages[i];forage._dbInfo.db=null;forage._dbInfo.version=newVersion;}var dropObjectPromise=new Promise$1(function(resolve,reject){var req=idb.open(options.name,newVersion);req.onerror=function(err){var db=req.result;db.close();reject(err);};req.onupgradeneeded=function(){var db=req.result;db.deleteObjectStore(options.storeName);};req.onsuccess=function(){var db=req.result;db.close();resolve(db);};});return dropObjectPromise.then(function(db){dbContext.db=db;for(var j=0;j<forages.length;j++){var _forage2=forages[j];_forage2._dbInfo.db=db;_advanceReadiness(_forage2._dbInfo);}})[\"catch\"](function(err){(_rejectReadiness(options,err)||Promise$1.resolve())[\"catch\"](function(){});throw err;});});}}executeCallback(promise,callback);return promise;}var asyncStorage={_driver:'asyncStorage',_initStorage:_initStorage,_support:isIndexedDBValid(),iterate:iterate,getItem:getItem,setItem:setItem,removeItem:removeItem,clear:clear,length:length,key:key,keys:keys,dropInstance:dropInstance};function isWebSQLValid(){return typeof openDatabase==='function';}// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';var BLOB_TYPE_PREFIX='~~local_forage_type~';var BLOB_TYPE_PREFIX_REGEX=/^~~local_forage_type~([^~]+)~/;var SERIALIZED_MARKER='__lfsc__:';var SERIALIZED_MARKER_LENGTH=SERIALIZED_MARKER.length;// OMG the serializations!\nvar TYPE_ARRAYBUFFER='arbf';var TYPE_BLOB='blob';var TYPE_INT8ARRAY='si08';var TYPE_UINT8ARRAY='ui08';var TYPE_UINT8CLAMPEDARRAY='uic8';var TYPE_INT16ARRAY='si16';var TYPE_INT32ARRAY='si32';var TYPE_UINT16ARRAY='ur16';var TYPE_UINT32ARRAY='ui32';var TYPE_FLOAT32ARRAY='fl32';var TYPE_FLOAT64ARRAY='fl64';var TYPE_SERIALIZED_MARKER_LENGTH=SERIALIZED_MARKER_LENGTH+TYPE_ARRAYBUFFER.length;var toString$1=Object.prototype.toString;function stringToBuffer(serializedString){// Fill the string into a ArrayBuffer.\nvar bufferLength=serializedString.length*0.75;var len=serializedString.length;var i;var p=0;var encoded1,encoded2,encoded3,encoded4;if(serializedString[serializedString.length-1]==='='){bufferLength--;if(serializedString[serializedString.length-2]==='='){bufferLength--;}}var buffer=new ArrayBuffer(bufferLength);var bytes=new Uint8Array(buffer);for(i=0;i<len;i+=4){encoded1=BASE_CHARS.indexOf(serializedString[i]);encoded2=BASE_CHARS.indexOf(serializedString[i+1]);encoded3=BASE_CHARS.indexOf(serializedString[i+2]);encoded4=BASE_CHARS.indexOf(serializedString[i+3]);/*jslint bitwise: true */bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63;}return buffer;}// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer){// base64-arraybuffer\nvar bytes=new Uint8Array(buffer);var base64String='';var i;for(i=0;i<bytes.length;i+=3){/*jslint bitwise: true */base64String+=BASE_CHARS[bytes[i]>>2];base64String+=BASE_CHARS[(bytes[i]&3)<<4|bytes[i+1]>>4];base64String+=BASE_CHARS[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64String+=BASE_CHARS[bytes[i+2]&63];}if(bytes.length%3===2){base64String=base64String.substring(0,base64String.length-1)+'=';}else if(bytes.length%3===1){base64String=base64String.substring(0,base64String.length-2)+'==';}return base64String;}// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value,callback){var valueType='';if(value){valueType=toString$1.call(value);}// Cannot use `value instanceof ArrayBuffer` or such here, as these\n// checks fail when running the tests using casper.js...\n//\n// TODO: See why those tests fail and use a better solution.\nif(value&&(valueType==='[object ArrayBuffer]'||value.buffer&&toString$1.call(value.buffer)==='[object ArrayBuffer]')){// Convert binary arrays to a string and prefix the string with\n// a special marker.\nvar buffer;var marker=SERIALIZED_MARKER;if(value instanceof ArrayBuffer){buffer=value;marker+=TYPE_ARRAYBUFFER;}else{buffer=value.buffer;if(valueType==='[object Int8Array]'){marker+=TYPE_INT8ARRAY;}else if(valueType==='[object Uint8Array]'){marker+=TYPE_UINT8ARRAY;}else if(valueType==='[object Uint8ClampedArray]'){marker+=TYPE_UINT8CLAMPEDARRAY;}else if(valueType==='[object Int16Array]'){marker+=TYPE_INT16ARRAY;}else if(valueType==='[object Uint16Array]'){marker+=TYPE_UINT16ARRAY;}else if(valueType==='[object Int32Array]'){marker+=TYPE_INT32ARRAY;}else if(valueType==='[object Uint32Array]'){marker+=TYPE_UINT32ARRAY;}else if(valueType==='[object Float32Array]'){marker+=TYPE_FLOAT32ARRAY;}else if(valueType==='[object Float64Array]'){marker+=TYPE_FLOAT64ARRAY;}else{callback(new Error('Failed to get type for BinaryArray'));}}callback(marker+bufferToString(buffer));}else if(valueType==='[object Blob]'){// Conver the blob to a binaryArray and then to a string.\nvar fileReader=new FileReader();fileReader.onload=function(){// Backwards-compatible prefix for the blob type.\nvar str=BLOB_TYPE_PREFIX+value.type+'~'+bufferToString(this.result);callback(SERIALIZED_MARKER+TYPE_BLOB+str);};fileReader.readAsArrayBuffer(value);}else{try{callback(JSON.stringify(value));}catch(e){console.error(\"Couldn't convert value into a JSON string: \",value);callback(null,e);}}}// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value){// If we haven't marked this string as being specially serialized (i.e.\n// something other than serialized JSON), we can just return it and be\n// done with it.\nif(value.substring(0,SERIALIZED_MARKER_LENGTH)!==SERIALIZED_MARKER){return JSON.parse(value);}// The following code deals with deserializing some kind of Blob or\n// TypedArray. First we separate out the type of data we're dealing\n// with from the data itself.\nvar serializedString=value.substring(TYPE_SERIALIZED_MARKER_LENGTH);var type=value.substring(SERIALIZED_MARKER_LENGTH,TYPE_SERIALIZED_MARKER_LENGTH);var blobType;// Backwards-compatible blob type serialization strategy.\n// DBs created with older versions of localForage will simply not have the blob type.\nif(type===TYPE_BLOB&&BLOB_TYPE_PREFIX_REGEX.test(serializedString)){var matcher=serializedString.match(BLOB_TYPE_PREFIX_REGEX);blobType=matcher[1];serializedString=serializedString.substring(matcher[0].length);}var buffer=stringToBuffer(serializedString);// Return the right type based on the code/type set during\n// serialization.\nswitch(type){case TYPE_ARRAYBUFFER:return buffer;case TYPE_BLOB:return createBlob([buffer],{type:blobType});case TYPE_INT8ARRAY:return new Int8Array(buffer);case TYPE_UINT8ARRAY:return new Uint8Array(buffer);case TYPE_UINT8CLAMPEDARRAY:return new Uint8ClampedArray(buffer);case TYPE_INT16ARRAY:return new Int16Array(buffer);case TYPE_UINT16ARRAY:return new Uint16Array(buffer);case TYPE_INT32ARRAY:return new Int32Array(buffer);case TYPE_UINT32ARRAY:return new Uint32Array(buffer);case TYPE_FLOAT32ARRAY:return new Float32Array(buffer);case TYPE_FLOAT64ARRAY:return new Float64Array(buffer);default:throw new Error('Unkown type: '+type);}}var localforageSerializer={serialize:serialize,deserialize:deserialize,stringToBuffer:stringToBuffer,bufferToString:bufferToString};/*\r\n * Includes code from:\r\n *\r\n * base64-arraybuffer\r\n * https://github.com/niklasvh/base64-arraybuffer\r\n *\r\n * Copyright (c) 2012 Niklas von Hertzen\r\n * Licensed under the MIT license.\r\n */function createDbTable(t,dbInfo,callback,errorCallback){t.executeSql('CREATE TABLE IF NOT EXISTS '+dbInfo.storeName+' '+'(id INTEGER PRIMARY KEY, key unique, value)',[],callback,errorCallback);}// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options){var self=this;var dbInfo={db:null};if(options){for(var i in options){dbInfo[i]=typeof options[i]!=='string'?options[i].toString():options[i];}}var dbInfoPromise=new Promise$1(function(resolve,reject){// Open the database; the openDatabase API will automatically\n// create it for us if it doesn't exist.\ntry{dbInfo.db=openDatabase(dbInfo.name,String(dbInfo.version),dbInfo.description,dbInfo.size);}catch(e){return reject(e);}// Create our key/value table if it doesn't exist.\ndbInfo.db.transaction(function(t){createDbTable(t,dbInfo,function(){self._dbInfo=dbInfo;resolve();},function(t,error){reject(error);});},reject);});dbInfo.serializer=localforageSerializer;return dbInfoPromise;}function tryExecuteSql(t,dbInfo,sqlStatement,args,callback,errorCallback){t.executeSql(sqlStatement,args,callback,function(t,error){if(error.code===error.SYNTAX_ERR){t.executeSql('SELECT name FROM sqlite_master '+\"WHERE type='table' AND name = ?\",[dbInfo.storeName],function(t,results){if(!results.rows.length){// if the table is missing (was deleted)\n// re-create it table and retry\ncreateDbTable(t,dbInfo,function(){t.executeSql(sqlStatement,args,callback,errorCallback);},errorCallback);}else{errorCallback(t,error);}},errorCallback);}else{errorCallback(t,error);}},errorCallback);}function getItem$1(key,callback){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'SELECT * FROM '+dbInfo.storeName+' WHERE key = ? LIMIT 1',[key],function(t,results){var result=results.rows.length?results.rows.item(0).value:null;// Check to see if this is serialized content we need to\n// unpack.\nif(result){result=dbInfo.serializer.deserialize(result);}resolve(result);},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function iterate$1(iterator,callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'SELECT * FROM '+dbInfo.storeName,[],function(t,results){var rows=results.rows;var length=rows.length;for(var i=0;i<length;i++){var item=rows.item(i);var result=item.value;// Check to see if this is serialized content\n// we need to unpack.\nif(result){result=dbInfo.serializer.deserialize(result);}result=iterator(result,item.key,i+1);// void(0) prevents problems with redefinition\n// of `undefined`.\nif(result!==void 0){resolve(result);return;}}resolve();},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function _setItem(key,value,callback,retriesLeft){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){// The localStorage API doesn't return undefined values in an\n// \"expected\" way, so undefined is always cast to null in all\n// drivers. See: https://github.com/mozilla/localForage/pull/42\nif(value===undefined){value=null;}// Save the original value to pass to the callback.\nvar originalValue=value;var dbInfo=self._dbInfo;dbInfo.serializer.serialize(value,function(value,error){if(error){reject(error);}else{dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'INSERT OR REPLACE INTO '+dbInfo.storeName+' '+'(key, value) VALUES (?, ?)',[key,value],function(){resolve(originalValue);},function(t,error){reject(error);});},function(sqlError){// The transaction failed; check\n// to see if it's a quota error.\nif(sqlError.code===sqlError.QUOTA_ERR){// We reject the callback outright for now, but\n// it's worth trying to re-run the transaction.\n// Even if the user accepts the prompt to use\n// more storage on Safari, this error will\n// be called.\n//\n// Try to re-run the transaction.\nif(retriesLeft>0){resolve(_setItem.apply(self,[key,originalValue,callback,retriesLeft-1]));return;}reject(sqlError);}});}});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function setItem$1(key,value,callback){return _setItem.apply(this,[key,value,callback,1]);}function removeItem$1(key,callback){var self=this;key=normalizeKey(key);var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'DELETE FROM '+dbInfo.storeName+' WHERE key = ?',[key],function(){resolve();},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'DELETE FROM '+dbInfo.storeName,[],function(){resolve();},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){// Ahhh, SQL makes this one soooooo easy.\ntryExecuteSql(t,dbInfo,'SELECT COUNT(key) as c FROM '+dbInfo.storeName,[],function(t,results){var result=results.rows.item(0).c;resolve(result);},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n,callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'SELECT key FROM '+dbInfo.storeName+' WHERE id = ? LIMIT 1',[n+1],function(t,results){var result=results.rows.length?results.rows.item(0).key:null;resolve(result);},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}function keys$1(callback){var self=this;var promise=new Promise$1(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){tryExecuteSql(t,dbInfo,'SELECT key FROM '+dbInfo.storeName,[],function(t,results){var keys=[];for(var i=0;i<results.rows.length;i++){keys.push(results.rows.item(i).key);}resolve(keys);},function(t,error){reject(error);});});})[\"catch\"](reject);});executeCallback(promise,callback);return promise;}// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db){return new Promise$1(function(resolve,reject){db.transaction(function(t){t.executeSql('SELECT name FROM sqlite_master '+\"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\",[],function(t,results){var storeNames=[];for(var i=0;i<results.rows.length;i++){storeNames.push(results.rows.item(i).name);}resolve({db:db,storeNames:storeNames});},function(t,error){reject(error);});},function(sqlError){reject(sqlError);});});}function dropInstance$1(options,callback){callback=getCallback.apply(this,arguments);var currentConfig=this.config();options=typeof options!=='function'&&options||{};if(!options.name){options.name=options.name||currentConfig.name;options.storeName=options.storeName||currentConfig.storeName;}var self=this;var promise;if(!options.name){promise=Promise$1.reject('Invalid arguments');}else{promise=new Promise$1(function(resolve){var db;if(options.name===currentConfig.name){// use the db reference of the current instance\ndb=self._dbInfo.db;}else{db=openDatabase(options.name,'','',0);}if(!options.storeName){// drop all database tables\nresolve(getAllStoreNames(db));}else{resolve({db:db,storeNames:[options.storeName]});}}).then(function(operationInfo){return new Promise$1(function(resolve,reject){operationInfo.db.transaction(function(t){function dropTable(storeName){return new Promise$1(function(resolve,reject){t.executeSql('DROP TABLE IF EXISTS '+storeName,[],function(){resolve();},function(t,error){reject(error);});});}var operations=[];for(var i=0,len=operationInfo.storeNames.length;i<len;i++){operations.push(dropTable(operationInfo.storeNames[i]));}Promise$1.all(operations).then(function(){resolve();})[\"catch\"](function(e){reject(e);});},function(sqlError){reject(sqlError);});});});}executeCallback(promise,callback);return promise;}var webSQLStorage={_driver:'webSQLStorage',_initStorage:_initStorage$1,_support:isWebSQLValid(),iterate:iterate$1,getItem:getItem$1,setItem:setItem$1,removeItem:removeItem$1,clear:clear$1,length:length$1,key:key$1,keys:keys$1,dropInstance:dropInstance$1};function isLocalStorageValid(){try{return typeof localStorage!=='undefined'&&'setItem'in localStorage&&// in IE8 typeof localStorage.setItem === 'object'\n!!localStorage.setItem;}catch(e){return false;}}function _getKeyPrefix(options,defaultConfig){var keyPrefix=options.name+'/';if(options.storeName!==defaultConfig.storeName){keyPrefix+=options.storeName+'/';}return keyPrefix;}// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows(){var localStorageTestKey='_localforage_support_test';try{localStorage.setItem(localStorageTestKey,true);localStorage.removeItem(localStorageTestKey);return false;}catch(e){return true;}}// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable(){return!checkIfLocalStorageThrows()||localStorage.length>0;}// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options){var self=this;var dbInfo={};if(options){for(var i in options){dbInfo[i]=options[i];}}dbInfo.keyPrefix=_getKeyPrefix(options,self._defaultConfig);if(!_isLocalStorageUsable()){return Promise$1.reject();}self._dbInfo=dbInfo;dbInfo.serializer=localforageSerializer;return Promise$1.resolve();}// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback){var self=this;var promise=self.ready().then(function(){var keyPrefix=self._dbInfo.keyPrefix;for(var i=localStorage.length-1;i>=0;i--){var key=localStorage.key(i);if(key.indexOf(keyPrefix)===0){localStorage.removeItem(key);}}});executeCallback(promise,callback);return promise;}// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key,callback){var self=this;key=normalizeKey(key);var promise=self.ready().then(function(){var dbInfo=self._dbInfo;var result=localStorage.getItem(dbInfo.keyPrefix+key);// If a result was found, parse it from the serialized\n// string into a JS object. If result isn't truthy, the key\n// is likely undefined and we'll pass it straight to the\n// callback.\nif(result){result=dbInfo.serializer.deserialize(result);}return result;});executeCallback(promise,callback);return promise;}// Iterate over all items in the store.\nfunction iterate$2(iterator,callback){var self=this;var promise=self.ready().then(function(){var dbInfo=self._dbInfo;var keyPrefix=dbInfo.keyPrefix;var keyPrefixLength=keyPrefix.length;var length=localStorage.length;// We use a dedicated iterator instead of the `i` variable below\n// so other keys we fetch in localStorage aren't counted in\n// the `iterationNumber` argument passed to the `iterate()`\n// callback.\n//\n// See: github.com/mozilla/localForage/pull/435#discussion_r38061530\nvar iterationNumber=1;for(var i=0;i<length;i++){var key=localStorage.key(i);if(key.indexOf(keyPrefix)!==0){continue;}var value=localStorage.getItem(key);// If a result was found, parse it from the serialized\n// string into a JS object. If result isn't truthy, the\n// key is likely undefined and we'll pass it straight\n// to the iterator.\nif(value){value=dbInfo.serializer.deserialize(value);}value=iterator(value,key.substring(keyPrefixLength),iterationNumber++);if(value!==void 0){return value;}}});executeCallback(promise,callback);return promise;}// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n,callback){var self=this;var promise=self.ready().then(function(){var dbInfo=self._dbInfo;var result;try{result=localStorage.key(n);}catch(error){result=null;}// Remove the prefix from the key, if a key is found.\nif(result){result=result.substring(dbInfo.keyPrefix.length);}return result;});executeCallback(promise,callback);return promise;}function keys$2(callback){var self=this;var promise=self.ready().then(function(){var dbInfo=self._dbInfo;var length=localStorage.length;var keys=[];for(var i=0;i<length;i++){var itemKey=localStorage.key(i);if(itemKey.indexOf(dbInfo.keyPrefix)===0){keys.push(itemKey.substring(dbInfo.keyPrefix.length));}}return keys;});executeCallback(promise,callback);return promise;}// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback){var self=this;var promise=self.keys().then(function(keys){return keys.length;});executeCallback(promise,callback);return promise;}// Remove an item from the store, nice and simple.\nfunction removeItem$2(key,callback){var self=this;key=normalizeKey(key);var promise=self.ready().then(function(){var dbInfo=self._dbInfo;localStorage.removeItem(dbInfo.keyPrefix+key);});executeCallback(promise,callback);return promise;}// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key,value,callback){var self=this;key=normalizeKey(key);var promise=self.ready().then(function(){// Convert undefined values to null.\n// https://github.com/mozilla/localForage/pull/42\nif(value===undefined){value=null;}// Save the original value to pass to the callback.\nvar originalValue=value;return new Promise$1(function(resolve,reject){var dbInfo=self._dbInfo;dbInfo.serializer.serialize(value,function(value,error){if(error){reject(error);}else{try{localStorage.setItem(dbInfo.keyPrefix+key,value);resolve(originalValue);}catch(e){// localStorage capacity exceeded.\n// TODO: Make this a specific error/event.\nif(e.name==='QuotaExceededError'||e.name==='NS_ERROR_DOM_QUOTA_REACHED'){reject(e);}reject(e);}}});});});executeCallback(promise,callback);return promise;}function dropInstance$2(options,callback){callback=getCallback.apply(this,arguments);options=typeof options!=='function'&&options||{};if(!options.name){var currentConfig=this.config();options.name=options.name||currentConfig.name;options.storeName=options.storeName||currentConfig.storeName;}var self=this;var promise;if(!options.name){promise=Promise$1.reject('Invalid arguments');}else{promise=new Promise$1(function(resolve){if(!options.storeName){resolve(options.name+'/');}else{resolve(_getKeyPrefix(options,self._defaultConfig));}}).then(function(keyPrefix){for(var i=localStorage.length-1;i>=0;i--){var key=localStorage.key(i);if(key.indexOf(keyPrefix)===0){localStorage.removeItem(key);}}});}executeCallback(promise,callback);return promise;}var localStorageWrapper={_driver:'localStorageWrapper',_initStorage:_initStorage$2,_support:isLocalStorageValid(),iterate:iterate$2,getItem:getItem$2,setItem:setItem$2,removeItem:removeItem$2,clear:clear$2,length:length$2,key:key$2,keys:keys$2,dropInstance:dropInstance$2};var sameValue=function sameValue(x,y){return x===y||typeof x==='number'&&typeof y==='number'&&isNaN(x)&&isNaN(y);};var includes=function includes(array,searchElement){var len=array.length;var i=0;while(i<len){if(sameValue(array[i],searchElement)){return true;}i++;}return false;};var isArray=Array.isArray||function(arg){return Object.prototype.toString.call(arg)==='[object Array]';};// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers={};var DriverSupport={};var DefaultDrivers={INDEXEDDB:asyncStorage,WEBSQL:webSQLStorage,LOCALSTORAGE:localStorageWrapper};var DefaultDriverOrder=[DefaultDrivers.INDEXEDDB._driver,DefaultDrivers.WEBSQL._driver,DefaultDrivers.LOCALSTORAGE._driver];var OptionalDriverMethods=['dropInstance'];var LibraryMethods=['clear','getItem','iterate','key','keys','length','removeItem','setItem'].concat(OptionalDriverMethods);var DefaultConfig={description:'',driver:DefaultDriverOrder.slice(),name:'localforage',// Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n// we can use without a prompt.\nsize:4980736,storeName:'keyvaluepairs',version:1.0};function callWhenReady(localForageInstance,libraryMethod){localForageInstance[libraryMethod]=function(){var _args=arguments;return localForageInstance.ready().then(function(){return localForageInstance[libraryMethod].apply(localForageInstance,_args);});};}function extend(){for(var i=1;i<arguments.length;i++){var arg=arguments[i];if(arg){for(var _key in arg){if(arg.hasOwnProperty(_key)){if(isArray(arg[_key])){arguments[0][_key]=arg[_key].slice();}else{arguments[0][_key]=arg[_key];}}}}}return arguments[0];}var LocalForage=function(){function LocalForage(options){_classCallCheck(this,LocalForage);for(var driverTypeKey in DefaultDrivers){if(DefaultDrivers.hasOwnProperty(driverTypeKey)){var driver=DefaultDrivers[driverTypeKey];var driverName=driver._driver;this[driverTypeKey]=driverName;if(!DefinedDrivers[driverName]){// we don't need to wait for the promise,\n// since the default drivers can be defined\n// in a blocking manner\nthis.defineDriver(driver);}}}this._defaultConfig=extend({},DefaultConfig);this._config=extend({},this._defaultConfig,options);this._driverSet=null;this._initDriver=null;this._ready=false;this._dbInfo=null;this._wrapLibraryMethodsWithReady();this.setDriver(this._config.driver)[\"catch\"](function(){});}// Set any config values for localForage; can be called anytime before\n// the first API call (e.g. `getItem`, `setItem`).\n// We loop through options so we don't overwrite existing config\n// values.\nLocalForage.prototype.config=function config(options){// If the options argument is an object, we use it to set values.\n// Otherwise, we return either a specified config value or all\n// config values.\nif((typeof options==='undefined'?'undefined':_typeof(options))==='object'){// If localforage is ready and fully initialized, we can't set\n// any new configuration values. Instead, we return an error.\nif(this._ready){return new Error(\"Can't call config() after localforage \"+'has been used.');}for(var i in options){if(i==='storeName'){options[i]=options[i].replace(/\\W/g,'_');}if(i==='version'&&typeof options[i]!=='number'){return new Error('Database version must be a number.');}this._config[i]=options[i];}// after all config options are set and\n// the driver option is used, try setting it\nif('driver'in options&&options.driver){return this.setDriver(this._config.driver);}return true;}else if(typeof options==='string'){return this._config[options];}else{return this._config;}};// Used to define a custom driver, shared across all instances of\n// localForage.\nLocalForage.prototype.defineDriver=function defineDriver(driverObject,callback,errorCallback){var promise=new Promise$1(function(resolve,reject){try{var driverName=driverObject._driver;var complianceError=new Error('Custom driver not compliant; see '+'https://mozilla.github.io/localForage/#definedriver');// A driver name should be defined and not overlap with the\n// library-defined, default drivers.\nif(!driverObject._driver){reject(complianceError);return;}var driverMethods=LibraryMethods.concat('_initStorage');for(var i=0,len=driverMethods.length;i<len;i++){var driverMethodName=driverMethods[i];// when the property is there,\n// it should be a method even when optional\nvar isRequired=!includes(OptionalDriverMethods,driverMethodName);if((isRequired||driverObject[driverMethodName])&&typeof driverObject[driverMethodName]!=='function'){reject(complianceError);return;}}var configureMissingMethods=function configureMissingMethods(){var methodNotImplementedFactory=function methodNotImplementedFactory(methodName){return function(){var error=new Error('Method '+methodName+' is not implemented by the current driver');var promise=Promise$1.reject(error);executeCallback(promise,arguments[arguments.length-1]);return promise;};};for(var _i=0,_len=OptionalDriverMethods.length;_i<_len;_i++){var optionalDriverMethod=OptionalDriverMethods[_i];if(!driverObject[optionalDriverMethod]){driverObject[optionalDriverMethod]=methodNotImplementedFactory(optionalDriverMethod);}}};configureMissingMethods();var setDriverSupport=function setDriverSupport(support){if(DefinedDrivers[driverName]){console.info('Redefining LocalForage driver: '+driverName);}DefinedDrivers[driverName]=driverObject;DriverSupport[driverName]=support;// don't use a then, so that we can define\n// drivers that have simple _support methods\n// in a blocking manner\nresolve();};if('_support'in driverObject){if(driverObject._support&&typeof driverObject._support==='function'){driverObject._support().then(setDriverSupport,reject);}else{setDriverSupport(!!driverObject._support);}}else{setDriverSupport(true);}}catch(e){reject(e);}});executeTwoCallbacks(promise,callback,errorCallback);return promise;};LocalForage.prototype.driver=function driver(){return this._driver||null;};LocalForage.prototype.getDriver=function getDriver(driverName,callback,errorCallback){var getDriverPromise=DefinedDrivers[driverName]?Promise$1.resolve(DefinedDrivers[driverName]):Promise$1.reject(new Error('Driver not found.'));executeTwoCallbacks(getDriverPromise,callback,errorCallback);return getDriverPromise;};LocalForage.prototype.getSerializer=function getSerializer(callback){var serializerPromise=Promise$1.resolve(localforageSerializer);executeTwoCallbacks(serializerPromise,callback);return serializerPromise;};LocalForage.prototype.ready=function ready(callback){var self=this;var promise=self._driverSet.then(function(){if(self._ready===null){self._ready=self._initDriver();}return self._ready;});executeTwoCallbacks(promise,callback,callback);return promise;};LocalForage.prototype.setDriver=function setDriver(drivers,callback,errorCallback){var self=this;if(!isArray(drivers)){drivers=[drivers];}var supportedDrivers=this._getSupportedDrivers(drivers);function setDriverToConfig(){self._config.driver=self.driver();}function extendSelfWithDriver(driver){self._extend(driver);setDriverToConfig();self._ready=self._initStorage(self._config);return self._ready;}function initDriver(supportedDrivers){return function(){var currentDriverIndex=0;function driverPromiseLoop(){while(currentDriverIndex<supportedDrivers.length){var driverName=supportedDrivers[currentDriverIndex];currentDriverIndex++;self._dbInfo=null;self._ready=null;return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);}setDriverToConfig();var error=new Error('No available storage method found.');self._driverSet=Promise$1.reject(error);return self._driverSet;}return driverPromiseLoop();};}// There might be a driver initialization in progress\n// so wait for it to finish in order to avoid a possible\n// race condition to set _dbInfo\nvar oldDriverSetDone=this._driverSet!==null?this._driverSet[\"catch\"](function(){return Promise$1.resolve();}):Promise$1.resolve();this._driverSet=oldDriverSetDone.then(function(){var driverName=supportedDrivers[0];self._dbInfo=null;self._ready=null;return self.getDriver(driverName).then(function(driver){self._driver=driver._driver;setDriverToConfig();self._wrapLibraryMethodsWithReady();self._initDriver=initDriver(supportedDrivers);});})[\"catch\"](function(){setDriverToConfig();var error=new Error('No available storage method found.');self._driverSet=Promise$1.reject(error);return self._driverSet;});executeTwoCallbacks(this._driverSet,callback,errorCallback);return this._driverSet;};LocalForage.prototype.supports=function supports(driverName){return!!DriverSupport[driverName];};LocalForage.prototype._extend=function _extend(libraryMethodsAndProperties){extend(this,libraryMethodsAndProperties);};LocalForage.prototype._getSupportedDrivers=function _getSupportedDrivers(drivers){var supportedDrivers=[];for(var i=0,len=drivers.length;i<len;i++){var driverName=drivers[i];if(this.supports(driverName)){supportedDrivers.push(driverName);}}return supportedDrivers;};LocalForage.prototype._wrapLibraryMethodsWithReady=function _wrapLibraryMethodsWithReady(){// Add a stub for each driver API method that delays the call to the\n// corresponding driver method until localForage is ready. These stubs\n// will be replaced by the driver methods as soon as the driver is\n// loaded, so there is no performance impact.\nfor(var i=0,len=LibraryMethods.length;i<len;i++){callWhenReady(this,LibraryMethods[i]);}};LocalForage.prototype.createInstance=function createInstance(options){return new LocalForage(options);};return LocalForage;}();// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\nvar localforage_js=new LocalForage();module.exports=localforage_js;},{\"3\":3}]},{},[4])(4);});/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27));/***/},/* 33 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(global,process){/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"b\",function(){return getGlobalNamespace;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return getGlobal;});/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nvar globalNameSpace;// tslint:disable-next-line:no-any\nfunction getGlobalNamespace(){if(globalNameSpace==null){// tslint:disable-next-line:no-any\nvar ns;if(typeof window!=='undefined'){ns=window;}else if(typeof global!=='undefined'){ns=global;}else if(typeof process!=='undefined'){ns=process;}else if(typeof self!=='undefined'){ns=self;}else{throw new Error('Could not find a global object');}globalNameSpace=ns;}return globalNameSpace;}// tslint:disable-next-line:no-any\nfunction getGlobalMap(){var ns=getGlobalNamespace();if(ns._tfGlobals==null){ns._tfGlobals=new Map();}return ns._tfGlobals;}/**\r\n * Returns a globally accessible 'singleton' object.\r\n *\r\n * @param key the name of the object\r\n * @param init a function to initialize to initialize this object\r\n *             the first time it is fetched.\r\n */function getGlobal(key,init){var globalMap=getGlobalMap();if(globalMap.has(key)){return globalMap.get(key);}else{var singleton=init();globalMap.set(key,singleton);return globalMap.get(key);}}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27),__webpack_require__(35));/***/},/* 34 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return DTYPE_VALUE_SIZE_MAP;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /* Type definitions for exporting and importing of models. */ /**\r\n * A map from Tensor dtype to number of bytes per element of the Tensor.\r\n */var DTYPE_VALUE_SIZE_MAP={'float32':4,'float16':2,'int32':4,'uint16':2,'uint8':1,'bool':1,'complex64':8};/***/},/* 35 */ /***/function(module,exports){// shim for using process in browser\nvar process=module.exports={};// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations\nreturn setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined\nif((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\nreturn cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\nreturn cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations\nreturn clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined\nif((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\nreturn cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n// Some versions of I.E. have different rules for clearTimeout vs setTimeout\nreturn cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects\nfunction Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues\nprocess.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};/***/},/* 36 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isMobile\",function(){return isMobile;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"isBrowser\",function(){return isBrowser;});/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // tslint:disable-next-line:no-any\nfunction _isNavigatorDefined(){return typeof navigator!=='undefined'&&navigator!=null;}function isMobile(){if(_isNavigatorDefined()){// tslint:disable-next-line:no-any\nvar a=navigator.userAgent||navigator.vendor||window.opera;// tslint:disable-next-line:max-line-length\nreturn /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||// tslint:disable-next-line:max-line-length\n/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4));}return false;}function isBrowser(){return typeof window!=='undefined'&&window.document!=null||//@ts-ignore\ntypeof WorkerGlobalScope!=='undefined';}/***/},/* 37 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return maxImpl;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function maxImpl(aVals,reduceSize,outShape,dtype){var vals=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].getTypedArrayFromDType(dtype,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"util\"].sizeFromShape(outShape));for(var i=0;i<vals.length;++i){var offset=i*reduceSize;var max=aVals[offset];for(var j=0;j<reduceSize;++j){var value=aVals[offset+j];if(value>max){max=value;}}vals[i]=max;}return vals;}/***/},/* 38 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"GraphModel\",function(){return(/* reexport */graph_model_GraphModel);});__webpack_require__.d(__webpack_exports__,\"loadGraphModel\",function(){return(/* reexport */loadGraphModel);});__webpack_require__.d(__webpack_exports__,\"deregisterOp\",function(){return(/* reexport */register[\"a\"/* deregisterOp */]);});__webpack_require__.d(__webpack_exports__,\"registerOp\",function(){return(/* reexport */register[\"c\"/* registerOp */]);});__webpack_require__.d(__webpack_exports__,\"version_converter\",function(){return(/* reexport */version);});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js\nvar operation_mapper=__webpack_require__(15);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\nvar utils=__webpack_require__(2);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Helper class for lookup inputs and params for nodes in the model graph.\r\n */var node_value_impl_NodeValueImpl=/*#__PURE__*/function(){function node_value_impl_NodeValueImpl(node,tensorMap,context){var _this66=this;_classCallCheck2(this,node_value_impl_NodeValueImpl);this.node=node;this.tensorMap=tensorMap;this.context=context;this.inputs=[];this.attrs={};this.inputs=node.inputNames.map(function(name){return _this66.getInput(name);});if(node.rawAttrs!=null){this.attrs=Object.keys(node.rawAttrs).reduce(function(attrs,key){attrs[key]=_this66.getAttr(key);return attrs;},{});}}/**\r\n     * Return the value of the attribute or input param.\r\n     * @param name String: name of attribute or input param.\r\n     */_createClass(node_value_impl_NodeValueImpl,[{key:\"getInput\",value:function getInput(name){return Object(utils[\"c\"/* getTensor */])(name,this.tensorMap,this.context);}/**\r\n     * Return the value of the attribute or input param.\r\n     * @param name String: name of attribute or input param.\r\n     */},{key:\"getAttr\",value:function getAttr(name,defaultValue){var value=this.node.rawAttrs[name];if(value.tensor!=null){return Object(utils[\"c\"/* getTensor */])(name,this.tensorMap,this.context);}if(value.i!=null||value.f!=null){return Object(operation_mapper[\"f\"/* getNumberParam */])(this.node.rawAttrs,name,defaultValue);}if(value.s!=null){return Object(operation_mapper[\"i\"/* getStringParam */])(this.node.rawAttrs,name,defaultValue);}if(value.b!=null){return Object(operation_mapper[\"c\"/* getBoolParam */])(this.node.rawAttrs,name,defaultValue);}if(value.shape!=null){return Object(operation_mapper[\"k\"/* getTensorShapeParam */])(this.node.rawAttrs,name,defaultValue);}if(value.type!=null){return Object(operation_mapper[\"e\"/* getDtypeParam */])(this.node.rawAttrs,name,defaultValue);}if(value.list!=null){if(value.list.i!=null||value.list.f!=null){return Object(operation_mapper[\"g\"/* getNumericArrayParam */])(this.node.rawAttrs,name,defaultValue);}if(value.list.s!=null){return Object(operation_mapper[\"h\"/* getStringArrayParam */])(this.node.rawAttrs,name,defaultValue);}if(value.list.shape!=null){return Object(operation_mapper[\"j\"/* getTensorShapeArrayParam */])(this.node.rawAttrs,name,defaultValue);}if(value.list.b!=null){return Object(operation_mapper[\"b\"/* getBoolArrayParam */])(this.node.rawAttrs,name,defaultValue);}if(value.list.type!=null){return Object(operation_mapper[\"d\"/* getDtypeArrayParam */])(this.node.rawAttrs,name,defaultValue);}}return defaultValue;}}]);return node_value_impl_NodeValueImpl;}();// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js\nvar register=__webpack_require__(24);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var executeOp=function executeOp(node,tensorMap,context){switch(node.op){case'BiasAdd':case'AddV2':case'Add':{return[dist[\"add\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'AddN':{return[dist[\"addN\"](Object(utils[\"b\"/* getParamValue */])('tensors',node,tensorMap,context))];}case'FloorMod':case'Mod':return[dist[\"mod\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];case'Mul':return[dist[\"mul\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];case'RealDiv':case'Div':{return[dist[\"div\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'DivNoNan':{return[dist[\"divNoNan\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'FloorDiv':{return[dist[\"floorDiv\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Sub':{return[dist[\"sub\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Minimum':{return[dist[\"minimum\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Maximum':{return[dist[\"maximum\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Pow':{return[dist[\"pow\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'SquaredDifference':{return[dist[\"squaredDifference\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var CATEGORY='arithmetic';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var basic_math_executor_executeOp=function basic_math_executor_executeOp(node,tensorMap,context){switch(node.op){case'Abs':case'ComplexAbs':return[dist[\"abs\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Acos':return[dist[\"acos\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Acosh':return[dist[\"acosh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Asin':return[dist[\"asin\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Asinh':return[dist[\"asinh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Atan':return[dist[\"atan\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Atan2':return[dist[\"atan2\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('y',node,tensorMap,context))];case'Atanh':return[dist[\"atanh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Ceil':return[dist[\"ceil\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Complex':return[dist[\"complex\"](Object(utils[\"b\"/* getParamValue */])('real',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('imag',node,tensorMap,context))];case'Cos':return[dist[\"cos\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Cosh':return[dist[\"cosh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Elu':return[dist[\"elu\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Erf':return[dist[\"erf\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Exp':return[dist[\"exp\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Expm1':{return[dist[\"expm1\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Floor':return[dist[\"floor\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Log':return[dist[\"log\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Log1p':{return[dist[\"log1p\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Imag':return[dist[\"imag\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Neg':return[dist[\"neg\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Reciprocal':{return[dist[\"reciprocal\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Real':return[dist[\"real\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Relu':return[dist[\"relu\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Round':{return[dist[\"round\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Selu':return[dist[\"selu\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Sigmoid':return[dist[\"sigmoid\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Sin':return[dist[\"sin\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Sign':{return[dist[\"sign\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Sinh':{return[dist[\"sinh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Softplus':{return[dist[\"softplus\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Sqrt':{return[dist[\"sqrt\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Square':{return[dist[\"square\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Tanh':{return[dist[\"tanh\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'Tan':return[dist[\"tan\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];case'Relu6':case'ClipByValue':return[dist[\"clipByValue\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('clipValueMin',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('clipValueMax',node,tensorMap,context))];case'Rsqrt':return[dist[\"rsqrt\"](Object(utils[\"c\"/* getTensor */])(node.inputNames[0],tensorMap,context))];case'Prod':return[dist[\"prod\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('axes',node,tensorMap,context))];case'LeakyRelu':return[dist[\"leakyRelu\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('alpha',node,tensorMap,context))];case'Prelu':return[dist[\"prelu\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('alpha',node,tensorMap,context))];default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var basic_math_executor_CATEGORY='basic_math';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * This differs from util.assertShapesMatch in that it allows values of\r\n * negative one, an undefined size of a dimensinon, in a shape to match\r\n * anything.\r\n */function assertShapesMatchAllowUndefinedSize(shapeA,shapeB){var errorMessagePrefix=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';dist[\"util\"].assert(shapesEqualAllowUndefinedSize(shapeA,shapeB),function(){return errorMessagePrefix+\" Shapes \".concat(shapeA,\" and \").concat(shapeB,\" must match\");});}function shapesEqualAllowUndefinedSize(n1,n2){if(n1.length!==n2.length){return false;}for(var i=0;i<n1.length;i++){if(n1[i]!==-1&&n2[i]!==-1&&n1[i]!==n2[i]){return false;}}return true;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * The TensorArray object keeps an array of Tensors.  It\r\n * allows reading from the array and writing to the array.\r\n */var tensor_array_TensorArray=/*#__PURE__*/function(){function tensor_array_TensorArray(name,dtype,maxSize,elementShape,identicalElementShapes,dynamicSize,clearAfterRead){_classCallCheck2(this,tensor_array_TensorArray);this.name=name;this.dtype=dtype;this.maxSize=maxSize;this.elementShape=elementShape;this.identicalElementShapes=identicalElementShapes;this.dynamicSize=dynamicSize;this.clearAfterRead=clearAfterRead;this.tensors=[];this.closed_=false;this.id=tensor_array_TensorArray.nextId++;}_createClass(tensor_array_TensorArray,[{key:\"closed\",get:function get(){return this.closed_;}/**\r\n     * Close the current TensorArray.\r\n     */},{key:\"clearAndClose\",value:function clearAndClose(){this.tensors.forEach(function(tensor){return tensor.tensor.dispose();});this.tensors=[];this.closed_=true;}},{key:\"size\",value:function size(){return this.tensors.length;}/**\r\n     * Read the value at location index in the TensorArray.\r\n     * @param index Number the index to read from.\r\n     */},{key:\"read\",value:function read(index){if(this.closed_){throw new Error(\"TensorArray \".concat(this.name,\" has already been closed.\"));}if(index<0||index>=this.size()){throw new Error(\"Tried to read from index \".concat(index,\", but array size is: \").concat(this.size()));}var tensorWithState=this.tensors[index];if(tensorWithState.cleared){throw new Error(\"TensorArray \".concat(this.name,\": Could not read index \").concat(index,\" twice because it was cleared after a previous read \")+\"(perhaps try setting clear_after_read = false?).\");}if(this.clearAfterRead){tensorWithState.cleared=true;}tensorWithState.read=true;return tensorWithState.tensor;}/**\r\n     * Helper method to read multiple tensors from the specified indices.\r\n     */},{key:\"readMany\",value:function readMany(indices){var _this67=this;return indices.map(function(index){return _this67.read(index);});}/**\r\n     * Write value into the index of the TensorArray.\r\n     * @param index number the index to write to.\r\n     * @param tensor\r\n     */},{key:\"write\",value:function write(index,tensor){if(this.closed_){throw new Error(\"TensorArray \".concat(this.name,\" has already been closed.\"));}if(index<0||!this.dynamicSize&&index>=this.maxSize){throw new Error(\"Tried to write to index \".concat(index,\", but array is not resizeable and size is: \").concat(this.maxSize));}var t=this.tensors[index]||{};if(tensor.dtype!==this.dtype){throw new Error(\"TensorArray \".concat(this.name,\": Could not write to TensorArray index \").concat(index,\",\\n          because the value dtype is \").concat(tensor.dtype,\", but TensorArray dtype is \").concat(this.dtype,\".\"));}// Set the shape for the first time write to unknow shape tensor array\nif(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)){this.elementShape=tensor.shape;}assertShapesMatchAllowUndefinedSize(this.elementShape,tensor.shape,\"TensorArray \".concat(this.name,\": Could not write to TensorArray index \").concat(index,\".\"));if(t&&t.read){throw new Error(\"TensorArray \".concat(this.name,\": Could not write to TensorArray index \").concat(index,\", because it has already been read.\"));}if(t&&t.written){throw new Error(\"TensorArray \".concat(this.name,\": Could not write to TensorArray index \").concat(index,\", because it has already been written.\"));}t.tensor=tensor;t.written=true;this.tensors[index]=t;}/**\r\n     * Helper method to write multiple tensors to the specified indices.\r\n     */},{key:\"writeMany\",value:function writeMany(indices,tensors){var _this68=this;if(indices.length!==tensors.length){throw new Error(\"TensorArray \".concat(this.name,\": could not write multiple tensors,\")+\"because the index size: \".concat(indices.length,\" is not the same as tensors size: \").concat(tensors.length,\".\"));}indices.forEach(function(i,index){return _this68.write(i,tensors[index]);});}/**\r\n     * Return selected values in the TensorArray as a packed Tensor. All of\r\n     * selected values must have been written and their shapes must all match.\r\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\r\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\r\n     *    all tensors in the original order.\r\n     * @param [dtype]\r\n     */},{key:\"gather\",value:function gather(indices,dtype){if(!!dtype&&dtype!==this.dtype){throw new Error(\"TensorArray dtype is \".concat(this.dtype,\" but gather requested dtype \").concat(dtype));}if(!indices){indices=[];for(var i=0;i<this.size();i++){indices.push(i);}}else{indices=indices.slice(0,this.size());}if(indices.length===0){return Object(dist[\"tensor\"])([],[0].concat(this.elementShape));}// Read all the PersistentTensors into a vector to keep track of\n// their memory.\nvar tensors=this.readMany(indices);assertShapesMatchAllowUndefinedSize(this.elementShape,tensors[0].shape,'TensorArray shape mismatch: ');return Object(dist[\"stack\"])(tensors,0);}/**\r\n     * Return the values in the TensorArray as a concatenated Tensor.\r\n     */},{key:\"concat\",value:function concat(dtype){if(!!dtype&&dtype!==this.dtype){throw new Error(\"TensorArray dtype is \".concat(this.dtype,\" but concat requested dtype \").concat(dtype));}if(this.size()===0){return Object(dist[\"tensor\"])([],[0].concat(this.elementShape));}var indices=[];for(var i=0;i<this.size();i++){indices.push(i);}// Collect all the tensors from the tensors array.\nvar tensors=this.readMany(indices);assertShapesMatchAllowUndefinedSize(this.elementShape,tensors[0].shape,\"TensorArray shape mismatch: tensor array shape (\".concat(this.elementShape,\") vs first tensor shape (\").concat(tensors[0].shape,\")\"));return Object(dist[\"concat\"])(tensors,0);}/**\r\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\r\n     * @param indices nummber[] values in [0, max_value). If the\r\n     *    TensorArray is not dynamic, max_value=size().\r\n     * @param tensor Tensor input tensor.\r\n     */},{key:\"scatter\",value:function scatter(indices,tensor){if(tensor.dtype!==this.dtype){throw new Error(\"TensorArray dtype is \".concat(this.dtype,\" but tensor has dtype \").concat(tensor.dtype));}if(indices.length!==tensor.shape[0]){throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length,\" vs. \").concat(tensor.shape[0]));}var maxIndex=Math.max.apply(Math,_toConsumableArray2(indices));if(!this.dynamicSize&&maxIndex>=this.maxSize){throw new Error(\"Max index must be < array size (\".concat(maxIndex,\"  vs. \").concat(this.maxSize,\")\"));}this.writeMany(indices,Object(dist[\"unstack\"])(tensor,0));}/**\r\n     * Split the values of a Tensor into the TensorArray.\r\n     * @param length number[] with the lengths to use when splitting value along\r\n     *    its first dimension.\r\n     * @param tensor Tensor, the tensor to split.\r\n     */},{key:\"split\",value:function split(length,tensor){var _this69=this;if(tensor.dtype!==this.dtype){throw new Error(\"TensorArray dtype is \".concat(this.dtype,\" but tensor has dtype \").concat(tensor.dtype));}var totalLength=0;var cumulativeLengths=length.map(function(len){totalLength+=len;return totalLength;});if(totalLength!==tensor.shape[0]){throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength,\", and tensor's shape is: \").concat(tensor.shape));}if(!this.dynamicSize&&length.length!==this.maxSize){throw new Error(\"TensorArray's size is not equal to the size of lengths (\".concat(this.maxSize,\" vs. \").concat(length.length,\"), \")+'and the TensorArray is not marked as dynamically resizeable');}var elementPerRow=totalLength===0?0:tensor.size/totalLength;var tensors=[];Object(dist[\"tidy\"])(function(){tensor=tensor.reshape([1,totalLength,elementPerRow]);for(var i=0;i<length.length;++i){var previousLength=i===0?0:cumulativeLengths[i-1];var _indices2=[0,previousLength,0];var sizes=[1,length[i],elementPerRow];tensors[i]=Object(dist[\"slice\"])(tensor,_indices2,sizes).reshape(_this69.elementShape);}return tensors;});var indices=[];for(var i=0;i<length.length;i++){indices[i]=i;}this.writeMany(indices,tensors);}}]);return tensor_array_TensorArray;}();tensor_array_TensorArray.nextId=0;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var control_executor_executeOp=/*#__PURE__*/function(){var _ref20=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee94(node,tensorMap,context){var thenFunc,elseFunc,cond,args,condValue,bodyFunc,condFunc,_args95,condTensor,_condValue,result,_condTensor,pred,_data2,inputName,frameId,data,tensor,input,size,dtype,elementShape,dynamicSize,clearAfterRead,identicalElementShapes,name,tensorArray,id,index,writeTensor,writeTensorArray,readId,readIndex,readTensorArray,gatherId,gatherIndices,gatherDtype,gatherTensorArray,scatterId,scatterIndices,scatterTensor,scatterTensorArray,concatId,concatTensorArray,concatDtype,splitId,splitTensor,lengths,splitTensorArray,sizeId,sizeTensorArray,closeId,closeTensorArray;return regeneratorRuntime.wrap(function _callee94$(_context94){while(1){switch(_context94.prev=_context94.next){case 0:_context94.t0=node.op;_context94.next=_context94.t0==='If'?3:_context94.t0==='StatelessIf'?3:_context94.t0==='While'?15:_context94.t0==='StatelessWhile'?15:_context94.t0==='LoopCond'?38:_context94.t0==='Switch'?39:_context94.t0==='Merge'?49:_context94.t0==='Enter'?51:_context94.t0==='Exit'?55:_context94.t0==='NextIteration'?58:_context94.t0==='TensorArrayV3'?61:_context94.t0==='TensorArrayWriteV3'?71:_context94.t0==='TensorArrayReadV3'?77:_context94.t0==='TensorArrayGatherV3'?81:_context94.t0==='TensorArrayScatterV3'?86:_context94.t0==='TensorArrayConcatV3'?92:_context94.t0==='TensorArraySplitV3'?96:_context94.t0==='TensorArraySizeV3'?102:_context94.t0==='TensorArrayCloseV3'?105:109;break;case 3:thenFunc=Object(utils[\"b\"/* getParamValue */])('thenBranch',node,tensorMap,context);elseFunc=Object(utils[\"b\"/* getParamValue */])('elseBranch',node,tensorMap,context);cond=Object(utils[\"b\"/* getParamValue */])('cond',node,tensorMap,context);args=Object(utils[\"b\"/* getParamValue */])('args',node,tensorMap,context);_context94.next=9;return cond.data();case 9:condValue=_context94.sent;if(!condValue[0]){_context94.next=14;break;}return _context94.abrupt(\"return\",context.functionMap[thenFunc].executeFunctionAsync(args));case 14:return _context94.abrupt(\"return\",context.functionMap[elseFunc].executeFunctionAsync(args));case 15:bodyFunc=Object(utils[\"b\"/* getParamValue */])('body',node,tensorMap,context);condFunc=Object(utils[\"b\"/* getParamValue */])('cond',node,tensorMap,context);_args95=Object(utils[\"b\"/* getParamValue */])('args',node,tensorMap,context);_context94.next=20;return context.functionMap[condFunc].executeFunctionAsync(_args95);case 20:condTensor=_context94.sent[0];_context94.next=23;return condTensor.data();case 23:_condValue=_context94.sent;result=_args95;case 25:if(!_condValue[0]){_context94.next=37;break;}_context94.next=28;return context.functionMap[bodyFunc].executeFunctionAsync(result);case 28:result=_context94.sent;_context94.next=31;return context.functionMap[condFunc].executeFunctionAsync(result);case 31:_condTensor=_context94.sent[0];_context94.next=34;return _condTensor.data();case 34:_condValue=_context94.sent;_context94.next=25;break;case 37:return _context94.abrupt(\"return\",result);case 38:return _context94.abrupt(\"return\",[Object(utils[\"b\"/* getParamValue */])('pred',node,tensorMap,context).clone()]);case 39:pred=Object(utils[\"b\"/* getParamValue */])('pred',node,tensorMap,context);_data2=Object(utils[\"b\"/* getParamValue */])('data',node,tensorMap,context);// Outputs nodes :0 => false, :1 => true\n_context94.next=43;return pred.data();case 43:if(!_context94.sent[0]){_context94.next=47;break;}_context94.t1=[undefined,_data2.clone()];_context94.next=48;break;case 47:_context94.t1=[_data2.clone(),undefined];case 48:return _context94.abrupt(\"return\",_context94.t1);case 49:inputName=node.inputNames.find(function(name){return Object(utils[\"c\"/* getTensor */])(name,tensorMap,context)!==undefined;});return _context94.abrupt(\"return\",inputName?[Object(utils[\"c\"/* getTensor */])(inputName,tensorMap,context).clone()]:undefined);case 51:frameId=Object(utils[\"b\"/* getParamValue */])('frameName',node,tensorMap,context);data=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);context.enterFrame(frameId);return _context94.abrupt(\"return\",[data.clone()]);case 55:tensor=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);context.exitFrame();return _context94.abrupt(\"return\",[tensor.clone()]);case 58:input=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);context.nextIteration();return _context94.abrupt(\"return\",[input.clone()]);case 61:size=Object(utils[\"b\"/* getParamValue */])('size',node,tensorMap,context);dtype=Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context);elementShape=Object(utils[\"b\"/* getParamValue */])('elementShape',node,tensorMap,context);dynamicSize=Object(utils[\"b\"/* getParamValue */])('dynamicSize',node,tensorMap,context);clearAfterRead=Object(utils[\"b\"/* getParamValue */])('clearAfterRead',node,tensorMap,context);identicalElementShapes=Object(utils[\"b\"/* getParamValue */])('identicalElementShapes',node,tensorMap,context);name=Object(utils[\"b\"/* getParamValue */])('name',node,tensorMap,context);tensorArray=new tensor_array_TensorArray(name,dtype,size,elementShape,identicalElementShapes,dynamicSize,clearAfterRead);context.addTensorArray(tensorArray);return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(tensorArray.id),Object(dist[\"scalar\"])(1.0)]);case 71:id=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);index=Object(utils[\"b\"/* getParamValue */])('index',node,tensorMap,context);writeTensor=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);writeTensorArray=context.getTensorArray(id);writeTensorArray.write(index,writeTensor);return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(1.0)]);case 77:readId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);readIndex=Object(utils[\"b\"/* getParamValue */])('index',node,tensorMap,context);readTensorArray=context.getTensorArray(readId);return _context94.abrupt(\"return\",[readTensorArray.read(readIndex)]);case 81:gatherId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);gatherIndices=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);gatherDtype=Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context);gatherTensorArray=context.getTensorArray(gatherId);return _context94.abrupt(\"return\",[gatherTensorArray.gather(gatherIndices,gatherDtype)]);case 86:scatterId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);scatterIndices=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);scatterTensor=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);scatterTensorArray=context.getTensorArray(scatterId);scatterTensorArray.scatter(scatterIndices,scatterTensor);return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(1.0)]);case 92:concatId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);concatTensorArray=context.getTensorArray(concatId);concatDtype=Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context);return _context94.abrupt(\"return\",[concatTensorArray.concat(concatDtype)]);case 96:splitId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);splitTensor=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);lengths=Object(utils[\"b\"/* getParamValue */])('lengths',node,tensorMap,context);splitTensorArray=context.getTensorArray(splitId);splitTensorArray.split(lengths,splitTensor);return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(1.0)]);case 102:sizeId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);sizeTensorArray=context.getTensorArray(sizeId);return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(sizeTensorArray.size(),'int32')]);case 105:closeId=Object(utils[\"b\"/* getParamValue */])('tensorArrayId',node,tensorMap,context);closeTensorArray=context.getTensorArray(closeId);closeTensorArray.clearAndClose();return _context94.abrupt(\"return\",[Object(dist[\"scalar\"])(0)]);case 109:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));case 110:case\"end\":return _context94.stop();}}},_callee94);}));return function control_executor_executeOp(_x76,_x77,_x78){return _ref20.apply(this,arguments);};}();var control_executor_CATEGORY='control';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var convolution_executor_executeOp=function convolution_executor_executeOp(node,tensorMap,context){switch(node.op){case'Conv1D':{var stride=Object(utils[\"b\"/* getParamValue */])('stride',node,tensorMap,context);var pad=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var dataFormat=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();var dilation=Object(utils[\"b\"/* getParamValue */])('dilation',node,tensorMap,context);return[dist[\"conv1d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),stride,pad,dataFormat,dilation)];}case'Conv2D':{var _stride=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _dataFormat=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();var dilations=Object(utils[\"b\"/* getParamValue */])('dilations',node,tensorMap,context);return[dist[\"conv2d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),[_stride[1],_stride[2]],_pad,_dataFormat,[dilations[1],dilations[2]])];}case'_FusedConv2D':case'FusedDepthwiseConv2dNative':{var _Object59=Object(utils[\"b\"/* getParamValue */])('fusedOps',node,tensorMap,context),_Object60=_slicedToArray(_Object59,2),extraOp=_Object60[0],activationFunc=_Object60[1];var isBiasAdd=extraOp==='biasadd';var isPrelu=activationFunc==='prelu';var isBatchNorm=extraOp==='fusedbatchnorm';var numArgs=Object(utils[\"b\"/* getParamValue */])('numArgs',node,tensorMap,context);if(isBiasAdd){if(isPrelu&&numArgs!==2){throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu '+'must have two extra arguments: bias and alpha.');}if(!isPrelu&&numArgs!==1){throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have '+'one extra argument: bias.');}}if(isBatchNorm){throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');}var _stride2=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad2=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _dataFormat2=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();var _dilations=Object(utils[\"b\"/* getParamValue */])('dilations',node,tensorMap,context);var _Object61=Object(utils[\"b\"/* getParamValue */])('args',node,tensorMap,context),_Object62=_slicedToArray(_Object61,2),biasArg=_Object62[0],preluArg=_Object62[1];var kernelMethod=node.op==='_FusedConv2D'?dist[\"fused\"].conv2d:dist[\"fused\"].depthwiseConv2d;return[kernelMethod({x:Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),filter:Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),strides:[_stride2[1],_stride2[2]],pad:_pad2,dataFormat:_dataFormat2,dilations:[_dilations[1],_dilations[2]],bias:biasArg,activation:activationFunc,preluActivationWeights:preluArg})];}case'Conv2DBackpropInput':case'Conv2dTranspose':{var shape=Object(utils[\"b\"/* getParamValue */])('outputShape',node,tensorMap,context);var _stride3=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad3=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);return[dist[\"conv2dTranspose\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),shape,[_stride3[1],_stride3[2]],_pad3)];}case'DepthwiseConv2dNative':case'DepthwiseConv2d':{var _stride4=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad4=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _dilations2=Object(utils[\"b\"/* getParamValue */])('dilations',node,tensorMap,context);var _dataFormat3=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();return[dist[\"depthwiseConv2d\"](Object(utils[\"b\"/* getParamValue */])('input',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),[_stride4[1],_stride4[2]],_pad4,_dataFormat3,[_dilations2[1],_dilations2[2]])];}case'Conv3D':{var _stride5=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad5=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _dataFormat4=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();var _dilations3=Object(utils[\"b\"/* getParamValue */])('dilations',node,tensorMap,context);return[dist[\"conv3d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('filter',node,tensorMap,context),[_stride5[1],_stride5[2],_stride5[3]],_pad5,_dataFormat4,[_dilations3[1],_dilations3[2],_dilations3[3]])];}case'AvgPool':{var _stride6=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad6=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var kernelSize=Object(utils[\"b\"/* getParamValue */])('kernelSize',node,tensorMap,context);return[dist[\"avgPool\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),[kernelSize[1],kernelSize[2]],[_stride6[1],_stride6[2]],_pad6)];}case'MaxPool':{var _stride7=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad7=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _kernelSize=Object(utils[\"b\"/* getParamValue */])('kernelSize',node,tensorMap,context);return[dist[\"maxPool\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),[_kernelSize[1],_kernelSize[2]],[_stride7[1],_stride7[2]],_pad7)];}case'MaxPoolWithArgmax':{var _stride8=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad8=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _kernelSize2=Object(utils[\"b\"/* getParamValue */])('kernelSize',node,tensorMap,context);var includeBatchInIndex=Object(utils[\"b\"/* getParamValue */])('includeBatchInIndex',node,tensorMap,context);var _dist$maxPoolWithArgm=dist[\"maxPoolWithArgmax\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),[_kernelSize2[1],_kernelSize2[2]],[_stride8[1],_stride8[2]],_pad8,includeBatchInIndex),result=_dist$maxPoolWithArgm.result,indexes=_dist$maxPoolWithArgm.indexes;return[result,indexes];}case'AvgPool3D':{var _stride9=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad9=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _kernelSize3=Object(utils[\"b\"/* getParamValue */])('kernelSize',node,tensorMap,context);return[dist[\"avgPool3d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),[_kernelSize3[1],_kernelSize3[2],_kernelSize3[3]],[_stride9[1],_stride9[2],_stride9[3]],_pad9)];}case'MaxPool3D':{var _stride10=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var _pad10=Object(utils[\"b\"/* getParamValue */])('pad',node,tensorMap,context);var _kernelSize4=Object(utils[\"b\"/* getParamValue */])('kernelSize',node,tensorMap,context);return[dist[\"maxPool3d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),[_kernelSize4[1],_kernelSize4[2],_kernelSize4[3]],[_stride10[1],_stride10[2],_stride10[3]],_pad10)];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var convolution_executor_CATEGORY='convolution';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var creation_executor_executeOp=function creation_executor_executeOp(node,tensorMap,context){switch(node.op){case'Fill':{var shape=Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context);var dtype=Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context);var value=Object(utils[\"b\"/* getParamValue */])('value',node,tensorMap,context);return[dist[\"fill\"](shape,value,dtype)];}case'LinSpace':{var start=Object(utils[\"b\"/* getParamValue */])('start',node,tensorMap,context);var stop=Object(utils[\"b\"/* getParamValue */])('stop',node,tensorMap,context);var num=Object(utils[\"b\"/* getParamValue */])('num',node,tensorMap,context);return[dist[\"linspace\"](start,stop,num)];}case'Multinomial':{var logits=Object(utils[\"b\"/* getParamValue */])('logits',node,tensorMap,context);var numSamples=Object(utils[\"b\"/* getParamValue */])('numSamples',node,tensorMap,context);var seed=Object(utils[\"b\"/* getParamValue */])('seed',node,tensorMap,context);return[dist[\"multinomial\"](logits,numSamples,seed)];}case'OneHot':{var indices=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);var depth=Object(utils[\"b\"/* getParamValue */])('depth',node,tensorMap,context);var onValue=Object(utils[\"b\"/* getParamValue */])('onValue',node,tensorMap,context);var offValue=Object(utils[\"b\"/* getParamValue */])('offValue',node,tensorMap,context);return[dist[\"oneHot\"](indices,depth,onValue,offValue)];}case'Ones':{return[dist[\"ones\"](Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context))];}case'OnesLike':{return[dist[\"onesLike\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'RandomUniform':{return[dist[\"randomUniform\"](// tslint:disable-next-line:no-any\nObject(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('minval',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('maxval',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context))];}case'Range':{var _start3=Object(utils[\"b\"/* getParamValue */])('start',node,tensorMap,context);var _stop=Object(utils[\"b\"/* getParamValue */])('stop',node,tensorMap,context);var step=Object(utils[\"b\"/* getParamValue */])('step',node,tensorMap,context);return[dist[\"range\"](_start3,_stop,step,Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context))];}case'TruncatedNormal':{var _shape=Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context);var mean=Object(utils[\"b\"/* getParamValue */])('mean',node,tensorMap,context);var stdDev=Object(utils[\"b\"/* getParamValue */])('stdDev',node,tensorMap,context);var _seed=Object(utils[\"b\"/* getParamValue */])('seed',node,tensorMap,context);return[dist[\"truncatedNormal\"](_shape,mean,stdDev,Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context),_seed)];}case'Zeros':{return[dist[\"zeros\"](Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context))];}case'ZerosLike':{return[dist[\"zerosLike\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var creation_executor_CATEGORY='creation';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var dynamic_executor_executeOp=/*#__PURE__*/function(){var _ref21=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee95(node,tensorMap,context){var boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma,result,condition,_result3;return regeneratorRuntime.wrap(function _callee95$(_context95){while(1){switch(_context95.prev=_context95.next){case 0:_context95.t0=node.op;_context95.next=_context95.t0==='NonMaxSuppressionV5'?3:_context95.t0==='NonMaxSuppressionV3'?3:_context95.t0==='NonMaxSuppressionV2'?3:_context95.t0==='Where'?18:_context95.t0==='ListDiff'?25:26;break;case 3:boxes=Object(utils[\"b\"/* getParamValue */])('boxes',node,tensorMap,context);scores=Object(utils[\"b\"/* getParamValue */])('scores',node,tensorMap,context);maxOutputSize=Object(utils[\"b\"/* getParamValue */])('maxOutputSize',node,tensorMap,context);iouThreshold=Object(utils[\"b\"/* getParamValue */])('iouThreshold',node,tensorMap,context);scoreThreshold=Object(utils[\"b\"/* getParamValue */])('scoreThreshold',node,tensorMap,context);if(!(node.op==='NonMaxSuppressionV5')){_context95.next=14;break;}softNmsSigma=Object(utils[\"b\"/* getParamValue */])('softNmsSigma',node,tensorMap,context);_context95.next=12;return dist[\"image\"].nonMaxSuppressionWithScoreAsync(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold,softNmsSigma);case 12:result=_context95.sent;return _context95.abrupt(\"return\",[result.selectedIndices,result.selectedScores]);case 14:_context95.next=16;return dist[\"image\"].nonMaxSuppressionAsync(boxes,scores,maxOutputSize,iouThreshold,scoreThreshold);case 16:_context95.t1=_context95.sent;return _context95.abrupt(\"return\",[_context95.t1]);case 18:condition=Object(utils[\"b\"/* getParamValue */])('condition',node,tensorMap,context).asType('bool');_context95.next=21;return dist[\"whereAsync\"](condition);case 21:_context95.t2=_context95.sent;_result3=[_context95.t2];condition.dispose();return _context95.abrupt(\"return\",_result3);case 25:return _context95.abrupt(\"return\",dist[\"setdiff1dAsync\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('y',node,tensorMap,context)));case 26:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));case 27:case\"end\":return _context95.stop();}}},_callee95);}));return function dynamic_executor_executeOp(_x79,_x80,_x81){return _ref21.apply(this,arguments);};}();var dynamic_executor_CATEGORY='dynamic';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var evaluation_executor_executeOp=function evaluation_executor_executeOp(node,tensorMap,context){switch(node.op){case'TopKV2':{var x=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);var k=Object(utils[\"b\"/* getParamValue */])('k',node,tensorMap,context);var sorted=Object(utils[\"b\"/* getParamValue */])('sorted',node,tensorMap,context);var result=dist[\"topk\"](x,k,sorted);return[result.values,result.indices];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var evaluation_executor_CATEGORY='evaluation';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var graph_executor_executeOp=function graph_executor_executeOp(node,tensorMap,context){switch(node.op){case'Const':{return tensorMap[node.name];}case'PlaceholderWithDefault':var def=Object(utils[\"b\"/* getParamValue */])('default',node,tensorMap,context);return[Object(utils[\"c\"/* getTensor */])(node.name,tensorMap,context)||def];case'Placeholder':return[Object(utils[\"c\"/* getTensor */])(node.name,tensorMap,context)];case'Identity':case'StopGradient':case'FakeQuantWithMinMaxVars':// This op is currently ignored.\nreturn[Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).clone()];case'IdentityN':return Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).map(function(t){return t.clone();});case'Snapshot':var snapshot=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);return[snapshot.clone()];case'Shape':return[dist[\"tensor1d\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).shape,'int32')];case'ShapeN':return Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).map(function(t){return dist[\"tensor1d\"](t.shape);});case'Size':return[dist[\"scalar\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).size,'int32')];case'Rank':return[dist[\"scalar\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context).rank,'int32')];case'NoOp':return[dist[\"scalar\"](1)];case'Print':var input=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);var data=Object(utils[\"b\"/* getParamValue */])('data',node,tensorMap,context);var message=Object(utils[\"b\"/* getParamValue */])('message',node,tensorMap,context);var summarize=Object(utils[\"b\"/* getParamValue */])('summarize',node,tensorMap,context);console.warn('The graph has a tf.print() operation,'+'usually used for debugging, which slows down performance.');console.log(message);for(var i=0;i<data.length;i++){console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0,summarize));}return[input];default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var graph_executor_CATEGORY='graph';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var image_executor_executeOp=function image_executor_executeOp(node,tensorMap,context){switch(node.op){case'ResizeBilinear':{var images=Object(utils[\"b\"/* getParamValue */])('images',node,tensorMap,context);var size=Object(utils[\"b\"/* getParamValue */])('size',node,tensorMap,context);var alignCorners=Object(utils[\"b\"/* getParamValue */])('alignCorners',node,tensorMap,context);return[dist[\"image\"].resizeBilinear(images,[size[0],size[1]],alignCorners)];}case'ResizeNearestNeighbor':{var _images=Object(utils[\"b\"/* getParamValue */])('images',node,tensorMap,context);var _size4=Object(utils[\"b\"/* getParamValue */])('size',node,tensorMap,context);var _alignCorners=Object(utils[\"b\"/* getParamValue */])('alignCorners',node,tensorMap,context);return[dist[\"image\"].resizeNearestNeighbor(_images,[_size4[0],_size4[1]],_alignCorners)];}case'CropAndResize':{var image=Object(utils[\"b\"/* getParamValue */])('image',node,tensorMap,context);var boxes=Object(utils[\"b\"/* getParamValue */])('boxes',node,tensorMap,context);var boxInd=Object(utils[\"b\"/* getParamValue */])('boxInd',node,tensorMap,context);var cropSize=Object(utils[\"b\"/* getParamValue */])('cropSize',node,tensorMap,context);var method=Object(utils[\"b\"/* getParamValue */])('method',node,tensorMap,context);var extrapolationValue=Object(utils[\"b\"/* getParamValue */])('extrapolationValue',node,tensorMap,context);return[dist[\"image\"].cropAndResize(image,boxes,boxInd,cropSize,method,extrapolationValue)];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var image_executor_CATEGORY='image';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var logical_executor_executeOp=function logical_executor_executeOp(node,tensorMap,context){switch(node.op){case'Equal':{return[dist[\"equal\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'NotEqual':{return[dist[\"notEqual\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Greater':{return[dist[\"greater\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'GreaterEqual':{return[dist[\"greaterEqual\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Less':{return[dist[\"less\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'LessEqual':{return[dist[\"lessEqual\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'LogicalAnd':{return[dist[\"logicalAnd\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'LogicalNot':{return[dist[\"logicalNot\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context))];}case'LogicalOr':{return[dist[\"logicalOr\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}case'Select':case'SelectV2':{return[dist[\"where\"](Object(utils[\"b\"/* getParamValue */])('condition',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var logical_executor_CATEGORY='logical';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var matrices_executor_executeOp=function matrices_executor_executeOp(node,tensorMap,context){switch(node.op){case'BatchMatMul':case'BatchMatMulV2':case'MatMul':return[dist[\"matMul\"](Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('transposeA',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('transposeB',node,tensorMap,context))];case'Transpose':return[dist[\"transpose\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('perm',node,tensorMap,context))];case'_FusedMatMul':var _Object63=Object(utils[\"b\"/* getParamValue */])('fusedOps',node,tensorMap,context),_Object64=_slicedToArray(_Object63,2),extraOp=_Object64[0],activationFunc=_Object64[1];var isBiasAdd=extraOp==='biasadd';var isPrelu=activationFunc==='prelu';var numArgs=Object(utils[\"b\"/* getParamValue */])('numArgs',node,tensorMap,context);if(isBiasAdd){if(isPrelu&&numArgs!==2){throw new Error('Fused MatMul with BiasAdd and Prelu must have two '+'extra arguments: bias and alpha.');}if(!isPrelu&&numArgs!==1){throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');}}var _Object65=Object(utils[\"b\"/* getParamValue */])('args',node,tensorMap,context),_Object66=_slicedToArray(_Object65,2),biasArg=_Object66[0],preluArg=_Object66[1];return[dist[\"fused\"].matMul({a:Object(utils[\"b\"/* getParamValue */])('a',node,tensorMap,context),b:Object(utils[\"b\"/* getParamValue */])('b',node,tensorMap,context),transposeA:Object(utils[\"b\"/* getParamValue */])('transposeA',node,tensorMap,context),transposeB:Object(utils[\"b\"/* getParamValue */])('transposeB',node,tensorMap,context),bias:biasArg,activation:activationFunc,preluActivationWeights:preluArg})];default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var matrices_executor_CATEGORY='matrices';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var normalization_executor_executeOp=function normalization_executor_executeOp(node,tensorMap,context){switch(node.op){case'FusedBatchNorm':case'FusedBatchNormV2':{return[dist[\"batchNorm\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('mean',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('variance',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('offset',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('scale',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('epsilon',node,tensorMap,context))];}case'FusedBatchNormV3':{return[dist[\"batchNorm\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('mean',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('variance',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('offset',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('scale',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('epsilon',node,tensorMap,context))];}case'LRN':{return[dist[\"localResponseNormalization\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('radius',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('bias',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('alpha',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('beta',node,tensorMap,context))];}case'Softmax':{return[dist[\"softmax\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'LogSoftmax':{return[dist[\"logSoftmax\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'SparseToDense':{return[dist[\"sparseToDense\"](Object(utils[\"b\"/* getParamValue */])('sparseIndices',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('outputShape',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('sparseValues',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('defaultValue',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var normalization_executor_CATEGORY='normalization';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var reduction_executor_executeOp=function reduction_executor_executeOp(node,tensorMap,context){switch(node.op){case'Max':{var axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var keepDims=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"max\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),axis,keepDims)];}case'Mean':{var _axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"mean\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis,_keepDims)];}case'Min':{var _axis2=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims2=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"min\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis2,_keepDims2)];}case'Sum':{var _axis3=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims3=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"sum\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis3,_keepDims3)];}case'All':{var _axis4=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims4=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"all\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis4,_keepDims4)];}case'Any':{var _axis5=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims5=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"any\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis5,_keepDims5)];}case'ArgMax':{var _axis6=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);return[dist[\"argMax\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis6)];}case'ArgMin':{var _axis7=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);return[dist[\"argMin\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis7)];}case'Prod':{var _axis8=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _keepDims6=Object(utils[\"b\"/* getParamValue */])('keepDims',node,tensorMap,context);return[dist[\"prod\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis8,_keepDims6)];}case'Cumsum':{var _axis9=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var exclusive=Object(utils[\"b\"/* getParamValue */])('exclusive',node,tensorMap,context);var reverse=Object(utils[\"b\"/* getParamValue */])('reverse',node,tensorMap,context);return[dist[\"cumsum\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis9,exclusive,reverse)];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var reduction_executor_CATEGORY='reduction';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var slice_join_executor_executeOp=function slice_join_executor_executeOp(node,tensorMap,context){switch(node.op){case'ConcatV2':case'Concat':{var n=Object(utils[\"b\"/* getParamValue */])('n',node,tensorMap,context);var axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var inputs=Object(utils[\"b\"/* getParamValue */])('tensors',node,tensorMap,context);inputs=inputs.slice(0,n);return[dist[\"concat\"](inputs,axis)];}case'GatherV2':case'Gather':{var _axis10=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var input=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);var indices=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);return[dist[\"gather\"](input,indices.asType('int32'),_axis10)];}case'ReverseV2':case'Reverse':{var _axis11=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var _input=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);return[dist[\"reverse\"](_input,_axis11)];}case'Slice':{// tslint:disable-next-line:no-any\nvar begin=Object(utils[\"b\"/* getParamValue */])('begin',node,tensorMap,context);// tslint:disable-next-line:no-any\nvar size=Object(utils[\"b\"/* getParamValue */])('size',node,tensorMap,context);return[dist[\"slice\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),begin,size)];}case'StridedSlice':{var _begin=Object(utils[\"b\"/* getParamValue */])('begin',node,tensorMap,context);var end=Object(utils[\"b\"/* getParamValue */])('end',node,tensorMap,context);var strides=Object(utils[\"b\"/* getParamValue */])('strides',node,tensorMap,context);var beginMask=Object(utils[\"b\"/* getParamValue */])('beginMask',node,tensorMap,context);var endMask=Object(utils[\"b\"/* getParamValue */])('endMask',node,tensorMap,context);var ellipsisMask=Object(utils[\"b\"/* getParamValue */])('ellipsisMask',node,tensorMap,context);var newAxisMask=Object(utils[\"b\"/* getParamValue */])('newAxisMask',node,tensorMap,context);var shrinkAxisMask=Object(utils[\"b\"/* getParamValue */])('shrinkAxisMask',node,tensorMap,context);var tensor=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);if(_begin.length===1&&tensor.shape.length>1){for(var i=1;i<tensor.shape.length;i++){_begin.push(0);end.push(tensor.shape[i]);strides.push(strides[0]);}}return[dist[\"stridedSlice\"](tensor,_begin,end,strides,beginMask,endMask,ellipsisMask,newAxisMask,shrinkAxisMask)];}case'Pack':{return dist[\"tidy\"](function(){var axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var tensors=Object(utils[\"b\"/* getParamValue */])('tensors',node,tensorMap,context);// Reshape the tensors to the first tensor's shape if they don't match.\nvar shape=tensors[0].shape;var squeezedShape=tensors[0].squeeze().shape;var mapped=tensors.map(function(tensor){var sameShape=dist[\"util\"].arraysEqual(tensor.shape,shape);if(!sameShape&&!dist[\"util\"].arraysEqual(tensor.squeeze().shape,squeezedShape)){throw new Error('the input tensors shape does not match');}return sameShape?tensor:tensor.reshape(shape);});return[dist[\"stack\"](mapped,axis)];});}case'Unpack':{return dist[\"tidy\"](function(){var axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var tensor=Object(utils[\"b\"/* getParamValue */])('tensor',node,tensorMap,context);return dist[\"unstack\"](tensor,axis);});}case'Tile':{var reps=Object(utils[\"b\"/* getParamValue */])('reps',node,tensorMap,context);return[dist[\"tile\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),reps)];}case'Split':case'SplitV':{var _axis12=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);var numOrSizeSplits=Object(utils[\"b\"/* getParamValue */])('numOrSizeSplits',node,tensorMap,context);return dist[\"split\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),numOrSizeSplits,_axis12);}case'ScatterNd':{var _indices3=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);var values=Object(utils[\"b\"/* getParamValue */])('values',node,tensorMap,context);var shape=Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context);return[dist[\"scatterND\"](_indices3,values,shape)];}case'GatherNd':{var x=Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context);var _indices4=Object(utils[\"b\"/* getParamValue */])('indices',node,tensorMap,context);return[dist[\"gatherND\"](x,_indices4)];}case'SparseToDense':{var _indices5=Object(utils[\"b\"/* getParamValue */])('sparseIndices',node,tensorMap,context);var _shape2=Object(utils[\"b\"/* getParamValue */])('outputShape',node,tensorMap,context);var sparseValues=Object(utils[\"b\"/* getParamValue */])('sparseValues',node,tensorMap,context);var defaultValue=Object(utils[\"b\"/* getParamValue */])('defaultValue',node,tensorMap,context);return[dist[\"sparseToDense\"](_indices5,sparseValues,_shape2,sparseValues.dtype===defaultValue.dtype?defaultValue:defaultValue.asType(sparseValues.dtype))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var slice_join_executor_CATEGORY='slice_join';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var spectral_executor_executeOp=function spectral_executor_executeOp(node,tensorMap,context){switch(node.op){case'FFT':{return[dist[\"fft\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'IFFT':{return[dist[\"ifft\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'RFFT':{return[dist[\"rfft\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}case'IRFFT':{return[dist[\"irfft\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var spectral_executor_CATEGORY='spectral';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transformation_executor_executeOp=function transformation_executor_executeOp(node,tensorMap,context){switch(node.op){case'Cast':{return[dist[\"cast\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('dtype',node,tensorMap,context))];}case'ExpandDims':{var axis=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);return[dist[\"expandDims\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),axis)];}case'Squeeze':{var _axis13=Object(utils[\"b\"/* getParamValue */])('axis',node,tensorMap,context);return[dist[\"squeeze\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_axis13)];}case'Reshape':{return[dist[\"reshape\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context))];}case'PadV2':case'Pad':{return[dist[\"pad\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"f\"/* split */])(Object(utils[\"b\"/* getParamValue */])('padding',node,tensorMap,context),2),Object(utils[\"b\"/* getParamValue */])('constantValue',node,tensorMap,context))];}case'SpaceToBatchND':{var blockShape=Object(utils[\"b\"/* getParamValue */])('blockShape',node,tensorMap,context);var paddings=Object(utils[\"f\"/* split */])(Object(utils[\"b\"/* getParamValue */])('paddings',node,tensorMap,context),2);return[dist[\"spaceToBatchND\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),blockShape,paddings)];}case'BatchToSpaceND':{var _blockShape=Object(utils[\"b\"/* getParamValue */])('blockShape',node,tensorMap,context);var crops=Object(utils[\"f\"/* split */])(Object(utils[\"b\"/* getParamValue */])('crops',node,tensorMap,context),2);return[dist[\"batchToSpaceND\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),_blockShape,crops)];}case'DepthToSpace':{var blockSize=Object(utils[\"b\"/* getParamValue */])('blockSize',node,tensorMap,context);var dataFormat=Object(utils[\"b\"/* getParamValue */])('dataFormat',node,tensorMap,context).toUpperCase();return[dist[\"depthToSpace\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),blockSize,dataFormat)];}case'BroadcastTo':{return[dist[\"broadcastTo\"](Object(utils[\"b\"/* getParamValue */])('x',node,tensorMap,context),Object(utils[\"b\"/* getParamValue */])('shape',node,tensorMap,context))];}default:throw TypeError(\"Node type \".concat(node.op,\" is not implemented\"));}};var transformation_executor_CATEGORY='transformation';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Executes the op defined by the node object.\r\n * @param node\r\n * @param tensorMap contains tensors for executed nodes and weights\r\n */function operation_executor_executeOp(node,tensorMap,context){var value=function(node,tensorMap,context){switch(node.category){case'arithmetic':return dist[\"tidy\"](function(){return executeOp(node,tensorMap,context);});case'basic_math':return dist[\"tidy\"](function(){return basic_math_executor_executeOp(node,tensorMap,context);});case'control':return control_executor_executeOp(node,tensorMap,context);case'convolution':return dist[\"tidy\"](function(){return convolution_executor_executeOp(node,tensorMap,context);});case'creation':return dist[\"tidy\"](function(){return creation_executor_executeOp(node,tensorMap,context);});case'dynamic':return dynamic_executor_executeOp(node,tensorMap,context);case'evaluation':return dist[\"tidy\"](function(){return evaluation_executor_executeOp(node,tensorMap,context);});case'image':return dist[\"tidy\"](function(){return image_executor_executeOp(node,tensorMap,context);});case'graph':return dist[\"tidy\"](function(){return graph_executor_executeOp(node,tensorMap,context);});case'logical':return dist[\"tidy\"](function(){return logical_executor_executeOp(node,tensorMap,context);});case'matrices':return dist[\"tidy\"](function(){return matrices_executor_executeOp(node,tensorMap,context);});case'normalization':return dist[\"tidy\"](function(){return normalization_executor_executeOp(node,tensorMap,context);});case'reduction':return dist[\"tidy\"](function(){return reduction_executor_executeOp(node,tensorMap,context);});case'slice_join':return dist[\"tidy\"](function(){return slice_join_executor_executeOp(node,tensorMap,context);});case'spectral':return dist[\"tidy\"](function(){return spectral_executor_executeOp(node,tensorMap,context);});case'transformation':return dist[\"tidy\"](function(){return transformation_executor_executeOp(node,tensorMap,context);});case'custom':var opMapper=Object(register[\"b\"/* getRegisteredOp */])(node.op);if(opMapper&&opMapper.customExecutor){return opMapper.customExecutor(new node_value_impl_NodeValueImpl(node,tensorMap,context));}else{throw TypeError(\"Custom op \".concat(node.op,\" is not registered.\"));}default:throw TypeError(\"Unknown op '\".concat(node.op,\"'. File an issue at \")+\"https://github.com/tensorflow/tfjs/issues so we can add it\"+\", or register a custom execution with tf.registerOp()\");}}(node,tensorMap,context);if(value instanceof Promise){return value.then(function(data){return[].concat(data);});}return[].concat(value);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js\n/**\r\n * ExecutionContext captures the runtime environment of the node. It keeps\r\n * track of the current frame and iteration for the control flow ops.\r\n *\r\n * For example, typical Dynamic RNN model may contain loops, for which\r\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\r\n * current execution frame, and NextIteration Nodes for iteration id increment.\r\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\r\n */var ExecutionContext=/*#__PURE__*/function(){function ExecutionContext(weightMap,tensorArrayMap){var functionMap=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck2(this,ExecutionContext);this.weightMap=weightMap;this.tensorArrayMap=tensorArrayMap;this.functionMap=functionMap;this.rootContext={id:0,frameName:'',iterationId:0};this.contexts=[this.rootContext];this.lastId=0;this.generateCurrentContextIds();}_createClass(ExecutionContext,[{key:\"newFrame\",value:function newFrame(id,frameName){return{id:id,frameName:frameName,iterationId:0};}/**\r\n     * Set the current context\r\n     * @param contexts: ExecutionContextInfo[] the current path of execution\r\n     * frames\r\n     */},{key:\"currentContext\",get:function get(){return this.contexts;}/**\r\n     * Returns the current context in string format.\r\n     */,set:function set(contexts){if(this.contexts!==contexts){this.contexts=contexts;this.generateCurrentContextIds();}}},{key:\"currentContextId\",get:function get(){return this._currentContextIds[0];}/**\r\n     * Returns the current context and all parent contexts in string format.\r\n     * This allow access to the nodes in the current and parent frames.\r\n     */},{key:\"currentContextIds\",get:function get(){return this._currentContextIds;}},{key:\"generateCurrentContextIds\",value:function generateCurrentContextIds(){var names=[];for(var i=0;i<this.contexts.length-1;i++){var contexts=this.contexts.slice(0,this.contexts.length-i);names.push(this.contextIdforContexts(contexts));}names.push('');this._currentContextIds=names;}},{key:\"contextIdforContexts\",value:function contextIdforContexts(contexts){return contexts?contexts.map(function(context){return context.id===0&&context.iterationId===0?'':\"\".concat(context.frameName,\"-\").concat(context.iterationId);}).join('/'):'';}/**\r\n     * Enter a new frame, a new context is pushed on the current context list.\r\n     * @param frameId new frame id\r\n     */},{key:\"enterFrame\",value:function enterFrame(frameId){if(this.contexts){this.lastId++;this.contexts=this.contexts.slice();this.contexts.push(this.newFrame(this.lastId,frameId));this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));}}/**\r\n     * Exit the current frame, the last context is removed from the current\r\n     * context list.\r\n     */},{key:\"exitFrame\",value:function exitFrame(){if(this.contexts&&this.contexts.length>1){this.contexts=this.contexts.slice();this.contexts.splice(-1);this.currentContextIds.shift();}else{throw new Error('Cannot exit frame, the context is empty');}}/**\r\n     * Enter the next iteration of a loop, the iteration id of last context is\r\n     * increased.\r\n     */},{key:\"nextIteration\",value:function nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice();this.lastId++;var context=Object.assign({},this.contexts[this.contexts.length-1]);context.iterationId+=1;context.id=this.lastId;this.contexts.splice(-1,1,context);this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts));}else{throw new Error('Cannot increase frame iteration, the context is empty');}}},{key:\"getWeight\",value:function getWeight(name){return this.weightMap[name];}},{key:\"addTensorArray\",value:function addTensorArray(tensorArray){this.tensorArrayMap[tensorArray.id]=tensorArray;}},{key:\"getTensorArray\",value:function getTensorArray(id){return this.tensorArrayMap[id];}}]);return ExecutionContext;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Given graph inputs and desired outputs, find the minimal set of nodes\r\n * to execute in order to compute the outputs. In addition return other useful\r\n * info such:\r\n * - Missing inputs needed to compute the output.\r\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\r\n * - Alternative inputs in order to avoid async (dynamic op) execution.\r\n */function getExecutionSubgraph(inputs,outputs,weightMap){var usedNodes=new Set();var missingInputs=[];var dynamicNode=null;var syncInputs=null;// Start with the outputs, going backwards and find all the nodes that are\n// needed to compute those outputs.\nvar seen=new Set();var inputNodeNames=Object.keys(inputs).map(function(name){return Object(utils[\"e\"/* parseNodeName */])(name)[0];});var frontier=_toConsumableArray2(outputs);while(frontier.length>0){var node=frontier.pop();if(isControlFlow(node)||isDynamicShape(node)){if(dynamicNode==null){dynamicNode=node;syncInputs=dynamicNode.children.map(function(child){return child.name;}).filter(function(name){return usedNodes.has(name);});}}usedNodes.add(node.name);// Weights are dead end since we already have their values.\nif(weightMap[node.name]!=null){continue;}// This node is a dead end since it's one of the user-provided inputs.\nif(inputNodeNames.indexOf(node.name)!==-1){continue;}if(node.inputs.length===0){missingInputs.push(node.name);continue;}node.inputs.forEach(function(input){// Don't add to the frontier if it is already there.\nif(seen.has(input.name)){return;}seen.add(input.name);frontier.push(input);});}return{inputs:inputs,outputs:outputs,usedNodes:usedNodes,missingInputs:missingInputs,dynamicNode:dynamicNode,syncInputs:syncInputs};}/**\r\n * Given the execution info, return a list of nodes in topological order that\r\n * need to be executed to compute the output.\r\n */function getNodesInTopologicalOrder(graph,weightMap,executionInfo){var usedNodes=executionInfo.usedNodes,inputs=executionInfo.inputs;var frontier=[];var inputNodes=Object.keys(inputs).map(function(name){return Object(utils[\"e\"/* parseNodeName */])(name)[0];}).map(function(name){return graph.nodes[name];});inputNodes.forEach(function(input){if(usedNodes.has(input.name)){frontier.push(input);}});graph.weights.forEach(function(weight){if(usedNodes.has(weight.name)){frontier.push(weight);}});var seen=new Set();var orderedNodes=[];while(frontier.length>0){var node=frontier.pop();seen.add(node.name);if(!weightMap[node.name]){orderedNodes.push(node);}node.children.forEach(function(child){if(!seen.has(child.name)&&usedNodes.has(child.name)&&child.inputs.every(function(input){return seen.has(input.name);})){frontier.push(child);}});}return orderedNodes;}var CONTROL_FLOW_OPS=['Switch','Merge','Enter','Exit','NextIteration','StatelessIf','StatelessWhile'];var DYNAMIC_SHAPE_OPS=['NonMaxSuppressionV2','NonMaxSuppressionV3','NonMaxSuppressionV5','Where'];function isControlFlow(node){return CONTROL_FLOW_OPS.indexOf(node.op)>=0;}function isDynamicShape(node){return DYNAMIC_SHAPE_OPS.indexOf(node.op)>=0;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var graph_executor_GraphExecutor=/*#__PURE__*/function(){/**\r\n     *\r\n     * @param graph Graph the model or function graph to be executed.\r\n     * @param parent When building function exector you need to set the parent\r\n     * executor. Since the weights and function executor maps are set at parant\r\n     * level, that function executor can access the function maps and weight maps\r\n     * through the parent.\r\n     */function graph_executor_GraphExecutor(graph,parent){var _this70=this;_classCallCheck2(this,graph_executor_GraphExecutor);this.graph=graph;this.parent=parent;this.compiledMap=new Map();this._weightMap={};this.SEPERATOR=',';this._functions={};this._functionExecutorMap={};this._outputs=graph.outputs;this._inputs=graph.inputs;this._signature=graph.signature;this._functions=graph.functions;// create sub-graph executors\nif(graph.functions!=null){Object.keys(graph.functions).forEach(function(name){_this70._functionExecutorMap[name]=new graph_executor_GraphExecutor(graph.functions[name],_this70);});}}_createClass(graph_executor_GraphExecutor,[{key:\"weightIds\",get:function get(){return this.parent?this.parent.weightIds:this._weightIds;}},{key:\"functionExecutorMap\",get:function get(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap;}},{key:\"weightMap\",get:function get(){return this.parent?this.parent.weightMap:this._weightMap;},set:function set(weightMap){var _ref22;var weightIds=Object.keys(weightMap).map(function(key){return weightMap[key].map(function(tensor){return tensor.id;});});this._weightIds=(_ref22=[]).concat.apply(_ref22,_toConsumableArray2(weightIds));this._weightMap=weightMap;}},{key:\"inputs\",get:function get(){return this._inputs.map(function(node){return{name:node.name,shape:node.attrParams['shape']?node.attrParams['shape'].value:undefined,dtype:node.attrParams['dtype']?node.attrParams['dtype'].value:undefined};});}},{key:\"outputs\",get:function get(){return this._outputs.map(function(node){return{name:node.name,shape:node.attrParams['shape']?node.attrParams['shape'].value:undefined,dtype:node.attrParams['dtype']?node.attrParams['dtype'].value:undefined};});}},{key:\"inputNodes\",get:function get(){return this._inputs.map(function(node){return node.signatureKey||node.name;});}},{key:\"outputNodes\",get:function get(){return this._outputs.map(function(node){var name=node.signatureKey||node.name;return node.defaultOutput?\"\".concat(name,\":\").concat(node.defaultOutput):name;});}},{key:\"functions\",get:function get(){var _this71=this;return Object.keys(this._functions).reduce(function(map,key){map[key]=_this71._functions[key].signature;return map;},{});}},{key:\"getCompilationKey\",value:function getCompilationKey(inputs,outputs){var sortedInputs=inputs.map(function(node){return node.name;}).sort();var sortedOutputs=outputs.map(function(node){return node.name;}).sort();return sortedInputs.join(this.SEPERATOR)+'--'+sortedOutputs.join(this.SEPERATOR);}/**\r\n     * Compiles the inference graph and returns the minimal set of nodes that are\r\n     * required for execution, in the correct execution order.\r\n     */},{key:\"compile\",value:function compile(inputs,outputs){var executionInfo=getExecutionSubgraph(inputs,outputs,this.weightMap);var missingInputs=executionInfo.missingInputs,dynamicNode=executionInfo.dynamicNode,syncInputs=executionInfo.syncInputs;if(dynamicNode!=null){throw new Error(\"This execution contains the node '\".concat(dynamicNode.name,\"', which has \")+\"the dynamic op '\".concat(dynamicNode.op,\"'. Please use \")+\"model.executeAsync() instead. Alternatively, to avoid the \"+\"dynamic ops, specify the inputs [\".concat(syncInputs,\"]\"));}if(missingInputs.length>0){var outNames=outputs.map(function(n){return n.name;});var inNames=Object.keys(inputs);throw new Error(\"Cannot compute the outputs [\".concat(outNames,\"] from the provided inputs \")+\"[\".concat(inNames,\"]. Missing the following inputs: [\").concat(missingInputs,\"]\"));}return getNodesInTopologicalOrder(this.graph,this.weightMap,executionInfo);}/**\r\n     * Executes the inference for given input tensors.\r\n     * @param inputs Tensor map for the model inputs, keyed by the input node\r\n     * names.\r\n     * @param outputs output node name from the Tensorflow model, if no outputs\r\n     * are specified, the default outputs of the model would be used. You can\r\n     * inspect intermediate nodes of the model by adding them to the outputs\r\n     * array.\r\n     */},{key:\"execute\",value:function execute(inputs,outputs){var _this72=this;inputs=this.mapInputs(inputs);var names=Object.keys(inputs).sort();this.checkInputs(inputs);this.checkInputShapeAndType(inputs);outputs=this.mapOutputs(outputs);this.checkOutputs(outputs);var inputNodes=names.map(function(name){return _this72.graph.nodes[Object(utils[\"e\"/* parseNodeName */])(name)[0]];});var outputNodes=outputs.map(function(name){return _this72.graph.nodes[Object(utils[\"e\"/* parseNodeName */])(name)[0]];});var compilationKey=this.getCompilationKey(inputNodes,outputNodes);// Do nothing if the compiled graph cache contains the input.\nvar orderedNodes=this.compiledMap.get(compilationKey);if(orderedNodes==null){orderedNodes=this.compile(inputs,outputNodes);this.compiledMap.set(compilationKey,orderedNodes);}var tensorArrayMap={};return Object(dist[\"tidy\"])(function(){var context=new ExecutionContext(_this72.weightMap,tensorArrayMap,_this72.functionExecutorMap);var tensorsMap=Object.assign({},_this72.weightMap);Object.keys(inputs).forEach(function(name){var _Object67=Object(utils[\"e\"/* parseNodeName */])(name),_Object68=_slicedToArray(_Object67,2),nodeName=_Object68[0],index=_Object68[1];var tensors=[];tensors[index]=inputs[name];tensorsMap[nodeName]=tensors;});var tensorsToKeep=_this72.getFrozenTensorIds(tensorsMap);var intermediateTensorConsumerCount={};for(var i=0;i<orderedNodes.length;i++){var node=orderedNodes[i];if(!tensorsMap[node.name]){var tensors=operation_executor_executeOp(node,tensorsMap,context);if(tensors instanceof Promise){throw new Error(\"The execution of the op '\".concat(node.op,\"' returned a promise. \")+\"Please use model.executeAsync() instead.\");}tensorsMap[node.name]=tensors;_this72.checkTensorForDisposal(node.name,node,tensorsMap,context,tensorsToKeep,outputs,intermediateTensorConsumerCount);}}return outputs.map(function(name){return Object(utils[\"c\"/* getTensor */])(name,tensorsMap,context);});});}},{key:\"getFrozenTensorIds\",value:function getFrozenTensorIds(tensorMap){var ids=[].concat.apply([],Object.keys(tensorMap).map(function(key){return tensorMap[key];}).map(function(tensors){return tensors.map(function(tensor){return tensor.id;});}));return new Set(ids);}},{key:\"checkTensorForDisposal\",value:function checkTensorForDisposal(nodeName,node,tensorMap,context,tensorsToKeep,outputNames,intermediateTensorConsumerCount){// Skip output nodes and any control flow nodes, since its dependency is\n// tricky to track correctly.\nif(node.category==='control'||outputNames.indexOf(nodeName)!==-1){return;}tensorMap[nodeName].forEach(function(tensor){if(tensor!=null){intermediateTensorConsumerCount[tensor.id]=(intermediateTensorConsumerCount[tensor.id]||0)+node.children.length;}});node.inputs.forEach(function(input){// Skip any control flow nodes, since its dependency is tricky to track\n// correctly.\nif(input.category!=='control'){var tensors=Object(utils[\"d\"/* getTensorsForCurrentContenxt */])(input.name,tensorMap,context);if(tensors!=null){tensors.forEach(function(tensor){if(tensor&&!tensorsToKeep.has(tensor.id)){var count=intermediateTensorConsumerCount[tensor.id];if(count===1){tensor.dispose();delete intermediateTensorConsumerCount[tensor.id];}else if(count!=null){// only intermediate nodes has count set, inputs and weights are\n// not.\nintermediateTensorConsumerCount[tensor.id]--;}}});}}});}/**\r\n     * Executes the inference for given input tensors in Async fashion.\r\n     * @param inputs Tensor map for the model inputs, keyed by the input node\r\n     * names.\r\n     * @param outputs output node name from the Tensorflow model, if no outputs\r\n     * are specified, the default outputs of the model would be used. You can\r\n     * inspect intermediate nodes of the model by adding them to the outputs\r\n     * array.\r\n     * @param disableWarning disable the no dynamic ops warning message, default\r\n     * to false\r\n     */},{key:\"executeAsync\",value:function(){var _executeAsync=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee96(inputs,outputs){var _this73=this;var disableWarning,tensorArrayMap,context,tensorMap,results,outputIds,inputIds,_args98=arguments;return regeneratorRuntime.wrap(function _callee96$(_context96){while(1){switch(_context96.prev=_context96.next){case 0:disableWarning=_args98.length>2&&_args98[2]!==undefined?_args98[2]:false;inputs=this.mapInputs(inputs);this.checkInputs(inputs);this.checkInputShapeAndType(inputs);outputs=this.mapOutputs(outputs);this.checkOutputs(outputs);tensorArrayMap={};context=new ExecutionContext(this.weightMap,tensorArrayMap,this.functionExecutorMap);// Graph with control flow op requires runtime evaluation of the execution\n// order, while without control flow the execution order is pre-determined\n// in the compile method.\n_context96.next=10;return this.executeWithControlFlow(inputs,context,outputs,disableWarning);case 10:tensorMap=_context96.sent;results=outputs.map(function(name){return Object(utils[\"c\"/* getTensor */])(name,tensorMap,context);});// dispose all the intermediate tensors\noutputIds=new Set(results.map(function(t){return t.id;}));inputIds=new Set(Object.keys(inputs).map(function(name){return inputs[name].id;}));Object.keys(tensorMap).forEach(function(key){var tensorArray=tensorMap[key];tensorArray.forEach(function(tensor){if(tensor&&!tensor.isDisposed&&!outputIds.has(tensor.id)&&!inputIds.has(tensor.id)&&_this73.weightIds.indexOf(tensor.id)===-1){tensor.dispose();}});});return _context96.abrupt(\"return\",results);case 16:case\"end\":return _context96.stop();}}},_callee96,this);}));function executeAsync(_x82,_x83){return _executeAsync.apply(this,arguments);}return executeAsync;}()},{key:\"executeFunctionAsync\",value:function(){var _executeFunctionAsync=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee97(inputs){var _this74=this;var mappedInputs;return regeneratorRuntime.wrap(function _callee97$(_context97){while(1){switch(_context97.prev=_context97.next){case 0:mappedInputs=inputs.reduce(function(map,tensor,index){map[_this74.inputs[index].name]=tensor;return map;},{});return _context97.abrupt(\"return\",this.executeAsync(mappedInputs,this.outputNodes,true));case 2:case\"end\":return _context97.stop();}}},_callee97,this);}));function executeFunctionAsync(_x84){return _executeFunctionAsync.apply(this,arguments);}return executeFunctionAsync;}()/**\r\n     * When there are control flow nodes in the graph, the graph execution use\r\n     * ExecutionContext to keep track of the frames and loop iterators.\r\n     * @param inputs placeholder tensors for the graph.\r\n     * @param context the execution context object for current execution.\r\n     * @param disableWarning disable no async op warning\r\n     */},{key:\"executeWithControlFlow\",value:function(){var _executeWithControlFlow=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee98(inputs,context,outputNames,disableWarning){var _this75=this;var names,inputNodes,outputNodes,_getExecutionSubgraph,usedNodes,missingInputs,dynamicNode,syncInputs,stack,tensorsMap,intermediateTensorConsumerCount,tensorsToKeep,added,promises,missingOutputs,alternativeMsg;return regeneratorRuntime.wrap(function _callee98$(_context98){while(1){switch(_context98.prev=_context98.next){case 0:names=Object.keys(inputs);inputNodes=names.map(function(name){return _this75.graph.nodes[Object(utils[\"e\"/* parseNodeName */])(name)[0]];});outputNodes=outputNames.map(function(name){return _this75.graph.nodes[Object(utils[\"e\"/* parseNodeName */])(name)[0]];});_getExecutionSubgraph=getExecutionSubgraph(inputs,outputNodes,this.weightMap),usedNodes=_getExecutionSubgraph.usedNodes,missingInputs=_getExecutionSubgraph.missingInputs,dynamicNode=_getExecutionSubgraph.dynamicNode,syncInputs=_getExecutionSubgraph.syncInputs;stack=[].concat(_toConsumableArray2(inputNodes),_toConsumableArray2(this.graph.weights)).map(function(node){return{node:node,contexts:context.currentContext};});tensorsMap=Object.assign({},this.weightMap);Object.keys(inputs).forEach(function(name){var _Object69=Object(utils[\"e\"/* parseNodeName */])(name),_Object70=_slicedToArray(_Object69,2),nodeName=_Object70[0],index=_Object70[1];var tensors=[];tensors[index]=inputs[name];tensorsMap[nodeName]=tensors;});intermediateTensorConsumerCount={};tensorsToKeep=this.getFrozenTensorIds(tensorsMap);added={};case 10:if(!(stack.length>0)){_context98.next=16;break;}promises=this.processStack(inputNodes,stack,context,tensorsMap,added,tensorsToKeep,outputNames,intermediateTensorConsumerCount,usedNodes);_context98.next=14;return Promise.all(promises);case 14:_context98.next=10;break;case 16:if(dynamicNode==null&&!disableWarning){console.warn(\"This model execution did not contain any nodes with control flow \"+\"or dynamic output shapes. You can use model.execute() instead.\");}missingOutputs=outputNodes.filter(function(node){return!isControlFlow(node)&&!Object(utils[\"c\"/* getTensor */])(node.name,tensorsMap,context);}).map(function(node){return node.name;});if(!(missingOutputs.length>0)){_context98.next=22;break;}alternativeMsg='';if(dynamicNode!=null){alternativeMsg=\"Alternatively, to avoid the dynamic ops, use model.execute() \"+\"and specify the inputs [\".concat(syncInputs,\"]\");}throw new Error(\"Cannot compute the outputs [\".concat(missingOutputs,\"] from the provided \")+\"inputs [\".concat(names,\"]. Consider providing the following inputs: \")+\"[\".concat(missingInputs,\"]. \").concat(alternativeMsg));case 22:return _context98.abrupt(\"return\",tensorsMap);case 23:case\"end\":return _context98.stop();}}},_callee98,this);}));function executeWithControlFlow(_x85,_x86,_x87,_x88){return _executeWithControlFlow.apply(this,arguments);}return executeWithControlFlow;}()},{key:\"processStack\",value:function processStack(inputNodes,stack,context,tensorMap,added,tensorsToKeep,outputNames,intermediateTensorConsumerCount,usedNodes){var _this76=this;var promises=[];var _loop12=function _loop12(){var item=stack.pop();context.currentContext=item.contexts;var nodeName='';// The tensor of the Enter op with isConstant set should be set\n// in the parent scope, so it will be available as constant for the\n// whole loop.\nif(item.node.op==='Enter'&&Object(utils[\"b\"/* getParamValue */])('isConstant',item.node,tensorMap,context)){var _Object71=Object(utils[\"a\"/* getNodeNameAndIndex */])(item.node.name,context);var _Object72=_slicedToArray(_Object71,1);nodeName=_Object72[0];}// only process nodes that are not provided as input nodes.\nif(inputNodes.indexOf(item.node)===-1){var tensors=operation_executor_executeOp(item.node,tensorMap,context);if(!nodeName){var _Object73=Object(utils[\"a\"/* getNodeNameAndIndex */])(item.node.name,context);var _Object74=_slicedToArray(_Object73,1);nodeName=_Object74[0];}var currentContext=context.currentContext;if(tensors instanceof Promise){promises.push(tensors.then(function(t){tensorMap[nodeName]=t;context.currentContext=currentContext;_this76.checkTensorForDisposal(nodeName,item.node,tensorMap,context,tensorsToKeep,outputNames,intermediateTensorConsumerCount);_this76.processChildNodes(item.node,stack,context,tensorMap,added,usedNodes);return t;}));}else{tensorMap[nodeName]=tensors;_this76.checkTensorForDisposal(nodeName,item.node,tensorMap,context,tensorsToKeep,outputNames,intermediateTensorConsumerCount);_this76.processChildNodes(item.node,stack,context,tensorMap,added,usedNodes);}}else{_this76.processChildNodes(item.node,stack,context,tensorMap,added,usedNodes);}};while(stack.length>0){_loop12();}return promises;}},{key:\"processChildNodes\",value:function processChildNodes(node,stack,context,tensorMap,added,usedNodes){node.children.forEach(function(childNode){var _Object75=Object(utils[\"a\"/* getNodeNameAndIndex */])(childNode.name,context),_Object76=_slicedToArray(_Object75,1),nodeName=_Object76[0];if(added[nodeName]||!usedNodes.has(childNode.name)){return;}// Merge op can be pushed if any of its inputs has value.\nif(childNode.op==='Merge'){if(childNode.inputNames.some(function(name){return!!Object(utils[\"c\"/* getTensor */])(name,tensorMap,context);})){added[nodeName]=true;stack.push({contexts:context.currentContext,node:childNode});}}else// Otherwise all inputs must to have value.\nif(childNode.inputNames.every(function(name){return!!Object(utils[\"c\"/* getTensor */])(name,tensorMap,context);})){added[nodeName]=true;stack.push({contexts:context.currentContext,node:childNode});}});}/**\r\n     * Releases the memory used by the weight tensors.\r\n     */},{key:\"dispose\",value:function dispose(){var _this77=this;Object.keys(this.weightMap).forEach(function(key){return _this77.weightMap[key].forEach(function(tensor){return tensor.dispose();});});}},{key:\"checkInputShapeAndType\",value:function checkInputShapeAndType(inputs){var _this78=this;Object.keys(inputs).forEach(function(name){var input=inputs[name];var _Object77=Object(utils[\"e\"/* parseNodeName */])(name),_Object78=_slicedToArray(_Object77,1),nodeName=_Object78[0];var node=_this78.graph.nodes[nodeName];if(node.attrParams['shape']&&node.attrParams['shape'].value){var shape=node.attrParams['shape'].value;var match=shape.length===input.shape.length&&input.shape.every(function(dim,index){return shape[index]===-1||shape[index]===dim;});dist[\"util\"].assert(match,function(){return\"The shape of dict['\".concat(node.name,\"'] provided in \")+\"model.execute(dict) must be [\".concat(shape,\"], but was \")+\"[\".concat(input.shape,\"]\");});}if(node.attrParams['dtype']&&node.attrParams['dtype'].value){dist[\"util\"].assert(input.dtype===node.attrParams['dtype'].value,function(){return\"The dtype of dict['\".concat(node.name,\"'] provided in \")+\"model.execute(dict) must be \"+\"\".concat(node.attrParams['dtype'].value,\", but was \").concat(input.dtype);});}});}},{key:\"mapInputs\",value:function mapInputs(inputs){var result={};for(var inputName in inputs){if(this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[inputName]!=null){var tensor=this._signature.inputs[inputName];result[tensor.name]=inputs[inputName];}else{result[inputName]=inputs[inputName];}}return result;}},{key:\"checkInputs\",value:function checkInputs(inputs){var _this79=this;var notInGraph=Object.keys(inputs).filter(function(name){var _Object79=Object(utils[\"e\"/* parseNodeName */])(name),_Object80=_slicedToArray(_Object79,1),nodeName=_Object80[0];return _this79.graph.nodes[nodeName]==null;});if(notInGraph.length>0){throw new Error(\"The dict provided in model.execute(dict) has \"+\"keys: [\".concat(notInGraph,\"] that are not part of graph\"));}}},{key:\"mapOutputs\",value:function mapOutputs(outputs){var _this80=this;return outputs.map(function(name){if(_this80._signature!=null&&_this80._signature.outputs!=null&&_this80._signature.outputs[name]!=null){var tensor=_this80._signature.outputs[name];return tensor.name;}return name;},{});}},{key:\"checkOutputs\",value:function checkOutputs(outputs){var _this81=this;outputs.forEach(function(name){var _Object81=Object(utils[\"e\"/* parseNodeName */])(name),_Object82=_slicedToArray(_Object81,1),normalizedName=_Object82[0];if(!_this81.graph.nodes[normalizedName]){throw new Error(\"The output '\".concat(name,\"' is not found in the graph\"));}});}}]);return graph_executor_GraphExecutor;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var TFHUB_SEARCH_PARAM='?tfjs-format=file';var DEFAULT_MODEL_NAME='model.json';/**\r\n * A `tf.GraphModel` is a directed, acyclic graph built from a\r\n * SavedModel GraphDef and allows inference execution.\r\n *\r\n * A `tf.GraphModel` can only be created by loading from a model converted from\r\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\r\n * the command line converter tool and loaded via `tf.loadGraphModel`.\r\n */ /** @doc {heading: 'Models', subheading: 'Classes'} */var graph_model_GraphModel=/*#__PURE__*/function(){/**\r\n     * @param modelUrl url for the model, or an `io.IOHandler`.\r\n     * @param weightManifestUrl url for the weight file generated by\r\n     * scripts/convert.py script.\r\n     * @param requestOption options for Request, which allows to send credentials\r\n     * and custom headers.\r\n     * @param onProgress Optional, progress callback function, fired periodically\r\n     * before the load is completed.\r\n     */function graph_model_GraphModel(modelUrl){var loadOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck2(this,graph_model_GraphModel);this.modelUrl=modelUrl;this.loadOptions=loadOptions;this.version='n/a';if(loadOptions==null){this.loadOptions={};}}// Returns the version information for the tensorflow model GraphDef.\n_createClass(graph_model_GraphModel,[{key:\"modelVersion\",get:function get(){return this.version;}},{key:\"inputNodes\",get:function get(){return this.executor.inputNodes;}},{key:\"outputNodes\",get:function get(){return this.executor.outputNodes;}},{key:\"inputs\",get:function get(){return this.executor.inputs;}},{key:\"outputs\",get:function get(){return this.executor.outputs;}},{key:\"weights\",get:function get(){return this.executor.weightMap;}},{key:\"findIOHandler\",value:function findIOHandler(){var path=this.modelUrl;if(path.load!=null){// Path is an IO Handler.\nthis.handler=path;}else if(this.loadOptions.requestInit!=null){this.handler=dist[\"io\"].browserHTTPRequest(path,this.loadOptions);}else{var handlers=dist[\"io\"].getLoadHandlers(path,this.loadOptions);if(handlers.length===0){// For backward compatibility: if no load handler can be found,\n// assume it is a relative http path.\nhandlers.push(dist[\"io\"].browserHTTPRequest(path,this.loadOptions));}else if(handlers.length>1){throw new Error(\"Found more than one (\".concat(handlers.length,\") load handlers for \")+\"URL '\".concat([path],\"'\"));}this.handler=handlers[0];}}/**\r\n     * Loads the model and weight files, construct the in memory weight map and\r\n     * compile the inference graph.\r\n     */},{key:\"load\",value:function(){var _load6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee99(){var artifacts;return regeneratorRuntime.wrap(function _callee99$(_context99){while(1){switch(_context99.prev=_context99.next){case 0:this.findIOHandler();if(!(this.handler.load==null)){_context99.next=3;break;}throw new Error('Cannot proceed with model loading because the IOHandler provided '+'does not have the `load` method implemented.');case 3:_context99.next=5;return this.handler.load();case 5:artifacts=_context99.sent;return _context99.abrupt(\"return\",this.loadSync(artifacts));case 7:case\"end\":return _context99.stop();}}},_callee99,this);}));function load(){return _load6.apply(this,arguments);}return load;}()/**\r\n     * Synchronously construct the in memory weight map and\r\n     * compile the inference graph.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true} */},{key:\"loadSync\",value:function loadSync(artifacts){this.artifacts=artifacts;var graph=this.artifacts.modelTopology;var signature={};if(this.artifacts.userDefinedMetadata!=null){signature=// tslint:disable-next-line:no-any\nthis.artifacts.userDefinedMetadata.signature;}this.version=\"\".concat(graph.versions.producer,\".\").concat(graph.versions.minConsumer);var weightMap=dist[\"io\"].decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);this.executor=new graph_executor_GraphExecutor(operation_mapper[\"a\"/* OperationMapper */].Instance.transformGraph(graph,signature));this.executor.weightMap=this.convertTensorMapToTensorsMap(weightMap);return true;}/**\r\n     * Save the configuration and/or weights of the GraphModel.\r\n     *\r\n     * An `IOHandler` is an object that has a `save` method of the proper\r\n     * signature defined. The `save` method manages the storing or\r\n     * transmission of serialized data (\"artifacts\") that represent the\r\n     * model's topology and weights onto or via a specific medium, such as\r\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\r\n     * requests to a server. TensorFlow.js provides `IOHandler`\r\n     * implementations for a number of frequently used saving mediums, such as\r\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\r\n     * for more details.\r\n     *\r\n     * This method also allows you to refer to certain types of `IOHandler`s\r\n     * as URL-like string shortcuts, such as 'localstorage://' and\r\n     * 'indexeddb://'.\r\n     *\r\n     * Example 1: Save `model`'s topology and weights to browser [local\r\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n     * then load it back.\r\n     *\r\n     * ```js\r\n     * const modelUrl =\r\n     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\r\n     * const model = await tf.loadGraphModel(modelUrl);\r\n     * const zeros = tf.zeros([1, 224, 224, 3]);\r\n     * model.predict(zeros).print();\r\n     *\r\n     * const saveResults = await model.save('localstorage://my-model-1');\r\n     *\r\n     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\r\n     * console.log('Prediction from loaded model:');\r\n     * model.predict(zeros).print();\r\n     * ```\r\n     *\r\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\r\n     * scheme-based string shortcut for `IOHandler`.\r\n     * @param config Options for saving the model.\r\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\r\n     * the saving, such as byte sizes of the saved artifacts for the model's\r\n     *   topology and weight values.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n     */},{key:\"save\",value:function(){var _save6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee100(handlerOrURL,config){var handlers;return regeneratorRuntime.wrap(function _callee100$(_context100){while(1){switch(_context100.prev=_context100.next){case 0:if(!(typeof handlerOrURL==='string')){_context100.next=9;break;}handlers=dist[\"io\"].getSaveHandlers(handlerOrURL);if(!(handlers.length===0)){_context100.next=6;break;}throw new Error(\"Cannot find any save handlers for URL '\".concat(handlerOrURL,\"'\"));case 6:if(!(handlers.length>1)){_context100.next=8;break;}throw new Error(\"Found more than one (\".concat(handlers.length,\") save handlers for \")+\"URL '\".concat(handlerOrURL,\"'\"));case 8:handlerOrURL=handlers[0];case 9:if(!(handlerOrURL.save==null)){_context100.next=11;break;}throw new Error('GraphModel.save() cannot proceed because the IOHandler '+'provided does not have the `save` attribute defined.');case 11:return _context100.abrupt(\"return\",handlerOrURL.save(this.artifacts));case 12:case\"end\":return _context100.stop();}}},_callee100,this);}));function save(_x89,_x90){return _save6.apply(this,arguments);}return save;}()/**\r\n     * Execute the inference for the input tensors.\r\n     *\r\n     * @param input The input tensors, when there is single input for the model,\r\n     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\r\n     * inputs params should be in either `tf.Tensor`[] if the input order is\r\n     * fixed, or otherwise NamedTensorMap format.\r\n     *\r\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\r\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\r\n     * follow the\r\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\r\n     *\r\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\r\n     * input type. For example, given the graph\r\n     *    InputNode => Intermediate => OutputNode,\r\n     * you can execute the subgraph Intermediate => OutputNode by calling\r\n     *    model.execute('IntermediateNode' : tf.tensor(...));\r\n     *\r\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\r\n     * state needs to be fed manually.\r\n     *\r\n     * For batch inference execution, the tensors for each input need to be\r\n     * concatenated together. For example with mobilenet, the required input shape\r\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\r\n     * If we are provide a batched data of 100 images, the input tensor should be\r\n     * in the shape of [100, 244, 244, 3].\r\n     *\r\n     * @param config Prediction configuration for specifying the batch size and\r\n     * output node names. Currently the batch size option is ignored for graph\r\n     * model.\r\n     *\r\n     * @returns Inference result tensors. The output would be single `tf.Tensor`\r\n     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\r\n     * will be returned for model with multiple outputs.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"predict\",value:function predict(inputs,config){return this.execute(inputs,this.outputNodes);}},{key:\"normalizeInputs\",value:function normalizeInputs(inputs){if(!(inputs instanceof dist[\"Tensor\"])&&!Array.isArray(inputs)){// The input is already a NamedTensorMap.\nreturn inputs;}inputs=Array.isArray(inputs)?inputs:[inputs];if(inputs.length!==this.inputNodes.length){throw new Error('Input tensor count mismatch,'+\"the graph model has \".concat(this.inputNodes.length,\" placeholders, \")+\"while there are \".concat(inputs.length,\" input tensors.\"));}return this.inputNodes.reduce(function(map,inputName,i){map[inputName]=inputs[i];return map;},{});}},{key:\"normalizeOutputs\",value:function normalizeOutputs(outputs){outputs=outputs||this.outputNodes;return!Array.isArray(outputs)?[outputs]:outputs;}/**\r\n     * Executes inference for the model for given input tensors.\r\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\r\n     * model, keyed by the input node names.\r\n     * @param outputs output node name from the Tensorflow model, if no\r\n     * outputs are specified, the default outputs of the model would be used.\r\n     * You can inspect intermediate nodes of the model by adding them to the\r\n     * outputs array.\r\n     *\r\n     * @returns A single tensor if provided with a single output or no outputs\r\n     * are provided and there is only one default output, otherwise return a\r\n     * tensor array. The order of the tensor array is the same as the outputs\r\n     * if provided, otherwise the order of outputNodes attribute of the model.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"execute\",value:function execute(inputs,outputs){inputs=this.normalizeInputs(inputs);outputs=this.normalizeOutputs(outputs);var result=this.executor.execute(inputs,outputs);return result.length>1?result:result[0];}/**\r\n     * Executes inference for the model for given input tensors in async\r\n     * fashion, use this method when your model contains control flow ops.\r\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\r\n     * model, keyed by the input node names.\r\n     * @param outputs output node name from the Tensorflow model, if no outputs\r\n     * are specified, the default outputs of the model would be used. You can\r\n     * inspect intermediate nodes of the model by adding them to the outputs\r\n     * array.\r\n     *\r\n     * @returns A Promise of single tensor if provided with a single output or\r\n     * no outputs are provided and there is only one default output, otherwise\r\n     * return a tensor map.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"executeAsync\",value:function(){var _executeAsync2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee101(inputs,outputs){var result;return regeneratorRuntime.wrap(function _callee101$(_context101){while(1){switch(_context101.prev=_context101.next){case 0:inputs=this.normalizeInputs(inputs);outputs=this.normalizeOutputs(outputs);_context101.next=4;return this.executor.executeAsync(inputs,outputs);case 4:result=_context101.sent;return _context101.abrupt(\"return\",result.length>1?result:result[0]);case 6:case\"end\":return _context101.stop();}}},_callee101,this);}));function executeAsync(_x91,_x92){return _executeAsync2.apply(this,arguments);}return executeAsync;}()},{key:\"convertTensorMapToTensorsMap\",value:function convertTensorMapToTensorsMap(map){return Object.keys(map).reduce(function(newMap,key){newMap[key]=[map[key]];return newMap;},{});}/**\r\n     * Releases the memory used by the weight tensors.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"dispose\",value:function dispose(){this.executor.dispose();}}]);return graph_model_GraphModel;}();/**\r\n * Load a graph model given a URL to the model definition.\r\n *\r\n * Example of loading MobileNetV2 from a URL and making a prediction with a\r\n * zeros input:\r\n *\r\n * ```js\r\n * const modelUrl =\r\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\r\n * const model = await tf.loadGraphModel(modelUrl);\r\n * const zeros = tf.zeros([1, 224, 224, 3]);\r\n * model.predict(zeros).print();\r\n * ```\r\n *\r\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\r\n * a zeros input:\r\n *\r\n * ```js\r\n * const modelUrl =\r\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\r\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\r\n * const zeros = tf.zeros([1, 224, 224, 3]);\r\n * model.predict(zeros).print();\r\n * ```\r\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\r\n * @param options Options for the HTTP request, which allows to send credentials\r\n *    and custom headers.\r\n */ /** @doc {heading: 'Models', subheading: 'Loading'} */function loadGraphModel(_x93){return _loadGraphModel.apply(this,arguments);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nfunction _loadGraphModel(){_loadGraphModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee102(modelUrl){var options,model,_args104=arguments;return regeneratorRuntime.wrap(function _callee102$(_context102){while(1){switch(_context102.prev=_context102.next){case 0:options=_args104.length>1&&_args104[1]!==undefined?_args104[1]:{};if(!(modelUrl==null)){_context102.next=3;break;}throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url '+'or an IOHandler that loads the model');case 3:if(options==null){options={};}if(options.fromTFHub){if(modelUrl.load==null){if(!modelUrl.endsWith('/')){modelUrl=modelUrl+'/';}modelUrl=\"\".concat(modelUrl).concat(DEFAULT_MODEL_NAME).concat(TFHUB_SEARCH_PARAM);}}model=new graph_model_GraphModel(modelUrl,options);_context102.next=8;return model.load();case 8:return _context102.abrupt(\"return\",model);case 9:case\"end\":return _context102.stop();}}},_callee102);}));return _loadGraphModel.apply(this,arguments);}var version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-converter/dist/index.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /***/},/* 39 */ /***/function(module,exports,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(global){/*!\r\n * The buffer module from node.js, for the browser.\r\n *\r\n * @author   Feross Aboukhadijeh <http://feross.org>\r\n * @license  MIT\r\n */ /* eslint-disable no-proto */var base64=__webpack_require__(65);var ieee754=__webpack_require__(66);var isArray=__webpack_require__(67);exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;/**\r\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\r\n *   === true    Use Uint8Array implementation (fastest)\r\n *   === false   Use Object implementation (most compatible, even IE6)\r\n *\r\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n * Opera 11.6+, iOS 4.2+.\r\n *\r\n * Due to various browser bugs, sometimes the Object implementation will be used even\r\n * when the browser supports typed arrays.\r\n *\r\n * Note:\r\n *\r\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\r\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\r\n *\r\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\r\n *\r\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\r\n *     incorrect length in some situations.\r\n\r\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\r\n * get the Object implementation, which is slower but behaves correctly.\r\n */Buffer.TYPED_ARRAY_SUPPORT=global.TYPED_ARRAY_SUPPORT!==undefined?global.TYPED_ARRAY_SUPPORT:typedArraySupport();/*\r\n * Export kMaxLength after typed array support is determined.\r\n */exports.kMaxLength=kMaxLength();function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function foo(){return 42;}};return arr.foo()===42&&// typed array instances can be augmented\ntypeof arr.subarray==='function'&&// chrome 9-10 lack `subarray`\narr.subarray(1,1).byteLength===0;// ie10 has broken `subarray`\n}catch(e){return false;}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}function createBuffer(that,length){if(kMaxLength()<length){throw new RangeError('Invalid typed array length');}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\nthat=new Uint8Array(length);that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class\nif(that===null){that=new Buffer(length);}that.length=length;}return that;}/**\r\n * The Buffer constructor returns instances of `Uint8Array` that have their\r\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\r\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\r\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n * returns a single octet.\r\n *\r\n * The `Uint8Array` prototype remains unmodified.\r\n */function Buffer(arg,encodingOrOffset,length){if(!Buffer.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer)){return new Buffer(arg,encodingOrOffset,length);}// Common case.\nif(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new Error('If encoding is specified then the first argument must be a string');}return allocUnsafe(this,arg);}return from(this,arg,encodingOrOffset,length);}Buffer.poolSize=8192;// not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment=function(arr){arr.__proto__=Buffer.prototype;return arr;};function from(that,value,encodingOrOffset,length){if(typeof value==='number'){throw new TypeError('\"value\" argument must not be a number');}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){return fromArrayBuffer(that,value,encodingOrOffset,length);}if(typeof value==='string'){return fromString(that,value,encodingOrOffset);}return fromObject(that,value);}/**\r\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n * if value is a number.\r\n * Buffer.from(str[, encoding])\r\n * Buffer.from(array)\r\n * Buffer.from(buffer)\r\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n **/Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length);};if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;if(typeof Symbol!=='undefined'&&Symbol.species&&Buffer[Symbol.species]===Buffer){// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nObject.defineProperty(Buffer,Symbol.species,{value:null,configurable:true});}}function assertSize(size){if(typeof size!=='number'){throw new TypeError('\"size\" argument must be a number');}else if(size<0){throw new RangeError('\"size\" argument must not be negative');}}function alloc(that,size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(that,size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This\n// prevents accidentally sending in a number that would\n// be interpretted as a start offset.\nreturn typeof encoding==='string'?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill);}return createBuffer(that,size);}/**\r\n * Creates a new filled Buffer instance.\r\n * alloc(size[, fill[, encoding]])\r\n **/Buffer.alloc=function(size,fill,encoding){return alloc(null,size,fill,encoding);};function allocUnsafe(that,size){assertSize(size);that=createBuffer(that,size<0?0:checked(size)|0);if(!Buffer.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0;}}return that;}/**\r\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\r\n * */Buffer.allocUnsafe=function(size){return allocUnsafe(null,size);};/**\r\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\r\n */Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size);};function fromString(that,string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer.isEncoding(encoding)){throw new TypeError('\"encoding\" must be a valid string encoding');}var length=byteLength(string,encoding)|0;that=createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will\n// cause everything after the first invalid character to be ignored. (e.g.\n// 'abxxcd' will be treated as 'ab')\nthat=that.slice(0,actual);}return that;}function fromArrayLike(that,array){var length=array.length<0?0:checked(array.length)|0;that=createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function fromArrayBuffer(that,array,byteOffset,length){array.byteLength;// this throws if `array` is not a valid ArrayBuffer\nif(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('\\'offset\\' is out of bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('\\'length\\' is out of bounds');}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array);}else if(length===undefined){array=new Uint8Array(array,byteOffset);}else{array=new Uint8Array(array,byteOffset,length);}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance\nthat=array;that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class\nthat=fromArrayLike(that,array);}return that;}function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;that=createBuffer(that,len);if(that.length===0){return that;}obj.copy(that,0,0,len);return that;}if(obj){if(typeof ArrayBuffer!=='undefined'&&obj.buffer instanceof ArrayBuffer||'length'in obj){if(typeof obj.length!=='number'||isnan(obj.length)){return createBuffer(that,0);}return fromArrayLike(that,obj);}if(obj.type==='Buffer'&&isArray(obj.data)){return fromArrayLike(that,obj.data);}}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');}function checked(length){// Note: cannot use `length < kMaxLength()` here because that fails when\n// length is NaN (which is otherwise coerced to zero.)\nif(length>=kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+kMaxLength().toString(16)+' bytes');}return length|0;}function SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq\nlength=0;}return Buffer.alloc(+length);}Buffer.isBuffer=function isBuffer(b){return!!(b!=null&&b._isBuffer);};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!isArray(list)){throw new TypeError('\"list\" argument must be an Array of Buffers');}if(list.length===0){return Buffer.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf)){throw new TypeError('\"list\" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length;}if(typeof ArrayBuffer!=='undefined'&&typeof ArrayBuffer.isView==='function'&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){string=''+string;}var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion\nvar loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':case undefined:return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;// assume utf8\nencoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;// No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n// property of a typed array.\n// This behaves neither like String nor Uint8Array in that we set start/end\n// to their upper/lower bounds if the value passed is out of range.\n// undefined is handled specially as per ECMA-262 6th Edition,\n// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\nif(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32\n// coercion fail below.\nif(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.\nend>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'latin1':case'binary':return latin1Slice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this;};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this;};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this;};Buffer.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===0;};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target)){throw new TypeError('Argument must be a Buffer');}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match\nif(buffer.length===0)return-1;// Normalize byteOffset\nif(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.\nif(isNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\nbyteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer\nif(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val\nif(typeof val==='string'){val=Buffer.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf\nif(Buffer.isBuffer(val)){// Special case: looking for empty string/buffer always fails\nif(val.length===0){return-1;}return arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]\nif(Buffer.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits\nvar strLen=string.length;if(strLen%2!==0)throw new TypeError('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)\nif(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)\n}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])\n}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13\n}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'latin1':case'binary':return latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write\nreturn base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf);}else{return base64.fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a\n// replacement char (U+FFFD) and advance only 1 byte\ncodePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)\ncodePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()\n}// Decode in chunks to avoid \"call stack size exceeded\".\nvar res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;}else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start];}}return newBuf;};/*\r\n * Need to make sure that buffer isn't trying to write out of bounds.\r\n */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4);};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4);};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8);};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('\"value\" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done\nif(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions\nif(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?\nif(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end\nfor(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer.TYPED_ARRAY_SUPPORT){// ascending copy from start\nfor(i=0;i<len;++i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);}return len;};// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:\nif(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code;}}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.\nif(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS\n// ================\nvar INVALID_BASE64_RE=/[^+\\/0-9A-Za-z-_]/g;function base64clean(str){// Node strips out invalid characters like \\n and \\t from the string, base64-js does not\nstr=stringtrim(str).replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''\nif(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\nwhile(str.length%4!==0){str=str+'=';}return str;}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\\s+|\\s+$/g,'');}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component\nif(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead\nif(!leadSurrogate){// no lead yet\nif(codePoint>0xDBFF){// unexpected trail\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead\nleadSurrogate=codePoint;continue;}// 2 leads in a row\nif(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair\ncodePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead\nif((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8\nif(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..\nbyteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return base64.toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}function isnan(val){return val!==val;// eslint-disable-line no-self-compare\n}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27));/***/},/* 40 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(setImmediate){/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return nextFrame;});/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var delayCallback=function(){if(typeof requestAnimationFrame!=='undefined'){return requestAnimationFrame;}else if(typeof setImmediate!=='undefined'){return setImmediate;}return function(f){return f();};// no delays\n}();/**\r\n * Returns a promise that resolve when a requestAnimationFrame has completed.\r\n *\r\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\r\n *\r\n * This is simply a sugar method so that users can do the following:\r\n * `await tf.nextFrame();`\r\n */ /** @doc {heading: 'Performance', subheading: 'Timing'} */function nextFrame(){return new Promise(function(resolve){return delayCallback(function(){return resolve();});});}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(76).setImmediate);/***/},/* 41 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Add','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'AddV2','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'AddN','category':'arithmetic','inputs':[{'start':0,'end':0,'name':'tensors','type':'tensors'}]},{'tfOpName':'BiasAdd','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sub','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'RealDiv','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Div','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'DivNoNan','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'FloorDiv','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Mul','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Maximum','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}]},{'tfOpName':'Minimum','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}]},{'tfOpName':'Pow','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'SquaredDifference','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Mod','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'FloorMod','category':'arithmetic','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]}];/***/},/* 42 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Abs','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Acos','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Asin','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Atan','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Atan2','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'y','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Ceil','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'ClipByValue','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'clip_value_min','name':'clipValueMin','type':'number'},{'tfName':'clip_value_max','name':'clipValueMax','type':'number'}]},{'tfOpName':'Complex','category':'basic_math','inputs':[{'start':0,'name':'real','type':'tensor'},{'start':1,'name':'imag','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'ComplexAbs','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Cos','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Cosh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Elu','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Exp','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Floor','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Log','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Imag','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'Tout','name':'outputType','type':'dtype','notSupported':true}]},{'tfOpName':'Neg','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Real','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'Tout','name':'outputType','type':'dtype','notSupported':true}]},{'tfOpName':'Prelu','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'alpha','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Relu','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Relu6','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'clipValueMin','name':'clipValueMin','type':'number','defaultValue':0},{'tfName':'clipValueMax','name':'clipValueMax','type':'number','defaultValue':6}]},{'tfOpName':'Selu','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sigmoid','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sin','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sinh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sqrt','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Rsqrt','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Square','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Tan','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Tanh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Sign','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Round','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Expm1','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Log1p','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Reciprocal','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Softplus','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Asinh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Acosh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Atanh','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Erf','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Prod','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axes','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool','notSupported':true},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'LeakyRelu','category':'basic_math','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'alpha','name':'alpha','type':'number','defaultValue':0.2},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]}];/***/},/* 43 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'LoopCond','category':'control','inputs':[{'start':0,'name':'pred','type':'tensor'}]},{'tfOpName':'Switch','category':'control','inputs':[{'start':0,'name':'data','type':'tensor'},{'start':1,'name':'pred','type':'tensor'}]},{'tfOpName':'Merge','category':'control','inputs':[{'start':0,'end':0,'name':'tensors','type':'tensors'}]},{'tfOpName':'Enter','category':'control','inputs':[{'start':0,'name':'tensor','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'frame_name','name':'frameName','type':'string'},{'tfName':'is_constant','name':'isConstant','type':'bool'}]},{'tfOpName':'Exit','category':'control','inputs':[{'start':0,'name':'tensor','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'NextIteration','category':'control','inputs':[{'start':0,'name':'tensor','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'TensorArrayV3','category':'control','inputs':[{'start':0,'name':'size','type':'number'}],'attrs':[{'tfName':'dtype','name':'dtype','type':'dtype'},{'tfName':'element_shape','name':'elementShape','type':'shape'},{'tfName':'dynamic_size','name':'dynamicSize','type':'bool'},{'tfName':'clear_after_read','name':'clearAfterRead','type':'bool'},{'tfName':'identical_element_shapes','name':'identicalElementShapes','type':'bool'},{'tfName':'tensor_array_name','name':'name','type':'string'}]},{'tfOpName':'TensorArrayWriteV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'index','type':'number'},{'start':2,'name':'tensor','type':'tensor'},{'start':3,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'TensorArrayReadV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'index','type':'number'},{'start':2,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'dtype','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'TensorArrayGatherV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'indices','type':'number[]'},{'start':2,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'dtype','name':'dtype','type':'dtype'},{'tfName':'element_shape','name':'elementShape','type':'shape'}]},{'tfOpName':'TensorArrayScatterV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'indices','type':'number[]'},{'start':2,'name':'tensor','type':'tensor'},{'start':3,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'TensorArrayConcatV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'dtype','name':'dtype','type':'dtype'},{'tfName':'element_shape_except0','name':'elementShapeExcept0','type':'shape','notSupported':true}]},{'tfOpName':'TensorArraySplitV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'tensor','type':'tensor'},{'start':2,'name':'lengths','type':'number[]'},{'start':3,'name':'flowIn','type':'number'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'TensorArraySizeV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'},{'start':1,'name':'flowIn','type':'number'}]},{'tfOpName':'TensorArrayCloseV3','category':'control','inputs':[{'start':0,'name':'tensorArrayId','type':'number'}]},{'tfOpName':'StatelessIf','category':'control','inputs':[{'start':0,'name':'cond','type':'tensor'},{'start':1,'end':0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'then_branch','name':'thenBranch','type':'func'},{'tfName':'else_branch','name':'elseBranch','type':'func'}]},{'tfOpName':'If','category':'control','inputs':[{'start':0,'name':'cond','type':'tensor'},{'start':1,'end':0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'then_branch','name':'thenBranch','type':'func'},{'tfName':'else_branch','name':'elseBranch','type':'func'}]},{'tfOpName':'StatelessWhile','category':'control','inputs':[{'start':0,'end':0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'cond','name':'cond','type':'func'},{'tfName':'body','name':'body','type':'func'}]},{'tfOpName':'While','category':'control','inputs':[{'start':0,'end':0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'cond','name':'cond','type':'func'},{'tfName':'body','name':'body','type':'func'}]}];/***/},/* 44 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'AvgPool','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true},{'tfName':'ksize','name':'kernelSize','type':'number[]'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'MaxPool','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true},{'tfName':'ksize','name':'kernelSize','type':'number[]'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'MaxPoolWithArgmax','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'ksize','name':'kernelSize','type':'number[]'},{'tfName':'include_batch_in_index','name':'includeBatchInIndex','type':'bool'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'AvgPool3D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true},{'tfName':'ksize','name':'kernelSize','type':'number[]'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'MaxPool3D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true},{'tfName':'ksize','name':'kernelSize','type':'number[]'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Conv1D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'}],'attrs':[{'tfName':'stride','name':'stride','type':'number'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NWC'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'dilation','name':'dilation','type':'number','defaultValue':1}]},{'tfOpName':'Conv2D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'useCudnnOnGpu','name':'useCudnnOnGpu','type':'bool'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'explicit_paddings','name':'explicitPaddings','type':'number[]','defaultValue':[]},{'tfName':'dilations','name':'dilations','type':'number[]'}]},{'tfOpName':'_FusedConv2D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'},{'start':2,end:0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'num_args','name':'numArgs','type':'number'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'explicit_paddings','name':'explicitPaddings','type':'number[]','defaultValue':[]},{'tfName':'use_cudnn_on_gpu','name':'useCudnnOnGpu','type':'bool','defaultValue':true},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'dilations','name':'dilations','type':'number[]','defaultValue':[1,1,1,1]},{'tfName':'fused_ops','name':'fusedOps','type':'string[]','defaultValue':[]},{'tfName':'epsilon','name':'epsilon','type':'number','defaultValue':0.0001}]},{'tfOpName':'Conv2DBackpropInput','category':'convolution','inputs':[{'start':2,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'},{'start':0,'name':'outputShape','type':'number[]'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true},{'tfName':'explicit_paddings','name':'explicitPaddings','type':'number[]','defaultValue':[]}]},{'tfOpName':'DepthwiseConv2d','category':'convolution','inputs':[{'start':0,'name':'input','type':'tensor'},{'start':1,'name':'filter','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'explicit_paddings','name':'explicitPaddings','type':'number[]','defaultValue':[]},{'tfName':'dilations','name':'dilations','type':'number[]'}]},{'tfOpName':'DepthwiseConv2dNative','category':'convolution','inputs':[{'start':0,'name':'input','type':'tensor'},{'start':1,'name':'filter','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'explicit_paddings','name':'explicitPaddings','type':'number[]','defaultValue':[]},{'tfName':'dilations','name':'dilations','type':'number[]'}]},{'tfOpName':'FusedDepthwiseConv2dNative','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'},{'start':2,end:0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'num_args','name':'numArgs','type':'number'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true},{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'dilations','name':'dilations','type':'number[]','defaultValue':[1,1,1,1]},{'tfName':'fused_ops','name':'fusedOps','type':'string[]','defaultValue':[]}]},{'tfOpName':'Conv3D','category':'convolution','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'filter','type':'tensor'}],'attrs':[{'tfName':'strides','name':'strides','type':'number[]'},{'tfName':'padding','name':'pad','type':'string'},{'tfName':'data_format','name':'dataFormat','type':'string','defaultValue':'NHWC'},{'tfName':'dilations','name':'dilations','type':'number[]'}]}];/***/},/* 45 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Fill','category':'creation','inputs':[{'start':0,'name':'shape','type':'number[]'},{'start':1,'name':'value','type':'number'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'LinSpace','category':'creation','inputs':[{'start':0,'name':'start','type':'number'},{'start':1,'name':'stop','type':'number'},{'start':2,'name':'num','type':'number'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'OneHot','category':'creation','inputs':[{'start':0,'name':'indices','type':'tensor'},{'start':1,'name':'depth','type':'number'},{'start':2,'name':'onValue','type':'number','defaultValue':1},{'start':3,'name':'offValue','type':'number','defaultValue':0}],'attrs':[{'tfName':'axis','name':'axis','type':'number','notSupported':true},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Ones','category':'creation','inputs':[{'start':0,'name':'shape','type':'number[]'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'OnesLike','category':'creation','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'dtype','name':'dtype','type':'dtype'}]},{'tfOpName':'RandomUniform','category':'creation','inputs':[{'start':0,'name':'shape','type':'number[]'}],'attrs':[{'tfName':'minval','name':'minval','type':'number','defaultValue':0},{'tfName':'maxval','name':'maxval','type':'number','defaultValue':1},{'tfName':'dtype','name':'dtype','type':'dtype'},{'tfName':'seed','name':'seed','type':'number','defaultValue':0},{'tfName':'seed2','name':'seed2','type':'number','defaultValue':0,'notSupported':true},{'tfName':'T','name':'T','type':'number','notSupported':true}]},{'tfOpName':'Range','category':'creation','inputs':[{'start':0,'name':'start','type':'number'},{'start':1,'name':'stop','type':'number'},{'start':2,'name':'step','type':'number','defaultValue':0}],'attrs':[{'tfName':'Tidx','name':'dtype','type':'dtype'}]},{'tfOpName':'TruncatedNormal','category':'creation','inputs':[{'start':0,'name':'shape','type':'number[]'}],'attrs':[{'tfName':'means','name':'mean','type':'number','defaultValue':0.0},{'tfName':'stddev','name':'stdDev','type':'number','defaultValue':1.0},{'tfName':'seed','name':'seed','type':'number'},{'tfName':'seed2','name':'seed2','type':'number','defaultValue':0,'notSupported':true},{'tfName':'dtype','name':'dtype','type':'dtype'},{'tfName':'T','name':'T','type':'number','notSupported':true}]},{'tfOpName':'Zeros','category':'creation','inputs':[{'start':0,'name':'shape','type':'number[]'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'ZerosLike','category':'creation','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype'}]},{'tfOpName':'Multinomial','category':'creation','inputs':[{'start':0,'name':'logits','type':'tensor'},{'start':1,'name':'numSamples','type':'number'}],'attrs':[{'tfName':'seed','name':'seed','type':'number'},{'tfName':'seed2','name':'seed2','type':'number'},{'tfName':'T','name':'dtype','type':'dtype'},{'tfName':'output_dtype','name':'output_dtype','type':'dtype'}]}];/***/},/* 46 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'NonMaxSuppressionV2','category':'dynamic','inputs':[{'start':0,'name':'boxes','type':'tensor'},{'start':1,'name':'scores','type':'tensor'},{'start':2,'name':'maxOutputSize','type':'number'},{'start':3,'name':'iouThreshold','type':'number'}]},{'tfOpName':'NonMaxSuppressionV3','category':'dynamic','inputs':[{'start':0,'name':'boxes','type':'tensor'},{'start':1,'name':'scores','type':'tensor'},{'start':2,'name':'maxOutputSize','type':'number'},{'start':3,'name':'iouThreshold','type':'number'},{'start':4,'name':'scoreThreshold','type':'number'}]},{'tfOpName':'NonMaxSuppressionV5','category':'dynamic','inputs':[{'start':0,'name':'boxes','type':'tensor'},{'start':1,'name':'scores','type':'tensor'},{'start':2,'name':'maxOutputSize','type':'number'},{'start':3,'name':'iouThreshold','type':'number'},{'start':4,'name':'scoreThreshold','type':'number'},{'start':5,'name':'softNmsSigma','type':'number'}]},{'tfOpName':'Where','category':'dynamic','inputs':[{'start':0,'name':'condition','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'ListDiff','category':'dynamic','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'y','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]}];/***/},/* 47 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'TopKV2','category':'evaluation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'k','type':'number'}],'attrs':[{'tfName':'sorted','name':'sorted','type':'bool'}]}];/***/},/* 48 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'PlaceholderWithDefault','category':'graph','inputs':[{'start':0,'name':'default','type':'tensor'}],'attrs':[{'tfName':'shape','name':'shape','type':'shape'},{'tfName':'dtype','name':'dtype','type':'dtype'}]},{'tfOpName':'Placeholder','category':'graph','attrs':[{'tfName':'shape','name':'shape','type':'shape'},{'tfName':'dtype','name':'dtype','type':'dtype'}]},{'tfOpName':'Const','category':'graph'},{'tfOpName':'Identity','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'IdentityN','category':'graph','inputs':[{'start':0,'end':0,'name':'x','type':'tensors'}]},{'tfOpName':'Snapshot','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'Rank','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'Size','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'Shape','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'ShapeN','category':'graph','inputs':[{'start':0,'end':0,'name':'x','type':'tensors'}]},{'tfOpName':'Print','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'data','type':'tensors'}],'attrs':[{'tfName':'message','name':'message','type':'string'},{'tfName':'first_n','name':'firstN','type':'number','notSupported':true},{'tfName':'summarize','name':'summarize','type':'number','defaultValue':3}]},{'tfOpName':'NoOp','category':'graph','inputs':[]},{'tfOpName':'StopGradient','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'FakeQuantWithMinMaxVars','category':'graph','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'min','name':'min','type':'number'},{'tfName':'max','name':'max','type':'number'}]}];/***/},/* 49 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'ResizeBilinear','category':'image','inputs':[{'start':0,'name':'images','type':'tensor'},{'start':1,'name':'size','type':'number[]'}],'attrs':[{'tfName':'align_corners','name':'alignCorners','type':'bool'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'ResizeNearestNeighbor','category':'image','inputs':[{'start':0,'name':'images','type':'tensor'},{'start':1,'name':'size','type':'number[]'}],'attrs':[{'tfName':'align_corners','name':'alignCorners','type':'bool'},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'CropAndResize','category':'image','inputs':[{'start':0,'name':'image','type':'tensor'},{'start':1,'name':'boxes','type':'tensor'},{'start':2,'name':'boxInd','type':'tensor'},{'start':3,'name':'cropSize','type':'number[]'}],'attrs':[{'tfName':'method','name':'method','type':'string'},{'tfName':'extrapolation_value','name':'extrapolationValue','type':'number'}]}];/***/},/* 50 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Equal','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'NotEqual','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Greater','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'GreaterEqual','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Less','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'LessEqual','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'LogicalAnd','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'LogicalNot','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'LogicalOr','category':'logical','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Select','category':'logical','inputs':[{'start':0,'name':'condition','type':'tensor'},{'start':1,'name':'a','type':'tensor'},{'start':2,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'SelectV2','category':'logical','inputs':[{'start':0,'name':'condition','type':'tensor'},{'start':1,'name':'a','type':'tensor'},{'start':2,'name':'b','type':'tensor'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]}];/***/},/* 51 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'_FusedMatMul','category':'matrices','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'},{'start':2,end:0,'name':'args','type':'tensors'}],'attrs':[{'tfName':'num_args','name':'numArgs','type':'number'},{'tfName':'fused_ops','name':'fusedOps','type':'string[]','defaultValue':[]},{'tfName':'epsilon','name':'epsilon','type':'number','defaultValue':0.0001},{'tfName':'transpose_a','name':'transposeA','type':'bool','defaultValue':false},{'tfName':'transpose_b','name':'transposeB','type':'bool','defaultValue':false},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'MatMul','category':'matrices','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'transpose_a','name':'transposeA','type':'bool','defaultValue':false},{'tfName':'transpose_b','name':'transposeB','type':'bool','defaultValue':false},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'BatchMatMul','category':'matrices','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'adj_x','name':'transposeA','type':'bool','defaultValue':false},{'tfName':'adj_y','name':'transposeB','type':'bool','defaultValue':false},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'BatchMatMulV2','category':'matrices','inputs':[{'start':0,'name':'a','type':'tensor'},{'start':1,'name':'b','type':'tensor'}],'attrs':[{'tfName':'adj_x','name':'transposeA','type':'bool','defaultValue':false},{'tfName':'adj_y','name':'transposeB','type':'bool','defaultValue':false},{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]},{'tfOpName':'Transpose','category':'matrices','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'perm','type':'number[]'}],'attrs':[{'tfName':'T','name':'dtype','type':'dtype','notSupported':true}]}];/***/},/* 52 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'FusedBatchNorm','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'scale','type':'tensor'},{'start':2,'name':'offset','type':'tensor'},{'start':3,'name':'mean','type':'tensor'},{'start':4,'name':'variance','type':'tensor'}],'attrs':[{'tfName':'epsilon','name':'epsilon','type':'number','defaultValue':0.001},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true}]},{'tfOpName':'FusedBatchNormV2','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'scale','type':'tensor'},{'start':2,'name':'offset','type':'tensor'},{'start':3,'name':'mean','type':'tensor'},{'start':4,'name':'variance','type':'tensor'}],'attrs':[{'tfName':'epsilon','name':'epsilon','type':'number','defaultValue':0.001},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true}]},{'tfOpName':'FusedBatchNormV3','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'scale','type':'tensor'},{'start':2,'name':'offset','type':'tensor'},{'start':3,'name':'mean','type':'tensor'},{'start':4,'name':'variance','type':'tensor'}],'attrs':[{'tfName':'epsilon','name':'epsilon','type':'number','defaultValue':0.001},{'tfName':'data_format','name':'dataFormat','type':'string','notSupported':true}]},{'tfOpName':'LRN','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'depth_radius','name':'radius','type':'number','defaultValue':5},{'tfName':'bias','name':'bias','type':'number','defaultValue':1.0},{'tfName':'alpha','name':'alpha','type':'number','defaultValue':1.0},{'tfName':'beta','name':'beta','type':'number','defaultValue':0.5}]},{'tfOpName':'Softmax','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'LogSoftmax','category':'normalization','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'SparseToDense','category':'normalization','inputs':[{'start':0,'name':'sparseIndices','type':'tensor'},{'start':1,'name':'outputShape','type':'number[]'},{'start':2,'name':'sparseValues','type':'tensor'},{'start':3,'name':'defaultValue','type':'tensor'}],'attrs':[{'tfName':'validate_indices','name':'validateIndices','type':'bool','defaultValue':true,'notSupported':true}]}];/***/},/* 53 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Max','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'Mean','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'Min','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'Sum','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'All','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'Any','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'ArgMax','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number'}]},{'tfOpName':'ArgMin','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number'}]},{'tfOpName':'Prod','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}],'attrs':[{'tfName':'keep_dims','name':'keepDims','type':'bool'}]},{'tfOpName':'Cumsum','category':'reduction','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number'}],'attrs':[{'tfName':'exclusive','name':'exclusive','type':'bool'},{'tfName':'reverse','name':'reverse','type':'bool'}]}];/***/},/* 54 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'ConcatV2','category':'slice_join','inputs':[{'start':0,'end':-1,'name':'tensors','type':'tensors'},{'start':-1,'name':'axis','type':'number'}],'attrs':[{'tfName':'N','name':'n','type':'number','defaultValue':2}]},{'tfOpName':'Concat','category':'slice_join','inputs':[{'start':1,'end':0,'name':'tensors','type':'tensors'},{'start':0,'name':'axis','type':'number'}],'attrs':[{'tfName':'N','name':'n','type':'number','defaultValue':2}]},{'tfOpName':'GatherV2','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'indices','type':'tensor'},{'start':2,'name':'axis','type':'number','defaultValue':0}]},{'tfOpName':'Gather','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'indices','type':'tensor'}],'attrs':[{'tfName':'axis','name':'axis','type':'number','defaultValue':0},{'tfName':'validate_indices','name':'validateIndices','type':'bool','notSupported':true}]},{'tfOpName':'Reverse','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'dims','type':'bool','notSupported':true}]},{'tfOpName':'ReverseV2','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number[]'}]},{'tfOpName':'Slice','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'begin','type':'number[]'},{'start':2,'name':'size','type':'number[]'}]},{'tfOpName':'StridedSlice','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'begin','type':'number[]'},{'start':2,'name':'end','type':'number[]'},{'start':3,'name':'strides','type':'number[]'}],'attrs':[{'tfName':'begin_mask','name':'beginMask','type':'number','defaultValue':0},{'tfName':'end_mask','name':'endMask','type':'number','defaultValue':0},{'tfName':'new_axis_mask','name':'newAxisMask','type':'number','defaultValue':0},{'tfName':'ellipsis_mask','name':'ellipsisMask','type':'number','defaultValue':0},{'tfName':'shrink_axis_mask','name':'shrinkAxisMask','type':'number','defaultValue':0}]},{'tfOpName':'Pack','category':'slice_join','inputs':[{'start':0,'end':0,'name':'tensors','type':'tensors'}],'attrs':[{'tfName':'axis','name':'axis','type':'number','defaultValue':0}]},{'tfOpName':'Unpack','category':'slice_join','inputs':[{'start':0,'name':'tensor','type':'tensor'}],'attrs':[{'tfName':'axis','name':'axis','type':'number','defaultValue':0},{'tfName':'num','name':'num','type':'number','defaultValue':0,'notSupported':true}]},{'tfOpName':'Tile','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'reps','type':'number[]'}]},{'tfOpName':'Split','category':'slice_join','inputs':[{'start':0,'name':'axis','type':'number','defaultValue':0},{'start':1,'name':'x','type':'tensor'}],'attrs':[{'tfName':'num_split','name':'numOrSizeSplits','type':'number','defaultValue':1}]},{'tfOpName':'SplitV','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'numOrSizeSplits','type':'number[]'},{'start':2,'name':'axis','type':'number','defaultValue':0}]},{'tfOpName':'ScatterNd','category':'slice_join','inputs':[{'start':0,'name':'indices','type':'tensor'},{'start':1,'name':'values','type':'tensor'},{'start':2,'name':'shape','type':'number[]'}]},{'tfOpName':'GatherNd','category':'slice_join','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'indices','type':'tensor'}]},{'tfOpName':'SparseToDense','category':'slice_join','inputs':[{'start':0,'name':'sparseIndices','type':'tensor'},{'start':1,'name':'outputShape','type':'number[]'},{'start':2,'name':'sparseValues','type':'tensor'},{'start':3,'name':'defaultValue','type':'tensor'}],'attrs':[{'tfName':'validate_indices','name':'validateIndices','type':'bool','defaultValue':false,'notSupported':true}]}];/***/},/* 55 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'FFT','category':'spectral','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'IFFT','category':'spectral','inputs':[{'start':0,'name':'x','type':'tensor'}]},{'tfOpName':'RFFT','category':'spectral','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'fft_length','type':'number','notSupported':true}]},{'tfOpName':'IRFFT','category':'spectral','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'fft_length','type':'number','notSupported':true}]}];/***/},/* 56 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"json\",function(){return json;});/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var json=[{'tfOpName':'Cast','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'SrcT','name':'sdtype','type':'dtype','notSupported':true},{'tfName':'DstT','name':'dtype','type':'dtype'}]},{'tfOpName':'ExpandDims','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'axis','type':'number'}]},{'tfOpName':'Pad','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'padding','type':'number[]'}],'attrs':[{'tfName':'constant_value','name':'constantValue','type':'number','defaultValue':0}]},{'tfOpName':'PadV2','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'padding','type':'number[]'},{'start':2,'name':'constantValue','type':'number','defaultValue':0}]},{'tfOpName':'Reshape','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'shape','type':'number[]'}]},{'tfOpName':'Squeeze','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'axis','tfDeprecatedName':'squeeze_dims','name':'axis','type':'number[]'}]},{'tfOpName':'SpaceToBatchND','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'blockShape','type':'number[]'},{'start':2,'name':'paddings','type':'number[]'}]},{'tfOpName':'BatchToSpaceND','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'blockShape','type':'number[]'},{'start':2,'name':'crops','type':'number[]'}]},{'tfOpName':'DepthToSpace','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'}],'attrs':[{'tfName':'block_size','name':'blockSize','type':'number'},{'tfName':'data_format','name':'dataFormat','type':'string'}]},{'tfOpName':'BroadcastTo','category':'transformation','inputs':[{'start':0,'name':'x','type':'tensor'},{'start':1,'name':'shape','type':'number[]'}],'attrs':[]}];/***/},/* 57 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(Buffer){/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return ByteChunkIterator;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/* harmony import */var _lazy_iterator__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(14);/* harmony import */var _string_iterator__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(58);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */var ByteChunkIterator=/*#__PURE__*/function(_lazy_iterator__WEBPA){_inherits(ByteChunkIterator,_lazy_iterator__WEBPA);var _super28=_createSuper(ByteChunkIterator);function ByteChunkIterator(){_classCallCheck2(this,ByteChunkIterator);return _super28.apply(this,arguments);}_createClass(ByteChunkIterator,[{key:\"decodeUTF8\",value:/**\r\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\r\n     *\r\n     * The byte arrays producetd from the ByteChunkIterator on which this is\r\n     * called will be interpreted as concatenated.  No assumptions are made about\r\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\r\n     * character may span the boundary between chunks.  This naturally happens,\r\n     * for instance, when reading fixed-size byte arrays from a file.\r\n     */function decodeUTF8(){return new Utf8Iterator(this);}}]);return ByteChunkIterator;}(_lazy_iterator__WEBPACK_IMPORTED_MODULE_1__[/* LazyIterator */\"a\"]);// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nvar Utf8Iterator=/*#__PURE__*/function(_string_iterator__WEB){_inherits(Utf8Iterator,_string_iterator__WEB);var _super29=_createSuper(Utf8Iterator);function Utf8Iterator(upstream){var _this82;_classCallCheck2(this,Utf8Iterator);_this82=_super29.call(this);_this82.upstream=upstream;_this82.impl=new Utf8IteratorImpl(upstream);return _this82;}_createClass(Utf8Iterator,[{key:\"summary\",value:function summary(){return this.impl.summary();}},{key:\"next\",value:function(){var _next15=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee103(){return regeneratorRuntime.wrap(function _callee103$(_context103){while(1){switch(_context103.prev=_context103.next){case 0:return _context103.abrupt(\"return\",this.impl.next());case 1:case\"end\":return _context103.stop();}}},_callee103,this);}));function next(){return _next15.apply(this,arguments);}return next;}()}]);return Utf8Iterator;}(_string_iterator__WEBPACK_IMPORTED_MODULE_2__[/* StringIterator */\"a\"]);/**\r\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\r\n *\r\n * This is tricky because the incoming byte array boundaries may disrupt a\r\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\r\n * a chunk must be carried over and prepended to the next chunk before\r\n * decoding. Luckily with native decoder, TextDecoder in browser and\r\n * string_decoder in node, byte array boundaries are handled automatically.\r\n *\r\n * In the context of an input pipeline for machine learning, UTF8 decoding is\r\n * needed to parse text files containing training examples or prediction\r\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\r\n * decoding provided by FileReader.readAsText() because here we are in a\r\n * streaming context, which FileReader does not support.\r\n *\r\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\r\n *   text, which should be interpreted as concatenated.  No assumptions are\r\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\r\n *   encoding of a character may span the boundary between chunks.  This\r\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\r\n *   file.\r\n */var Utf8IteratorImpl=/*#__PURE__*/function(_lazy_iterator__WEBPA2){_inherits(Utf8IteratorImpl,_lazy_iterator__WEBPA2);var _super30=_createSuper(Utf8IteratorImpl);function Utf8IteratorImpl(upstream){var _this83;_classCallCheck2(this,Utf8IteratorImpl);_this83=_super30.call(this);_this83.upstream=upstream;if(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"env\"])().get('IS_BROWSER')){_this83.decoder=new TextDecoder('utf-8');}else{// tslint:disable-next-line:no-require-imports\nvar _webpack_require__=__webpack_require__(78),StringDecoder=_webpack_require__.StringDecoder;_this83.decoder=new StringDecoder('utf8');}return _this83;}_createClass(Utf8IteratorImpl,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Utf8\");}},{key:\"pump\",value:function(){var _pump2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee104(){var chunkResult,chunk,text;return regeneratorRuntime.wrap(function _callee104$(_context104){while(1){switch(_context104.prev=_context104.next){case 0:_context104.next=2;return this.upstream.next();case 2:chunkResult=_context104.sent;if(!chunkResult.done){_context104.next=7;break;}return _context104.abrupt(\"return\",false);case 7:chunk=chunkResult.value;case 8:if(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"env\"])().get('IS_BROWSER')){text=this.decoder.decode(chunk,{stream:true});}else{text=this.decoder.write(Buffer.from(chunk.buffer));}this.outputQueue.push(text);return _context104.abrupt(\"return\",true);case 11:case\"end\":return _context104.stop();}}},_callee104,this);}));function pump(){return _pump2.apply(this,arguments);}return pump;}()}]);return Utf8IteratorImpl;}(_lazy_iterator__WEBPACK_IMPORTED_MODULE_1__[/* OneToManyIterator */\"b\"]);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(39).Buffer);/***/},/* 58 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"a\",function(){return StringIterator;});/* harmony import */var _lazy_iterator__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(14);/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */var StringIterator=/*#__PURE__*/function(_lazy_iterator__WEBPA3){_inherits(StringIterator,_lazy_iterator__WEBPA3);var _super31=_createSuper(StringIterator);function StringIterator(){_classCallCheck2(this,StringIterator);return _super31.apply(this,arguments);}_createClass(StringIterator,[{key:\"split\",value:/**\r\n     * Splits a string stream on a given separator.\r\n     *\r\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\r\n     * so conceptually the incoming stream is treated simply as the concatenation\r\n     * of its elements.\r\n     *\r\n     * The outgoing stream provides chunks corresponding to the results of the\r\n     * standard string split() operation (even if such a chunk spanned incoming\r\n     * chunks).  The separators are not included.\r\n     *\r\n     * A typical usage is to split a text file (represented as a stream with\r\n     * arbitrary chunk boundaries) into lines.\r\n     *\r\n     * @param upstream A readable stream of strings that can be treated as\r\n     *   concatenated.\r\n     * @param separator A character to split on.\r\n     */function split(separator){return new SplitIterator(this,separator);}}]);return StringIterator;}(_lazy_iterator__WEBPACK_IMPORTED_MODULE_0__[/* LazyIterator */\"a\"]);// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nvar SplitIterator=/*#__PURE__*/function(_StringIterator){_inherits(SplitIterator,_StringIterator);var _super32=_createSuper(SplitIterator);function SplitIterator(upstream,separator){var _this84;_classCallCheck2(this,SplitIterator);_this84=_super32.call(this);_this84.upstream=upstream;_this84.impl=new SplitIteratorImpl(upstream,separator);return _this84;}_createClass(SplitIterator,[{key:\"summary\",value:function summary(){return this.impl.summary();}},{key:\"next\",value:function(){var _next16=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee105(){return regeneratorRuntime.wrap(function _callee105$(_context105){while(1){switch(_context105.prev=_context105.next){case 0:return _context105.abrupt(\"return\",this.impl.next());case 1:case\"end\":return _context105.stop();}}},_callee105,this);}));function next(){return _next16.apply(this,arguments);}return next;}()}]);return SplitIterator;}(StringIterator);var SplitIteratorImpl=/*#__PURE__*/function(_lazy_iterator__WEBPA4){_inherits(SplitIteratorImpl,_lazy_iterator__WEBPA4);var _super33=_createSuper(SplitIteratorImpl);function SplitIteratorImpl(upstream,separator){var _this85;_classCallCheck2(this,SplitIteratorImpl);_this85=_super33.call(this);_this85.upstream=upstream;_this85.separator=separator;// A partial string at the end of an upstream chunk\n_this85.carryover='';return _this85;}_createClass(SplitIteratorImpl,[{key:\"summary\",value:function summary(){return\"\".concat(this.upstream.summary(),\" -> Split('\").concat(this.separator,\"')\");}},{key:\"pump\",value:function(){var _pump3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee106(){var chunkResult,lines,_iterator11,_step11,line;return regeneratorRuntime.wrap(function _callee106$(_context106){while(1){switch(_context106.prev=_context106.next){case 0:_context106.next=2;return this.upstream.next();case 2:chunkResult=_context106.sent;if(!chunkResult.done){_context106.next=9;break;}if(!(this.carryover==='')){_context106.next=6;break;}return _context106.abrupt(\"return\",false);case 6:// Pretend that the pump succeeded in order to emit the small last batch.\n// The next pump() call will actually fail.\nthis.outputQueue.push(this.carryover);this.carryover='';return _context106.abrupt(\"return\",true);case 9:lines=chunkResult.value.split(this.separator);// Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n// Thus the carryover may be '' if the separator falls on a chunk\n// boundary; this produces the correct result.\nlines[0]=this.carryover+lines[0];_iterator11=_createForOfIteratorHelper(lines.slice(0,-1));try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){line=_step11.value;this.outputQueue.push(line);}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}this.carryover=lines[lines.length-1];return _context106.abrupt(\"return\",true);case 15:case\"end\":return _context106.stop();}}},_callee106,this);}));function pump(){return _pump3.apply(this,arguments);}return pump;}()}]);return SplitIteratorImpl;}(_lazy_iterator__WEBPACK_IMPORTED_MODULE_0__[/* OneToManyIterator */\"b\"]);/***/},/* 59 */ /***/function(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var blazeface=__webpack_require__(81);var tfconv=__webpack_require__(38);var tf=__webpack_require__(0);var keypoints_1=__webpack_require__(82);var pipeline_1=__webpack_require__(83);var uv_coords_1=__webpack_require__(85);var FACEMESH_GRAPHMODEL_PATH='https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1';var MESH_MODEL_INPUT_WIDTH=192;var MESH_MODEL_INPUT_HEIGHT=192;function load(){return _load7.apply(this,arguments);}function _load7(){_load7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee110(){var _ref25,_ref25$maxContinuousC,maxContinuousChecks,_ref25$detectionConfi,detectionConfidence,_ref25$maxFaces,maxFaces,_ref25$iouThreshold,iouThreshold,_ref25$scoreThreshold,scoreThreshold,_yield$Promise$all,_yield$Promise$all2,blazeFace,blazeMeshModel,faceMesh,_args112=arguments;return regeneratorRuntime.wrap(function _callee110$(_context110){while(1){switch(_context110.prev=_context110.next){case 0:_ref25=_args112.length>0&&_args112[0]!==undefined?_args112[0]:{},_ref25$maxContinuousC=_ref25.maxContinuousChecks,maxContinuousChecks=_ref25$maxContinuousC===void 0?5:_ref25$maxContinuousC,_ref25$detectionConfi=_ref25.detectionConfidence,detectionConfidence=_ref25$detectionConfi===void 0?0.9:_ref25$detectionConfi,_ref25$maxFaces=_ref25.maxFaces,maxFaces=_ref25$maxFaces===void 0?10:_ref25$maxFaces,_ref25$iouThreshold=_ref25.iouThreshold,iouThreshold=_ref25$iouThreshold===void 0?0.3:_ref25$iouThreshold,_ref25$scoreThreshold=_ref25.scoreThreshold,scoreThreshold=_ref25$scoreThreshold===void 0?0.75:_ref25$scoreThreshold;_context110.next=3;return Promise.all([loadDetectorModel(maxFaces,iouThreshold,scoreThreshold),loadMeshModel()]);case 3:_yield$Promise$all=_context110.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);blazeFace=_yield$Promise$all2[0];blazeMeshModel=_yield$Promise$all2[1];faceMesh=new FaceMesh(blazeFace,blazeMeshModel,maxContinuousChecks,detectionConfidence,maxFaces);return _context110.abrupt(\"return\",faceMesh);case 9:case\"end\":return _context110.stop();}}},_callee110);}));return _load7.apply(this,arguments);}exports.load=load;function loadDetectorModel(_x94,_x95,_x96){return _loadDetectorModel.apply(this,arguments);}function _loadDetectorModel(){_loadDetectorModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee111(maxFaces,iouThreshold,scoreThreshold){return regeneratorRuntime.wrap(function _callee111$(_context111){while(1){switch(_context111.prev=_context111.next){case 0:return _context111.abrupt(\"return\",blazeface.load({maxFaces:maxFaces,iouThreshold:iouThreshold,scoreThreshold:scoreThreshold}));case 1:case\"end\":return _context111.stop();}}},_callee111);}));return _loadDetectorModel.apply(this,arguments);}function loadMeshModel(){return _loadMeshModel.apply(this,arguments);}function _loadMeshModel(){_loadMeshModel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee112(){return regeneratorRuntime.wrap(function _callee112$(_context112){while(1){switch(_context112.prev=_context112.next){case 0:return _context112.abrupt(\"return\",tfconv.loadGraphModel(FACEMESH_GRAPHMODEL_PATH,{fromTFHub:true}));case 1:case\"end\":return _context112.stop();}}},_callee112);}));return _loadMeshModel.apply(this,arguments);}function getInputTensorDimensions(input){return input instanceof tf.Tensor?[input.shape[0],input.shape[1]]:[input.height,input.width];}function flipFaceHorizontal(face,imageWidth){if(face.mesh instanceof tf.Tensor){var _tf$tidy=tf.tidy(function(){var subtractBasis=tf.tensor1d([imageWidth-1,0,0]);var multiplyBasis=tf.tensor1d([1,-1,1]);return tf.tidy(function(){return[tf.concat([tf.sub(imageWidth-1,face.boundingBox.topLeft.slice(0,1)),face.boundingBox.topLeft.slice(1,1)]),tf.concat([tf.sub(imageWidth-1,face.boundingBox.bottomRight.slice(0,1)),face.boundingBox.bottomRight.slice(1,1)]),tf.sub(subtractBasis,face.mesh).mul(multiplyBasis),tf.sub(subtractBasis,face.scaledMesh).mul(multiplyBasis)];});}),_tf$tidy2=_slicedToArray(_tf$tidy,4),topLeft=_tf$tidy2[0],bottomRight=_tf$tidy2[1],mesh=_tf$tidy2[2],scaledMesh=_tf$tidy2[3];return Object.assign({},face,{boundingBox:{topLeft:topLeft,bottomRight:bottomRight},mesh:mesh,scaledMesh:scaledMesh});}return Object.assign({},face,{boundingBox:{topLeft:[imageWidth-1-face.boundingBox.topLeft[0],face.boundingBox.topLeft[1]],bottomRight:[imageWidth-1-face.boundingBox.bottomRight[0],face.boundingBox.bottomRight[1]]},mesh:face.mesh.map(function(coord){var flippedCoord=coord.slice(0);flippedCoord[0]=imageWidth-1-coord[0];return flippedCoord;}),scaledMesh:face.scaledMesh.map(function(coord){var flippedCoord=coord.slice(0);flippedCoord[0]=imageWidth-1-coord[0];return flippedCoord;})});}var FaceMesh=/*#__PURE__*/function(){function FaceMesh(blazeFace,blazeMeshModel,maxContinuousChecks,detectionConfidence,maxFaces){_classCallCheck2(this,FaceMesh);this.pipeline=new pipeline_1.Pipeline(blazeFace,blazeMeshModel,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,maxContinuousChecks,maxFaces);this.detectionConfidence=detectionConfidence;}_createClass(FaceMesh,[{key:\"estimateFaces\",value:function(){var _estimateFaces=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee109(input){var _this86=this;var returnTensors,flipHorizontal,_getInputTensorDimens,_getInputTensorDimens2,width,image,savedWebglPackDepthwiseConvFlag,predictions,_args111=arguments;return regeneratorRuntime.wrap(function _callee109$(_context109){while(1){switch(_context109.prev=_context109.next){case 0:returnTensors=_args111.length>1&&_args111[1]!==undefined?_args111[1]:false;flipHorizontal=_args111.length>2&&_args111[2]!==undefined?_args111[2]:false;_getInputTensorDimens=getInputTensorDimensions(input),_getInputTensorDimens2=_slicedToArray(_getInputTensorDimens,2),width=_getInputTensorDimens2[1];image=tf.tidy(function(){if(!(input instanceof tf.Tensor)){input=tf.browser.fromPixels(input);}return input.toFloat().expandDims(0);});savedWebglPackDepthwiseConvFlag=tf.env().get('WEBGL_PACK_DEPTHWISECONV');tf.env().set('WEBGL_PACK_DEPTHWISECONV',true);_context109.next=8;return this.pipeline.predict(image);case 8:predictions=_context109.sent;tf.env().set('WEBGL_PACK_DEPTHWISECONV',savedWebglPackDepthwiseConvFlag);image.dispose();if(!(predictions!=null&&predictions.length>0)){_context109.next=13;break;}return _context109.abrupt(\"return\",Promise.all(predictions.map(/*#__PURE__*/function(){var _ref23=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee108(prediction,i){var coords,scaledCoords,box,flag,tensorsToRead,tensorValues,flagValue,_annotatedPrediction,_tensorValues$slice,_tensorValues$slice2,coordsArr,coordsArrScaled,topLeft,bottomRight,annotatedPrediction,annotations,key;return regeneratorRuntime.wrap(function _callee108$(_context108){while(1){switch(_context108.prev=_context108.next){case 0:coords=prediction.coords,scaledCoords=prediction.scaledCoords,box=prediction.box,flag=prediction.flag;tensorsToRead=[flag];if(!returnTensors){tensorsToRead=tensorsToRead.concat([coords,scaledCoords,box.startPoint,box.endPoint]);}_context108.next=5;return Promise.all(tensorsToRead.map(/*#__PURE__*/function(){var _ref24=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee107(d){return regeneratorRuntime.wrap(function _callee107$(_context107){while(1){switch(_context107.prev=_context107.next){case 0:return _context107.abrupt(\"return\",d.array());case 1:case\"end\":return _context107.stop();}}},_callee107);}));return function(_x100){return _ref24.apply(this,arguments);};}()));case 5:tensorValues=_context108.sent;flagValue=tensorValues[0];flag.dispose();if(flagValue<_this86.detectionConfidence){_this86.pipeline.clearRegionOfInterest(i);}if(!returnTensors){_context108.next=14;break;}_annotatedPrediction={faceInViewConfidence:flagValue,mesh:coords,scaledMesh:scaledCoords,boundingBox:{topLeft:box.startPoint.squeeze(),bottomRight:box.endPoint.squeeze()}};if(!flipHorizontal){_context108.next=13;break;}return _context108.abrupt(\"return\",flipFaceHorizontal(_annotatedPrediction,width));case 13:return _context108.abrupt(\"return\",_annotatedPrediction);case 14:_tensorValues$slice=tensorValues.slice(1),_tensorValues$slice2=_slicedToArray(_tensorValues$slice,4),coordsArr=_tensorValues$slice2[0],coordsArrScaled=_tensorValues$slice2[1],topLeft=_tensorValues$slice2[2],bottomRight=_tensorValues$slice2[3];scaledCoords.dispose();coords.dispose();annotatedPrediction={faceInViewConfidence:flagValue,boundingBox:{topLeft:topLeft,bottomRight:bottomRight},mesh:coordsArr,scaledMesh:coordsArrScaled};if(flipHorizontal){annotatedPrediction=flipFaceHorizontal(annotatedPrediction,width);}annotations={};for(key in keypoints_1.MESH_ANNOTATIONS){annotations[key]=keypoints_1.MESH_ANNOTATIONS[key].map(function(index){return annotatedPrediction.scaledMesh[index];});}annotatedPrediction['annotations']=annotations;return _context108.abrupt(\"return\",annotatedPrediction);case 23:case\"end\":return _context108.stop();}}},_callee108);}));return function(_x98,_x99){return _ref23.apply(this,arguments);};}())));case 13:return _context109.abrupt(\"return\",[]);case 14:case\"end\":return _context109.stop();}}},_callee109,this);}));function estimateFaces(_x97){return _estimateFaces.apply(this,arguments);}return estimateFaces;}()}],[{key:\"getAnnotations\",value:function getAnnotations(){return keypoints_1.MESH_ANNOTATIONS;}},{key:\"getUVCoords\",value:function getUVCoords(){return uv_coords_1.UV_COORDS;}}]);return FaceMesh;}();exports.FaceMesh=FaceMesh;/***/},/* 60 */ /***/function(module,exports,__webpack_require__){\"use strict\";/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */Object.defineProperty(exports,'__esModule',{value:true});var tfjsCore=__webpack_require__(0);var tfjsLayers=__webpack_require__(87);var tfjsConverter=__webpack_require__(38);var tfjsData=__webpack_require__(88);var tfjsBackendCpu=__webpack_require__(89);var tfjsBackendWebgl=__webpack_require__(86);/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nvar version='2.0.1';/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var version$1={'tfjs-core':tfjsCore.version_core,'tfjs-backend-cpu':tfjsBackendCpu.version_cpu,'tfjs-backend-webgl':tfjsBackendWebgl.version_webgl,'tfjs-data':tfjsData.version_data,'tfjs-layers':tfjsLayers.version_layers,'tfjs-converter':tfjsConverter.version_converter,'tfjs':version};Object.keys(tfjsCore).forEach(function(k){if(k!=='default')Object.defineProperty(exports,k,{enumerable:true,get:function get(){return tfjsCore[k];}});});Object.keys(tfjsLayers).forEach(function(k){if(k!=='default')Object.defineProperty(exports,k,{enumerable:true,get:function get(){return tfjsLayers[k];}});});Object.keys(tfjsConverter).forEach(function(k){if(k!=='default')Object.defineProperty(exports,k,{enumerable:true,get:function get(){return tfjsConverter[k];}});});exports.data=tfjsData;exports.version=version$1;/***/},/* 61 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(process){/* harmony import */var _device_util__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(36);/* harmony import */var _environment__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10);/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ENV=Object(_environment__WEBPACK_IMPORTED_MODULE_1__[/* env */\"c\"])();/**\r\n * This file contains environment-related flag registrations.\r\n */ /** Whether to enable debug mode. */ENV.registerFlag('DEBUG',function(){return false;},function(debugValue){if(debugValue){console.warn('Debugging mode is ON. The output of every math call will '+'be downloaded to CPU and checked for NaNs. '+'This significantly impacts performance.');}});/** Whether we are in a browser (as versus, say, node.js) environment. */ENV.registerFlag('IS_BROWSER',function(){return _device_util__WEBPACK_IMPORTED_MODULE_0__[\"isBrowser\"]();});/** Whether we are in a browser (as versus, say, node.js) environment. */ENV.registerFlag('IS_NODE',function(){return typeof process!=='undefined'&&typeof process.versions!=='undefined'&&typeof process.versions.node!=='undefined';});/** Whether this browser is Chrome. */ENV.registerFlag('IS_CHROME',function(){return typeof navigator!=='undefined'&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor);});/**\r\n * True when the environment is \"production\" where we disable safety checks\r\n * to gain performance.\r\n */ENV.registerFlag('PROD',function(){return false;});/**\r\n * Whether to do sanity checks when inferring a shape from user-provided\r\n * values, used when creating a new tensor.\r\n */ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY',function(){return ENV.getBool('DEBUG');});/** Whether deprecation warnings are enabled. */ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED',function(){return true;});/** True if running unit tests. */ENV.registerFlag('IS_TEST',function(){return false;});/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(35));/***/},/* 62 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";/* WEBPACK VAR INJECTION */(function(process){/* unused harmony export getNodeFetch */ /* unused harmony export resetSystemFetch */ /* unused harmony export setSystemFetch */ /* unused harmony export getSystemFetch */ /* unused harmony export PlatformNode */ /* harmony import */var _environment__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(10);/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // We are wrapping this within an object so it can be stubbed by Jasmine.\nvar getNodeFetch={// tslint:disable-next-line:no-require-imports\nimportFetch:function importFetch(){return __webpack_require__(63);}};var systemFetch;// These getters and setters are for testing so we don't export a mutable\n// variable.\nfunction resetSystemFetch(){systemFetch=null;}function setSystemFetch(fetchFn){systemFetch=fetchFn;}function getSystemFetch(){return systemFetch;}var PlatformNode=/*#__PURE__*/function(){function PlatformNode(){_classCallCheck2(this,PlatformNode);// tslint:disable-next-line:no-require-imports\nthis.util=__webpack_require__(64);// According to the spec, the built-in encoder can do only UTF-8 encoding.\n// https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\nthis.textEncoder=new this.util.TextEncoder();}_createClass(PlatformNode,[{key:\"fetch\",value:function fetch(path,requestInits){if(Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().global.fetch!=null){return Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().global.fetch(path,requestInits);}if(systemFetch==null){systemFetch=getNodeFetch.importFetch();}return systemFetch(path,requestInits);}},{key:\"now\",value:function now(){var time=process.hrtime();return time[0]*1000+time[1]/1000000;}},{key:\"encode\",value:function encode(text,encoding){if(encoding!=='utf-8'&&encoding!=='utf8'){throw new Error(\"Node built-in encoder only supports utf-8, but got \".concat(encoding));}return this.textEncoder.encode(text);}},{key:\"decode\",value:function decode(bytes,encoding){if(bytes.length===0){return'';}return new this.util.TextDecoder(encoding).decode(bytes);}}]);return PlatformNode;}();if(Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().get('IS_NODE')){Object(_environment__WEBPACK_IMPORTED_MODULE_0__[/* env */\"c\"])().setPlatform('node',new PlatformNode());}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(35));/***/},/* 63 */ /***/function(module,exports){/* (ignored) */ /***/},/* 64 */ /***/function(module,exports){/* (ignored) */ /***/},/* 65 */ /***/function(module,exports,__webpack_require__){\"use strict\";exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;function getLens(b64){var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// Trim off extra bytes after placeholder bytes are found\n// See: https://github.com/beatgammit/base64-js/issues/42\nvar validLen=b64.indexOf('=');if(validLen===-1)validLen=len;var placeHoldersLen=validLen===len?0:4-validLen%4;return[validLen,placeHoldersLen];}// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64){var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];return(validLen+placeHoldersLen)*3/4-placeHoldersLen;}function _byteLength(b64,validLen,placeHoldersLen){return(validLen+placeHoldersLen)*3/4-placeHoldersLen;}function toByteArray(b64){var tmp;var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));var curByte=0;// if there are placeholders, only get up to the last complete 4 chars\nvar len=placeHoldersLen>0?validLen-4:validLen;var i;for(i=0;i<len;i+=4){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[curByte++]=tmp>>16&0xFF;arr[curByte++]=tmp>>8&0xFF;arr[curByte++]=tmp&0xFF;}if(placeHoldersLen===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[curByte++]=tmp&0xFF;}if(placeHoldersLen===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[curByte++]=tmp>>8&0xFF;arr[curByte++]=tmp&0xFF;}return arr;}function tripletToBase64(num){return lookup[num>>18&0x3F]+lookup[num>>12&0x3F]+lookup[num>>6&0x3F]+lookup[num&0x3F];}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16&0xFF0000)+(uint8[i+1]<<8&0xFF00)+(uint8[i+2]&0xFF);output.push(tripletToBase64(tmp));}return output.join('');}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes\nvar parts=[];var maxChunkLength=16383;// must be multiple of 3\n// go through the array every three bytes, we'll deal with trailing stuff later\nfor(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes\nif(extraBytes===1){tmp=uint8[len-1];parts.push(lookup[tmp>>2]+lookup[tmp<<4&0x3F]+'==');}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];parts.push(lookup[tmp>>10]+lookup[tmp>>4&0x3F]+lookup[tmp<<2&0x3F]+'=');}return parts.join('');}/***/},/* 66 */ /***/function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};/***/},/* 67 */ /***/function(module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return toString.call(arr)=='[object Array]';};/***/},/* 68 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n(function(global,module,define){function Alea(seed){var me=this,mash=Mash();me.next=function(){var t=2091639*me.s0+me.c*2.3283064365386963e-10;// 2^-32\nme.s0=me.s1;me.s1=me.s2;return me.s2=t-(me.c=t|0);};// Apply the seeding algorithm from Baagoe.\nme.c=1;me.s0=mash(' ');me.s1=mash(' ');me.s2=mash(' ');me.s0-=mash(seed);if(me.s0<0){me.s0+=1;}me.s1-=mash(seed);if(me.s1<0){me.s1+=1;}me.s2-=mash(seed);if(me.s2<0){me.s2+=1;}mash=null;}function copy(f,t){t.c=f.c;t.s0=f.s0;t.s1=f.s1;t.s2=f.s2;return t;}function impl(seed,opts){var xg=new Alea(seed),state=opts&&opts.state,prng=xg.next;prng.int32=function(){return xg.next()*0x100000000|0;};prng.double=function(){return prng()+(prng()*0x200000|0)*1.1102230246251565e-16;// 2^-53\n};prng.quick=prng;if(state){if(_typeof2(state)=='object')copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}function Mash(){var n=0xefc8249d;var mash=function mash(data){data=data.toString();for(var i=0;i<data.length;i++){n+=data.charCodeAt(i);var h=0.02519603282416938*n;n=h>>>0;h-=n;h*=n;n=h>>>0;h-=n;n+=h*0x100000000;// 2^32\n}return(n>>>0)*2.3283064365386963e-10;// 2^-32\n};return mash;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.alea=impl;}})(this, true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 69 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global,module,define){function XorGen(seed){var me=this,strseed='';me.x=0;me.y=0;me.z=0;me.w=0;// Set up generator function.\nme.next=function(){var t=me.x^me.x<<11;me.x=me.y;me.y=me.z;me.z=me.w;return me.w^=me.w>>>19^t^t>>>8;};if(seed===(seed|0)){// Integer seed.\nme.x=seed;}else{// String seed.\nstrseed+=seed;}// Mix in string seed, then discard an initial batch of 64 values.\nfor(var k=0;k<strseed.length+64;k++){me.x^=strseed.charCodeAt(k)|0;me.next();}}function copy(f,t){t.x=f.x;t.y=f.y;t.z=f.z;t.w=f.w;return t;}function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function prng(){return(xg.next()>>>0)/0x100000000;};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/0x100000000,result=(top+bot)/(1<<21);}while(result===0);return result;};prng.int32=xg.next;prng.quick=prng;if(state){if(_typeof2(state)=='object')copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.xor128=impl;}})(this, true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 70 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global,module,define){function XorGen(seed){var me=this,strseed='';// Set up generator function.\nme.next=function(){var t=me.x^me.x>>>2;me.x=me.y;me.y=me.z;me.z=me.w;me.w=me.v;return(me.d=me.d+362437|0)+(me.v=me.v^me.v<<4^(t^t<<1))|0;};me.x=0;me.y=0;me.z=0;me.w=0;me.v=0;if(seed===(seed|0)){// Integer seed.\nme.x=seed;}else{// String seed.\nstrseed+=seed;}// Mix in string seed, then discard an initial batch of 64 values.\nfor(var k=0;k<strseed.length+64;k++){me.x^=strseed.charCodeAt(k)|0;if(k==strseed.length){me.d=me.x<<10^me.x>>>4;}me.next();}}function copy(f,t){t.x=f.x;t.y=f.y;t.z=f.z;t.w=f.w;t.v=f.v;t.d=f.d;return t;}function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function prng(){return(xg.next()>>>0)/0x100000000;};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/0x100000000,result=(top+bot)/(1<<21);}while(result===0);return result;};prng.int32=xg.next;prng.quick=prng;if(state){if(_typeof2(state)=='object')copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.xorwow=impl;}})(this, true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 71 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n(function(global,module,define){function XorGen(seed){var me=this;// Set up generator function.\nme.next=function(){// Update xor generator.\nvar X=me.x,i=me.i,t,v,w;t=X[i];t^=t>>>7;v=t^t<<24;t=X[i+1&7];v^=t^t>>>10;t=X[i+3&7];v^=t^t>>>3;t=X[i+4&7];v^=t^t<<7;t=X[i+7&7];t=t^t<<13;v^=t^t<<9;X[i]=v;me.i=i+1&7;return v;};function init(me,seed){var j,w,X=[];if(seed===(seed|0)){// Seed state array using a 32-bit integer.\nw=X[0]=seed;}else{// Seed state using a string.\nseed=''+seed;for(j=0;j<seed.length;++j){X[j&7]=X[j&7]<<15^seed.charCodeAt(j)+X[j+1&7]<<13;}}// Enforce an array length of 8, not all zeroes.\nwhile(X.length<8){X.push(0);}for(j=0;j<8&&X[j]===0;++j){;}if(j==8)w=X[7]=-1;else w=X[j];me.x=X;me.i=0;// Discard an initial 256 values.\nfor(j=256;j>0;--j){me.next();}}init(me,seed);}function copy(f,t){t.x=f.x.slice();t.i=f.i;return t;}function impl(seed,opts){if(seed==null)seed=+new Date();var xg=new XorGen(seed),state=opts&&opts.state,prng=function prng(){return(xg.next()>>>0)/0x100000000;};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/0x100000000,result=(top+bot)/(1<<21);}while(result===0);return result;};prng.int32=xg.next;prng.quick=prng;if(state){if(state.x)copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.xorshift7=impl;}})(this, true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 72 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n(function(global,module,define){function XorGen(seed){var me=this;// Set up generator function.\nme.next=function(){var w=me.w,X=me.X,i=me.i,t,v;// Update Weyl generator.\nme.w=w=w+0x61c88647|0;// Update xor generator.\nv=X[i+34&127];t=X[i=i+1&127];v^=v<<13;t^=t<<17;v^=v>>>15;t^=t>>>12;// Update Xor generator array state.\nv=X[i]=v^t;me.i=i;// Result is the combination.\nreturn v+(w^w>>>16)|0;};function init(me,seed){var t,v,i,j,w,X=[],limit=128;if(seed===(seed|0)){// Numeric seeds initialize v, which is used to generates X.\nv=seed;seed=null;}else{// String seeds are mixed into v and X one character at a time.\nseed=seed+'\\0';v=0;limit=Math.max(limit,seed.length);}// Initialize circular array and weyl value.\nfor(i=0,j=-32;j<limit;++j){// Put the unicode characters into the array, and shuffle them.\nif(seed)v^=seed.charCodeAt((j+32)%seed.length);// After 32 shuffles, take v as the starting w value.\nif(j===0)w=v;v^=v<<10;v^=v>>>15;v^=v<<4;v^=v>>>13;if(j>=0){w=w+0x61c88647|0;// Weyl.\nt=X[j&127]^=v+w;// Combine xor and weyl to init array.\ni=0==t?i+1:0;// Count zeroes.\n}}// We have detected all zeroes; make the key nonzero.\nif(i>=128){X[(seed&&seed.length||0)&127]=-1;}// Run the generator 512 times to further mix the state before using it.\n// Factoring this as a function slows the main generator, so it is just\n// unrolled here.  The weyl generator is not advanced while warming up.\ni=127;for(j=4*128;j>0;--j){v=X[i+34&127];t=X[i=i+1&127];v^=v<<13;t^=t<<17;v^=v>>>15;t^=t>>>12;X[i]=v^t;}// Storing state as object members is faster than using closure variables.\nme.w=w;me.X=X;me.i=i;}init(me,seed);}function copy(f,t){t.i=f.i;t.w=f.w;t.X=f.X.slice();return t;};function impl(seed,opts){if(seed==null)seed=+new Date();var xg=new XorGen(seed),state=opts&&opts.state,prng=function prng(){return(xg.next()>>>0)/0x100000000;};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/0x100000000,result=(top+bot)/(1<<21);}while(result===0);return result;};prng.int32=xg.next;prng.quick=prng;if(state){if(state.X)copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.xor4096=impl;}})(this,// window object or global\n true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 73 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n(function(global,module,define){function XorGen(seed){var me=this,strseed='';// Set up generator function.\nme.next=function(){var b=me.b,c=me.c,d=me.d,a=me.a;b=b<<25^b>>>7^c;c=c-d|0;d=d<<24^d>>>8^a;a=a-b|0;me.b=b=b<<20^b>>>12^c;me.c=c=c-d|0;me.d=d<<16^c>>>16^a;return me.a=a-b|0;};/* The following is non-inverted tyche, which has better internal\r\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\r\n  me.next = function() {\r\n    var a = me.a, b = me.b, c = me.c, d = me.d;\r\n    a = (me.a + me.b | 0) >>> 0;\r\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\r\n    c = me.c + d | 0;\r\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\r\n    me.a = a = a + b | 0;\r\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\r\n    me.c = c = c + d | 0;\r\n    b = b ^ c;\r\n    return me.b = (b << 7 ^ b >>> 25);\r\n  }\r\n  */me.a=0;me.b=0;me.c=2654435769|0;me.d=1367130551;if(seed===Math.floor(seed)){// Integer seed.\nme.a=seed/0x100000000|0;me.b=seed|0;}else{// String seed.\nstrseed+=seed;}// Mix in string seed, then discard an initial batch of 64 values.\nfor(var k=0;k<strseed.length+20;k++){me.b^=strseed.charCodeAt(k)|0;me.next();}}function copy(f,t){t.a=f.a;t.b=f.b;t.c=f.c;t.d=f.d;return t;};function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function prng(){return(xg.next()>>>0)/0x100000000;};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/0x100000000,result=(top+bot)/(1<<21);}while(result===0);return result;};prng.int32=xg.next;prng.quick=prng;if(state){if(_typeof2(state)=='object')copy(state,xg);prng.state=function(){return copy(xg,{});};}return prng;}if(module&&module.exports){module.exports=impl;}else if(__webpack_require__(16)&&__webpack_require__(29)){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return impl;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{this.tychei=impl;}})(this, true&&module,// present in node.js\n__webpack_require__(16)// present with an AMD loader\n);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(28)(module));/***/},/* 74 */ /***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/*\r\nCopyright 2014 David Bau.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n*/(function(pool,math){//\n// The following constants are related to IEEE 754 limits.\n//\nvar global=this,width=256,// each RC4 output is 0 <= x < 256\nchunks=6,// at least six RC4 outputs for each double\ndigits=52,// there are 52 significant digits in a double\nrngname='random',// rngname: name for Math.random and Math.seedrandom\nstartdenom=math.pow(width,chunks),significance=math.pow(2,digits),overflow=significance*2,mask=width-1,nodecrypto;// node.js crypto module, initialized at the bottom.\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed,options,callback){var key=[];options=options==true?{entropy:true}:options||{};// Flatten the seed string or build one from local entropy if needed.\nvar shortseed=mixkey(flatten(options.entropy?[seed,tostring(pool)]:seed==null?autoseed():seed,3),key);// Use the seed to initialize an ARC4 generator.\nvar arc4=new ARC4(key);// This function returns a random double in [0, 1) that contains\n// randomness in every bit of the mantissa of the IEEE 754 value.\nvar prng=function prng(){var n=arc4.g(chunks),// Start with a numerator n < 2 ^ 48\nd=startdenom,//   and denominator d = 2 ^ 48.\nx=0;//   and no 'extra last byte'.\nwhile(n<significance){// Fill up all significant digits by\nn=(n+x)*width;//   shifting numerator and\nd*=width;//   denominator and generating a\nx=arc4.g(1);//   new least-significant-byte.\n}while(n>=overflow){// To avoid rounding up, before adding\nn/=2;//   last byte, shift everything\nd/=2;//   right using integer math until\nx>>>=1;//   we have exactly the desired bits.\n}return(n+x)/d;// Form the number within [0, 1).\n};prng.int32=function(){return arc4.g(4)|0;};prng.quick=function(){return arc4.g(4)/0x100000000;};prng.double=prng;// Mix the randomness into accumulated entropy.\nmixkey(tostring(arc4.S),pool);// Calling convention: what to return as a function of prng, seed, is_math.\nreturn(options.pass||callback||function(prng,seed,is_math_call,state){if(state){// Load the arc4 state from the given state if it has an S array.\nif(state.S){copy(state,arc4);}// Only provide the .state method if requested via options.state.\nprng.state=function(){return copy(arc4,{});};}// If called as a method of Math (Math.seedrandom()), mutate\n// Math.random because that is how seedrandom.js has worked since v1.0.\nif(is_math_call){math[rngname]=prng;return seed;}// Otherwise, it is a newer calling convention, so return the\n// prng directly.\nelse return prng;})(prng,shortseed,'global'in options?options.global:this==math,options.state);}math['seed'+rngname]=seedrandom;//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key){var t,keylen=key.length,me=this,i=0,j=me.i=me.j=0,s=me.S=[];// The empty key [] is treated as [0].\nif(!keylen){key=[keylen++];}// Set up S using the standard key scheduling algorithm.\nwhile(i<width){s[i]=i++;}for(i=0;i<width;i++){s[i]=s[j=mask&j+key[i%keylen]+(t=s[i])];s[j]=t;}// The \"g\" method returns the next (count) outputs as one number.\n(me.g=function(count){// Using instance members instead of closure state nearly doubles speed.\nvar t,r=0,i=me.i,j=me.j,s=me.S;while(count--){t=s[i=mask&i+1];r=r*width+s[mask&(s[i]=s[j=mask&j+t])+(s[j]=t)];}me.i=i;me.j=j;return r;// For robust unpredictability, the function call below automatically\n// discards an initial batch of values.  This is called RC4-drop[256].\n// See http://google.com/search?q=rsa+fluhrer+response&btnI\n})(width);}//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f,t){t.i=f.i;t.j=f.j;t.S=f.S.slice();return t;};//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj,depth){var result=[],typ=_typeof2(obj),prop;if(depth&&typ=='object'){for(prop in obj){try{result.push(flatten(obj[prop],depth-1));}catch(e){}}}return result.length?result:typ=='string'?obj:obj+'\\0';}//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed,key){var stringseed=seed+'',smear,j=0;while(j<stringseed.length){key[mask&j]=mask&(smear^=key[mask&j]*19)+stringseed.charCodeAt(j++);}return tostring(key);}//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed(){try{var out;if(nodecrypto&&(out=nodecrypto.randomBytes)){// The use of 'out' to remember randomBytes makes tight minified code.\nout=out(width);}else{out=new Uint8Array(width);(global.crypto||global.msCrypto).getRandomValues(out);}return tostring(out);}catch(e){var browser=global.navigator,plugins=browser&&browser.plugins;return[+new Date(),global,plugins,global.screen,tostring(pool)];}}//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a){return String.fromCharCode.apply(0,a);}//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(),pool);//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif( true&&module.exports){module.exports=seedrandom;// When in node.js, try using crypto package for autoseeding.\ntry{nodecrypto=__webpack_require__(75);}catch(ex){}}else if(true){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return seedrandom;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}// End anonymous scope, and pass initial values.\n})([],// pool: entropy pool starts empty\nMath// math: package containing random, pow, and seedrandom\n);/***/},/* 75 */ /***/function(module,exports){/* (ignored) */ /***/},/* 76 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){var scope=typeof global!==\"undefined\"&&global||typeof self!==\"undefined\"&&self||window;var apply=Function.prototype.apply;// DOM APIs, for completeness\nexports.setTimeout=function(){return new Timeout(apply.call(setTimeout,scope,arguments),clearTimeout);};exports.setInterval=function(){return new Timeout(apply.call(setInterval,scope,arguments),clearInterval);};exports.clearTimeout=exports.clearInterval=function(timeout){if(timeout){timeout.close();}};function Timeout(id,clearFn){this._id=id;this._clearFn=clearFn;}Timeout.prototype.unref=Timeout.prototype.ref=function(){};Timeout.prototype.close=function(){this._clearFn.call(scope,this._id);};// Does not start the time, just sets up the members needed.\nexports.enroll=function(item,msecs){clearTimeout(item._idleTimeoutId);item._idleTimeout=msecs;};exports.unenroll=function(item){clearTimeout(item._idleTimeoutId);item._idleTimeout=-1;};exports._unrefActive=exports.active=function(item){clearTimeout(item._idleTimeoutId);var msecs=item._idleTimeout;if(msecs>=0){item._idleTimeoutId=setTimeout(function onTimeout(){if(item._onTimeout)item._onTimeout();},msecs);}};// setimmediate attaches itself to the global object\n__webpack_require__(77);// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate=typeof self!==\"undefined\"&&self.setImmediate||typeof global!==\"undefined\"&&global.setImmediate||this&&this.setImmediate;exports.clearImmediate=typeof self!==\"undefined\"&&self.clearImmediate||typeof global!==\"undefined\"&&global.clearImmediate||this&&this.clearImmediate;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27));/***/},/* 77 */ /***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,process){(function(global,undefined){\"use strict\";if(global.setImmediate){return;}var nextHandle=1;// Spec says greater than zero\nvar tasksByHandle={};var currentlyRunningATask=false;var doc=global.document;var registerImmediate;function setImmediate(callback){// Callback can either be a function or a string\nif(typeof callback!==\"function\"){callback=new Function(\"\"+callback);}// Copy function arguments\nvar args=new Array(arguments.length-1);for(var i=0;i<args.length;i++){args[i]=arguments[i+1];}// Store and register the task\nvar task={callback:callback,args:args};tasksByHandle[nextHandle]=task;registerImmediate(nextHandle);return nextHandle++;}function clearImmediate(handle){delete tasksByHandle[handle];}function run(task){var callback=task.callback;var args=task.args;switch(args.length){case 0:callback();break;case 1:callback(args[0]);break;case 2:callback(args[0],args[1]);break;case 3:callback(args[0],args[1],args[2]);break;default:callback.apply(undefined,args);break;}}function runIfPresent(handle){// From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n// So if we're currently running a task, we'll need to delay this invocation.\nif(currentlyRunningATask){// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n// \"too much recursion\" error.\nsetTimeout(runIfPresent,0,handle);}else{var task=tasksByHandle[handle];if(task){currentlyRunningATask=true;try{run(task);}finally{clearImmediate(handle);currentlyRunningATask=false;}}}}function installNextTickImplementation(){registerImmediate=function registerImmediate(handle){process.nextTick(function(){runIfPresent(handle);});};}function canUsePostMessage(){// The test against `importScripts` prevents this implementation from being installed inside a web worker,\n// where `global.postMessage` means something completely different and can't be used for this purpose.\nif(global.postMessage&&!global.importScripts){var postMessageIsAsynchronous=true;var oldOnMessage=global.onmessage;global.onmessage=function(){postMessageIsAsynchronous=false;};global.postMessage(\"\",\"*\");global.onmessage=oldOnMessage;return postMessageIsAsynchronous;}}function installPostMessageImplementation(){// Installs an event handler on `global` for the `message` event: see\n// * https://developer.mozilla.org/en/DOM/window.postMessage\n// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\nvar messagePrefix=\"setImmediate$\"+Math.random()+\"$\";var onGlobalMessage=function onGlobalMessage(event){if(event.source===global&&typeof event.data===\"string\"&&event.data.indexOf(messagePrefix)===0){runIfPresent(+event.data.slice(messagePrefix.length));}};if(global.addEventListener){global.addEventListener(\"message\",onGlobalMessage,false);}else{global.attachEvent(\"onmessage\",onGlobalMessage);}registerImmediate=function registerImmediate(handle){global.postMessage(messagePrefix+handle,\"*\");};}function installMessageChannelImplementation(){var channel=new MessageChannel();channel.port1.onmessage=function(event){var handle=event.data;runIfPresent(handle);};registerImmediate=function registerImmediate(handle){channel.port2.postMessage(handle);};}function installReadyStateChangeImplementation(){var html=doc.documentElement;registerImmediate=function registerImmediate(handle){// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\nvar script=doc.createElement(\"script\");script.onreadystatechange=function(){runIfPresent(handle);script.onreadystatechange=null;html.removeChild(script);script=null;};html.appendChild(script);};}function installSetTimeoutImplementation(){registerImmediate=function registerImmediate(handle){setTimeout(runIfPresent,0,handle);};}// If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\nvar attachTo=Object.getPrototypeOf&&Object.getPrototypeOf(global);attachTo=attachTo&&attachTo.setTimeout?attachTo:global;// Don't get fooled by e.g. browserify environments.\nif({}.toString.call(global.process)===\"[object process]\"){// For Node.js before 0.9\ninstallNextTickImplementation();}else if(canUsePostMessage()){// For non-IE10 modern browsers\ninstallPostMessageImplementation();}else if(global.MessageChannel){// For web workers, where supported\ninstallMessageChannelImplementation();}else if(doc&&\"onreadystatechange\"in doc.createElement(\"script\")){// For IE 6–8\ninstallReadyStateChangeImplementation();}else{// For older browsers\ninstallSetTimeoutImplementation();}attachTo.setImmediate=setImmediate;attachTo.clearImmediate=clearImmediate;})(typeof self===\"undefined\"?typeof global===\"undefined\"?this:global:self);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(27),__webpack_require__(35));/***/},/* 78 */ /***/function(module,exports){/* (ignored) */ /***/},/* 79 */ /***/function(module,exports){/* (ignored) */ /***/},/* 80 */ /***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;(function(global,factory){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__=[module],__WEBPACK_AMD_DEFINE_FACTORY__=factory,__WEBPACK_AMD_DEFINE_RESULT__=typeof __WEBPACK_AMD_DEFINE_FACTORY__==='function'?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else{ var mod; }})(this,function(module){'use strict';function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}var DEFAULT_OPTIONS={order:2,precision:2,period:null};/**\r\n  * Determine the coefficient of determination (r^2) of a fit from the observations\r\n  * and predictions.\r\n  *\r\n  * @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n  * @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n  *\r\n  * @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n  */function determinationCoefficient(data,results){var predictions=[];var observations=[];data.forEach(function(d,i){if(d[1]!==null){observations.push(d);predictions.push(results[i]);}});var sum=observations.reduce(function(a,observation){return a+observation[1];},0);var mean=sum/observations.length;var ssyy=observations.reduce(function(a,observation){var difference=observation[1]-mean;return a+difference*difference;},0);var sse=observations.reduce(function(accum,observation,index){var prediction=predictions[index];var residual=observation[1]-prediction[1];return accum+residual*residual;},0);return 1-sse/ssyy;}/**\r\n  * Determine the solution of a system of linear equations A * x = b using\r\n  * Gaussian elimination.\r\n  *\r\n  * @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n  * @param {number} order - How many degrees to solve for\r\n  *\r\n  * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n  */function gaussianElimination(input,order){var matrix=input;var n=input.length-1;var coefficients=[order];for(var i=0;i<n;i++){var maxrow=i;for(var j=i+1;j<n;j++){if(Math.abs(matrix[i][j])>Math.abs(matrix[i][maxrow])){maxrow=j;}}for(var k=i;k<n+1;k++){var tmp=matrix[k][i];matrix[k][i]=matrix[k][maxrow];matrix[k][maxrow]=tmp;}for(var _j=i+1;_j<n;_j++){for(var _k=n;_k>=i;_k--){matrix[_k][_j]-=matrix[_k][i]*matrix[i][_j]/matrix[i][i];}}}for(var _j2=n-1;_j2>=0;_j2--){var total=0;for(var _k2=_j2+1;_k2<n;_k2++){total+=matrix[_k2][_j2]*coefficients[_k2];}coefficients[_j2]=(matrix[n][_j2]-total)/matrix[_j2][_j2];}return coefficients;}/**\r\n  * Round a number to a precision, specificed in number of decimal places\r\n  *\r\n  * @param {number} number - The number to round\r\n  * @param {number} precision - The number of decimal places to round to:\r\n  *                             > 0 means decimals, < 0 means powers of 10\r\n  *\r\n  *\r\n  * @return {numbr} - The number, rounded\r\n  */function round(number,precision){var factor=Math.pow(10,precision);return Math.round(number*factor)/factor;}/**\r\n  * The set of all fitting methods\r\n  *\r\n  * @namespace\r\n  */var methods={linear:function linear(data,options){var sum=[0,0,0,0,0];var len=0;for(var n=0;n<data.length;n++){if(data[n][1]!==null){len++;sum[0]+=data[n][0];sum[1]+=data[n][1];sum[2]+=data[n][0]*data[n][0];sum[3]+=data[n][0]*data[n][1];sum[4]+=data[n][1]*data[n][1];}}var run=len*sum[2]-sum[0]*sum[0];var rise=len*sum[3]-sum[0]*sum[1];var gradient=run===0?0:round(rise/run,options.precision);var intercept=round(sum[1]/len-gradient*sum[0]/len,options.precision);var predict=function predict(x){return[round(x,options.precision),round(gradient*x+intercept,options.precision)];};var points=data.map(function(point){return predict(point[0]);});return{points:points,predict:predict,equation:[gradient,intercept],r2:round(determinationCoefficient(data,points),options.precision),string:intercept===0?'y = '+gradient+'x':'y = '+gradient+'x + '+intercept};},exponential:function exponential(data,options){var sum=[0,0,0,0,0,0];for(var n=0;n<data.length;n++){if(data[n][1]!==null){sum[0]+=data[n][0];sum[1]+=data[n][1];sum[2]+=data[n][0]*data[n][0]*data[n][1];sum[3]+=data[n][1]*Math.log(data[n][1]);sum[4]+=data[n][0]*data[n][1]*Math.log(data[n][1]);sum[5]+=data[n][0]*data[n][1];}}var denominator=sum[1]*sum[2]-sum[5]*sum[5];var a=Math.exp((sum[2]*sum[3]-sum[5]*sum[4])/denominator);var b=(sum[1]*sum[4]-sum[5]*sum[3])/denominator;var coeffA=round(a,options.precision);var coeffB=round(b,options.precision);var predict=function predict(x){return[round(x,options.precision),round(coeffA*Math.exp(coeffB*x),options.precision)];};var points=data.map(function(point){return predict(point[0]);});return{points:points,predict:predict,equation:[coeffA,coeffB],string:'y = '+coeffA+'e^('+coeffB+'x)',r2:round(determinationCoefficient(data,points),options.precision)};},logarithmic:function logarithmic(data,options){var sum=[0,0,0,0];var len=data.length;for(var n=0;n<len;n++){if(data[n][1]!==null){sum[0]+=Math.log(data[n][0]);sum[1]+=data[n][1]*Math.log(data[n][0]);sum[2]+=data[n][1];sum[3]+=Math.pow(Math.log(data[n][0]),2);}}var a=(len*sum[1]-sum[2]*sum[0])/(len*sum[3]-sum[0]*sum[0]);var coeffB=round(a,options.precision);var coeffA=round((sum[2]-coeffB*sum[0])/len,options.precision);var predict=function predict(x){return[round(x,options.precision),round(round(coeffA+coeffB*Math.log(x),options.precision),options.precision)];};var points=data.map(function(point){return predict(point[0]);});return{points:points,predict:predict,equation:[coeffA,coeffB],string:'y = '+coeffA+' + '+coeffB+' ln(x)',r2:round(determinationCoefficient(data,points),options.precision)};},power:function power(data,options){var sum=[0,0,0,0,0];var len=data.length;for(var n=0;n<len;n++){if(data[n][1]!==null){sum[0]+=Math.log(data[n][0]);sum[1]+=Math.log(data[n][1])*Math.log(data[n][0]);sum[2]+=Math.log(data[n][1]);sum[3]+=Math.pow(Math.log(data[n][0]),2);}}var b=(len*sum[1]-sum[0]*sum[2])/(len*sum[3]-Math.pow(sum[0],2));var a=(sum[2]-b*sum[0])/len;var coeffA=round(Math.exp(a),options.precision);var coeffB=round(b,options.precision);var predict=function predict(x){return[round(x,options.precision),round(round(coeffA*Math.pow(x,coeffB),options.precision),options.precision)];};var points=data.map(function(point){return predict(point[0]);});return{points:points,predict:predict,equation:[coeffA,coeffB],string:'y = '+coeffA+'x^'+coeffB,r2:round(determinationCoefficient(data,points),options.precision)};},polynomial:function polynomial(data,options){var lhs=[];var rhs=[];var a=0;var b=0;var len=data.length;var k=options.order+1;for(var i=0;i<k;i++){for(var l=0;l<len;l++){if(data[l][1]!==null){a+=Math.pow(data[l][0],i)*data[l][1];}}lhs.push(a);a=0;var c=[];for(var j=0;j<k;j++){for(var _l=0;_l<len;_l++){if(data[_l][1]!==null){b+=Math.pow(data[_l][0],i+j);}}c.push(b);b=0;}rhs.push(c);}rhs.push(lhs);var coefficients=gaussianElimination(rhs,k).map(function(v){return round(v,options.precision);});var predict=function predict(x){return[round(x,options.precision),round(coefficients.reduce(function(sum,coeff,power){return sum+coeff*Math.pow(x,power);},0),options.precision)];};var points=data.map(function(point){return predict(point[0]);});var string='y = ';for(var _i=coefficients.length-1;_i>=0;_i--){if(_i>1){string+=coefficients[_i]+'x^'+_i+' + ';}else if(_i===1){string+=coefficients[_i]+'x + ';}else{string+=coefficients[_i];}}return{string:string,points:points,predict:predict,equation:[].concat(_toConsumableArray(coefficients)).reverse(),r2:round(determinationCoefficient(data,points),options.precision)};}};function createWrapper(){var reduce=function reduce(accumulator,name){return _extends({_round:round},accumulator,_defineProperty({},name,function(data,supplied){return methods[name](data,_extends({},DEFAULT_OPTIONS,supplied));}));};return Object.keys(methods).reduce(reduce,{});}module.exports=createWrapper();});/***/},/* 81 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"load\",function(){return load;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,\"BlazeFaceModel\",function(){return BlazeFaceModel;});/* harmony import */var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);/* harmony import */var _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(38);/**\r\n    * @license\r\n    * Copyright 2020 Google LLC. All Rights Reserved.\r\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License.\r\n    * You may obtain a copy of the License at\r\n    *\r\n    * http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software\r\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    * See the License for the specific language governing permissions and\r\n    * limitations under the License.\r\n    * =============================================================================\r\n    */var disposeBox=function disposeBox(t){t.startEndTensor.dispose(),t.startPoint.dispose(),t.endPoint.dispose();},createBox=function createBox(t){return{startEndTensor:t,startPoint:Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(t,[0,0],[-1,2]),endPoint:Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(t,[0,2],[-1,2])};},scaleBox=function scaleBox(t,o){var s=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(t.startPoint,o),e=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(t.endPoint,o),i=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"concat2d\"])([s,e],1);return createBox(i);},ANCHORS_CONFIG={strides:[8,16],anchors:[2,6]},NUM_LANDMARKS=6;function generateAnchors(t,o,s){var e=[];for(var i=0;i<s.strides.length;i++){var n=s.strides[i],a=Math.floor((o+n-1)/n),r=Math.floor((t+n-1)/n),c=s.anchors[i];for(var _t=0;_t<a;_t++){var _o=n*(_t+.5);for(var _t2=0;_t2<r;_t2++){var _s=n*(_t2+.5);for(var _t3=0;_t3<c;_t3++){e.push([_s,_o]);}}}}return e;}function decodeBounds(t,o,s){var e=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(t,[0,1],[-1,2]),i=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(e,o),n=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(t,[0,3],[-1,2]),a=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"div\"])(n,s),r=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"div\"])(i,s),c=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"div\"])(a,2),l=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sub\"])(r,c),d=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r,c),h=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(l,s),p=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(d,s);return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"concat2d\"])([h,p],1);}function getInputTensorDimensions(t){return t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]?[t.shape[0],t.shape[1]]:[t.height,t.width];}function flipFaceHorizontal(t,o){var s,e,i;if(t.topLeft instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]&&t.bottomRight instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]){var _Object83=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){return[Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"concat\"])([Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sub\"])(o-1,t.topLeft.slice(0,1)),t.topLeft.slice(1,1)]),Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"concat\"])([Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sub\"])(o-1,t.bottomRight.slice(0,1)),t.bottomRight.slice(1,1)])];}),_Object84=_slicedToArray(_Object83,2),_n=_Object84[0],a=_Object84[1];s=_n,e=a,null!=t.landmarks&&(i=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){var s=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sub\"])(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tensor1d\"])([o-1,0]),t.landmarks),e=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tensor1d\"])([1,-1]);return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(s,e);}));}else{var _t$topLeft=_slicedToArray(t.topLeft,2),_n2=_t$topLeft[0],_a3=_t$topLeft[1],_t$bottomRight=_slicedToArray(t.bottomRight,2),r=_t$bottomRight[0],c=_t$bottomRight[1];s=[o-1-_n2,_a3],e=[o-1-r,c],null!=t.landmarks&&(i=t.landmarks.map(function(t){return[o-1-t[0],t[1]];}));}var n={topLeft:s,bottomRight:e};return null!=i&&(n.landmarks=i),null!=t.probability&&(n.probability=t.probability instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]?t.probability.clone():t.probability),n;}function scaleBoxFromPrediction(t,o){return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){var s;return s=t.hasOwnProperty(\"box\")?t.box:t,scaleBox(s,o).startEndTensor.squeeze();});}var BlazeFaceModel=/*#__PURE__*/function(){function BlazeFaceModel(t,o,s,e,i,n){_classCallCheck2(this,BlazeFaceModel);this.blazeFaceModel=t,this.width=o,this.height=s,this.maxFaces=e,this.anchorsData=generateAnchors(o,s,ANCHORS_CONFIG),this.anchors=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tensor2d\"])(this.anchorsData),this.inputSizeData=[o,s],this.inputSize=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tensor1d\"])([o,s]),this.iouThreshold=i,this.scoreThreshold=n;}_createClass(BlazeFaceModel,[{key:\"getBoundingBoxes\",value:function(){var _getBoundingBoxes=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee114(t,o){var _this87=this;var s,_Object85,_Object86,e,i,n,a,r,c,l,d,h,p,u,_loop13,_t4,_args116=arguments;return regeneratorRuntime.wrap(function _callee114$(_context114){while(1){switch(_context114.prev=_context114.next){case 0:s=_args116.length>2&&_args116[2]!==undefined?_args116[2]:!0;_Object85=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){var o=t.resizeBilinear([_this87.width,_this87.height]),s=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"mul\"])(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sub\"])(o.div(255),.5),2),e=_this87.blazeFaceModel.predict(s).squeeze(),i=decodeBounds(e,_this87.anchors,_this87.inputSize),n=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(e,[0,0],[-1,1]);return[e,i,Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"sigmoid\"])(n).squeeze()];}),_Object86=_slicedToArray(_Object85,3),e=_Object86[0],i=_Object86[1],n=_Object86[2],a=console.warn;console.warn=function(){};r=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"image\"].nonMaxSuppression(i,n,this.maxFaces,this.iouThreshold,this.scoreThreshold);console.warn=a;_context114.next=7;return r.array();case 7:c=_context114.sent;r.dispose();l=c.map(function(t){return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(i,[t,0],[1,-1]);});_context114.t0=o;if(_context114.t0){_context114.next=15;break;}_context114.next=14;return Promise.all(l.map(/*#__PURE__*/function(){var _ref26=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee113(t){var o;return regeneratorRuntime.wrap(function _callee113$(_context113){while(1){switch(_context113.prev=_context113.next){case 0:_context113.next=2;return t.array();case 2:o=_context113.sent;return _context113.abrupt(\"return\",(t.dispose(),o));case 4:case\"end\":return _context113.stop();}}},_callee113);}));return function(_x103){return _ref26.apply(this,arguments);};}()));case 14:l=_context114.sent;case 15:d=t.shape[1],h=t.shape[2];p=o?Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"div\"])([h,d],this.inputSize):[h/this.inputSizeData[0],d/this.inputSizeData[1]];u=[];_loop13=function _loop13(_t4){var i=l[_t4],a=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){var a=createBox(i instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]?i:Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tensor2d\"])(i));if(!s)return a;var r=c[_t4];var l;return l=o?_this87.anchors.slice([r,0],[1,2]):_this87.anchorsData[r],{box:a,landmarks:Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(e,[r,NUM_LANDMARKS-1],[1,-1]).squeeze().reshape([NUM_LANDMARKS,-1]),probability:Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"slice\"])(n,[r],[1]),anchor:l};});u.push(a);};for(_t4=0;_t4<l.length;_t4++){_loop13(_t4);}return _context114.abrupt(\"return\",(i.dispose(),n.dispose(),e.dispose(),{boxes:u,scaleFactor:p}));case 21:case\"end\":return _context114.stop();}}},_callee114,this);}));function getBoundingBoxes(_x101,_x102){return _getBoundingBoxes.apply(this,arguments);}return getBoundingBoxes;}()},{key:\"estimateFaces\",value:function(){var _estimateFaces2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee117(t){var o,s,e,_getInputTensorDimens3,_getInputTensorDimens4,i,n,_yield$this$getBoundi,a,r,_args119=arguments;return regeneratorRuntime.wrap(function _callee117$(_context117){while(1){switch(_context117.prev=_context117.next){case 0:o=_args119.length>1&&_args119[1]!==undefined?_args119[1]:!1;s=_args119.length>2&&_args119[2]!==undefined?_args119[2]:!1;e=_args119.length>3&&_args119[3]!==undefined?_args119[3]:!0;_getInputTensorDimens3=getInputTensorDimensions(t);_getInputTensorDimens4=_slicedToArray(_getInputTensorDimens3,2);i=_getInputTensorDimens4[1];n=Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"tidy\"])(function(){return t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"Tensor\"]||(t=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__[\"browser\"].fromPixels(t)),t.toFloat().expandDims(0);});_context117.next=9;return this.getBoundingBoxes(n,o,e);case 9:_yield$this$getBoundi=_context117.sent;a=_yield$this$getBoundi.boxes;r=_yield$this$getBoundi.scaleFactor;return _context117.abrupt(\"return\",(n.dispose(),o?a.map(function(t){var o=scaleBoxFromPrediction(t,r);var n={topLeft:o.slice([0],[2]),bottomRight:o.slice([2],[2])};if(e){var _o2=t.landmarks,_s2=t.probability,_e=t.anchor,_i43=_o2.add(_e).mul(r);n.landmarks=_i43,n.probability=_s2;}return s&&(n=flipFaceHorizontal(n,i)),n;}):Promise.all(a.map(/*#__PURE__*/function(){var _ref27=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee116(t){var o,n,_yield$Promise$all3,_yield$Promise$all4,_s3,_e2,_i44,_a4,_r,_c5,_l2,d,_t5;return regeneratorRuntime.wrap(function _callee116$(_context116){while(1){switch(_context116.prev=_context116.next){case 0:o=scaleBoxFromPrediction(t,r);if(!e){_context116.next=17;break;}_context116.next=4;return Promise.all([t.landmarks,o,t.probability].map(/*#__PURE__*/function(){var _ref28=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee115(t){return regeneratorRuntime.wrap(function _callee115$(_context115){while(1){switch(_context115.prev=_context115.next){case 0:return _context115.abrupt(\"return\",t.array());case 1:case\"end\":return _context115.stop();}}},_callee115);}));return function(_x106){return _ref28.apply(this,arguments);};}()));case 4:_yield$Promise$all3=_context116.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,3);_s3=_yield$Promise$all4[0];_e2=_yield$Promise$all4[1];_i44=_yield$Promise$all4[2];_a4=t.anchor;_r=_slicedToArray(r,2);_c5=_r[0];_l2=_r[1];d=_s3.map(function(t){return[(t[0]+_a4[0])*_c5,(t[1]+_a4[1])*_l2];});n={topLeft:_e2.slice(0,2),bottomRight:_e2.slice(2),landmarks:d,probability:_i44},disposeBox(t.box),t.landmarks.dispose(),t.probability.dispose();_context116.next=21;break;case 17:_context116.next=19;return o.array();case 19:_t5=_context116.sent;n={topLeft:_t5.slice(0,2),bottomRight:_t5.slice(2)};case 21:return _context116.abrupt(\"return\",(o.dispose(),s&&(n=flipFaceHorizontal(n,i)),n));case 22:case\"end\":return _context116.stop();}}},_callee116);}));return function(_x105){return _ref27.apply(this,arguments);};}()))));case 13:case\"end\":return _context117.stop();}}},_callee117,this);}));function estimateFaces(_x104){return _estimateFaces2.apply(this,arguments);}return estimateFaces;}()}]);return BlazeFaceModel;}();var BLAZEFACE_MODEL_URL=\"https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1\";function load(){return _load8.apply(this,arguments);}/***/function _load8(){_load8=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee118(){var _ref29,_ref29$maxFaces,t,_ref29$inputWidth,o,_ref29$inputHeight,s,_ref29$iouThreshold,e,_ref29$scoreThreshold,i,n,_args120=arguments;return regeneratorRuntime.wrap(function _callee118$(_context118){while(1){switch(_context118.prev=_context118.next){case 0:_ref29=_args120.length>0&&_args120[0]!==undefined?_args120[0]:{},_ref29$maxFaces=_ref29.maxFaces,t=_ref29$maxFaces===void 0?10:_ref29$maxFaces,_ref29$inputWidth=_ref29.inputWidth,o=_ref29$inputWidth===void 0?128:_ref29$inputWidth,_ref29$inputHeight=_ref29.inputHeight,s=_ref29$inputHeight===void 0?128:_ref29$inputHeight,_ref29$iouThreshold=_ref29.iouThreshold,e=_ref29$iouThreshold===void 0?.3:_ref29$iouThreshold,_ref29$scoreThreshold=_ref29.scoreThreshold,i=_ref29$scoreThreshold===void 0?.75:_ref29$scoreThreshold;_context118.next=3;return Object(_tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_1__[\"loadGraphModel\"])(BLAZEFACE_MODEL_URL,{fromTFHub:!0});case 3:n=_context118.sent;return _context118.abrupt(\"return\",new BlazeFaceModel(n,o,s,t,e,i));case 5:case\"end\":return _context118.stop();}}},_callee118);}));return _load8.apply(this,arguments);}},/* 82 */ /***/function(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.MESH_ANNOTATIONS={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};/***/},/* 83 */ /***/function(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var tf=__webpack_require__(0);var box_1=__webpack_require__(84);var LANDMARKS_COUNT=468;var UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD=0.25;var Pipeline=/*#__PURE__*/function(){function Pipeline(boundingBoxDetector,meshDetector,meshWidth,meshHeight,maxContinuousChecks,maxFaces){_classCallCheck2(this,Pipeline);this.regionsOfInterest=[];this.runsWithoutFaceDetector=0;this.boundingBoxDetector=boundingBoxDetector;this.meshDetector=meshDetector;this.meshWidth=meshWidth;this.meshHeight=meshHeight;this.maxContinuousChecks=maxContinuousChecks;this.maxFaces=maxFaces;}_createClass(Pipeline,[{key:\"predict\",value:function(){var _predict=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee119(input){var _this88=this;var returnTensors,annotateFace,_yield$this$boundingB,boxes,scaleFactor,scaledBoxes;return regeneratorRuntime.wrap(function _callee119$(_context119){while(1){switch(_context119.prev=_context119.next){case 0:if(!this.shouldUpdateRegionsOfInterest()){_context119.next=18;break;}returnTensors=true;annotateFace=false;_context119.next=5;return this.boundingBoxDetector.getBoundingBoxes(input,returnTensors,annotateFace);case 5:_yield$this$boundingB=_context119.sent;boxes=_yield$this$boundingB.boxes;scaleFactor=_yield$this$boundingB.scaleFactor;if(!(boxes.length===0)){_context119.next=12;break;}scaleFactor.dispose();this.clearAllRegionsOfInterest();return _context119.abrupt(\"return\",null);case 12:scaledBoxes=boxes.map(function(prediction){return box_1.enlargeBox(box_1.scaleBoxCoordinates(prediction,scaleFactor));});boxes.forEach(box_1.disposeBox);this.updateRegionsOfInterest(scaledBoxes);this.runsWithoutFaceDetector=0;_context119.next=19;break;case 18:this.runsWithoutFaceDetector++;case 19:return _context119.abrupt(\"return\",tf.tidy(function(){return _this88.regionsOfInterest.map(function(box,i){var face=box_1.cutBoxFromImageAndResize(box,input,[_this88.meshHeight,_this88.meshWidth]).div(255);var _this88$meshDetector$=_this88.meshDetector.predict(face),_this88$meshDetector$2=_slicedToArray(_this88$meshDetector$,3),flag=_this88$meshDetector$2[1],coords=_this88$meshDetector$2[2];var coordsReshaped=tf.reshape(coords,[-1,3]);var normalizedBox=tf.div(box_1.getBoxSize(box),[_this88.meshWidth,_this88.meshHeight]);var scaledCoords=tf.mul(coordsReshaped,normalizedBox.concat(tf.tensor2d([1],[1,1]),1)).add(box.startPoint.concat(tf.tensor2d([0],[1,1]),1));var landmarksBox=_this88.calculateLandmarksBoundingBox(scaledCoords);var previousBox=_this88.regionsOfInterest[i];box_1.disposeBox(previousBox);_this88.regionsOfInterest[i]=landmarksBox;var prediction={coords:coordsReshaped,scaledCoords:scaledCoords,box:landmarksBox,flag:flag.squeeze()};return prediction;});}));case 20:case\"end\":return _context119.stop();}}},_callee119,this);}));function predict(_x107){return _predict.apply(this,arguments);}return predict;}()},{key:\"updateRegionsOfInterest\",value:function updateRegionsOfInterest(boxes){for(var i=0;i<boxes.length;i++){var box=boxes[i];var previousBox=this.regionsOfInterest[i];var iou=0;if(previousBox&&previousBox.startPoint){var _box$startEndTensor$a=_slicedToArray(box.startEndTensor.arraySync()[0],4),boxStartX=_box$startEndTensor$a[0],boxStartY=_box$startEndTensor$a[1],boxEndX=_box$startEndTensor$a[2],boxEndY=_box$startEndTensor$a[3];var _previousBox$startEnd=_slicedToArray(previousBox.startEndTensor.arraySync()[0],4),previousBoxStartX=_previousBox$startEnd[0],previousBoxStartY=_previousBox$startEnd[1],previousBoxEndX=_previousBox$startEnd[2],previousBoxEndY=_previousBox$startEnd[3];var xStartMax=Math.max(boxStartX,previousBoxStartX);var yStartMax=Math.max(boxStartY,previousBoxStartY);var xEndMin=Math.min(boxEndX,previousBoxEndX);var yEndMin=Math.min(boxEndY,previousBoxEndY);var intersection=(xEndMin-xStartMax)*(yEndMin-yStartMax);var boxArea=(boxEndX-boxStartX)*(boxEndY-boxStartY);var previousBoxArea=(previousBoxEndX-previousBoxStartX)*(previousBoxEndY-boxStartY);iou=intersection/(boxArea+previousBoxArea-intersection);}if(iou>UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD){box_1.disposeBox(box);}else{this.regionsOfInterest[i]=box;box_1.disposeBox(previousBox);}}for(var _i45=boxes.length;_i45<this.regionsOfInterest.length;_i45++){box_1.disposeBox(this.regionsOfInterest[_i45]);}this.regionsOfInterest=this.regionsOfInterest.slice(0,boxes.length);}},{key:\"clearRegionOfInterest\",value:function clearRegionOfInterest(index){if(this.regionsOfInterest[index]!=null){box_1.disposeBox(this.regionsOfInterest[index]);this.regionsOfInterest=[].concat(_toConsumableArray2(this.regionsOfInterest.slice(0,index)),_toConsumableArray2(this.regionsOfInterest.slice(index+1)));}}},{key:\"clearAllRegionsOfInterest\",value:function clearAllRegionsOfInterest(){for(var i=0;i<this.regionsOfInterest.length;i++){box_1.disposeBox(this.regionsOfInterest[i]);}this.regionsOfInterest=[];}},{key:\"shouldUpdateRegionsOfInterest\",value:function shouldUpdateRegionsOfInterest(){var roisCount=this.regionsOfInterest.length;var noROIs=roisCount===0;if(this.maxFaces===1||noROIs){return noROIs;}return roisCount!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks;}},{key:\"calculateLandmarksBoundingBox\",value:function calculateLandmarksBoundingBox(landmarks){var xs=landmarks.slice([0,0],[LANDMARKS_COUNT,1]);var ys=landmarks.slice([0,1],[LANDMARKS_COUNT,1]);var boxMinMax=tf.stack([xs.min(),ys.min(),xs.max(),ys.max()]);var box=box_1.createBox(boxMinMax.expandDims(0));return box_1.enlargeBox(box);}}]);return Pipeline;}();exports.Pipeline=Pipeline;/***/},/* 84 */ /***/function(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var tf=__webpack_require__(0);function disposeBox(box){if(box!=null&&box.startPoint!=null){box.startEndTensor.dispose();box.startPoint.dispose();box.endPoint.dispose();}}exports.disposeBox=disposeBox;function createBox(startEndTensor,startPoint,endPoint){return{startEndTensor:startEndTensor,startPoint:startPoint!=null?startPoint:tf.slice(startEndTensor,[0,0],[-1,2]),endPoint:endPoint!=null?endPoint:tf.slice(startEndTensor,[0,2],[-1,2])};}exports.createBox=createBox;function scaleBoxCoordinates(box,factor){var newStart=tf.mul(box.startPoint,factor);var newEnd=tf.mul(box.endPoint,factor);return createBox(tf.concat2d([newStart,newEnd],1));}exports.scaleBoxCoordinates=scaleBoxCoordinates;function getBoxSize(box){return tf.tidy(function(){var diff=tf.sub(box.endPoint,box.startPoint);return tf.abs(diff);});}exports.getBoxSize=getBoxSize;function getBoxCenter(box){return tf.tidy(function(){var halfSize=tf.div(tf.sub(box.endPoint,box.startPoint),2);return tf.add(box.startPoint,halfSize);});}exports.getBoxCenter=getBoxCenter;function cutBoxFromImageAndResize(box,image,cropSize){var height=image.shape[1];var width=image.shape[2];var xyxy=box.startEndTensor;return tf.tidy(function(){var yxyx=tf.concat2d([xyxy.slice([0,1],[-1,1]),xyxy.slice([0,0],[-1,1]),xyxy.slice([0,3],[-1,1]),xyxy.slice([0,2],[-1,1])],0);var roundedCoords=tf.div(yxyx.transpose(),[height,width,height,width]);return tf.image.cropAndResize(image,roundedCoords,[0],cropSize);});}exports.cutBoxFromImageAndResize=cutBoxFromImageAndResize;function enlargeBox(box){var factor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1.5;return tf.tidy(function(){var center=getBoxCenter(box);var size=getBoxSize(box);var newSize=tf.mul(tf.div(size,2),factor);var newStart=tf.sub(center,newSize);var newEnd=tf.add(center,newSize);return createBox(tf.concat2d([newStart,newEnd],1),newStart,newEnd);});}exports.enlargeBox=enlargeBox;/***/},/* 85 */ /***/function(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.UV_COORDS=[[0.499976992607117,0.652534008026123],[0.500025987625122,0.547487020492554],[0.499974012374878,0.602371990680695],[0.482113003730774,0.471979022026062],[0.500150978565216,0.527155995368958],[0.499909996986389,0.498252987861633],[0.499523013830185,0.40106201171875],[0.289712011814117,0.380764007568359],[0.499954998493195,0.312398016452789],[0.499987006187439,0.269918978214264],[0.500023007392883,0.107050001621246],[0.500023007392883,0.666234016418457],[0.5000159740448,0.679224014282227],[0.500023007392883,0.692348003387451],[0.499976992607117,0.695277988910675],[0.499976992607117,0.70593398809433],[0.499976992607117,0.719385027885437],[0.499976992607117,0.737019002437592],[0.499967992305756,0.781370997428894],[0.499816000461578,0.562981009483337],[0.473773002624512,0.573909997940063],[0.104906998574734,0.254140973091125],[0.365929991006851,0.409575998783112],[0.338757991790771,0.41302502155304],[0.311120003461838,0.409460008144379],[0.274657994508743,0.389131009578705],[0.393361985683441,0.403706014156342],[0.345234006643295,0.344011008739471],[0.370094001293182,0.346076011657715],[0.319321990013123,0.347265005111694],[0.297903001308441,0.353591024875641],[0.24779200553894,0.410809993743896],[0.396889001131058,0.842755019664764],[0.280097991228104,0.375599980354309],[0.106310002505779,0.399955987930298],[0.2099249958992,0.391353011131287],[0.355807989835739,0.534406006336212],[0.471751004457474,0.65040397644043],[0.474155008792877,0.680191993713379],[0.439785003662109,0.657229006290436],[0.414617002010345,0.66654098033905],[0.450374007225037,0.680860996246338],[0.428770989179611,0.682690978050232],[0.374971002340317,0.727805018424988],[0.486716985702515,0.547628998756409],[0.485300987958908,0.527395009994507],[0.257764995098114,0.314490020275116],[0.401223003864288,0.455172002315521],[0.429818987846375,0.548614978790283],[0.421351999044418,0.533740997314453],[0.276895999908447,0.532056987285614],[0.483370006084442,0.499586999416351],[0.33721199631691,0.282882988452911],[0.296391993761063,0.293242990970612],[0.169294998049736,0.193813979625702],[0.447580009698868,0.302609980106354],[0.392390012741089,0.353887975215912],[0.354490011930466,0.696784019470215],[0.067304998636246,0.730105042457581],[0.442739009857178,0.572826027870178],[0.457098007202148,0.584792017936707],[0.381974011659622,0.694710969924927],[0.392388999462128,0.694203019142151],[0.277076005935669,0.271932005882263],[0.422551989555359,0.563233017921448],[0.385919004678726,0.281364023685455],[0.383103013038635,0.255840003490448],[0.331431001424789,0.119714021682739],[0.229923993349075,0.232002973556519],[0.364500999450684,0.189113974571228],[0.229622006416321,0.299540996551514],[0.173287004232407,0.278747975826263],[0.472878992557526,0.666198015213013],[0.446828007698059,0.668527007102966],[0.422762006521225,0.673889994621277],[0.445307999849319,0.580065965652466],[0.388103008270264,0.693961024284363],[0.403039008378983,0.706539988517761],[0.403629004955292,0.693953037261963],[0.460041999816895,0.557139039039612],[0.431158006191254,0.692366003990173],[0.452181994915009,0.692366003990173],[0.475387006998062,0.692366003990173],[0.465828001499176,0.779190003871918],[0.472328990697861,0.736225962638855],[0.473087012767792,0.717857003211975],[0.473122000694275,0.704625964164734],[0.473033010959625,0.695277988910675],[0.427942007780075,0.695277988910675],[0.426479011774063,0.703539967536926],[0.423162013292313,0.711845993995667],[0.4183090031147,0.720062971115112],[0.390094995498657,0.639572978019714],[0.013953999616206,0.560034036636353],[0.499913990497589,0.58014702796936],[0.413199990987778,0.69539999961853],[0.409626007080078,0.701822996139526],[0.468080013990402,0.601534962654114],[0.422728985548019,0.585985004901886],[0.463079988956451,0.593783974647522],[0.37211999297142,0.47341400384903],[0.334562003612518,0.496073007583618],[0.411671012639999,0.546965003013611],[0.242175996303558,0.14767599105835],[0.290776997804642,0.201445996761322],[0.327338010072708,0.256527006626129],[0.399509996175766,0.748921036720276],[0.441727995872498,0.261676013469696],[0.429764986038208,0.187834024429321],[0.412198007106781,0.108901023864746],[0.288955003023148,0.398952007293701],[0.218936994671822,0.435410976409912],[0.41278201341629,0.398970007896423],[0.257135003805161,0.355440020561218],[0.427684992551804,0.437960982322693],[0.448339998722076,0.536936044692993],[0.178560003638268,0.45755398273468],[0.247308000922203,0.457193970680237],[0.286267012357712,0.467674970626831],[0.332827985286713,0.460712015628815],[0.368755996227264,0.447206974029541],[0.398963987827301,0.432654976844788],[0.476410001516342,0.405806005001068],[0.189241006970406,0.523923993110657],[0.228962004184723,0.348950982093811],[0.490725994110107,0.562400996685028],[0.404670000076294,0.485132992267609],[0.019469000399113,0.401564002037048],[0.426243007183075,0.420431017875671],[0.396993011236191,0.548797011375427],[0.266469985246658,0.376977026462555],[0.439121007919312,0.51895797252655],[0.032313998788595,0.644356966018677],[0.419054001569748,0.387154996395111],[0.462783008813858,0.505746960639954],[0.238978996872902,0.779744982719421],[0.198220998048782,0.831938028335571],[0.107550002634525,0.540755033493042],[0.183610007166862,0.740257024765015],[0.134409993886948,0.333683013916016],[0.385764002799988,0.883153975009918],[0.490967005491257,0.579378008842468],[0.382384985685349,0.508572995662689],[0.174399003386497,0.397670984268188],[0.318785011768341,0.39623498916626],[0.343364000320435,0.400596976280212],[0.396100014448166,0.710216999053955],[0.187885001301765,0.588537991046906],[0.430987000465393,0.944064974784851],[0.318993002176285,0.898285031318665],[0.266247987747192,0.869701027870178],[0.500023007392883,0.190576016902924],[0.499976992607117,0.954452991485596],[0.366169989109039,0.398822009563446],[0.393207013607025,0.39553701877594],[0.410373002290726,0.391080021858215],[0.194993004202843,0.342101991176605],[0.388664990663528,0.362284004688263],[0.365961998701096,0.355970978736877],[0.343364000320435,0.355356991291046],[0.318785011768341,0.35834002494812],[0.301414996385574,0.363156020641327],[0.058132998645306,0.319076001644135],[0.301414996385574,0.387449026107788],[0.499987989664078,0.618434011936188],[0.415838003158569,0.624195992946625],[0.445681989192963,0.566076993942261],[0.465844005346298,0.620640993118286],[0.49992299079895,0.351523995399475],[0.288718998432159,0.819945991039276],[0.335278987884521,0.852819979190826],[0.440512001514435,0.902418971061707],[0.128294005990028,0.791940987110138],[0.408771991729736,0.373893976211548],[0.455606997013092,0.451801002025604],[0.499877005815506,0.908990025520325],[0.375436991453171,0.924192011356354],[0.11421000212431,0.615022003650665],[0.448662012815475,0.695277988910675],[0.4480200111866,0.704632043838501],[0.447111994028091,0.715808033943176],[0.444831997156143,0.730794012546539],[0.430011987686157,0.766808986663818],[0.406787008047104,0.685672998428345],[0.400738000869751,0.681069016456604],[0.392399996519089,0.677703022956848],[0.367855995893478,0.663918972015381],[0.247923001646996,0.601333022117615],[0.452769994735718,0.420849978923798],[0.43639200925827,0.359887003898621],[0.416164010763168,0.368713974952698],[0.413385987281799,0.692366003990173],[0.228018000721931,0.683571994304657],[0.468268007040024,0.352671027183533],[0.411361992359161,0.804327011108398],[0.499989002943039,0.469825029373169],[0.479153990745544,0.442654013633728],[0.499974012374878,0.439637005329132],[0.432112008333206,0.493588984012604],[0.499886006116867,0.866917014122009],[0.49991300702095,0.821729004383087],[0.456548988819122,0.819200992584229],[0.344549000263214,0.745438992977142],[0.37890899181366,0.574010014533997],[0.374292999505997,0.780184984207153],[0.319687992334366,0.570737957954407],[0.357154995203018,0.604269981384277],[0.295284003019333,0.621580958366394],[0.447750002145767,0.862477004528046],[0.410986006259918,0.508723020553589],[0.31395098567009,0.775308012962341],[0.354128003120422,0.812552988529205],[0.324548006057739,0.703992962837219],[0.189096003770828,0.646299958229065],[0.279776990413666,0.71465802192688],[0.1338230073452,0.682700991630554],[0.336768001317978,0.644733011722565],[0.429883986711502,0.466521978378296],[0.455527991056442,0.548622965812683],[0.437114000320435,0.558896005153656],[0.467287987470627,0.529924988746643],[0.414712011814117,0.335219979286194],[0.37704598903656,0.322777986526489],[0.344107985496521,0.320150971412659],[0.312875986099243,0.32233202457428],[0.283526003360748,0.333190023899078],[0.241245999932289,0.382785975933075],[0.102986000478268,0.468762993812561],[0.267612010240555,0.424560010433197],[0.297879010438919,0.433175981044769],[0.333433985710144,0.433878004550934],[0.366427004337311,0.426115989685059],[0.396012008190155,0.416696012020111],[0.420121014118195,0.41022801399231],[0.007561000064015,0.480777025222778],[0.432949006557465,0.569517970085144],[0.458638995885849,0.479089021682739],[0.473466008901596,0.545744001865387],[0.476087987422943,0.563830018043518],[0.468472003936768,0.555056989192963],[0.433990985155106,0.582361996173859],[0.483518004417419,0.562983989715576],[0.482482999563217,0.57784903049469],[0.42645001411438,0.389798998832703],[0.438998997211456,0.39649498462677],[0.450067013502121,0.400434017181396],[0.289712011814117,0.368252992630005],[0.276670008897781,0.363372981548309],[0.517862021923065,0.471948027610779],[0.710287988185883,0.380764007568359],[0.526226997375488,0.573909997940063],[0.895093023777008,0.254140973091125],[0.634069979190826,0.409575998783112],[0.661242008209229,0.41302502155304],[0.688880026340485,0.409460008144379],[0.725341975688934,0.389131009578705],[0.606630027294159,0.40370500087738],[0.654766023159027,0.344011008739471],[0.629905998706818,0.346076011657715],[0.680678009986877,0.347265005111694],[0.702096998691559,0.353591024875641],[0.75221198797226,0.410804986953735],[0.602918028831482,0.842862963676453],[0.719901978969574,0.375599980354309],[0.893692970275879,0.399959981441498],[0.790081977844238,0.391354024410248],[0.643998026847839,0.534487962722778],[0.528249025344849,0.65040397644043],[0.525849997997284,0.680191040039062],[0.560214996337891,0.657229006290436],[0.585384011268616,0.66654098033905],[0.549625992774963,0.680860996246338],[0.57122802734375,0.682691991329193],[0.624852001667023,0.72809898853302],[0.513050019741058,0.547281980514526],[0.51509702205658,0.527251958847046],[0.742246985435486,0.314507007598877],[0.598631024360657,0.454979002475739],[0.570338010787964,0.548575043678284],[0.578631997108459,0.533622980117798],[0.723087012767792,0.532054007053375],[0.516445994377136,0.499638974666595],[0.662801027297974,0.282917976379395],[0.70362401008606,0.293271005153656],[0.830704987049103,0.193813979625702],[0.552385985851288,0.302568018436432],[0.607609987258911,0.353887975215912],[0.645429015159607,0.696707010269165],[0.932694971561432,0.730105042457581],[0.557260990142822,0.572826027870178],[0.542901992797852,0.584792017936707],[0.6180260181427,0.694710969924927],[0.607590973377228,0.694203019142151],[0.722943007946014,0.271963000297546],[0.577413976192474,0.563166975975037],[0.614082992076874,0.281386971473694],[0.616907000541687,0.255886018276215],[0.668509006500244,0.119913995265961],[0.770092010498047,0.232020974159241],[0.635536015033722,0.189248979091644],[0.77039098739624,0.299556016921997],[0.826722025871277,0.278755009174347],[0.527121007442474,0.666198015213013],[0.553171992301941,0.668527007102966],[0.577238023281097,0.673889994621277],[0.554691970348358,0.580065965652466],[0.611896991729736,0.693961024284363],[0.59696102142334,0.706539988517761],[0.596370995044708,0.693953037261963],[0.539958000183105,0.557139039039612],[0.568841993808746,0.692366003990173],[0.547818005084991,0.692366003990173],[0.52461302280426,0.692366003990173],[0.534089982509613,0.779141008853912],[0.527670979499817,0.736225962638855],[0.526912987232208,0.717857003211975],[0.526877999305725,0.704625964164734],[0.526966989040375,0.695277988910675],[0.572058022022247,0.695277988910675],[0.573521018028259,0.703539967536926],[0.57683801651001,0.711845993995667],[0.581691026687622,0.720062971115112],[0.609944999217987,0.639909982681274],[0.986046016216278,0.560034036636353],[0.5867999792099,0.69539999961853],[0.590372025966644,0.701822996139526],[0.531915009021759,0.601536989212036],[0.577268004417419,0.585934996604919],[0.536915004253387,0.593786001205444],[0.627542972564697,0.473352015018463],[0.665585994720459,0.495950996875763],[0.588353991508484,0.546862006187439],[0.757824003696442,0.14767599105835],[0.709249973297119,0.201507985591888],[0.672684013843536,0.256581008434296],[0.600408971309662,0.74900496006012],[0.55826598405838,0.261672019958496],[0.570303976535797,0.187870979309082],[0.588165998458862,0.109044015407562],[0.711045026779175,0.398952007293701],[0.781069993972778,0.435405015945435],[0.587247014045715,0.398931980133057],[0.742869973182678,0.355445981025696],[0.572156012058258,0.437651991844177],[0.55186802148819,0.536570012569427],[0.821442008018494,0.457556009292603],[0.752701997756958,0.457181990146637],[0.71375697851181,0.467626988887787],[0.66711300611496,0.460672974586487],[0.631101012229919,0.447153985500336],[0.6008620262146,0.432473003864288],[0.523481011390686,0.405627012252808],[0.810747981071472,0.523926019668579],[0.771045982837677,0.348959028720856],[0.509127020835876,0.562718033790588],[0.595292985439301,0.485023975372314],[0.980530977249146,0.401564002037048],[0.573499977588654,0.420000016689301],[0.602994978427887,0.548687994480133],[0.733529984951019,0.376977026462555],[0.560611009597778,0.519016981124878],[0.967685997486115,0.644356966018677],[0.580985009670258,0.387160003185272],[0.537728011608124,0.505385041236877],[0.760966002941132,0.779752969741821],[0.801778972148895,0.831938028335571],[0.892440974712372,0.54076099395752],[0.816350996494293,0.740260004997253],[0.865594983100891,0.333687007427216],[0.614073991775513,0.883246004581451],[0.508952975273132,0.579437971115112],[0.617941975593567,0.508316040039062],[0.825608015060425,0.397674977779388],[0.681214988231659,0.39623498916626],[0.656635999679565,0.400596976280212],[0.603900015354156,0.710216999053955],[0.81208598613739,0.588539004325867],[0.56801301240921,0.944564998149872],[0.681007981300354,0.898285031318665],[0.733752012252808,0.869701027870178],[0.633830010890961,0.398822009563446],[0.606792986392975,0.39553701877594],[0.589659988880157,0.391062021255493],[0.805015981197357,0.342108011245728],[0.611334979534149,0.362284004688263],[0.634037971496582,0.355970978736877],[0.656635999679565,0.355356991291046],[0.681214988231659,0.35834002494812],[0.698584973812103,0.363156020641327],[0.941866993904114,0.319076001644135],[0.698584973812103,0.387449026107788],[0.584177017211914,0.624107003211975],[0.554318010807037,0.566076993942261],[0.534153997898102,0.62064003944397],[0.711217999458313,0.819975018501282],[0.664629995822906,0.852871000766754],[0.559099972248077,0.902631998062134],[0.871706008911133,0.791940987110138],[0.591234028339386,0.373893976211548],[0.544341027736664,0.451583981513977],[0.624562978744507,0.924192011356354],[0.88577002286911,0.615028977394104],[0.551338016986847,0.695277988910675],[0.551980018615723,0.704632043838501],[0.552887976169586,0.715808033943176],[0.555167973041534,0.730794012546539],[0.569944024085999,0.767035007476807],[0.593203008174896,0.685675978660583],[0.599261999130249,0.681069016456604],[0.607599973678589,0.677703022956848],[0.631937980651855,0.663500010967255],[0.752032995223999,0.601315021514893],[0.547226011753082,0.420395016670227],[0.563543975353241,0.359827995300293],[0.583841025829315,0.368713974952698],[0.586614012718201,0.692366003990173],[0.771915018558502,0.683578014373779],[0.531597018241882,0.352482974529266],[0.588370978832245,0.804440975189209],[0.52079701423645,0.442565023899078],[0.567984998226166,0.493479013442993],[0.543282985687256,0.819254994392395],[0.655317008495331,0.745514988899231],[0.621008992195129,0.574018001556396],[0.625559985637665,0.78031200170517],[0.680198013782501,0.570719003677368],[0.64276397228241,0.604337990283966],[0.704662978649139,0.621529996395111],[0.552012026309967,0.862591981887817],[0.589071989059448,0.508637011051178],[0.685944974422455,0.775357007980347],[0.645735025405884,0.812640011310577],[0.675342977046967,0.703978002071381],[0.810858011245728,0.646304965019226],[0.72012197971344,0.714666962623596],[0.866151988506317,0.682704985141754],[0.663187026977539,0.644596993923187],[0.570082008838654,0.466325998306274],[0.544561982154846,0.548375964164734],[0.562758982181549,0.558784961700439],[0.531987011432648,0.530140042304993],[0.585271000862122,0.335177004337311],[0.622952997684479,0.32277899980545],[0.655896008014679,0.320163011550903],[0.687132000923157,0.322345972061157],[0.716481983661652,0.333200991153717],[0.758756995201111,0.382786989212036],[0.897013008594513,0.468769013881683],[0.732392013072968,0.424547016620636],[0.70211398601532,0.433162987232208],[0.66652500629425,0.433866024017334],[0.633504986763,0.426087975502014],[0.603875994682312,0.416586995124817],[0.579657971858978,0.409945011138916],[0.992439985275269,0.480777025222778],[0.567192018032074,0.569419980049133],[0.54136598110199,0.478899002075195],[0.526564002037048,0.546118021011353],[0.523913025856018,0.563830018043518],[0.531529009342194,0.555056989192963],[0.566035985946655,0.582329034805298],[0.51631098985672,0.563053965568542],[0.5174720287323,0.577877044677734],[0.573594987392426,0.389806985855103],[0.560697972774506,0.395331978797913],[0.549755990505219,0.399751007556915],[0.710287988185883,0.368252992630005],[0.723330020904541,0.363372981548309]];/***/},/* 86 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"version_webgl\",function(){return(/* reexport */version_version);});__webpack_require__.d(__webpack_exports__,\"MathBackendWebGL\",function(){return(/* reexport */backend_webgl_MathBackendWebGL);});__webpack_require__.d(__webpack_exports__,\"setWebGLContext\",function(){return(/* reexport */setWebGLContext);});__webpack_require__.d(__webpack_exports__,\"GPGPUContext\",function(){return(/* reexport */gpgpu_context_GPGPUContext);});__webpack_require__.d(__webpack_exports__,\"gpgpu_util\",function(){return(/* reexport */gpgpu_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"webgl_util\",function(){return(/* reexport */webgl_util_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"forceHalfFloat\",function(){return(/* reexport */forceHalfFloat);});__webpack_require__.d(__webpack_exports__,\"webgl\",function(){return(/* binding */webgl);});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\nvar webgl_util_namespaceObject={};__webpack_require__.r(webgl_util_namespaceObject);__webpack_require__.d(webgl_util_namespaceObject,\"callAndCheck\",function(){return callAndCheck;});__webpack_require__.d(webgl_util_namespaceObject,\"canBeRepresented\",function(){return canBeRepresented;});__webpack_require__.d(webgl_util_namespaceObject,\"getWebGLErrorMessage\",function(){return getWebGLErrorMessage;});__webpack_require__.d(webgl_util_namespaceObject,\"getExtensionOrThrow\",function(){return getExtensionOrThrow;});__webpack_require__.d(webgl_util_namespaceObject,\"createVertexShader\",function(){return createVertexShader;});__webpack_require__.d(webgl_util_namespaceObject,\"createFragmentShader\",function(){return createFragmentShader;});__webpack_require__.d(webgl_util_namespaceObject,\"createProgram\",function(){return _createProgram;});__webpack_require__.d(webgl_util_namespaceObject,\"linkProgram\",function(){return linkProgram;});__webpack_require__.d(webgl_util_namespaceObject,\"validateProgram\",function(){return validateProgram;});__webpack_require__.d(webgl_util_namespaceObject,\"createStaticVertexBuffer\",function(){return createStaticVertexBuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"createStaticIndexBuffer\",function(){return createStaticIndexBuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"getNumChannels\",function(){return getNumChannels;});__webpack_require__.d(webgl_util_namespaceObject,\"createTexture\",function(){return createTexture;});__webpack_require__.d(webgl_util_namespaceObject,\"validateTextureSize\",function(){return validateTextureSize;});__webpack_require__.d(webgl_util_namespaceObject,\"createFramebuffer\",function(){return createFramebuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"bindVertexBufferToProgramAttribute\",function(){return bindVertexBufferToProgramAttribute;});__webpack_require__.d(webgl_util_namespaceObject,\"bindTextureUnit\",function(){return bindTextureUnit;});__webpack_require__.d(webgl_util_namespaceObject,\"unbindTextureUnit\",function(){return unbindTextureUnit;});__webpack_require__.d(webgl_util_namespaceObject,\"getProgramUniformLocationOrThrow\",function(){return getProgramUniformLocationOrThrow;});__webpack_require__.d(webgl_util_namespaceObject,\"getProgramUniformLocation\",function(){return getProgramUniformLocation;});__webpack_require__.d(webgl_util_namespaceObject,\"bindTextureToProgramUniformSampler\",function(){return bindTextureToProgramUniformSampler;});__webpack_require__.d(webgl_util_namespaceObject,\"bindCanvasToFramebuffer\",function(){return bindCanvasToFramebuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"bindColorTextureToFramebuffer\",function(){return bindColorTextureToFramebuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"unbindColorTextureFromFramebuffer\",function(){return unbindColorTextureFromFramebuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"validateFramebuffer\",function(){return validateFramebuffer;});__webpack_require__.d(webgl_util_namespaceObject,\"getFramebufferErrorMessage\",function(){return getFramebufferErrorMessage;});__webpack_require__.d(webgl_util_namespaceObject,\"getBatchDim\",function(){return getBatchDim;});__webpack_require__.d(webgl_util_namespaceObject,\"getRowsCols\",function(){return getRowsCols;});__webpack_require__.d(webgl_util_namespaceObject,\"getShapeAs3D\",function(){return getShapeAs3D;});__webpack_require__.d(webgl_util_namespaceObject,\"getTextureShapeFromLogicalShape\",function(){return getTextureShapeFromLogicalShape;});__webpack_require__.d(webgl_util_namespaceObject,\"isReshapeFree\",function(){return isReshapeFree;});__webpack_require__.d(webgl_util_namespaceObject,\"getWebGLMaxTextureSize\",function(){return getWebGLMaxTextureSize;});__webpack_require__.d(webgl_util_namespaceObject,\"resetMaxTextureSize\",function(){return resetMaxTextureSize;});__webpack_require__.d(webgl_util_namespaceObject,\"resetMaxTexturesInShader\",function(){return resetMaxTexturesInShader;});__webpack_require__.d(webgl_util_namespaceObject,\"getMaxTexturesInShader\",function(){return getMaxTexturesInShader;});__webpack_require__.d(webgl_util_namespaceObject,\"getWebGLDisjointQueryTimerVersion\",function(){return getWebGLDisjointQueryTimerVersion;});__webpack_require__.d(webgl_util_namespaceObject,\"hasExtension\",function(){return hasExtension;});__webpack_require__.d(webgl_util_namespaceObject,\"isWebGLVersionEnabled\",function(){return isWebGLVersionEnabled;});__webpack_require__.d(webgl_util_namespaceObject,\"isCapableOfRenderingToFloatTexture\",function(){return isCapableOfRenderingToFloatTexture;});__webpack_require__.d(webgl_util_namespaceObject,\"isDownloadFloatTextureEnabled\",function(){return isDownloadFloatTextureEnabled;});__webpack_require__.d(webgl_util_namespaceObject,\"isWebGLFenceEnabled\",function(){return isWebGLFenceEnabled;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\nvar gpgpu_util_namespaceObject={};__webpack_require__.r(gpgpu_util_namespaceObject);__webpack_require__.d(gpgpu_util_namespaceObject,\"createVertexShader\",function(){return gpgpu_util_createVertexShader;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createVertexBuffer\",function(){return createVertexBuffer;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createIndexBuffer\",function(){return createIndexBuffer;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createFloat32MatrixTexture\",function(){return _createFloat32MatrixTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createFloat16MatrixTexture\",function(){return _createFloat16MatrixTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createUnsignedBytesMatrixTexture\",function(){return _createUnsignedBytesMatrixTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createPackedMatrixTexture\",function(){return _createPackedMatrixTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createFloat16PackedMatrixTexture\",function(){return _createFloat16PackedMatrixTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"bindVertexProgramAttributeStreams\",function(){return bindVertexProgramAttributeStreams;});__webpack_require__.d(gpgpu_util_namespaceObject,\"uploadDenseMatrixToTexture\",function(){return _uploadDenseMatrixToTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"uploadPixelDataToTexture\",function(){return _uploadPixelDataToTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"createBufferFromOutputTexture\",function(){return createBufferFromOutputTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"downloadFloat32MatrixFromBuffer\",function(){return _downloadFloat32MatrixFromBuffer;});__webpack_require__.d(gpgpu_util_namespaceObject,\"downloadByteEncodedFloatMatrixFromOutputTexture\",function(){return _downloadByteEncodedFloatMatrixFromOutputTexture;});__webpack_require__.d(gpgpu_util_namespaceObject,\"downloadPackedMatrixFromBuffer\",function(){return _downloadPackedMatrixFromBuffer;});__webpack_require__.d(gpgpu_util_namespaceObject,\"downloadMatrixFromPackedOutputTexture\",function(){return downloadMatrixFromPackedOutputTexture;});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var contexts={};var WEBGL_ATTRIBUTES={alpha:false,antialias:false,premultipliedAlpha:false,preserveDrawingBuffer:false,depth:false,stencil:false,failIfMajorPerformanceCaveat:true};function setWebGLContext(webGLVersion,gl){contexts[webGLVersion]=gl;}function getWebGLContext(webGLVersion){if(!(webGLVersion in contexts)){contexts[webGLVersion]=getWebGLRenderingContext(webGLVersion);}var gl=contexts[webGLVersion];if(gl.isContextLost()){delete contexts[webGLVersion];return getWebGLContext(webGLVersion);}gl.disable(gl.DEPTH_TEST);gl.disable(gl.STENCIL_TEST);gl.disable(gl.BLEND);gl.disable(gl.DITHER);gl.disable(gl.POLYGON_OFFSET_FILL);gl.disable(gl.SAMPLE_COVERAGE);gl.enable(gl.SCISSOR_TEST);gl.enable(gl.CULL_FACE);gl.cullFace(gl.BACK);return contexts[webGLVersion];}function createCanvas(webGLVersion){if(typeof OffscreenCanvas!=='undefined'&&webGLVersion===2){return new OffscreenCanvas(300,150);}else if(typeof document!=='undefined'){return document.createElement('canvas');}else{throw new Error('Cannot create a canvas in this context');}}function getWebGLRenderingContext(webGLVersion){if(webGLVersion!==1&&webGLVersion!==2){throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');}var canvas=createCanvas(webGLVersion);canvas.addEventListener('webglcontextlost',function(ev){ev.preventDefault();delete contexts[webGLVersion];},false);if(webGLVersion===1){return canvas.getContext('webgl',WEBGL_ATTRIBUTES)||canvas.getContext('experimental-webgl',WEBGL_ATTRIBUTES);}return canvas.getContext('webgl2',WEBGL_ATTRIBUTES);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var PackingScheme;(function(PackingScheme){/**\r\n     * All values in a single texel are densely packed without any constraints.\r\n     *\r\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\r\n     * (indices are [batch, row, col]).\r\n     *\r\n     * 000|001   010|011   020|021\r\n     * -------   -------   -------\r\n     * 002|003   012|013   022|023\r\n     *\r\n     * 100|101   110|111   120|121\r\n     * -------   -------   -------\r\n     * 102|103   112|113   122|123\r\n     *\r\n     */PackingScheme[PackingScheme[\"DENSE\"]=0]=\"DENSE\";/**\r\n     * Single texels contain only values from the same batch, and from adjacent\r\n     * rows and columns.\r\n     *\r\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\r\n     * (indices are [batch, row, col]).\r\n     *\r\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n     * -------   -------   -------   -------   -------   -------\r\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n     *\r\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n     * -------   -------   -------   -------   -------   -------\r\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n     *\r\n     */PackingScheme[PackingScheme[\"SHARED_BATCH\"]=1]=\"SHARED_BATCH\";})(PackingScheme||(PackingScheme={}));var TextureUsage;(function(TextureUsage){TextureUsage[TextureUsage[\"RENDER\"]=0]=\"RENDER\";TextureUsage[TextureUsage[\"UPLOAD\"]=1]=\"UPLOAD\";TextureUsage[TextureUsage[\"PIXELS\"]=2]=\"PIXELS\";TextureUsage[TextureUsage[\"DOWNLOAD\"]=3]=\"DOWNLOAD\";})(TextureUsage||(TextureUsage={}));var PhysicalTextureType;(function(PhysicalTextureType){PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"]=0]=\"UNPACKED_FLOAT16\";PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"]=1]=\"UNPACKED_FLOAT32\";PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"]=2]=\"PACKED_4X1_UNSIGNED_BYTE\";PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"]=3]=\"PACKED_2X2_FLOAT32\";PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"]=4]=\"PACKED_2X2_FLOAT16\";})(PhysicalTextureType||(PhysicalTextureType={}));function getUnpackedMatrixTextureShapeWidthHeight(rows,columns){return[columns,rows];}function getUnpackedArraySizeFromMatrixSize(matrixSize,channelsPerTexture){return matrixSize*channelsPerTexture;}function getColorMatrixTextureShapeWidthHeight(rows,columns){return[columns*4,rows];}/**\r\n * Get shape for densely packed RGBA texture.\r\n */function getDenseTexShape(shape){var size=dist[\"util\"].sizeFromShape(shape);var texelsNeeded=Math.ceil(size/4);return dist[\"util\"].sizeToSquarishShape(texelsNeeded);}function getMatrixSizeFromUnpackedArraySize(unpackedSize,channelsPerTexture){if(unpackedSize%channelsPerTexture!==0){throw new Error(\"unpackedSize (\".concat(unpackedSize,\") must be a multiple of \")+\"\".concat(channelsPerTexture));}return unpackedSize/channelsPerTexture;}function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray,matrix,channels){var requiredSize=unpackedArray.length*channels/4;if(matrix.length<requiredSize){throw new Error(\"matrix length (\".concat(matrix.length,\") must be >= \").concat(requiredSize));}var dst=0;for(var src=0;src<unpackedArray.length;src+=4){for(var _c6=0;_c6<channels;_c6++){matrix[dst++]=unpackedArray[src+_c6];}}}function getPackedMatrixTextureShapeWidthHeight(rows,columns){return[Math.max(1,Math.ceil(columns/2)),Math.max(1,Math.ceil(rows/2))];}function getPackedRGBAArraySizeFromMatrixShape(rows,columns){var _getPackedMatrixTextu=getPackedMatrixTextureShapeWidthHeight(rows,columns),_getPackedMatrixTextu2=_slicedToArray(_getPackedMatrixTextu,2),w=_getPackedMatrixTextu2[0],h=_getPackedMatrixTextu2[1];return w*h*4;}function getTextureConfig(// tslint:disable-next-line:no-any\ngl,textureHalfFloatExtension){// tslint:disable-next-line:no-any\nvar glany=gl;var internalFormatFloat;var internalFormatHalfFloat;var internalFormatPackedHalfFloat;var internalFormatPackedFloat;var textureFormatFloat;var downloadTextureFormat;var downloadUnpackNumChannels;var defaultNumChannels;var textureTypeHalfFloat;var textureTypeFloat;if(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===2){internalFormatFloat=glany.R32F;internalFormatHalfFloat=glany.R16F;internalFormatPackedHalfFloat=glany.RGBA16F;internalFormatPackedFloat=glany.RGBA32F;textureFormatFloat=glany.RED;downloadUnpackNumChannels=4;defaultNumChannels=1;textureTypeHalfFloat=glany.HALF_FLOAT;textureTypeFloat=glany.FLOAT;}else{internalFormatFloat=gl.RGBA;internalFormatHalfFloat=gl.RGBA;internalFormatPackedHalfFloat=gl.RGBA;internalFormatPackedFloat=glany.RGBA;textureFormatFloat=gl.RGBA;downloadUnpackNumChannels=4;defaultNumChannels=4;textureTypeHalfFloat=textureHalfFloatExtension!=null?textureHalfFloatExtension.HALF_FLOAT_OES:null;textureTypeFloat=gl.FLOAT;}downloadTextureFormat=gl.RGBA;return{internalFormatFloat:internalFormatFloat,internalFormatHalfFloat:internalFormatHalfFloat,internalFormatPackedHalfFloat:internalFormatPackedHalfFloat,internalFormatPackedFloat:internalFormatPackedFloat,textureFormatFloat:textureFormatFloat,downloadTextureFormat:downloadTextureFormat,downloadUnpackNumChannels:downloadUnpackNumChannels,defaultNumChannels:defaultNumChannels,textureTypeHalfFloat:textureTypeHalfFloat,textureTypeFloat:textureTypeFloat};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function callAndCheck(gl,debugMode,func){var returnValue=func();if(debugMode){checkWebGLError(gl);}return returnValue;}function checkWebGLError(gl){var error=gl.getError();if(error!==gl.NO_ERROR){throw new Error('WebGL Error: '+getWebGLErrorMessage(gl,error));}}// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nvar MIN_FLOAT16=5.96e-8;var MAX_FLOAT16=65504;function canBeRepresented(num){if(Object(dist[\"env\"])().getBool('WEBGL_RENDER_FLOAT32_ENABLED')||num===0||MIN_FLOAT16<Math.abs(num)&&Math.abs(num)<MAX_FLOAT16){return true;}return false;}function getWebGLErrorMessage(gl,status){switch(status){case gl.NO_ERROR:return'NO_ERROR';case gl.INVALID_ENUM:return'INVALID_ENUM';case gl.INVALID_VALUE:return'INVALID_VALUE';case gl.INVALID_OPERATION:return'INVALID_OPERATION';case gl.INVALID_FRAMEBUFFER_OPERATION:return'INVALID_FRAMEBUFFER_OPERATION';case gl.OUT_OF_MEMORY:return'OUT_OF_MEMORY';case gl.CONTEXT_LOST_WEBGL:return'CONTEXT_LOST_WEBGL';default:return\"Unknown error code \".concat(status);}}function getExtensionOrThrow(gl,debug,extensionName){return throwIfNull(gl,debug,function(){return gl.getExtension(extensionName);},'Extension \"'+extensionName+'\" not supported on this browser.');}function createVertexShader(gl,debug,vertexShaderSource){var vertexShader=throwIfNull(gl,debug,function(){return gl.createShader(gl.VERTEX_SHADER);},'Unable to create vertex WebGLShader.');callAndCheck(gl,debug,function(){return gl.shaderSource(vertexShader,vertexShaderSource);});callAndCheck(gl,debug,function(){return gl.compileShader(vertexShader);});if(gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS)===false){console.log(gl.getShaderInfoLog(vertexShader));throw new Error('Failed to compile vertex shader.');}return vertexShader;}function createFragmentShader(gl,debug,fragmentShaderSource){var fragmentShader=throwIfNull(gl,debug,function(){return gl.createShader(gl.FRAGMENT_SHADER);},'Unable to create fragment WebGLShader.');callAndCheck(gl,debug,function(){return gl.shaderSource(fragmentShader,fragmentShaderSource);});callAndCheck(gl,debug,function(){return gl.compileShader(fragmentShader);});if(gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS)===false){logShaderSourceAndInfoLog(fragmentShaderSource,gl.getShaderInfoLog(fragmentShader));throw new Error('Failed to compile fragment shader.');}return fragmentShader;}var lineNumberRegex=/ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog(shaderSource,shaderInfoLog){var lineNumberRegexResult=lineNumberRegex.exec(shaderInfoLog);if(lineNumberRegexResult==null){console.log(\"Couldn't parse line number in error: \".concat(shaderInfoLog));console.log(shaderSource);return;}var lineNumber=+lineNumberRegexResult[1];var shaderLines=shaderSource.split('\\n');var pad=shaderLines.length.toString().length+2;var linesWithLineNumbers=shaderLines.map(function(line,lineNumber){return dist[\"util\"].rightPad((lineNumber+1).toString(),pad)+line;});var maxLineLength=0;for(var i=0;i<linesWithLineNumbers.length;i++){maxLineLength=Math.max(linesWithLineNumbers[i].length,maxLineLength);}var beforeErrorLines=linesWithLineNumbers.slice(0,lineNumber-1);var errorLine=linesWithLineNumbers.slice(lineNumber-1,lineNumber);var afterErrorLines=linesWithLineNumbers.slice(lineNumber);console.log(beforeErrorLines.join('\\n'));console.log(shaderInfoLog.split('\\n')[0]);console.log(\"%c \".concat(dist[\"util\"].rightPad(errorLine[0],maxLineLength)),'border:1px solid red; background-color:#e3d2d2; color:#a61717');console.log(afterErrorLines.join('\\n'));}function _createProgram(gl,debug){return throwIfNull(gl,debug,function(){return gl.createProgram();},'Unable to create WebGLProgram.');}function linkProgram(gl,debug,program){callAndCheck(gl,debug,function(){return gl.linkProgram(program);});if(gl.getProgramParameter(program,gl.LINK_STATUS)===false){console.log(gl.getProgramInfoLog(program));throw new Error('Failed to link vertex and fragment shaders.');}}function validateProgram(gl,debug,program){callAndCheck(gl,debug,function(){return gl.validateProgram(program);});if(gl.getProgramParameter(program,gl.VALIDATE_STATUS)===false){console.log(gl.getProgramInfoLog(program));throw new Error('Shader program validation failed.');}}function createStaticVertexBuffer(gl,debug,data){var buffer=throwIfNull(gl,debug,function(){return gl.createBuffer();},'Unable to create WebGLBuffer');callAndCheck(gl,debug,function(){return gl.bindBuffer(gl.ARRAY_BUFFER,buffer);});callAndCheck(gl,debug,function(){return gl.bufferData(gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);});return buffer;}function createStaticIndexBuffer(gl,debug,data){var buffer=throwIfNull(gl,debug,function(){return gl.createBuffer();},'Unable to create WebGLBuffer');callAndCheck(gl,debug,function(){return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,buffer);});callAndCheck(gl,debug,function(){return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,data,gl.STATIC_DRAW);});return buffer;}function getNumChannels(){if(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===2){return 1;}return 4;}function createTexture(gl,debug){return throwIfNull(gl,debug,function(){return gl.createTexture();},'Unable to create WebGLTexture.');}function validateTextureSize(width,height){var maxTextureSize=Object(dist[\"env\"])().getNumber('WEBGL_MAX_TEXTURE_SIZE');if(width<=0||height<=0){var requested=\"[\".concat(width,\"x\").concat(height,\"]\");throw new Error('Requested texture size '+requested+' is invalid.');}if(width>maxTextureSize||height>maxTextureSize){var _requested=\"[\".concat(width,\"x\").concat(height,\"]\");var max=\"[\".concat(maxTextureSize,\"x\").concat(maxTextureSize,\"]\");throw new Error('Requested texture size '+_requested+' greater than WebGL maximum on this browser / GPU '+max+'.');}}function createFramebuffer(gl,debug){return throwIfNull(gl,debug,function(){return gl.createFramebuffer();},'Unable to create WebGLFramebuffer.');}function bindVertexBufferToProgramAttribute(gl,debug,program,attribute,buffer,arrayEntriesPerItem,itemStrideInBytes,itemOffsetInBytes){var loc=gl.getAttribLocation(program,attribute);if(loc===-1){// The GPU compiler decided to strip out this attribute because it's unused,\n// thus no need to bind.\nreturn false;}callAndCheck(gl,debug,function(){return gl.bindBuffer(gl.ARRAY_BUFFER,buffer);});callAndCheck(gl,debug,function(){return gl.vertexAttribPointer(loc,arrayEntriesPerItem,gl.FLOAT,false,itemStrideInBytes,itemOffsetInBytes);});callAndCheck(gl,debug,function(){return gl.enableVertexAttribArray(loc);});return true;}function bindTextureUnit(gl,debug,texture,textureUnit){validateTextureUnit(gl,textureUnit);callAndCheck(gl,debug,function(){return gl.activeTexture(gl.TEXTURE0+textureUnit);});callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,texture);});}function unbindTextureUnit(gl,debug,textureUnit){validateTextureUnit(gl,textureUnit);callAndCheck(gl,debug,function(){return gl.activeTexture(gl.TEXTURE0+textureUnit);});callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,null);});}function getProgramUniformLocationOrThrow(gl,debug,program,uniformName){return throwIfNull(gl,debug,function(){return gl.getUniformLocation(program,uniformName);},'uniform \"'+uniformName+'\" not present in program.');}function getProgramUniformLocation(gl,program,uniformName){return gl.getUniformLocation(program,uniformName);}function bindTextureToProgramUniformSampler(gl,debug,program,texture,uniformSamplerLocation,textureUnit){callAndCheck(gl,debug,function(){return bindTextureUnit(gl,debug,texture,textureUnit);});callAndCheck(gl,debug,function(){return gl.uniform1i(uniformSamplerLocation,textureUnit);});}function bindCanvasToFramebuffer(gl,debug){callAndCheck(gl,debug,function(){return gl.bindFramebuffer(gl.FRAMEBUFFER,null);});callAndCheck(gl,debug,function(){return gl.viewport(0,0,gl.canvas.width,gl.canvas.height);});callAndCheck(gl,debug,function(){return gl.scissor(0,0,gl.canvas.width,gl.canvas.height);});}function bindColorTextureToFramebuffer(gl,debug,texture,framebuffer){callAndCheck(gl,debug,function(){return gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);});callAndCheck(gl,debug,function(){return gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);});}function unbindColorTextureFromFramebuffer(gl,debug,framebuffer){callAndCheck(gl,debug,function(){return gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);});callAndCheck(gl,debug,function(){return gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,null,0);});}function validateFramebuffer(gl){var status=gl.checkFramebufferStatus(gl.FRAMEBUFFER);if(status!==gl.FRAMEBUFFER_COMPLETE){throw new Error('Error binding framebuffer: '+getFramebufferErrorMessage(gl,status));}}function getFramebufferErrorMessage(gl,status){switch(status){case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';case gl.FRAMEBUFFER_UNSUPPORTED:return'FRAMEBUFFER_UNSUPPORTED';default:return\"unknown error \".concat(status);}}function throwIfNull(gl,debug,returnTOrNull,failureMessage){var tOrNull=callAndCheck(gl,debug,function(){return returnTOrNull();});if(tOrNull==null){throw new Error(failureMessage);}return tOrNull;}function validateTextureUnit(gl,textureUnit){var maxTextureUnit=gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1;var glTextureUnit=textureUnit+gl.TEXTURE0;if(glTextureUnit<gl.TEXTURE0||glTextureUnit>maxTextureUnit){var textureUnitRange=\"[gl.TEXTURE0, gl.TEXTURE\".concat(maxTextureUnit,\"]\");throw new Error(\"textureUnit must be in \".concat(textureUnitRange,\".\"));}}function getBatchDim(shape){var dimsToSkip=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;return dist[\"util\"].sizeFromShape(shape.slice(0,shape.length-dimsToSkip));}function getRowsCols(shape){if(shape.length===0){throw Error('Cannot get rows and columns of an empty shape array.');}return[shape.length>1?shape[shape.length-2]:1,shape[shape.length-1]];}function getShapeAs3D(shape){var shapeAs3D=[1,1,1];var isScalar=shape.length===0||shape.length===1&&shape[0]===1;if(!isScalar){shapeAs3D=[getBatchDim(shape)].concat(_toConsumableArray2(getRowsCols(shape)));}return shapeAs3D;}function getTextureShapeFromLogicalShape(logShape){var isPacked=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var maxTexSize=Object(dist[\"env\"])().getNumber('WEBGL_MAX_TEXTURE_SIZE');if(isPacked){maxTexSize=maxTexSize*2;// This logic ensures we accurately count the number of packed texels needed\n// to accommodate the tensor. We can only pack values in the same texel if\n// they are from adjacent pairs of rows/cols within the same batch. So if a\n// tensor has 3 rows, we pretend it has 4 rows in order to account for the\n// fact that the texels containing the third row are half empty.\nlogShape=logShape.map(function(d,i){return i>=logShape.length-2?dist[\"util\"].nearestLargerEven(logShape[i]):logShape[i];});// Packed texture height is at least 2 (the channel height of a single\n// texel).\nif(logShape.length===1){logShape=[2,logShape[0]];}}// If logical shape is 2, we don't squeeze, since we want to match physical.\nif(logShape.length!==2){var squeezeResult=dist[\"util\"].squeezeShape(logShape);logShape=squeezeResult.newShape;}var size=dist[\"util\"].sizeFromShape(logShape);if(logShape.length<=1&&size<=maxTexSize){return[1,size];}else if(logShape.length===2&&logShape[0]<=maxTexSize&&logShape[1]<=maxTexSize){return logShape;}else if(logShape.length===3&&logShape[0]*logShape[1]<=maxTexSize&&logShape[2]<=maxTexSize){return[logShape[0]*logShape[1],logShape[2]];}else if(logShape.length===3&&logShape[0]<=maxTexSize&&logShape[1]*logShape[2]<=maxTexSize){return[logShape[0],logShape[1]*logShape[2]];}else if(logShape.length===4&&logShape[0]*logShape[1]*logShape[2]<=maxTexSize&&logShape[3]<=maxTexSize){return[logShape[0]*logShape[1]*logShape[2],logShape[3]];}else if(logShape.length===4&&logShape[0]<=maxTexSize&&logShape[1]*logShape[2]*logShape[3]<=maxTexSize){return[logShape[0],logShape[1]*logShape[2]*logShape[3]];}else{if(isPacked){// For packed textures size equals the number of channels required to\n// accommodate the texture data. However in order to squarify such that\n// inner dimensions stay even, we rewrite size to equal the number of\n// texels. Then in the return statement we rehydrate the squarified\n// dimensions to channel units.\nvar batchDim=getBatchDim(logShape);var rows=2,cols=2;if(logShape.length){var _getRowsCols=getRowsCols(logShape);var _getRowsCols2=_slicedToArray(_getRowsCols,2);rows=_getRowsCols2[0];cols=_getRowsCols2[1];}size=batchDim*(rows/2)*(cols/2);return dist[\"util\"].sizeToSquarishShape(size).map(function(d){return d*2;});}return dist[\"util\"].sizeToSquarishShape(size);}}function isEven(n){return n%2===0;}/**\r\n * This determines whether reshaping a packed texture requires rearranging\r\n * the data within the texture, assuming 2x2 packing.\r\n */function isReshapeFree(shape1,shape2){shape1=shape1.slice(-2);shape2=shape2.slice(-2);if(dist[\"util\"].arraysEqual(shape1,shape2)){return true;}if(!shape1.length||!shape2.length){// One of the shapes is a scalar.\nreturn true;}if(shape1[0]===0||shape1[1]===0||shape2[0]===0||shape2[1]===0){return true;}if(shape1.length!==shape2.length){// One of the shapes is a vector.\nvar shape1Cols=shape1.slice(-1)[0];var shape2Cols=shape2.slice(-1)[0];if(shape1Cols===shape2Cols){return true;}if(isEven(shape1Cols)&&isEven(shape2Cols)&&(shape1[0]===1||shape2[0]===1)){return true;}}return shape1[1]===shape2[1]&&isEven(shape1[0])&&isEven(shape2[0]);}// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nvar MAX_TEXTURE_SIZE;var MAX_TEXTURES_IN_SHADER;function getWebGLMaxTextureSize(webGLVersion){if(MAX_TEXTURE_SIZE==null){var gl=getWebGLContext(webGLVersion);MAX_TEXTURE_SIZE=gl.getParameter(gl.MAX_TEXTURE_SIZE);}return MAX_TEXTURE_SIZE;}function resetMaxTextureSize(){MAX_TEXTURE_SIZE=null;}function resetMaxTexturesInShader(){MAX_TEXTURES_IN_SHADER=null;}function getMaxTexturesInShader(webGLVersion){if(MAX_TEXTURES_IN_SHADER==null){var gl=getWebGLContext(webGLVersion);MAX_TEXTURES_IN_SHADER=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);}// We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\nreturn Math.min(16,MAX_TEXTURES_IN_SHADER);}function getWebGLDisjointQueryTimerVersion(webGLVersion){if(webGLVersion===0){return 0;}var queryTimerVersion;var gl=getWebGLContext(webGLVersion);if(hasExtension(gl,'EXT_disjoint_timer_query_webgl2')&&webGLVersion===2){queryTimerVersion=2;}else if(hasExtension(gl,'EXT_disjoint_timer_query')){queryTimerVersion=1;}else{queryTimerVersion=0;}return queryTimerVersion;}function hasExtension(gl,extensionName){var ext=gl.getExtension(extensionName);return ext!=null;}function isWebGLVersionEnabled(webGLVersion){try{var gl=getWebGLContext(webGLVersion);if(gl!=null){return true;}}catch(e){return false;}return false;}function isCapableOfRenderingToFloatTexture(webGLVersion){if(webGLVersion===0){return false;}var gl=getWebGLContext(webGLVersion);if(webGLVersion===1){if(!hasExtension(gl,'OES_texture_float')){return false;}}else{if(!hasExtension(gl,'EXT_color_buffer_float')){return false;}}var isFrameBufferComplete=createFloatTextureAndBindToFramebuffer(gl);return isFrameBufferComplete;}/**\r\n * Check if we can download values from a float/half-float texture.\r\n *\r\n * Note that for performance reasons we use binding a texture to a framebuffer\r\n * as a proxy for ability to download float values later using readPixels. The\r\n * texture params of this texture will not match those in readPixels exactly\r\n * but if we are unable to bind some kind of float texture to the frameBuffer\r\n * then we definitely will not be able to read float values from it.\r\n */function isDownloadFloatTextureEnabled(webGLVersion){if(webGLVersion===0){return false;}var gl=getWebGLContext(webGLVersion);if(webGLVersion===1){if(!hasExtension(gl,'OES_texture_float')){return false;}if(!hasExtension(gl,'WEBGL_color_buffer_float')){return false;}}else{if(hasExtension(gl,'EXT_color_buffer_float')){return createFloatTextureAndBindToFramebuffer(gl);}var COLOR_BUFFER_HALF_FLOAT='EXT_color_buffer_half_float';if(hasExtension(gl,COLOR_BUFFER_HALF_FLOAT)){var textureHalfFloatExtension=gl.getExtension(COLOR_BUFFER_HALF_FLOAT);return createHalfFloatTextureAndBindToFramebuffer(gl,textureHalfFloatExtension);}return false;}var isFrameBufferComplete=createFloatTextureAndBindToFramebuffer(gl);return isFrameBufferComplete;}function createFloatTextureAndBindToFramebuffer(gl){var texConfig=getTextureConfig(gl);var texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);var width=1;var height=1;gl.texImage2D(gl.TEXTURE_2D,0,texConfig.internalFormatFloat,width,height,0,texConfig.textureFormatFloat,texConfig.textureTypeFloat,null);var frameBuffer=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);var isFrameBufferComplete=gl.checkFramebufferStatus(gl.FRAMEBUFFER)===gl.FRAMEBUFFER_COMPLETE;gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.deleteTexture(texture);gl.deleteFramebuffer(frameBuffer);return isFrameBufferComplete;}function createHalfFloatTextureAndBindToFramebuffer(// tslint:disable-next-line:no-any\ngl,textureHalfFloatExtension){var texConfig=getTextureConfig(gl,textureHalfFloatExtension);var texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);var width=1;var height=1;gl.texImage2D(gl.TEXTURE_2D,0,texConfig.internalFormatHalfFloat,width,height,0,texConfig.textureFormatFloat,texConfig.textureTypeHalfFloat,null);var frameBuffer=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);var isFrameBufferComplete=gl.checkFramebufferStatus(gl.FRAMEBUFFER)===gl.FRAMEBUFFER_COMPLETE;gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.deleteTexture(texture);gl.deleteFramebuffer(frameBuffer);return isFrameBufferComplete;}function isWebGLFenceEnabled(webGLVersion){if(webGLVersion!==2){return false;}var gl=getWebGLContext(webGLVersion);// tslint:disable-next-line:no-any\nvar isEnabled=gl.fenceSync!=null;return isEnabled;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ENV=Object(dist[\"env\"])();/**\r\n * This file contains WebGL-specific flag registrations.\r\n */ /**\r\n * True if WebGL is supported.\r\n */ENV.registerFlag('HAS_WEBGL',function(){return ENV.getNumber('WEBGL_VERSION')>0;});/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */ENV.registerFlag('WEBGL_VERSION',function(){if(isWebGLVersionEnabled(2)){return 2;}else if(isWebGLVersionEnabled(1)){return 1;}return 0;});ENV.registerFlag('WEBGL_BUFFER_SUPPORTED',function(){return ENV.get('WEBGL_VERSION')===2;});/** Whether the WebGL backend will sometimes forward ops to the CPU. */ENV.registerFlag('WEBGL_CPU_FORWARD',function(){return true;});/** Whether the WebGL backend will always use f16 textures for rendering. */ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES',function(){return false;});/** Whether to turn all packing related flags on. */ENV.registerFlag('WEBGL_PACK',function(){return ENV.getBool('HAS_WEBGL');});/** Whether we will pack the batchnormalization op. */ENV.registerFlag('WEBGL_PACK_NORMALIZATION',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack the clip op. */ENV.registerFlag('WEBGL_PACK_CLIP',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack the depthwise conv op. */ // TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV',function(){return false;});/** Whether we will pack binary ops. */ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack unary ops. */ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack array ops. */ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack image ops. */ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will pack reduce ops. */ENV.registerFlag('WEBGL_PACK_REDUCE',function(){return ENV.getBool('WEBGL_PACK');});/** Whether packed WebGL kernels lazily unpack their outputs. */ENV.registerFlag('WEBGL_LAZILY_UNPACK',function(){return ENV.getBool('WEBGL_PACK');});/** Whether we will use the im2col algorithm to speed up convolutions. */ENV.registerFlag('WEBGL_CONV_IM2COL',function(){return ENV.getBool('WEBGL_PACK');});/** The maximum texture dimension. */ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE',function(){return getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION'));});/** The maximum texture dimension. */ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER',function(){return getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION'));});/**\r\n * The disjoint_query_timer extension version.\r\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\r\n * EXT_disjoint_timer_query_webgl2.\r\n * In Firefox with WebGL 2.0,\r\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\r\n * WebGL 1.0 extension.\r\n */ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION',function(){var webGLVersion=ENV.getNumber('WEBGL_VERSION');if(webGLVersion===0){return 0;}return getWebGLDisjointQueryTimerVersion(webGLVersion);});/**\r\n * Whether the timer object from the disjoint_query_timer extension gives\r\n * timing information that is reliable.\r\n */ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',function(){return ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')>0&&!dist[\"device_util\"].isMobile();});/**\r\n * Whether the device is physically capable of rendering to float32 textures.\r\n */ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE',function(){return isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION'));});/**\r\n * Whether rendering to float32 textures is enabled. If disabled, renders to\r\n * float16 textures.\r\n */ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED',function(){return ENV.getBool('WEBGL_FORCE_F16_TEXTURES')?false:ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');});/**\r\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\r\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\r\n */ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED',function(){return isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION'));});/** Whether the fence API is available. */ENV.registerFlag('WEBGL_FENCE_API_ENABLED',function(){return isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION'));});/**\r\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\r\n */ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM',function(){// Use uniform uploads only when 32bit floats are supported. In\n// 16bit\n// environments there are problems with comparing a 16bit texture value\n// with a 32bit uniform value.\nvar useUniforms=ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');return useUniforms?4:0;});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var AddNProgram=function AddNProgram(outputShape,shapes){_classCallCheck2(this,AddNProgram);this.outputShape=[];this.outputShape=outputShape;this.variableNames=shapes.map(function(_,i){return\"T\".concat(i);});var snippets=[];// Get target elements from every input tensor.\nthis.variableNames.forEach(function(variable){snippets.push(\"float v\".concat(variable,\" = get\").concat(variable,\"AtOutCoords();\"));});// Calculate the sum of all elements.\nvar operation=this.variableNames.map(function(variable){return\"v\".concat(variable);}).join(' + ');this.userCode=\"\\n      void main() {\\n        \".concat(snippets.join('\\n        '),\"\\n\\n        float result = \").concat(operation,\";\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var AddNPackedProgram=function AddNPackedProgram(outputShape,shapes){_classCallCheck2(this,AddNPackedProgram);this.outputShape=[];this.packedInputs=true;this.packedOutput=true;this.outputShape=outputShape;this.variableNames=shapes.map(function(_,i){return\"T\".concat(i);});var snippets=[];// Get target elements from every input tensor.\nthis.variableNames.forEach(function(variable){snippets.push(\"vec4 v\".concat(variable,\" = get\").concat(variable,\"AtOutCoords();\"));});// Calculate the sum of all elements.\nvar operation=this.variableNames.map(function(variable){return\"v\".concat(variable);}).join(' + ');this.userCode=\"\\n      void main() {\\n        \".concat(snippets.join('\\n        '),\"\\n\\n        vec4 result = \").concat(operation,\";\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ArgMinMaxProgram=function ArgMinMaxProgram(reduceInfo,op,firstPass){_classCallCheck2(this,ArgMinMaxProgram);this.variableNames=['A'];var windowSize=reduceInfo.windowSize;var batchSize=reduceInfo.batchSize;var inSize=reduceInfo.inSize;var outSize=Math.ceil(inSize/windowSize);if(!firstPass){this.variableNames.push('bestIndicesA');}this.outputShape=[batchSize,outSize];var compOp=op==='max'?'>':'<';var indexSnippet=firstPass?'inOffset + i;':'round(getBestIndicesA(batch, inOffset + i));';this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \".concat(windowSize,\";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \").concat(windowSize,\"; i++) {\\n          int inIdx = \").concat(indexSnippet,\";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \").concat(compOp,\" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function getVecChannels(name,rank){return['x','y','z','w','u','v'].slice(0,rank).map(function(d){return\"\".concat(name,\".\").concat(d);});}function getChannels(name,rank){if(rank===1){return[name];}return getVecChannels(name,rank);}function getSourceCoords(rank,dims){if(rank===1){return'rc';}var coords='';for(var i=0;i<rank;i++){coords+=dims[i];if(i<rank-1){coords+=',';}}return coords;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function getGlslDifferences(){var version;var attribute;var varyingVs;var varyingFs;var texture2D;var output;var defineOutput;var defineSpecialNaN;var defineSpecialInf;var defineRound;if(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===2){version='#version 300 es';attribute='in';varyingVs='out';varyingFs='in';texture2D='texture';output='outputColor';defineOutput='out vec4 outputColor;';// Use custom isnan definition to work across differences between\n// implementations on various platforms. While this should happen in ANGLE\n// we still see differences between android and windows (on chrome) when\n// using isnan directly.\ndefineSpecialNaN=\"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \";// In webgl 2 we do not need to specify a custom isinf so there is no\n// need for a special INFINITY constant.\ndefineSpecialInf=\"\";defineRound=\"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \";}else{version='';attribute='attribute';varyingVs='varying';varyingFs='varying';texture2D='texture2D';output='gl_FragColor';defineOutput='';// WebGL1 has no built in isnan so we define one here.\ndefineSpecialNaN=\"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \";defineSpecialInf=\"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \";defineRound=\"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \";}return{version:version,attribute:attribute,varyingVs:varyingVs,varyingFs:varyingFs,texture2D:texture2D,output:output,defineOutput:defineOutput,defineSpecialNaN:defineSpecialNaN,defineSpecialInf:defineSpecialInf,defineRound:defineRound};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /**\r\n * Produces GLSL code that derives logical coordinates from a flat\r\n * index. The code performs integer division with each stride and decrements\r\n * the index until the index equals the final dimension coordinate.\r\n */function getLogicalCoordinatesFromFlatIndex(coords,shape){var index=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'index';var strides=dist[\"util\"].computeStrides(shape);return strides.map(function(stride,i){var line1=\"int \".concat(coords[i],\" = \").concat(index,\" / \").concat(stride);var line2=i===strides.length-1?\"int \".concat(coords[i+1],\" = \").concat(index,\" - \").concat(coords[i],\" * \").concat(stride):\"index -= \".concat(coords[i],\" * \").concat(stride);return\"\".concat(line1,\"; \").concat(line2,\";\");}).join('');}function buildVec(x){if(x.length===1){return\"\".concat(x[0]);}return\"vec\".concat(x.length,\"(\").concat(x.join(','),\")\");}/**\r\n * Produces GLSL code that computes the dot product of the input x and y\r\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\r\n */function dotify(x,y){if(x.length!==y.length){throw new Error(\"Vectors to be dotted must be of the same length -\"+\"got \".concat(x.length,\" and \").concat(y.length));}var slices=[];var nearestVec4=Math.floor(x.length/4);var nearestVec4Remainder=x.length%4;for(var i=0;i<nearestVec4;i++){var xSlice=x.slice(i*4,i*4+4);var ySlice=y.slice(i*4,i*4+4);slices.push(\"\".concat(buildVec(xSlice),\", \").concat(buildVec(ySlice)));}if(nearestVec4Remainder!==0){var _xSlice=x.slice(nearestVec4*4);var _ySlice=y.slice(nearestVec4*4);if(_xSlice.length===1){_xSlice=_xSlice.map(function(d){return\"float(\".concat(d,\")\");});_ySlice=_ySlice.map(function(d){return\"float(\".concat(d,\")\");});}slices.push(\"\".concat(buildVec(_xSlice),\", \").concat(buildVec(_ySlice)));}return slices.map(function(d,i){return\"dot(\".concat(d,\")\");}).join('+');}/**\r\n * Produces GLSL that computes the flat index from 3D coordinates.\r\n */function getFlatIndexFrom3D(shape){var strides=dist[\"util\"].computeStrides(shape).map(function(d){return d.toString();});return\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \".concat(strides[0],\" + coords.y * \").concat(strides[1],\" + coords.z;\\n  }\\n\");}var ENCODE_FLOAT_SNIPPET=\"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var getBroadcastDims=dist[\"backend_util\"].getBroadcastDims;function makeShader(inputsInfo,outputShape,userCode,usesPackedTextures){var prefixSnippets=[];inputsInfo.forEach(function(x){var size=dist[\"util\"].sizeFromShape(x.shapeInfo.logicalShape);// Snippet when we decided to upload the values as uniform.\nif(x.shapeInfo.isUniform){prefixSnippets.push(\"uniform float \".concat(x.name).concat(size>1?\"[\".concat(size,\"]\"):'',\";\"));}else{prefixSnippets.push(\"uniform sampler2D \".concat(x.name,\";\"));prefixSnippets.push(\"uniform int offset\".concat(x.name,\";\"));}});var inputPrefixSnippet=prefixSnippets.join('\\n');var inputSamplingSnippet=inputsInfo.map(function(x){return getInputSamplingSnippet(x,outputShape,usesPackedTextures);}).join('\\n');var outTexShape=outputShape.texShape;var glsl=getGlslDifferences();var floatTextureSampleSnippet=getFloatTextureSampleSnippet(glsl);var outputSamplingSnippet;var floatTextureSetOutputSnippet;var shaderPrefix=getShaderPrefix(glsl);if(outputShape.isPacked){outputSamplingSnippet=getPackedOutputSamplingSnippet(outputShape.logicalShape,outTexShape);floatTextureSetOutputSnippet=getFloatTextureSetRGBASnippet(glsl);}else{outputSamplingSnippet=getOutputSamplingSnippet(outputShape.logicalShape,outTexShape);floatTextureSetOutputSnippet=getFloatTextureSetRSnippet(glsl);}if(usesPackedTextures){shaderPrefix+=SHADER_PACKED_PREFIX;}var source=[shaderPrefix,floatTextureSampleSnippet,floatTextureSetOutputSnippet,inputPrefixSnippet,outputSamplingSnippet,inputSamplingSnippet,userCode].join('\\n');return source;}function getSamplerFromInInfo(inInfo){var shape=inInfo.shapeInfo.logicalShape;switch(shape.length){case 0:return getSamplerScalar(inInfo);case 1:return getSampler1D(inInfo);case 2:return getSampler2D(inInfo);case 3:return getSampler3D(inInfo);case 4:return getSampler4D(inInfo);case 5:return getSampler5D(inInfo);case 6:return getSampler6D(inInfo);default:throw new Error(\"\".concat(shape.length,\"-D input sampling\")+\" is not yet supported\");}}function getPackedSamplerFromInInfo(inInfo){var shape=inInfo.shapeInfo.logicalShape;switch(shape.length){case 0:return getPackedSamplerScalar(inInfo);case 1:return getPackedSampler1D(inInfo);case 2:return getPackedSampler2D(inInfo);case 3:return getPackedSampler3D(inInfo);default:return getPackedSamplerND(inInfo);}}function getInputSamplingSnippet(inInfo,outShapeInfo){var usesPackedTextures=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var res='';if(usesPackedTextures){res+=getPackedSamplerFromInInfo(inInfo);}else{res+=getSamplerFromInInfo(inInfo);}var inShape=inInfo.shapeInfo.logicalShape;var outShape=outShapeInfo.logicalShape;if(inShape.length<=outShape.length){if(usesPackedTextures){res+=getPackedSamplerAtOutputCoords(inInfo,outShapeInfo);}else{res+=getSamplerAtOutputCoords(inInfo,outShapeInfo);}}return res;}function getPackedOutputSamplingSnippet(outShape,outTexShape){switch(outShape.length){case 0:return getOutputScalarCoords();case 1:return getOutputPacked1DCoords(outShape,outTexShape);case 2:return getOutputPacked2DCoords(outShape,outTexShape);case 3:return getOutputPacked3DCoords(outShape,outTexShape);default:return getOutputPackedNDCoords(outShape,outTexShape);}}function getOutputSamplingSnippet(outShape,outTexShape){switch(outShape.length){case 0:return getOutputScalarCoords();case 1:return getOutput1DCoords(outShape,outTexShape);case 2:return getOutput2DCoords(outShape,outTexShape);case 3:return getOutput3DCoords(outShape,outTexShape);case 4:return getOutput4DCoords(outShape,outTexShape);case 5:return getOutput5DCoords(outShape,outTexShape);case 6:return getOutput6DCoords(outShape,outTexShape);default:throw new Error(\"\".concat(outShape.length,\"-D output sampling is not yet supported\"));}}function getFloatTextureSampleSnippet(glsl){return\"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D,\"(textureSampler, uv).r;\\n    }\\n  \");}function getFloatTextureSetRSnippet(glsl){return\"\\n    void setOutput(float val) {\\n      \".concat(glsl.output,\" = vec4(val, 0, 0, 0);\\n    }\\n  \");}function getFloatTextureSetRGBASnippet(glsl){return\"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output,\" = val;\\n    }\\n  \");}function getShaderPrefix(glsl){var SHADER_PREFIX=\"\".concat(glsl.version,\"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs,\" vec2 resultUV;\\n    \").concat(glsl.defineOutput,\"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN,\"\\n    \").concat(glsl.defineSpecialInf,\"\\n    \").concat(glsl.defineRound,\"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET,\"\\n    \").concat(SAMPLE_2D_SNIPPET,\"\\n    \").concat(SAMPLE_3D_SNIPPET,\"\\n  \");return SHADER_PREFIX;}var SAMPLE_1D_SNIPPET=\"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";var SAMPLE_2D_SNIPPET=\"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";var SAMPLE_3D_SNIPPET=\"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";var SHADER_PACKED_PREFIX=\"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";function getOutputScalarCoords(){return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";}function getOutputPacked1DCoords(shape,texShape){var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];if(packedTexShape[0]===1){return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1],\".0);\\n      }\\n    \");}if(packedTexShape[1]===1){return\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0],\".0);\\n      }\\n    \");}return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0],\", \").concat(packedTexShape[1],\"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1],\" + resTexRC.y);\\n    }\\n  \");}function getOutput1DCoords(shape,texShape){if(texShape[0]===1){return\"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1],\".0);\\n      }\\n    \");}if(texShape[1]===1){return\"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0],\".0);\\n      }\\n    \");}return\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      return resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n    }\\n  \");}function getOutputPacked3DCoords(shape,texShape){var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];var texelsInLogicalRow=Math.ceil(shape[2]/2);var texelsInBatch=texelsInLogicalRow*Math.ceil(shape[1]/2);return\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0],\", \").concat(packedTexShape[1],\"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1],\" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch,\";\\n      index -= b * \").concat(texelsInBatch,\";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow,\");\\n      int c = imod(index, \").concat(texelsInLogicalRow,\") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");}function getOutput3DCoords(shape,texShape){var coordsFromIndexSnippet=getLogicalCoordinatesFromFlatIndex(['r','c','d'],shape);return\"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet,\"\\n      return ivec3(r, c, d);\\n    }\\n  \");}function getOutputPackedNDCoords(shape,texShape){var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];var texelsInLogicalRow=Math.ceil(shape[shape.length-1]/2);var texelsInBatch=texelsInLogicalRow*Math.ceil(shape[shape.length-2]/2);var texelsInBatchN=texelsInBatch;var batches=\"\";var coords='b, r, c';for(var b=2;b<shape.length-1;b++){texelsInBatchN*=shape[shape.length-b-1];batches=\"\\n      int b\".concat(b,\" = index / \").concat(texelsInBatchN,\";\\n      index -= b\").concat(b,\" * \").concat(texelsInBatchN,\";\\n    \")+batches;coords=\"b\".concat(b,\", \")+coords;}return\"\\n    ivec\".concat(shape.length,\" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0],\", \").concat(packedTexShape[1],\"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1],\" + resTexRC.y;\\n\\n      \").concat(batches,\"\\n\\n      int b = index / \").concat(texelsInBatch,\";\\n      index -= b * \").concat(texelsInBatch,\";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow,\");\\n      int c = imod(index, \").concat(texelsInLogicalRow,\") * 2;\\n\\n      return ivec\").concat(shape.length,\"(\").concat(coords,\");\\n    }\\n  \");}function getOutput4DCoords(shape,texShape){var coordsFromIndexSnippet=getLogicalCoordinatesFromFlatIndex(['r','c','d','d2'],shape);return\"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet,\"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");}function getOutput5DCoords(shape,texShape){var coordsFromIndexSnippet=getLogicalCoordinatesFromFlatIndex(['r','c','d','d2','d3'],shape);return\"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0],\",\\n                             \").concat(texShape[1],\"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet,\"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");}function getOutput6DCoords(shape,texShape){var coordsFromIndexSnippet=getLogicalCoordinatesFromFlatIndex(['r','c','d','d2','d3','d4'],shape);return\"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet,\"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");}function getOutputPacked2DCoords(shape,texShape){var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];if(dist[\"util\"].arraysEqual(shape,texShape)){return\"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0],\", \").concat(packedTexShape[1],\"));\\n      }\\n    \");}// texels needed to accommodate a logical row\nvar texelsInLogicalRow=Math.ceil(shape[1]/2);/**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0],\", \").concat(packedTexShape[1],\"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1],\" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow,\");\\n      int c = imod(index, \").concat(texelsInLogicalRow,\") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");}function getOutput2DCoords(shape,texShape){if(dist[\"util\"].arraysEqual(shape,texShape)){return\"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      }\\n    \");}if(shape[1]===1){return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n        int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");}if(shape[0]===1){return\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n        int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");}return\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0],\", \").concat(texShape[1],\"));\\n      int index = resTexRC.x * \").concat(texShape[1],\" + resTexRC.y;\\n      int r = index / \").concat(shape[1],\";\\n      int c = index - r * \").concat(shape[1],\";\\n      return ivec2(r, c);\\n    }\\n  \");}function getFlatOffsetUniformName(texName){return\"offset\".concat(texName);}function getPackedSamplerScalar(inputInfo){var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var glsl=getGlslDifferences();return\"\\n    vec4 \".concat(funcName,\"() {\\n      return \").concat(glsl.texture2D,\"(\").concat(texName,\", halfCR);\\n    }\\n  \");}function getSamplerScalar(inputInfo){var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);if(inputInfo.shapeInfo.isUniform){return\"float \".concat(funcName,\"() {return \").concat(texName,\";}\");}var _inputInfo$shapeInfo$=_slicedToArray(inputInfo.shapeInfo.texShape,2),texNumR=_inputInfo$shapeInfo$[0],texNumC=_inputInfo$shapeInfo$[1];if(texNumR===1&&texNumC===1){return\"\\n      float \".concat(funcName,\"() {\\n        return sampleTexture(\").concat(texName,\", halfCR);\\n      }\\n    \");}var _inputInfo$shapeInfo$2=_slicedToArray(inputInfo.shapeInfo.texShape,2),tNumR=_inputInfo$shapeInfo$2[0],tNumC=_inputInfo$shapeInfo$2[1];var offset=getFlatOffsetUniformName(texName);return\"\\n    float \".concat(funcName,\"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR,\", \").concat(tNumC,\", \").concat(offset,\");\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}function getPackedSampler1D(inputInfo){var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var texShape=inputInfo.shapeInfo.texShape;var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];var glsl=getGlslDifferences();return\"\\n    vec4 \".concat(funcName,\"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0],\", \").concat(packedTexShape[1],\", index);\\n      return \").concat(glsl.texture2D,\"(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler1D(inputInfo){var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int index) {\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var texShape=inputInfo.shapeInfo.texShape;var tNumR=texShape[0];var tNumC=texShape[1];if(tNumC===1&&tNumR===1){return\"\\n      float \".concat(funcName,\"(int index) {\\n        return sampleTexture(\").concat(texName,\", halfCR);\\n      }\\n    \");}var offset=getFlatOffsetUniformName(texName);if(tNumC===1){return\"\\n      float \".concat(funcName,\"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset,\") + 0.5) / \").concat(tNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}if(tNumR===1){return\"\\n      float \".concat(funcName,\"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset,\") + 0.5) / \").concat(tNumC,\".0, 0.5);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}return\"\\n    float \".concat(funcName,\"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR,\", \").concat(tNumC,\", index + \").concat(offset,\");\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}function getPackedSampler2D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var texShape=inputInfo.shapeInfo.texShape;var texNumR=texShape[0];var texNumC=texShape[1];var glsl=getGlslDifferences();if(texShape!=null&&dist[\"util\"].arraysEqual(shape,texShape)){return\"\\n      vec4 \".concat(funcName,\"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n\\n        return \").concat(glsl.texture2D,\"(\").concat(texName,\", uv);\\n      }\\n    \");}var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];var valuesPerRow=Math.ceil(shape[1]/2);return\"\\n    vec4 \".concat(funcName,\"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow,\", \").concat(packedTexShape[0],\", \").concat(packedTexShape[1],\", row, col);\\n      return \").concat(glsl.texture2D,\"(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler2D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var texShape=inputInfo.shapeInfo.texShape;if(texShape!=null&&dist[\"util\"].arraysEqual(shape,texShape)){var _texNumR=texShape[0];var _texNumC=texShape[1];return\"\\n    float \".concat(funcName,\"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(_texNumC,\".0, \").concat(_texNumR,\".0);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}var _dist$util$squeezeSha=dist[\"util\"].squeezeShape(shape),newShape=_dist$util$squeezeSha.newShape,keptDims=_dist$util$squeezeSha.keptDims;var squeezedShape=newShape;if(squeezedShape.length<shape.length){var newInputInfo=squeezeInputInfo(inputInfo,squeezedShape);var params=['row','col'];return\"\\n      \".concat(getSamplerFromInInfo(newInputInfo),\"\\n      float \").concat(funcName,\"(int row, int col) {\\n        return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n      }\\n    \");}if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1],\", 1)));\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var texNumR=texShape[0];var texNumC=texShape[1];var offset=getFlatOffsetUniformName(texName);if(texNumC===1){// index is used directly as physical (no risk of float16 overflow).\nreturn\"\\n    float \".concat(funcName,\"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset,\"), vec3(\").concat(shape[1],\", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR,\".0);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}if(texNumR===1){// index is used directly as physical (no risk of float16 overflow).\nreturn\"\\n    float \".concat(funcName,\"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset,\"), vec3(\").concat(shape[1],\", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC,\".0, 0.5);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}return\"\\n  float \".concat(funcName,\"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1],\" + col + \").concat(offset,\";\\n    vec2 uv = uvFromFlat(\").concat(texNumR,\", \").concat(texNumC,\", index);\\n    return sampleTexture(\").concat(texName,\", uv);\\n  }\\n\");}function getPackedSampler3D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var texShape=inputInfo.shapeInfo.texShape;var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];if(shape[0]===1){var squeezedShape=shape.slice(1);var keptDims=[1,2];var newInputInfo=squeezeInputInfo(inputInfo,squeezedShape);var params=['b','row','col'];return\"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo),\"\\n        vec4 \").concat(funcName,\"(int b, int row, int col) {\\n          return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n        }\\n      \");}var texNumR=packedTexShape[0];var texNumC=packedTexShape[1];var valuesPerRow=Math.ceil(shape[2]/2);var texelsInBatch=valuesPerRow*Math.ceil(shape[1]/2);var glsl=getGlslDifferences();return\"\\n    vec4 \".concat(funcName,\"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR,\", \").concat(texNumC,\", \").concat(texelsInBatch,\", \").concat(valuesPerRow,\", b, row, col);\\n      return \").concat(glsl.texture2D,\"(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler3D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var stride0=shape[1]*shape[2];var stride1=shape[2];var _dist$util$squeezeSha2=dist[\"util\"].squeezeShape(shape),newShape=_dist$util$squeezeSha2.newShape,keptDims=_dist$util$squeezeSha2.keptDims;var squeezedShape=newShape;if(squeezedShape.length<shape.length){var newInputInfo=squeezeInputInfo(inputInfo,squeezedShape);var params=['row','col','depth'];return\"\\n        \".concat(getSamplerFromInInfo(newInputInfo),\"\\n        float \").concat(funcName,\"(int row, int col, int depth) {\\n          return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n        }\\n      \");}if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0,\", \").concat(stride1,\", 1)));\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var texShape=inputInfo.shapeInfo.texShape;var texNumR=texShape[0];var texNumC=texShape[1];var flatOffset=inputInfo.shapeInfo.flatOffset;if(texNumC===stride0&&flatOffset==null){// texC is used directly as physical (no risk of float16 overflow).\nreturn\"\\n        float \".concat(funcName,\"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1,\", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n          return sampleTexture(\").concat(texName,\", uv);\\n        }\\n      \");}if(texNumC===stride1&&flatOffset==null){// texR is used directly as physical (no risk of float16 overflow).\nreturn\"\\n    float \".concat(funcName,\"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1],\", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}var offset=getFlatOffsetUniformName(texName);return\"\\n      float \".concat(funcName,\"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0,\" + col * \").concat(stride1,\" + depth + \").concat(offset,\";\\n        vec2 uv = uvFromFlat(\").concat(texNumR,\", \").concat(texNumC,\", index);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n  \");}function getPackedSamplerND(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var rank=shape.length;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var texShape=inputInfo.shapeInfo.texShape;var packedTexShape=[Math.ceil(texShape[0]/2),Math.ceil(texShape[1]/2)];var texNumR=packedTexShape[0];var texNumC=packedTexShape[1];var valuesPerRow=Math.ceil(shape[rank-1]/2);var texelsInBatch=valuesPerRow*Math.ceil(shape[rank-2]/2);var params=\"int b, int row, int col\";var index=\"b * \".concat(texelsInBatch,\" + (row / 2) * \").concat(valuesPerRow,\" + (col / 2)\");for(var b=2;b<rank-1;b++){params=\"int b\".concat(b,\", \")+params;texelsInBatch*=shape[rank-b-1];index=\"b\".concat(b,\" * \").concat(texelsInBatch,\" + \")+index;}var glsl=getGlslDifferences();return\"\\n    vec4 \".concat(funcName,\"(\").concat(params,\") {\\n      int index = \").concat(index,\";\\n      int texR = index / \").concat(texNumC,\";\\n      int texC = index - texR * \").concat(texNumC,\";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC,\", \").concat(texNumR,\");\\n      return \").concat(glsl.texture2D,\"(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler4D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var stride2=shape[3];var stride1=shape[2]*stride2;var stride0=shape[1]*stride1;var _dist$util$squeezeSha3=dist[\"util\"].squeezeShape(shape),newShape=_dist$util$squeezeSha3.newShape,keptDims=_dist$util$squeezeSha3.keptDims;if(newShape.length<shape.length){var newInputInfo=squeezeInputInfo(inputInfo,newShape);var params=['row','col','depth','depth2'];return\"\\n      \".concat(getSamplerFromInInfo(newInputInfo),\"\\n      float \").concat(funcName,\"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n      }\\n    \");}if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0,\", \").concat(stride1,\", \").concat(stride2,\", 1)));\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var flatOffset=inputInfo.shapeInfo.flatOffset;var texShape=inputInfo.shapeInfo.texShape;var texNumR=texShape[0];var texNumC=texShape[1];if(texNumC===stride0&&flatOffset==null){// texC is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1,\", \").concat(stride2,\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}if(texNumC===stride2&&flatOffset==null){// texR is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1]*shape[2],\", \").concat(shape[2],\", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}var offset=getFlatOffsetUniformName(texName);return\"\\n    float \".concat(funcName,\"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0,\" + col * \").concat(stride1,\" +\\n          depth * \").concat(stride2,\" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR,\", \").concat(texNumC,\", index + \").concat(offset,\");\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler5D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var stride3=shape[4];var stride2=shape[3]*stride3;var stride1=shape[2]*stride2;var stride0=shape[1]*stride1;var _dist$util$squeezeSha4=dist[\"util\"].squeezeShape(shape),newShape=_dist$util$squeezeSha4.newShape,keptDims=_dist$util$squeezeSha4.keptDims;if(newShape.length<shape.length){var newInputInfo=squeezeInputInfo(inputInfo,newShape);var params=['row','col','depth','depth2','depth3'];return\"\\n      \".concat(getSamplerFromInInfo(newInputInfo),\"\\n      float \").concat(funcName,\"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n      }\\n    \");}if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0,\", \").concat(stride1,\", \").concat(stride2,\", \").concat(stride3,\")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var flatOffset=inputInfo.shapeInfo.flatOffset;var texShape=inputInfo.shapeInfo.texShape;var texNumR=texShape[0];var texNumC=texShape[1];if(texNumC===stride0&&flatOffset==null){// texC is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1,\", \").concat(stride2,\", \").concat(stride3,\", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}if(texNumC===stride3&&flatOffset==null){// texR is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1]*shape[2]*shape[3],\",\\n               \").concat(shape[2]*shape[3],\", \").concat(shape[3],\", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}var offset=getFlatOffsetUniformName(texName);return\"\\n    float \".concat(funcName,\"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0,\" + col * \").concat(stride1,\" + depth * \").concat(stride2,\" +\\n          depth2 * \").concat(stride3,\" + depth3 + \").concat(offset,\";\\n      vec2 uv = uvFromFlat(\").concat(texNumR,\", \").concat(texNumC,\", index);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}function getSampler6D(inputInfo){var shape=inputInfo.shapeInfo.logicalShape;var texName=inputInfo.name;var funcName='get'+texName.charAt(0).toUpperCase()+texName.slice(1);var _dist$util$squeezeSha5=dist[\"util\"].squeezeShape(shape),newShape=_dist$util$squeezeSha5.newShape,keptDims=_dist$util$squeezeSha5.keptDims;if(newShape.length<shape.length){var newInputInfo=squeezeInputInfo(inputInfo,newShape);var params=['row','col','depth','depth2','depth3','depth4'];return\"\\n      \".concat(getSamplerFromInInfo(newInputInfo),\"\\n      float \").concat(funcName,\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName,\"(\").concat(getSqueezedParams(params,keptDims),\");\\n      }\\n    \");}var stride4=shape[5];var stride3=shape[4]*stride4;var stride2=shape[3]*stride3;var stride1=shape[2]*stride2;var stride0=shape[1]*stride1;if(inputInfo.shapeInfo.isUniform){// Uniform arrays will be less than 65505 (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0,\", \").concat(stride1,\", \").concat(stride2,\", \").concat(stride3,\")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4,\", 1)));\\n        \").concat(getUniformSampler(inputInfo),\"\\n      }\\n    \");}var flatOffset=inputInfo.shapeInfo.flatOffset;var texShape=inputInfo.shapeInfo.texShape;var texNumR=texShape[0];var texNumC=texShape[1];if(texNumC===stride0&&flatOffset==null){// texC is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1,\", \").concat(stride2,\", \").concat(stride3,\", \").concat(stride4,\")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}if(texNumC===stride4&&flatOffset==null){// texR is used directly as physical (no risk of float16 overflow).\nreturn\"\\n      float \".concat(funcName,\"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1]*shape[2]*shape[3]*shape[4],\",\\n               \").concat(shape[2]*shape[3]*shape[4],\",\\n               \").concat(shape[3]*shape[4],\",\\n               \").concat(shape[4],\")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC,\".0, \").concat(texNumR,\".0);\\n        return sampleTexture(\").concat(texName,\", uv);\\n      }\\n    \");}var offset=getFlatOffsetUniformName(texName);return\"\\n    float \".concat(funcName,\"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0,\" + col * \").concat(stride1,\" + depth * \").concat(stride2,\" +\\n          depth2 * \").concat(stride3,\" + depth3 * \").concat(stride4,\" + depth4 + \").concat(offset,\";\\n      vec2 uv = uvFromFlat(\").concat(texNumR,\", \").concat(texNumC,\", index);\\n      return sampleTexture(\").concat(texName,\", uv);\\n    }\\n  \");}function getUniformSampler(inputInfo){var texName=inputInfo.name;var inSize=dist[\"util\"].sizeFromShape(inputInfo.shapeInfo.logicalShape);if(inSize<2){return\"return \".concat(texName,\";\");}return\"\\n    for (int i = 0; i < \".concat(inSize,\"; i++) {\\n      if (i == index) {\\n        return \").concat(texName,\"[i];\\n      }\\n    }\\n  \");}function getPackedSamplerAtOutputCoords(inputInfo,outShapeInfo){var texName=inputInfo.name;var texFuncSnippet=texName.charAt(0).toUpperCase()+texName.slice(1);var funcName='get'+texFuncSnippet+'AtOutCoords';var inRank=inputInfo.shapeInfo.logicalShape.length;var outRank=outShapeInfo.logicalShape.length;var broadcastDims=getBroadcastDims(inputInfo.shapeInfo.logicalShape,outShapeInfo.logicalShape);var type=getCoordsDataType(outRank);var rankDiff=outRank-inRank;var coordsSnippet;var fields=['x','y','z','w','u','v'];if(inRank===0){coordsSnippet='';}else if(outRank<2&&broadcastDims.length>=1){coordsSnippet='coords = 0;';}else{coordsSnippet=broadcastDims.map(function(d){return\"coords.\".concat(fields[d+rankDiff],\" = 0;\");}).join('\\n');}var unpackedCoordsSnippet='';if(outRank<2&&inRank>0){unpackedCoordsSnippet='coords';}else{unpackedCoordsSnippet=inputInfo.shapeInfo.logicalShape.map(function(s,i){return\"coords.\".concat(fields[i+rankDiff]);}).join(', ');}var output=\"return outputValue;\";var inSize=dist[\"util\"].sizeFromShape(inputInfo.shapeInfo.logicalShape);var isInputScalar=inSize===1;var outSize=dist[\"util\"].sizeFromShape(outShapeInfo.logicalShape);var isOutputScalar=outSize===1;if(inRank===1&&!isInputScalar&&!isOutputScalar){output=\"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";}else if(isInputScalar&&!isOutputScalar){if(outRank===1){output=\"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";}else{output=\"\\n        return vec4(outputValue.x);\\n      \";}}else if(broadcastDims.length){var rows=inRank-2;var cols=inRank-1;if(broadcastDims.indexOf(rows)>-1&&broadcastDims.indexOf(cols)>-1){output=\"return vec4(outputValue.x);\";}else if(broadcastDims.indexOf(rows)>-1){output=\"return vec4(outputValue.x, outputValue.y, \"+\"outputValue.x, outputValue.y);\";}else if(broadcastDims.indexOf(cols)>-1){output=\"return vec4(outputValue.xx, outputValue.zz);\";}}return\"\\n    vec4 \".concat(funcName,\"() {\\n      \").concat(type,\" coords = getOutputCoords();\\n      \").concat(coordsSnippet,\"\\n      vec4 outputValue = get\").concat(texFuncSnippet,\"(\").concat(unpackedCoordsSnippet,\");\\n      \").concat(output,\"\\n    }\\n  \");}function getSamplerAtOutputCoords(inputInfo,outShapeInfo){var texName=inputInfo.name;var texFuncSnippet=texName.charAt(0).toUpperCase()+texName.slice(1);var funcName='get'+texFuncSnippet+'AtOutCoords';var outTexShape=outShapeInfo.texShape;var inTexShape=inputInfo.shapeInfo.texShape;var inRank=inputInfo.shapeInfo.logicalShape.length;var outRank=outShapeInfo.logicalShape.length;if(!inputInfo.shapeInfo.isUniform&&inRank===outRank&&inputInfo.shapeInfo.flatOffset==null&&dist[\"util\"].arraysEqual(inTexShape,outTexShape)){return\"\\n      float \".concat(funcName,\"() {\\n        return sampleTexture(\").concat(texName,\", resultUV);\\n      }\\n    \");}var type=getCoordsDataType(outRank);var broadcastDims=getBroadcastDims(inputInfo.shapeInfo.logicalShape,outShapeInfo.logicalShape);var rankDiff=outRank-inRank;var coordsSnippet;var fields=['x','y','z','w','u','v'];if(inRank===0){coordsSnippet='';}else if(outRank<2&&broadcastDims.length>=1){coordsSnippet='coords = 0;';}else{coordsSnippet=broadcastDims.map(function(d){return\"coords.\".concat(fields[d+rankDiff],\" = 0;\");}).join('\\n');}var unpackedCoordsSnippet='';if(outRank<2&&inRank>0){unpackedCoordsSnippet='coords';}else{unpackedCoordsSnippet=inputInfo.shapeInfo.logicalShape.map(function(s,i){return\"coords.\".concat(fields[i+rankDiff]);}).join(', ');}return\"\\n    float \".concat(funcName,\"() {\\n      \").concat(type,\" coords = getOutputCoords();\\n      \").concat(coordsSnippet,\"\\n      return get\").concat(texFuncSnippet,\"(\").concat(unpackedCoordsSnippet,\");\\n    }\\n  \");}function getCoordsDataType(rank){if(rank<=1){return'int';}else if(rank===2){return'ivec2';}else if(rank===3){return'ivec3';}else if(rank===4){return'ivec4';}else if(rank===5){return'ivec5';}else if(rank===6){return'ivec6';}else{throw Error(\"GPU for rank \".concat(rank,\" is not yet supported\"));}}/** Returns a new input info (a copy) that has a squeezed logical shape. */function squeezeInputInfo(inInfo,squeezedShape){// Deep copy.\nvar newInputInfo=JSON.parse(JSON.stringify(inInfo));newInputInfo.shapeInfo.logicalShape=squeezedShape;return newInputInfo;}function getSqueezedParams(params,keptDims){return keptDims.map(function(d){return params[d];}).join(', ');}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var argminmax_packed_gpu_ArgMinMaxPackedProgram=function argminmax_packed_gpu_ArgMinMaxPackedProgram(shape,windowSize,op,firstPass){_classCallCheck2(this,argminmax_packed_gpu_ArgMinMaxPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;dist[\"util\"].assert(shape.length>2,function(){return\"Packed arg\".concat(op.charAt(0).toUpperCase()+op.slice(1),\" supports only inputs with rank above 2.\");});var inSize=shape[shape.length-1];var outSize=Math.ceil(inSize/windowSize);this.outputShape=shape.slice(0,-1);if(outSize>1){this.outputShape.push(outSize);}if(!firstPass){this.variableNames.push('bestIndicesA');}var outShape=this.outputShape;var rank=outShape.length;var dtype=getCoordsDataType(rank);var coords=getChannels('coords',rank);var sourceLocSetup;var sourceRank;if(outSize===1){sourceRank=rank+1;var sourceLocDType=getCoordsDataType(sourceRank);sourceLocSetup=\"\\n        \".concat(sourceLocDType,\" sourceLocR = \").concat(sourceLocDType,\"(\").concat(coords.join(),\", 0);\\n        ++\").concat(coords[rank-1],\";\\n        \").concat(sourceLocDType,\" sourceLocG = \").concat(sourceLocDType,\"(\").concat(coords.join(),\", 0);\\n        ++\").concat(coords[rank-2],\";\\n        \").concat(sourceLocDType,\" sourceLocA = \").concat(sourceLocDType,\"(\").concat(coords.join(),\", 0);\\n        --\").concat(coords[rank-1],\";\\n        \").concat(sourceLocDType,\" sourceLocB = \").concat(sourceLocDType,\"(\").concat(coords.join(),\", 0);\\n        --\").concat(coords[rank-2],\";\");}else{sourceRank=rank;sourceLocSetup=\"\\n        \".concat(dtype,\" sourceLocR = coords;\\n        ++\").concat(coords[rank-1],\";\\n        \").concat(dtype,\" sourceLocG = coords;\\n        ++\").concat(coords[rank-2],\";\\n        \").concat(dtype,\" sourceLocA = coords;\\n        --\").concat(coords[rank-1],\";\\n        \").concat(dtype,\" sourceLocB = coords;\\n        --\").concat(coords[rank-2],\";\");}var channels=['x','y','z','w','u','v'].slice(0,sourceRank);var inChannel='.'+channels[sourceRank-1];// e.g. \".b\" for rank 3.\nvar intChannels=channels.map(function(x){return'int '+x;});var srcRCoords=getChannels('sourceLocR',sourceRank-1).concat('inIdx.r');var srcGCoords=getChannels('sourceLocG',sourceRank-1).concat('inIdx.g');var srcBCoords=getChannels('sourceLocB',sourceRank-1).concat('inIdx.b');var srcACoords=getChannels('sourceLocA',sourceRank-1).concat('inIdx.a');var compOp=op==='max'?'greaterThan':'lessThan';var fetchCandidateIdx=firstPass?'':\"\\n          inIdx = round(vec4(getBestIndicesAChannel(\".concat(srcRCoords.join(),\"),\\n                             getBestIndicesAChannel(\").concat(srcGCoords.join(),\"),\\n                             getBestIndicesAChannel(\").concat(srcBCoords.join(),\"),\\n                             getBestIndicesAChannel(\").concat(srcACoords.join(),\")));\");var fetchValue=\"vec4(\\n            getAChannel(\".concat(srcRCoords.join(),\"),\\n            hasNextCol ? getAChannel(\").concat(srcGCoords.join(),\") : 0.,\\n            hasNextRow ? getAChannel(\").concat(srcBCoords.join(),\") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\").concat(srcACoords.join(),\") : 0.)\");var getBestIndicesAChannelSnippet=firstPass?'':\"\\n      float getBestIndicesAChannel(\".concat(intChannels.join(),\") {\\n        return getChannel(getBestIndicesA(\").concat(channels.join(),\"),\\n                                          vec2(\").concat(channels.slice(-2).join(),\"));\\n      }\");this.userCode=\"\\n      float getAChannel(\".concat(intChannels.join(),\") {\\n        return getChannel(getA(\").concat(channels.join(),\"),\\n                               vec2(\").concat(channels.slice(-2).join(),\"));\\n      }\\n      \").concat(getBestIndicesAChannelSnippet,\"\\n      void main() {\\n        \").concat(dtype,\" coords = getOutputCoords();\\n        bool hasNextCol = \").concat(coords[rank-1],\" < \").concat(outShape[rank-1]-1,\";\\n        bool hasNextRow = \").concat(coords[rank-2],\" < \").concat(outShape[rank-2]-1,\";\\n        \").concat(sourceLocSetup,\"\\n        ivec4 srcIdx = ivec4(sourceLocR\").concat(inChannel,\", sourceLocG\").concat(inChannel,\",\\n          sourceLocB\").concat(inChannel,\", sourceLocA\").concat(inChannel,\") * \").concat(windowSize,\";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \").concat(fetchValue,\";\\n\\n        for (int i = 0; i < \").concat(windowSize,\"; i++) {\\n          inIdx = srcIdx;\\n          \").concat(fetchCandidateIdx,\"\\n          vec4 candidate = \").concat(fetchValue,\";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\").concat(compOp,\"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var AvgPool2DBackpropProgram=function AvgPool2DBackpropProgram(convInfo){_classCallCheck2(this,AvgPool2DBackpropProgram);this.variableNames=['dy'];this.outputShape=convInfo.inShape;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var avgMultiplier=1/(filterHeight*filterWidth);this.userCode=\"\\n      const ivec2 pads = ivec2(\".concat(padTop,\", \").concat(padLeft,\");\\n      const float avgMultiplier = float(\").concat(avgMultiplier,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n            wR += \").concat(dilationHeight,\") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth,\";\\n            wC+= \").concat(dilationWidth,\") {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var AvgPool3DBackpropProgram=function AvgPool3DBackpropProgram(convInfo){_classCallCheck2(this,AvgPool3DBackpropProgram);this.variableNames=['dy'];this.outputShape=convInfo.inShape;var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=effectiveFilterDepth-1-convInfo.padInfo.front;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var avgMultiplier=1/(filterDepth*filterHeight*filterWidth);this.userCode=\"\\n      const ivec3 pads = ivec3(\".concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n      const float avgMultiplier = float(\").concat(avgMultiplier,\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth,\";\\n            wD += \").concat(dilationDepth,\") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth,\".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth,\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n              wR += \").concat(dilationHeight,\") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth,\";\\n                wC += \").concat(dilationWidth,\") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var batchnorm_gpu_BatchNormProgram=function batchnorm_gpu_BatchNormProgram(xShape,meanShape,varianceShape,offsetShape,scaleShape,varianceEpsilon){_classCallCheck2(this,batchnorm_gpu_BatchNormProgram);this.outputShape=[];this.variableNames=['x','mean','variance'];dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,meanShape);dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,varianceShape);var offsetSnippet='0.0';if(offsetShape!=null){dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,offsetShape);this.variableNames.push('offset');offsetSnippet='getOffsetAtOutCoords()';}var scaleSnippet='1.0';if(scaleShape!=null){dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,scaleShape);this.variableNames.push('scale');scaleSnippet='getScaleAtOutCoords()';}this.outputShape=xShape;this.userCode=\"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \".concat(offsetSnippet,\";\\n        float scale = \").concat(scaleSnippet,\";\\n        float inv = scale * inversesqrt(variance + float(\").concat(varianceEpsilon,\"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var batchnorm_packed_gpu_BatchNormPackedProgram=function batchnorm_packed_gpu_BatchNormPackedProgram(xShape,meanShape,varianceShape,offsetShape,scaleShape,varianceEpsilon){_classCallCheck2(this,batchnorm_packed_gpu_BatchNormPackedProgram);this.packedInputs=true;this.packedOutput=true;this.variableNames=['x','mean','variance'];dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,meanShape);dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,varianceShape);var offsetSnippet='vec4(0.0)';if(offsetShape!=null){dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,offsetShape);this.variableNames.push('offset');offsetSnippet='getOffsetAtOutCoords()';}var scaleSnippet='vec4(1.0)';if(scaleShape!=null){dist[\"backend_util\"].assertAndGetBroadcastShape(xShape,scaleShape);this.variableNames.push('scale');scaleSnippet='getScaleAtOutCoords()';}this.outputShape=xShape;this.userCode=\"\\n      void main() {\\n        vec4 offset = \".concat(offsetSnippet,\";\\n        vec4 scale = \").concat(scaleSnippet,\";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\").concat(varianceEpsilon,\"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nvar COMPLEX_MULTIPLY={REAL:'return areal * breal - aimag * bimag;',IMAG:'return areal * bimag + aimag * breal;'};var binaryop_complex_gpu_BinaryOpComplexProgram=function binaryop_complex_gpu_BinaryOpComplexProgram(op,aShape,bShape){_classCallCheck2(this,binaryop_complex_gpu_BinaryOpComplexProgram);this.variableNames=['AReal','AImag','BReal','BImag'];this.outputShape=dist[\"backend_util\"].assertAndGetBroadcastShape(aShape,bShape);this.userCode=\"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \".concat(op,\"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var CHECK_NAN_SNIPPET=\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\";var ADD='return a + b;';var SUB='return a - b;';var MUL='return a * b;';// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nvar DIV=\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\";// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nvar INT_DIV=\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\";var POW=\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\";var binaryop_gpu_SQUARED_DIFFERENCE='return (a - b) * (a - b);';var EQUAL=\"return float(a == b);\";var NOT_EQUAL=\"return float(a != b);\";var LESS=\"return float(a < b);\";var LESS_EQUAL=\"return float(a <= b);\";var GREATER=\"return float(a > b);\";var GREATER_EQUAL=\"return float(a >= b);\";var LOGICAL_AND=\"return float(a >= 1.0 && b >= 1.0);\";var LOGICAL_OR=\"return float(a >= 1.0 || b >= 1.0);\";var MAX=CHECK_NAN_SNIPPET+\"\\n  return max(a, b);\\n\";var MIN=CHECK_NAN_SNIPPET+\"\\n  return min(a, b);\\n\";var MOD=\"if (b == 0.0) return NAN;\\n  return mod(a, b);\";var ATAN2=CHECK_NAN_SNIPPET+\"\\n  return atan(a, b);\\n\";var ELU_DER=\"return (b >= 1.0) ? a : a * (b + 1.0);\";var PRELU=\"return (a < 0.) ? b * a : a;\";var binaryop_gpu_BinaryOpProgram=function binaryop_gpu_BinaryOpProgram(op,aShape,bShape){_classCallCheck2(this,binaryop_gpu_BinaryOpProgram);this.variableNames=['A','B'];this.outputShape=dist[\"backend_util\"].assertAndGetBroadcastShape(aShape,bShape);this.userCode=\"\\n      float binaryOperation(float a, float b) {\\n        \".concat(op,\"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var binaryop_packed_gpu_CHECK_NAN_SNIPPET=\"\\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\";// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nvar binaryop_packed_gpu_DIV=\"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\";var binaryop_packed_gpu_INT_DIV=\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\";var binaryop_packed_gpu_POW=\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \"+binaryop_packed_gpu_CHECK_NAN_SNIPPET+\"\\n  return result;\\n\";var binaryop_packed_gpu_PRELU=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\";var binaryop_packed_gpu_ELU_DER=\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\";var binaryop_packed_gpu_ATAN2=\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \"+binaryop_packed_gpu_CHECK_NAN_SNIPPET+\"\\n  return result;\\n\";var binaryop_packed_gpu_EQUAL=\"\\n  return vec4(equal(a, b));\\n\";var binaryop_packed_gpu_NOT_EQUAL=\"\\n  return vec4(notEqual(a, b));\\n\";var binaryop_packed_gpu_LESS=\"\\n  return vec4(lessThan(a, b));\\n\";var binaryop_packed_gpu_LESS_EQUAL=\"\\n  return vec4(lessThanEqual(a, b));\\n\";var binaryop_packed_gpu_GREATER=\"\\n  return vec4(greaterThan(a, b));\\n\";var binaryop_packed_gpu_GREATER_EQUAL=\"\\n  return vec4(greaterThanEqual(a, b));\\n\";var binaryop_packed_gpu_LOGICAL_AND=\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\";var binaryop_packed_gpu_LOGICAL_OR=\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\";var binaryop_packed_gpu_MAX=\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \"+binaryop_packed_gpu_CHECK_NAN_SNIPPET+\"\\n  return result;\\n\";var binaryop_packed_gpu_MIN=\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \"+binaryop_packed_gpu_CHECK_NAN_SNIPPET+\"\\n  return result;\\n\";var binaryop_packed_gpu_MOD=\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \"+binaryop_packed_gpu_CHECK_NAN_SNIPPET+\"\\n  return result;\\n\";var binaryop_packed_gpu_BinaryOpPackedProgram=function binaryop_packed_gpu_BinaryOpPackedProgram(op,aShape,bShape){var checkOutOfBounds=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;_classCallCheck2(this,binaryop_packed_gpu_BinaryOpPackedProgram);this.variableNames=['A','B'];this.supportsBroadcasting=true;this.packedInputs=true;this.packedOutput=true;this.outputShape=dist[\"backend_util\"].assertAndGetBroadcastShape(aShape,bShape);var rank=this.outputShape.length;var checkOutOfBoundsString='';if(checkOutOfBounds){if(rank===0||dist[\"util\"].sizeFromShape(this.outputShape)===1){checkOutOfBoundsString=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";}else{var dtype=getCoordsDataType(rank);checkOutOfBoundsString=\"\\n          \".concat(dtype,\" coords = getOutputCoords();\\n        \");if(rank===1){checkOutOfBoundsString+=\"\\n            result.y = (coords + 1) >= \".concat(this.outputShape[0],\" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \");}else{var channels=getChannels('coords',rank);checkOutOfBoundsString+=\"\\n            bool nextRowOutOfBounds =\\n              (\".concat(channels[rank-2],\" + 1) >= \").concat(this.outputShape[rank-2],\";\\n            bool nextColOutOfBounds =\\n              (\").concat(channels[rank-1],\" + 1) >= \").concat(this.outputShape[rank-1],\";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \");}}}this.userCode=\"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \".concat(op,\"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \").concat(checkOutOfBoundsString,\"\\n\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ClipProgram=/*#__PURE__*/function(){function ClipProgram(aShape){_classCallCheck2(this,ClipProgram);this.variableNames=['A'];this.outputShape=aShape;this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \";}_createClass(ClipProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(min,max){var _this89=this;return function(gpgpu,webGLProgram){if(_this89.minLoc==null){_this89.minLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'minVal');_this89.maxLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'maxVal');}gpgpu.gl.uniform1f(_this89.minLoc,min);gpgpu.gl.uniform1f(_this89.maxLoc,max);};}}]);return ClipProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ClipPackedProgram=/*#__PURE__*/function(){function ClipPackedProgram(aShape){_classCallCheck2(this,ClipPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outputShape=aShape;this.userCode=\"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \";}_createClass(ClipPackedProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(min,max){var _this90=this;return function(gpgpu,webGLProgram){if(_this90.minLoc==null){_this90.minLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'minVal');_this90.maxLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'maxVal');}gpgpu.gl.uniform1f(_this90.minLoc,min);gpgpu.gl.uniform1f(_this90.maxLoc,max);};}}]);return ClipPackedProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ComplexAbsProgram=function ComplexAbsProgram(shape){_classCallCheck2(this,ComplexAbsProgram);this.variableNames=['real','imag'];this.outputShape=shape;this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \";};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var concat_gpu_ConcatProgram=// Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\nfunction concat_gpu_ConcatProgram(shapes){_classCallCheck2(this,concat_gpu_ConcatProgram);this.outputShape=[];this.outputShape=dist[\"backend_util\"].computeOutShape(shapes,1/* axis */);this.variableNames=shapes.map(function(_,i){return\"T\".concat(i);});var offsets=new Array(shapes.length-1);offsets[0]=shapes[0][1];for(var i=1;i<offsets.length;i++){offsets[i]=offsets[i-1]+shapes[i][1];}var snippets=[\"if (yC < \".concat(offsets[0],\") setOutput(getT0(yR, yC));\")];for(var _i46=1;_i46<offsets.length;_i46++){var shift=offsets[_i46-1];snippets.push(\"else if (yC < \".concat(offsets[_i46],\") \")+\"setOutput(getT\".concat(_i46,\"(yR, yC-\").concat(shift,\"));\"));}var lastIndex=offsets.length;var lastShift=offsets[offsets.length-1];snippets.push(\"else setOutput(getT\".concat(lastIndex,\"(yR, yC-\").concat(lastShift,\"));\"));this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \".concat(snippets.join('\\n        '),\"\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var concat_packed_gpu_ConcatPackedProgram=function concat_packed_gpu_ConcatPackedProgram(shapes,axis){_classCallCheck2(this,concat_packed_gpu_ConcatPackedProgram);this.packedInputs=true;this.packedOutput=true;this.outputShape=[];this.outputShape=dist[\"backend_util\"].computeOutShape(shapes,axis);var shape=this.outputShape;var rank=shape.length;var dtype=getCoordsDataType(rank);var coords=getChannels('coords',rank);var channels=['x','y','z','w','u','v'].slice(0,rank);this.variableNames=shapes.map(function(_,i){return\"T\".concat(i);});var offsets=new Array(shapes.length-1);offsets[0]=shapes[0][axis];for(var i=1;i<offsets.length;i++){offsets[i]=offsets[i-1]+shapes[i][axis];}var channel=channels[axis];var lastChannels=channels.slice(-2);var allChannels=channels.join();var getValueSnippet=\"if (\".concat(channel,\" < \").concat(offsets[0],\") {\\n        return getChannel(\\n            getT0(\").concat(allChannels,\"), vec2(\").concat(lastChannels.join(),\"));\\n        }\");for(var _i47=1;_i47<offsets.length;_i47++){var _shift=offsets[_i47-1];// Note: the >= comparison below may seem unnecessary given the check\n// above but is needed to workaround branch execution issues on some\n// devices. It makes all the conditions exclusive without relying on\n// execution order.\ngetValueSnippet+=\"\\n        if (\".concat(channel,\" < \").concat(offsets[_i47],\"  && \").concat(channel,\" >= \").concat(offsets[_i47-1],\") {\\n          return getChannel(\\n            getT\").concat(_i47,\"(\").concat(shiftedChannels(channels,channel,_shift),\"),\\n            vec2(\").concat(shiftedChannels(lastChannels,channel,_shift),\"));\\n        }\");}var lastIndex=offsets.length;var shift=offsets[offsets.length-1];getValueSnippet+=\"\\n        return getChannel(\\n          getT\".concat(lastIndex,\"(\").concat(shiftedChannels(channels,channel,shift),\"),\\n          vec2(\").concat(shiftedChannels(lastChannels,channel,shift),\"));\");this.userCode=\"\\n      float getValue(\".concat(channels.map(function(x){return'int '+x;}),\") {\\n        \").concat(getValueSnippet,\"\\n      }\\n\\n      void main() {\\n        \").concat(dtype,\" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\").concat(coords,\"), 0., 0., 0.);\\n\\n        \").concat(coords[rank-1],\" = \").concat(coords[rank-1],\" + 1;\\n        if (\").concat(coords[rank-1],\" < \").concat(shape[rank-1],\") {\\n          result.g = getValue(\").concat(coords,\");\\n        }\\n\\n        \").concat(coords[rank-2],\" = \").concat(coords[rank-2],\" + 1;\\n        if (\").concat(coords[rank-2],\" < \").concat(shape[rank-2],\") {\\n          result.a = getValue(\").concat(coords,\");\\n        }\\n\\n        \").concat(coords[rank-1],\" = \").concat(coords[rank-1],\" - 1;\\n        if (\").concat(coords[rank-2],\" < \").concat(shape[rank-2],\" &&\\n            \").concat(coords[rank-1],\" < \").concat(shape[rank-1],\") {\\n          result.b = getValue(\").concat(coords,\");\\n        }\\n        setOutput(result);\\n      }\\n    \");};/**\r\n * Return an expression for coordinates into a vector where a given channel\r\n * will be offset by [shift].\r\n *\r\n * @param channels the channels to consider\r\n * @param channel the channel we want shifted\r\n * @param shift  the amount to subtract from the channel.\r\n *\r\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\r\n * have the shift applied.\r\n */function shiftedChannels(channels,channel,shift){var channelIdx=channels.indexOf(channel);var res=channels.map(function(c,idx){if(idx===channelIdx){return\"\".concat(c,\" - \").concat(shift);}else{return c;}});return res.join();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Conv2DDerFilterProgram=function Conv2DDerFilterProgram(convInfo){_classCallCheck2(this,Conv2DDerFilterProgram);this.variableNames=['x','dy'];this.outputShape=convInfo.filterShape;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var isChannelsLast=convInfo.dataFormat==='channelsLast';this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \".concat(convInfo.batchSize,\"; b++) {\\n          for (int yR = 0; yR < \").concat(convInfo.outHeight,\"; yR++) {\\n            int xR = wR + yR * \").concat(strideHeight,\" - \").concat(padTop,\";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \").concat(convInfo.outWidth,\"; yC++) {\\n              int xC = wC + yC * \").concat(strideWidth,\" - \").concat(padLeft,\";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                continue;\\n              }\\n\\n              if (\").concat(isChannelsLast,\") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var Conv2DDerInputProgram=function Conv2DDerInputProgram(convInfo){_classCallCheck2(this,Conv2DDerInputProgram);this.variableNames=['dy','W'];this.outputShape=convInfo.inShape;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var isChannelsLast=convInfo.dataFormat==='channelsLast';var padTop=filterHeight-1-convInfo.padInfo.top;var padLeft=filterWidth-1-convInfo.padInfo.left;var rowDim=isChannelsLast?1:2;var colDim=isChannelsLast?2:3;var channelDim=isChannelsLast?3:1;this.userCode=\"\\n      const ivec2 pads = ivec2(\".concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\").concat(channelDim,\"];\\n\\n        ivec2 dyCorner = ivec2(coords[\").concat(rowDim,\"], coords[\").concat(colDim,\"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \").concat(filterHeight,\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \").concat(filterWidth,\" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \").concat(convInfo.outChannels,\"; d2++) {\\n\\n              if (\").concat(isChannelsLast,\") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var Conv3DDerFilterProgram=function Conv3DDerFilterProgram(convInfo){_classCallCheck2(this,Conv3DDerFilterProgram);this.variableNames=['x','dy'];this.outputShape=convInfo.filterShape;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var padFront=convInfo.padInfo.front;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;this.userCode=\"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \".concat(convInfo.batchSize,\"; b++) {\\n          for (int yF = 0; yF < \").concat(convInfo.outDepth,\"; yF++) {\\n            int xF = wF + yF * \").concat(strideDepth,\" - \").concat(padFront,\";\\n\\n            if (xF < 0 || xF >= \").concat(convInfo.inDepth,\") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \").concat(convInfo.outHeight,\"; yR++) {\\n              int xR = wR + yR * \").concat(strideHeight,\" - \").concat(padTop,\";\\n\\n              if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \").concat(convInfo.outWidth,\"; yC++) {\\n                int xC = wC + yC * \").concat(strideWidth,\" - \").concat(padLeft,\";\\n\\n                if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var Conv3DDerInputProgram=function Conv3DDerInputProgram(convInfo){_classCallCheck2(this,Conv3DDerInputProgram);this.variableNames=['dy','W'];this.outputShape=convInfo.inShape;var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var padFront=filterDepth-1-convInfo.padInfo.front;var padTop=filterHeight-1-convInfo.padInfo.top;var padLeft=filterWidth-1-convInfo.padInfo.left;this.userCode=\"\\n      const ivec3 pads = ivec3(\".concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \").concat(filterDepth,\"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \").concat(strideDepth,\".0;\\n\\n          if (dyF < 0.0 || dyF >= \").concat(convInfo.outDepth,\".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \").concat(filterDepth,\" - 1 - wF;\\n\\n          for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \").concat(filterHeight,\" - 1 - wR;\\n\\n            for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \").concat(filterWidth,\" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \").concat(convInfo.outChannels,\"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var DepthwiseConv2DDerFilterProgram=function DepthwiseConv2DDerFilterProgram(convInfo){_classCallCheck2(this,DepthwiseConv2DDerFilterProgram);this.variableNames=['x','dy'];this.outputShape=convInfo.filterShape;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var channelMul=convInfo.outChannels/convInfo.inChannels;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \".concat(channelMul,\" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \").concat(convInfo.batchSize,\"; b++) {\\n          for (int yR = 0; yR < \").concat(convInfo.outHeight,\"; yR++) {\\n            int xR = wR + yR * \").concat(strideHeight,\" - \").concat(padTop,\";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \").concat(convInfo.outWidth,\"; yC++) {\\n              int xC = wC + yC * \").concat(strideWidth,\" - \").concat(padLeft,\";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var DepthwiseConv2DDerInputProgram=function DepthwiseConv2DDerInputProgram(convInfo){_classCallCheck2(this,DepthwiseConv2DDerInputProgram);this.variableNames=['dy','W'];this.outputShape=convInfo.inShape;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var padTop=filterHeight-1-convInfo.padInfo.top;var padLeft=filterWidth-1-convInfo.padInfo.left;var channelMul=convInfo.outChannels/convInfo.inChannels;this.userCode=\"\\n      const ivec2 pads = ivec2(\".concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \").concat(filterHeight,\" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \").concat(filterWidth,\" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \").concat(channelMul,\"; dm++) {\\n              int d2 = d1 * \").concat(channelMul,\" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Conv2DProgram=function Conv2DProgram(convInfo){var addBias=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var activation=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var hasPreluActivationWeights=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;_classCallCheck2(this,Conv2DProgram);this.variableNames=['x','W'];this.outputShape=convInfo.outShape;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var inputDepthNearestVec4=Math.floor(convInfo.inChannels/4)*4;var inputDepthVec4Remainder=convInfo.inChannels%4;var isChannelsLast=convInfo.dataFormat==='channelsLast';var rowDim=isChannelsLast?1:2;var colDim=isChannelsLast?2:3;var channelDim=isChannelsLast?3:1;var activationSnippet='',applyActivationSnippet='';if(activation){if(hasPreluActivationWeights){activationSnippet=\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation,\"\\n        }\");}else{activationSnippet=\"\\n          float activation(float x) {\\n            \".concat(activation,\"\\n          }\\n        \");}applyActivationSnippet=\"result = activation(result);\";}var addBiasSnippet=addBias?'result += getBiasAtOutCoords();':'';if(addBias){this.variableNames.push('bias');}if(hasPreluActivationWeights){this.variableNames.push('preluActivationWeights');}this.userCode=\"\\n      \".concat(activationSnippet,\"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec2 pads = ivec2(\").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\").concat(channelDim,\"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\").concat(rowDim,\"], coords[\").concat(colDim,\"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n          int xR = xRCorner + wR * \").concat(dilationHeight,\";\\n\\n          if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth,\";\\n\\n            if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4,\"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast,\") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\").concat(inputDepthVec4Remainder===1,\") {\\n\\n              if (\").concat(isChannelsLast,\") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\") *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4,\", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \").concat(inputDepthNearestVec4,\", xR, xC) *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4,\", d2);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder===2,\") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4,\", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4,\" + 1, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast,\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \").concat(inputDepthNearestVec4,\", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4,\" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder===3,\") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4,\", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4,\" + 1, d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4,\" + 2, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast,\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\" + 1),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4,\" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \").concat(inputDepthNearestVec4,\", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4,\" + 1, xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4,\" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \").concat(addBiasSnippet,\"\\n        \").concat(applyActivationSnippet,\"\\n        setOutput(result);\\n      }\\n    \");};var Conv3DProgram=function Conv3DProgram(convInfo){_classCallCheck2(this,Conv3DProgram);this.variableNames=['x','W'];this.outputShape=convInfo.outShape;var padFront=convInfo.padInfo.front;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var filterDepth=convInfo.filterDepth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var inputDepthNearestVec4=Math.floor(convInfo.inChannels/4)*4;var inputDepthVec4Remainder=convInfo.inChannels%4;this.userCode=\"\\n      const ivec3 strides = ivec3(\".concat(strideDepth,\", \").concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec3 pads = ivec3(\").concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \").concat(filterDepth,\"; wF++) {\\n          int xF = xFCorner + wF * \").concat(dilationDepth,\";\\n\\n          if (xF < 0 || xF >= \").concat(convInfo.inDepth,\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n            int xR = xRCorner + wR * \").concat(dilationHeight,\";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n              int xC = xCCorner + wC * \").concat(dilationWidth,\";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4,\"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\").concat(inputDepthVec4Remainder===1,\") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\") *\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\", d2);\\n              } else if (\").concat(inputDepthVec4Remainder===2,\") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\").concat(inputDepthVec4Remainder===3,\") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\" + 1),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4,\" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\" + 1, d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4,\" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var DepthwiseConv2DProgram=function DepthwiseConv2DProgram(convInfo){var addBias=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var activation=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var hasPreluActivation=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;_classCallCheck2(this,DepthwiseConv2DProgram);this.variableNames=['x','W'];this.outputShape=convInfo.outShape;var xNumRows=convInfo.inHeight;var xNumCols=convInfo.inWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var channelMul=convInfo.outChannels/convInfo.inChannels;var activationSnippet='',applyActivationSnippet='';if(activation){if(hasPreluActivation){activationSnippet=\"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation,\"\\n        }\");}else{activationSnippet=\"\\n          float activation(float x) {\\n            \".concat(activation,\"\\n          }\\n        \");}applyActivationSnippet=\"result = activation(result);\";}var addBiasSnippet=addBias?'result += getBiasAtOutCoords();':'';if(addBias){this.variableNames.push('bias');}if(hasPreluActivation){this.variableNames.push('preluActivationWeights');}this.userCode=\"\\n      \".concat(activationSnippet,\"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec2 pads = ivec2(\").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \").concat(channelMul,\";\\n        int q = d2 - d1 * \").concat(channelMul,\";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \").concat(filterHeight,\"; wR++) {\\n          int xR = xRCorner + wR * \").concat(dilationHeight,\";\\n\\n          if (xR < 0 || xR >= \").concat(xNumRows,\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidth,\"; wC++) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth,\";\\n\\n            if (xC < 0 || xC >= \").concat(xNumCols,\") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \").concat(addBiasSnippet,\"\\n        \").concat(applyActivationSnippet,\"\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram=function conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram(convInfo){var addBias=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var activation=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var hasPreluActivation=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;_classCallCheck2(this,conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram);this.variableNames=['x','W'];this.packedInputs=true;this.packedOutput=true;this.outputShape=convInfo.outShape;var xNumRows=convInfo.inHeight;var xNumCols=convInfo.inWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var filterHeight=convInfo.filterHeight;var filterWidth=convInfo.filterWidth;var texelsAcross=filterWidth;var mainLoop=\"int xR; int xC; int xCOffset;\";for(var r=0;r<filterHeight;r++){for(var _c7=0;_c7<filterWidth;_c7++){mainLoop+=\"\\n          vec4 xTexelR\".concat(r,\"C\").concat(_c7*2,\" = vec4(0.);\\n          vec4 wR\").concat(r,\"C\").concat(_c7,\" = vec4(0.);\\n          vec4 xR\").concat(r,\"C\").concat(_c7,\" = vec4(0.);\");}}/**\r\n         * This vectorized implementation works by gathering the values needed for\r\n         * each output channel's dot product into vec4's and then multiplying them\r\n         * all together (this happens in the final double for-loop below). Most of\r\n         * the main loop consists of constructing these vec4's with the minimum\r\n         * number of texture2D calls, which means making use of all four returned\r\n         * values from a texture2D call at once.\r\n         */for(var _r2=0;_r2<filterHeight;_r2++){for(var texelC=0;texelC<texelsAcross;texelC++){var _c8=texelC*2;mainLoop+=\"\\n          xR = xRCorner + \".concat(_r2*dilationHeight,\";\\n          xC = xCCorner + \").concat(_c8*dilationWidth,\";\\n        \");if(strideWidth===1){if(_c8<filterWidth){// If padding is odd, the outer texels have to be composed.\nif(padLeft%2===1){// TODO: Ensure vec4 previous does not result in redundant sample,\n// and avoid setting xTexelRC's that exceed the boundary in the\n// first place rather than resetting them to vec4(0)).\n// To compute xCOffset:\n// - If padding is odd, we must add 1 to ensure we ask for an\n// even-numbered row.\n// - We subtract 2 to access the previous texel.\nmainLoop+=\"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \".concat(xNumRows,\" && xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols,\") {\\n                    xTexelR\").concat(_r2,\"C\").concat(_c8,\".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \").concat(xNumRows,\" && xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols,\") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\").concat(_r2,\"C\").concat(_c8,\" = vec4(previous.zw, xTexelR\").concat(_r2,\"C\").concat(_c8,\".xy);\\n                } else {\\n                  xR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0, 0, xTexelR\").concat(_r2,\"C\").concat(_c8,\".xy);\\n                }\\n              \");}else{// Padding is even, so xRC corresponds to a single texel.\nmainLoop+=\"\\n                if(xR >= 0 && xR < \".concat(xNumRows,\" && xC >= 0 && xC < \").concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r2,\"C\").concat(_c8,\" = xTexelR\").concat(_r2,\"C\").concat(_c8,\";\\n              \");}if(_c8+1<filterWidth){// If dilation is even, the second entry should match the first\n// (either both are composed or both are single samples). But if\n// dilation is odd, then the second entry should be the opposite\n// of the first (if the first is composed, the second is a single\n// sample, and vice versa.)\nvar nextTexelOffset=padLeft%2===0?dist[\"util\"].nearestLargerEven(dilationWidth):dilationWidth;if(dilationWidth%2===0&&padLeft%2===1||dilationWidth%2!==0&&padLeft%2!==1){mainLoop+=\"\\n                  xCOffset = xC + \".concat(padLeft%2,\" + \").concat(nextTexelOffset,\";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows,\" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                    xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \");// If dilation > 1 then the xRC's will not be able to share any\n// values, so each xRC will require two unique calls to getX.\nif(dilationWidth>1){mainLoop+=\"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \".concat(xNumRows,\" &&\\n                      xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                      xTexelR\").concat(_r2,\"C\").concat(_c8,\" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0.);\\n                    }\\n                  \");}mainLoop+=\"\\n                  xR\".concat(_r2,\"C\").concat(_c8+1,\" = vec4(\\n                    xTexelR\").concat(_r2,\"C\").concat(_c8,\".zw, xTexelR\").concat(_r2,\"C\").concat(_c8+2,\".xy);\\n                \");}else{mainLoop+=\"\\n                  xCOffset = xC + \".concat(nextTexelOffset,\";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows,\" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                    xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\").concat(_r2,\"C\").concat(_c8+1,\" = xTexelR\").concat(_r2,\"C\").concat(_c8+2,\";\\n                \");}}}}else{// stride > 1\nif(_c8<filterWidth){mainLoop+=\"\\n              if(xR >= 0 && xR < \".concat(xNumRows,\") {\\n            \");// Depending on whether padLeft is even or odd, we want either the\n// xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n// even, xR${r}C${c + 1} is simply the zw channels of texels we've\n// already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n// need to come from the xy channels of a new texel, hence the `vec4\n// final` initialized below.\nif(padLeft%2===1){mainLoop+=\"\\n                xCOffset = xC + 1 - \".concat(strideWidth,\";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \").concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r2,\"C\").concat(_c8,\" = vec4(\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\".zw, xTexelR\").concat(_r2,\"C\").concat(_c8+2,\".zw);\\n              \");if(_c8+1<filterWidth){mainLoop+=\"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \".concat(strideWidth,\";\\n                  if(xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\").concat(_r2,\"C\").concat(_c8+1,\" = vec4(xTexelR\").concat(_r2,\"C\").concat(_c8+2,\".xy, final.xy);\\n                \");}}else{mainLoop+=\"\\n                if(xC >= 0 && xC < \".concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \").concat(strideWidth,\";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols,\") {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8+2,\" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r2,\"C\").concat(_c8,\" = vec4(\\n                  xTexelR\").concat(_r2,\"C\").concat(_c8,\".xy, xTexelR\").concat(_r2,\"C\").concat(_c8+2,\".xy);\\n              \");if(_c8+1<filterWidth){mainLoop+=\"\\n                  xR\".concat(_r2,\"C\").concat(_c8+1,\" = vec4(\\n                    xTexelR\").concat(_r2,\"C\").concat(_c8,\".zw, xTexelR\").concat(_r2,\"C\").concat(_c8+2,\".zw);\\n                \");}}mainLoop+=\"}\";}}if(_c8<filterWidth){mainLoop+=\"\\n            vec4 wTexelR\".concat(_r2,\"C\").concat(_c8,\" = getW(\").concat(_r2,\", \").concat(_c8,\", d1, q);\\n            wR\").concat(_r2,\"C\").concat(_c8,\" = vec4(wTexelR\").concat(_r2,\"C\").concat(_c8,\".xz, wTexelR\").concat(_r2,\"C\").concat(_c8,\".xz);\\n          \");if(_c8+1<filterWidth){mainLoop+=\"\\n              vec4 wTexelR\".concat(_r2,\"C\").concat(_c8+1,\" = getW(\").concat(_r2,\", \").concat(_c8+1,\", d1, q);\\n              wR\").concat(_r2,\"C\").concat(_c8+1,\" =\\n                vec4(wTexelR\").concat(_r2,\"C\").concat(_c8+1,\".xz, wTexelR\").concat(_r2,\"C\").concat(_c8+1,\".xz);\");}}}}for(var _r3=0;_r3<filterHeight;_r3++){for(var _c9=0;_c9<filterWidth;_c9++){mainLoop+=\"dotProd += xR\".concat(_r3,\"C\").concat(_c9,\" * wR\").concat(_r3,\"C\").concat(_c9,\";\");}}var activationSnippet='',applyActivationSnippet='';if(activation){if(hasPreluActivation){activationSnippet=\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation,\"\\n        }\");}else{activationSnippet=\"vec4 activation(vec4 x) {\\n          \".concat(activation,\"\\n        }\");}applyActivationSnippet=\"result = activation(result);\";}var addBiasSnippet=addBias?'result += getBiasAtOutCoords();':'';if(addBias){this.variableNames.push('bias');}if(hasPreluActivation){this.variableNames.push('preluActivationWeights');}this.userCode=\"\\n      \".concat(activationSnippet,\"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec2 pads = ivec2(\").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \").concat(mainLoop,\"\\n\\n        vec4 result = dotProd;\\n        \").concat(addBiasSnippet,\"\\n        \").concat(applyActivationSnippet,\"\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var CropAndResizeProgram=function CropAndResizeProgram(imageShape,boxShape,cropSize,method,extrapolationValue){_classCallCheck2(this,CropAndResizeProgram);this.variableNames=['Image','Boxes','BoxInd'];this.outputShape=[];var _imageShape=_slicedToArray(imageShape,4),batch=_imageShape[0],imageHeight=_imageShape[1],imageWidth=_imageShape[2],depth=_imageShape[3];var _boxShape=_slicedToArray(boxShape,1),numBoxes=_boxShape[0];var _cropSize2=_slicedToArray(cropSize,2),cropHeight=_cropSize2[0],cropWidth=_cropSize2[1];this.outputShape=[numBoxes,cropHeight,cropWidth,depth];var methodId=method==='bilinear'?1:0;var inputHeightFloat=\"\".concat(imageHeight-1,\".0\"),inputWidthFloat=\"\".concat(imageWidth-1,\".0\");var _ref30=cropHeight>1?[\"\".concat((imageHeight-1)/(cropHeight-1)),'(y2-y1) * height_ratio',\"y1*\".concat(inputHeightFloat,\" + float(y)*(height_scale)\")]:['0.0','0.0',\"0.5 * (y1+y2) * \".concat(inputHeightFloat)],_ref31=_slicedToArray(_ref30,3),heightRatio=_ref31[0],heightScale=_ref31[1],inY=_ref31[2];var _ref32=cropWidth>1?[\"\".concat((imageWidth-1)/(cropWidth-1)),'(x2-x1) * width_ratio',\"x1*\".concat(inputWidthFloat,\" + float(x)*(width_scale)\")]:['0.0','0.0',\"0.5 * (x1+x2) * \".concat(inputWidthFloat)],_ref33=_slicedToArray(_ref32,3),widthRatio=_ref33[0],widthScale=_ref33[1],inX=_ref33[2];// Reference implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\nthis.userCode=\"\\n      const float height_ratio = float(\".concat(heightRatio,\");\\n      const float width_ratio = float(\").concat(widthRatio,\");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \").concat(batch,\") {\\n          return;\\n        }\\n\\n        float height_scale = \").concat(heightScale,\";\\n        float width_scale = \").concat(widthScale,\";\\n\\n        float in_y = \").concat(inY,\";\\n        if( in_y < 0.0 || in_y > \").concat(inputHeightFloat,\" ) {\\n          setOutput(float(\").concat(extrapolationValue,\"));\\n          return;\\n        }\\n        float in_x = \").concat(inX,\";\\n        if( in_x < 0.0 || in_x > \").concat(inputWidthFloat,\" ) {\\n          setOutput(float(\").concat(extrapolationValue,\"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\").concat(methodId,\" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var cumsum_gpu_CumSumProgram=function cumsum_gpu_CumSumProgram(shape,exclusive,reverse){_classCallCheck2(this,cumsum_gpu_CumSumProgram);this.variableNames=['x'];this.outputShape=shape;var rank=shape.length;var finalDim=shape[shape.length-1];var comparator=reverse?'<':'>';this.userCode=\"\\n      int getIndex(int i) {\\n        \".concat(reverse?\"return \".concat(finalDim,\" -i - 1;\"):'return i;',\"\\n      }\\n\\n      void main() {\\n        \").concat(getCoordsDataType(rank),\" coords = getOutputCoords();\\n        int end = \").concat(getFinalCoord(rank,'coords'),\";\\n        float val = 0.0;\\n        for (int i = \").concat(finalDim,\" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \").concat(comparator,\" end) {\\n            continue;\\n          }\\n          if (idx == end && \").concat(exclusive,\") {\\n            continue;\\n          }\\n          \").concat(getFinalCoord(rank,'coords'),\" = idx;\\n          val += getX(\").concat(getCoords(rank,'coords'),\");\\n        }\\n        setOutput(val);\\n      }\\n    \");};function getCoords(rank,name){if(rank===1){return\"\".concat(name);}else if(rank===2){return\"\".concat(name,\".x, \").concat(name,\".y\");}else if(rank===3){return\"\".concat(name,\".x, \").concat(name,\".y, \").concat(name,\".z\");}else if(rank===4){return\"\".concat(name,\".x, \").concat(name,\".y, \").concat(name,\".z, \").concat(name,\".w\");}else{throw Error(\"Cumulative sum for rank \".concat(rank,\" is not yet supported\"));}}function getFinalCoord(rank,name){if(rank===1){return\"\".concat(name);}else if(rank===2){return\"\".concat(name,\".y\");}else if(rank===3){return\"\".concat(name,\".z\");}else if(rank===4){return\"\".concat(name,\".w\");}else{throw Error(\"Cumulative sum for rank \".concat(rank,\" is not yet supported\"));}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var decode_matrix_gpu_DecodeMatrixProgram=function decode_matrix_gpu_DecodeMatrixProgram(outputShape){_classCallCheck2(this,decode_matrix_gpu_DecodeMatrixProgram);this.variableNames=['A'];this.packedInputs=false;this.packedOutput=true;this.outPackingScheme=PackingScheme.DENSE;var texShape=getDenseTexShape(outputShape);var glsl=getGlslDifferences();this.outputShape=outputShape;this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \".concat(getLogicalCoordinatesFromFlatIndex(['r','c','d'],outputShape),\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\").concat(texShape[0],\", \").concat(texShape[1],\"));\\n        int index = 4 * (resTexRC.x * \").concat(texShape[1],\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \").concat(glsl.output,\" = result;\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var decode_matrix_packed_gpu_DecodeMatrixPackedProgram=function decode_matrix_packed_gpu_DecodeMatrixPackedProgram(outputShape){_classCallCheck2(this,decode_matrix_packed_gpu_DecodeMatrixPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outPackingScheme=PackingScheme.DENSE;var texShape=getDenseTexShape(outputShape);var glsl=getGlslDifferences();this.outputShape=outputShape;this.userCode=\"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \".concat(getLogicalCoordinatesFromFlatIndex(['r','c','d'],outputShape),\"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\").concat(texShape[0],\", \").concat(texShape[1],\"));\\n        int index = 4 * (resTexRC.x * \").concat(texShape[1],\" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \").concat(glsl.output,\" = result;\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var DepthToSpaceProgram=/*#__PURE__*/function(){function DepthToSpaceProgram(outputShape,blockSize,dataFormat){_classCallCheck2(this,DepthToSpaceProgram);this.variableNames=['x'];this.outputShape=[];this.outputShape=outputShape;this.blockSize=blockSize;this.dataFormat=dataFormat;this.userCode=\"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \".concat(this.getHeightCoordString(),\";\\n      int w = \").concat(this.getWidthCoordString(),\";\\n      int d = \").concat(this.getDepthCoordString(),\";\\n\\n      int in_h = h / \").concat(blockSize,\";\\n      int offset_h = imod(h, \").concat(blockSize,\");\\n      int in_w = w / \").concat(blockSize,\";\\n      int offset_w = imod(w, \").concat(blockSize,\");\\n      int offset_d = (offset_h * \").concat(blockSize,\" + offset_w) *\\n        \").concat(this.getOutputDepthSize(),\";\\n      int in_d = d + offset_d;\\n\\n      float result = \").concat(this.getInputSamplingString(),\";\\n      setOutput(result);\\n    }\\n  \");}_createClass(DepthToSpaceProgram,[{key:\"getHeightCoordString\",value:function getHeightCoordString(){if(this.dataFormat==='NHWC'){return\"coords[1]\";}else{return\"coords[2]\";}}},{key:\"getWidthCoordString\",value:function getWidthCoordString(){if(this.dataFormat==='NHWC'){return\"coords[2]\";}else{return\"coords[3]\";}}},{key:\"getDepthCoordString\",value:function getDepthCoordString(){if(this.dataFormat==='NHWC'){return\"coords[3]\";}else{return\"coords[1]\";}}},{key:\"getOutputDepthSize\",value:function getOutputDepthSize(){if(this.dataFormat==='NHWC'){return this.outputShape[3];}else{return this.outputShape[1];}}},{key:\"getInputSamplingString\",value:function getInputSamplingString(){if(this.dataFormat==='NHWC'){return\"getX(b, in_h, in_w, in_d)\";}else{return\"getX(b, in_d, in_h, in_w)\";}}}]);return DepthToSpaceProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var DiagProgram=function DiagProgram(size){_classCallCheck2(this,DiagProgram);this.variableNames=['X'];this.outputShape=[size,size];this.userCode=\"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \";};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var encode_float_gpu_EncodeFloatProgram=function encode_float_gpu_EncodeFloatProgram(outputShape){_classCallCheck2(this,encode_float_gpu_EncodeFloatProgram);this.variableNames=['A'];this.outTexUsage=TextureUsage.DOWNLOAD;var glsl=getGlslDifferences();this.outputShape=outputShape;this.userCode=\"\\n      \".concat(ENCODE_FLOAT_SNIPPET,\"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \").concat(glsl.output,\" = encode_float(x);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var encode_float_packed_gpu_EncodeFloatPackedProgram=function encode_float_packed_gpu_EncodeFloatPackedProgram(outputShape){_classCallCheck2(this,encode_float_packed_gpu_EncodeFloatPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=false;this.outTexUsage=TextureUsage.DOWNLOAD;var glsl=getGlslDifferences();this.outputShape=outputShape;this.userCode=\"\\n      \".concat(ENCODE_FLOAT_SNIPPET,\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \").concat(glsl.output,\" = encode_float(x);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var encode_matrix_gpu_EncodeMatrixProgram=function encode_matrix_gpu_EncodeMatrixProgram(outputShape,texShape){var inputIsUnsignedByte=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck2(this,encode_matrix_gpu_EncodeMatrixProgram);this.variableNames=['A'];var glsl=getGlslDifferences();var _texShape=_slicedToArray(texShape,2),height=_texShape[0],width=_texShape[1];this.outputShape=outputShape;var output=\"result\";if(inputIsUnsignedByte){output=\"floor(result * 255. + 0.5)\";}this.userCode=\"\\n      \".concat(getFlatIndexFrom3D(outputShape),\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \").concat(width,\";\\n        int c = imod(flatIndex, \").concat(width,\");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\").concat(width,\".0, \").concat(height,\".0);\\n        vec4 values = \").concat(glsl.texture2D,\"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \").concat(glsl.output,\" = vec4(\").concat(output,\", 0., 0., 0.);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /*\r\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\r\n(indices are [batch, row, col]).\r\n\r\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n-------   -------   -------   -------   -------   -------\r\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n-------   -------   -------   -------   -------   -------\r\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\nSingle texels contain only values from the same batch, and from adjacent rows\r\nand columns.\r\n */var encode_matrix_packed_gpu_EncodeMatrixPackedProgram=function encode_matrix_packed_gpu_EncodeMatrixPackedProgram(outputShape,texShape){var inputIsUnsignedByte=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck2(this,encode_matrix_packed_gpu_EncodeMatrixPackedProgram);this.variableNames=['A'];this.packedInputs=false;this.packedOutput=true;var glsl=getGlslDifferences();var _texShape2=_slicedToArray(texShape,2),height=_texShape2[0],width=_texShape2[1];this.outputShape=outputShape;var mainLoop='';var output='result';if(inputIsUnsignedByte){output='floor(result * 255. + 0.5)';}for(var row=0;row<=1;row++){for(var col=0;col<=1;col++){var channel=row*2+col;mainLoop+=\"\\n          localCoords = coords;\\n          if(localCoords[2] + \".concat(col,\" < \").concat(outputShape[2],\") {\\n            localCoords[2] += \").concat(col,\";\\n            if(localCoords[1] + \").concat(row,\" < \").concat(outputShape[1],\") {\\n              localCoords[1] += \").concat(row,\";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \").concat(width,\";\\n              c = imod(flatIndex, \").concat(width,\");\\n              uv = (vec2(c, r) + halfCR) / vec2(\").concat(width,\".0, \").concat(height,\".0);\\n              values = \").concat(glsl.texture2D,\"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\").concat(channel,\"] = values[0];\\n              } else if(offset == 1) {\\n                result[\").concat(channel,\"] = values[1];\\n              } else if(offset == 2) {\\n                result[\").concat(channel,\"] = values[2];\\n              } else {\\n                result[\").concat(channel,\"] = values[3];\\n              }\\n            }\\n          }\\n        \");}}this.userCode=\"\\n      \".concat(getFlatIndexFrom3D(outputShape),\"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \").concat(mainLoop,\"\\n\\n        \").concat(glsl.output,\" = \").concat(output,\";\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var COMPLEX_FFT={REAL:'return real * expR - imag * expI;',IMAG:'return real * expI + imag * expR;'};var FFTProgram=function FFTProgram(op,inputShape,inverse){_classCallCheck2(this,FFTProgram);this.variableNames=['real','imag'];var innerDim=inputShape[1];this.outputShape=inputShape;var exponentMultiplierSnippet=inverse?\"2.0 * \".concat(Math.PI):\"-2.0 * \".concat(Math.PI);var resultDenominator=inverse?\"\".concat(innerDim,\".0\"):'1.0';this.userCode=\"\\n      const float exponentMultiplier = \".concat(exponentMultiplierSnippet,\";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \").concat(op,\"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\").concat(innerDim,\");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \").concat(innerDim,\"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \").concat(resultDenominator,\";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var FillProgram=/*#__PURE__*/function(){function FillProgram(shape,value){_classCallCheck2(this,FillProgram);this.outputShape=[];this.variableNames=['x'];this.outputShape=shape;this.userCode=\"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \";}_createClass(FillProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(value){var _this91=this;return function(gpgpu,webGLProgram){if(_this91.valueLoc==null){_this91.valueLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'value');}gpgpu.gl.uniform1f(_this91.valueLoc,value);};}}]);return FillProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var gather_gpu_GatherProgram=function gather_gpu_GatherProgram(aShape,indicesLength,axis){_classCallCheck2(this,gather_gpu_GatherProgram);this.variableNames=['A','indices'];var outputShape=aShape.slice();outputShape[axis]=indicesLength;this.outputShape=outputShape;this.rank=outputShape.length;var dtype=getCoordsDataType(this.rank);var sourceCoords=gather_gpu_getSourceCoords(aShape,axis);this.userCode=\"\\n      void main() {\\n        \".concat(dtype,\" resRC = getOutputCoords();\\n        setOutput(getA(\").concat(sourceCoords,\"));\\n      }\\n    \");};function gather_gpu_getSourceCoords(aShape,axis){var rank=aShape.length;if(rank>4){throw Error(\"Gather for rank \".concat(rank,\" is not yet supported\"));}if(rank===1){return\"int(getIndices(resRC))\";}var currentCoords=['resRC.x','resRC.y','resRC.z','resRC.w'];var sourceCoords=[];for(var i=0;i<aShape.length;i++){if(i===axis){sourceCoords.push(\"int(getIndices(\".concat(currentCoords[i],\"))\"));}else{sourceCoords.push(\"\".concat(currentCoords[i]));}}return sourceCoords.join();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js\nvar gather_nd_gpu_GatherNDProgram=function gather_nd_gpu_GatherNDProgram(sliceDim,strides,shape){_classCallCheck2(this,gather_nd_gpu_GatherNDProgram);this.sliceDim=sliceDim;this.strides=strides;this.variableNames=['x','indices'];this.outputShape=shape;var stridesType=getCoordsDataType(strides.length);var dtype=getCoordsDataType(shape.length);var strideString=this.sliceDim>1?'strides[j]':'strides';this.userCode=\"\\n        \".concat(stridesType,\" strides = \").concat(stridesType,\"(\").concat(this.strides,\");\\n         void main() {\\n          \").concat(dtype,\" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \").concat(this.sliceDim,\"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \").concat(strideString,\";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function gpgpu_util_createVertexShader(gl,debug){var glsl=getGlslDifferences();var vertexShaderSource=\"\".concat(glsl.version,\"\\n    precision highp float;\\n    \").concat(glsl.attribute,\" vec3 clipSpacePos;\\n    \").concat(glsl.attribute,\" vec2 uv;\\n    \").concat(glsl.varyingVs,\" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");return createVertexShader(gl,debug,vertexShaderSource);}function createVertexBuffer(gl,debug){// [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\nvar vertexArray=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return createStaticVertexBuffer(gl,debug,vertexArray);}function createIndexBuffer(gl,debug){// OpenGL (and WebGL) have \"CCW == front\" winding\nvar triangleVertexIndices=new Uint16Array([0,1,2,2,1,3]);return createStaticIndexBuffer(gl,debug,triangleVertexIndices);}function createAndConfigureTexture(gl,debug,width,height,internalFormat,textureFormat,textureType){validateTextureSize(width,height);var texture=createTexture(gl,debug);var tex2d=gl.TEXTURE_2D;callAndCheck(gl,debug,function(){return gl.bindTexture(tex2d,texture);});callAndCheck(gl,debug,function(){return gl.texParameteri(tex2d,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);});callAndCheck(gl,debug,function(){return gl.texParameteri(tex2d,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);});callAndCheck(gl,debug,function(){return gl.texParameteri(tex2d,gl.TEXTURE_MIN_FILTER,gl.NEAREST);});callAndCheck(gl,debug,function(){return gl.texParameteri(tex2d,gl.TEXTURE_MAG_FILTER,gl.NEAREST);});callAndCheck(gl,debug,function(){return gl.texImage2D(tex2d,0,internalFormat,width,height,0,textureFormat,textureType,null);});callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,null);});return texture;}function _createFloat32MatrixTexture(gl,debug,rows,columns,textureConfig){var _getUnpackedMatrixTex=getUnpackedMatrixTextureShapeWidthHeight(rows,columns),_getUnpackedMatrixTex2=_slicedToArray(_getUnpackedMatrixTex,2),width=_getUnpackedMatrixTex2[0],height=_getUnpackedMatrixTex2[1];return createAndConfigureTexture(gl,debug,width,height,textureConfig.internalFormatFloat,textureConfig.textureFormatFloat,gl.FLOAT);}function _createFloat16MatrixTexture(gl,debug,rows,columns,textureConfig){var _getUnpackedMatrixTex3=getUnpackedMatrixTextureShapeWidthHeight(rows,columns),_getUnpackedMatrixTex4=_slicedToArray(_getUnpackedMatrixTex3,2),width=_getUnpackedMatrixTex4[0],height=_getUnpackedMatrixTex4[1];return createAndConfigureTexture(gl,debug,width,height,textureConfig.internalFormatHalfFloat,textureConfig.textureFormatFloat,textureConfig.textureTypeHalfFloat);}function _createUnsignedBytesMatrixTexture(gl,debug,rows,columns,textureConfig){var _getUnpackedMatrixTex5=getUnpackedMatrixTextureShapeWidthHeight(rows,columns),_getUnpackedMatrixTex6=_slicedToArray(_getUnpackedMatrixTex5,2),width=_getUnpackedMatrixTex6[0],height=_getUnpackedMatrixTex6[1];return createAndConfigureTexture(gl,debug,width,height,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE);}function _createPackedMatrixTexture(gl,debug,rows,columns,textureConfig){var _getPackedMatrixTextu3=getPackedMatrixTextureShapeWidthHeight(rows,columns),_getPackedMatrixTextu4=_slicedToArray(_getPackedMatrixTextu3,2),width=_getPackedMatrixTextu4[0],height=_getPackedMatrixTextu4[1];return createAndConfigureTexture(gl,debug,width,height,textureConfig.internalFormatPackedFloat,gl.RGBA,gl.FLOAT);}function _createFloat16PackedMatrixTexture(gl,debug,rows,columns,textureConfig){var _getPackedMatrixTextu5=getPackedMatrixTextureShapeWidthHeight(rows,columns),_getPackedMatrixTextu6=_slicedToArray(_getPackedMatrixTextu5,2),width=_getPackedMatrixTextu6[0],height=_getPackedMatrixTextu6[1];return createAndConfigureTexture(gl,debug,width,height,textureConfig.internalFormatPackedHalfFloat,gl.RGBA,textureConfig.textureTypeHalfFloat);}function bindVertexProgramAttributeStreams(gl,debug,program,vertexBuffer){var posOffset=0;// x is the first buffer element\nvar uvOffset=3*4;// uv comes after [x y z]\nvar stride=3*4+2*4;// xyz + uv, each entry is 4-byte float.\ncallAndCheck(gl,debug,function(){return gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);});var success=bindVertexBufferToProgramAttribute(gl,debug,program,'clipSpacePos',vertexBuffer,3,stride,posOffset);return success&&bindVertexBufferToProgramAttribute(gl,debug,program,'uv',vertexBuffer,2,stride,uvOffset);}function _uploadDenseMatrixToTexture(gl,debug,texture,width,height,data,textureConfig){callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,texture);});var dataForUpload,texelDataType,internalFormat;if(data instanceof Uint8Array){dataForUpload=new Uint8Array(width*height*4);texelDataType=gl.UNSIGNED_BYTE;internalFormat=gl.RGBA;}else{dataForUpload=new Float32Array(width*height*4);texelDataType=gl.FLOAT;internalFormat=textureConfig.internalFormatPackedFloat;}dataForUpload.set(data);callAndCheck(gl,debug,function(){return gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,width,height,0,gl.RGBA,texelDataType,dataForUpload);});callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,null);});}function _uploadPixelDataToTexture(gl,debug,texture,pixels){callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,texture);});if(pixels.data instanceof Uint8Array){callAndCheck(gl,debug,function(){return gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,pixels.width,pixels.height,0,gl.RGBA,gl.UNSIGNED_BYTE,pixels.data);});}else{callAndCheck(gl,debug,function(){return gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,pixels);});}callAndCheck(gl,debug,function(){return gl.bindTexture(gl.TEXTURE_2D,null);});}function createBufferFromOutputTexture(gl2,debug,rows,columns,textureConfig){// Create and bind the buffer.\nvar buffer=gl2.createBuffer();callAndCheck(gl2,debug,function(){return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,buffer);});// Initialize the buffer to the size of the texture in bytes.\nvar bytesPerFloat=4;var valuesPerTexel=4;var bufferSizeBytes=bytesPerFloat*valuesPerTexel*rows*columns;callAndCheck(gl2,debug,function(){return gl2.bufferData(gl2.PIXEL_PACK_BUFFER,bufferSizeBytes,gl2.STREAM_READ);});// Enqueue a command on the GPU command queue to copy of texture into the\n// buffer.\ncallAndCheck(gl2,debug,function(){return gl2.readPixels(0,0,columns,rows,gl2.RGBA,gl2.FLOAT,0);});callAndCheck(gl2,debug,function(){return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,null);});return buffer;}function _downloadFloat32MatrixFromBuffer(gl,buffer,size){var gl2=gl;var downloadTarget=new Float32Array(size);gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,buffer);gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER,0,downloadTarget);gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,null);return downloadTarget;}function _downloadByteEncodedFloatMatrixFromOutputTexture(gl,debug,rows,columns,textureConfig){var _getUnpackedMatrixTex7=getUnpackedMatrixTextureShapeWidthHeight(rows,columns),_getUnpackedMatrixTex8=_slicedToArray(_getUnpackedMatrixTex7,2),w=_getUnpackedMatrixTex8[0],h=_getUnpackedMatrixTex8[1];var numChannels=4;var downloadTarget=new Uint8Array(getUnpackedArraySizeFromMatrixSize(rows*columns,numChannels));callAndCheck(gl,debug,function(){return gl.readPixels(0,0,w,h,textureConfig.downloadTextureFormat,gl.UNSIGNED_BYTE,downloadTarget);});// By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n// decoding of the 4 bytes that back each 32 bit float.\nreturn new Float32Array(downloadTarget.buffer);}function _downloadPackedMatrixFromBuffer(gl,buffer,batch,rows,cols,physicalRows,physicalCols,textureConfig){var gl2=gl;var downloadTarget=new Float32Array(getPackedRGBAArraySizeFromMatrixShape(physicalRows,physicalCols));gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,buffer);gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER,0,downloadTarget);gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER,null);return downloadTarget;}function downloadMatrixFromPackedOutputTexture(gl,debug,physicalRows,physicalCols){var packedRGBA=new Float32Array(physicalRows*physicalCols*4);callAndCheck(gl,debug,function(){return gl.readPixels(0,0,physicalCols,physicalRows,gl.RGBA,gl.FLOAT,packedRGBA);});return packedRGBA;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var gpgpu_context_GPGPUContext=/*#__PURE__*/function(){function gpgpu_context_GPGPUContext(gl){_classCallCheck2(this,gpgpu_context_GPGPUContext);this.outputTexture=null;this.program=null;this.disposed=false;this.vertexAttrsAreBound=false;this.itemsToPoll=[];var glVersion=Object(dist[\"env\"])().getNumber('WEBGL_VERSION');if(gl!=null){this.gl=gl;setWebGLContext(glVersion,gl);}else{this.gl=getWebGLContext(glVersion);}// WebGL 2.0 enables texture floats without an extension.\nvar COLOR_BUFFER_FLOAT='WEBGL_color_buffer_float';var COLOR_BUFFER_HALF_FLOAT='EXT_color_buffer_half_float';if(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===1){var TEXTURE_FLOAT='OES_texture_float';var TEXTURE_HALF_FLOAT='OES_texture_half_float';this.textureFloatExtension=getExtensionOrThrow(this.gl,this.debug,TEXTURE_FLOAT);if(hasExtension(this.gl,TEXTURE_HALF_FLOAT)){this.textureHalfFloatExtension=getExtensionOrThrow(this.gl,this.debug,TEXTURE_HALF_FLOAT);}else if(Object(dist[\"env\"])().get('WEBGL_FORCE_F16_TEXTURES')){throw new Error('GL context does not support half float textures, yet the '+'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');}this.colorBufferFloatExtension=this.gl.getExtension(COLOR_BUFFER_FLOAT);if(hasExtension(this.gl,COLOR_BUFFER_HALF_FLOAT)){this.colorBufferHalfFloatExtension=getExtensionOrThrow(this.gl,this.debug,COLOR_BUFFER_HALF_FLOAT);}else if(Object(dist[\"env\"])().get('WEBGL_FORCE_F16_TEXTURES')){throw new Error('GL context does not support color renderable half floats, yet '+'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');}}else{COLOR_BUFFER_FLOAT='EXT_color_buffer_float';if(hasExtension(this.gl,COLOR_BUFFER_FLOAT)){this.colorBufferFloatExtension=this.gl.getExtension(COLOR_BUFFER_FLOAT);}else if(hasExtension(this.gl,COLOR_BUFFER_HALF_FLOAT)){this.colorBufferHalfFloatExtension=this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);}else{throw new Error('GL context does not support color renderable floats');}}this.vertexBuffer=createVertexBuffer(this.gl,this.debug);this.indexBuffer=createIndexBuffer(this.gl,this.debug);this.framebuffer=createFramebuffer(this.gl,this.debug);this.textureConfig=getTextureConfig(this.gl,this.textureHalfFloatExtension);}_createClass(gpgpu_context_GPGPUContext,[{key:\"debug\",get:function get(){return Object(dist[\"env\"])().getBool('DEBUG');}},{key:\"dispose\",value:function dispose(){var _this92=this;if(this.disposed){return;}if(this.program!=null){console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.'+' This is probably a resource leak, delete the program with '+'GPGPUContext.deleteProgram before disposing.');}if(this.outputTexture!=null){console.warn('Disposing a GPGPUContext that still has a bound output matrix '+'texture.  This is probably a resource leak, delete the output '+'matrix texture with GPGPUContext.deleteMatrixTexture before '+'disposing.');}var gl=this.gl;callAndCheck(gl,this.debug,function(){return gl.finish();});callAndCheck(gl,this.debug,function(){return gl.bindFramebuffer(gl.FRAMEBUFFER,null);});callAndCheck(gl,this.debug,function(){return gl.deleteFramebuffer(_this92.framebuffer);});callAndCheck(gl,this.debug,function(){return gl.bindBuffer(gl.ARRAY_BUFFER,null);});callAndCheck(gl,this.debug,function(){return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);});callAndCheck(gl,this.debug,function(){return gl.deleteBuffer(_this92.indexBuffer);});this.disposed=true;}},{key:\"createFloat32MatrixTexture\",value:function createFloat32MatrixTexture(rows,columns){this.throwIfDisposed();return _createFloat32MatrixTexture(this.gl,this.debug,rows,columns,this.textureConfig);}},{key:\"createFloat16MatrixTexture\",value:function createFloat16MatrixTexture(rows,columns){this.throwIfDisposed();return _createFloat16MatrixTexture(this.gl,this.debug,rows,columns,this.textureConfig);}},{key:\"createUnsignedBytesMatrixTexture\",value:function createUnsignedBytesMatrixTexture(rows,columns){this.throwIfDisposed();return _createUnsignedBytesMatrixTexture(this.gl,this.debug,rows,columns,this.textureConfig);}},{key:\"uploadPixelDataToTexture\",value:function uploadPixelDataToTexture(texture,pixels){this.throwIfDisposed();_uploadPixelDataToTexture(this.gl,this.debug,texture,pixels);}},{key:\"uploadDenseMatrixToTexture\",value:function uploadDenseMatrixToTexture(texture,width,height,data){this.throwIfDisposed();_uploadDenseMatrixToTexture(this.gl,this.debug,texture,width,height,data,this.textureConfig);}},{key:\"createFloat16PackedMatrixTexture\",value:function createFloat16PackedMatrixTexture(rows,columns){this.throwIfDisposed();return _createFloat16PackedMatrixTexture(this.gl,this.debug,rows,columns,this.textureConfig);}},{key:\"createPackedMatrixTexture\",value:function createPackedMatrixTexture(rows,columns){this.throwIfDisposed();return _createPackedMatrixTexture(this.gl,this.debug,rows,columns,this.textureConfig);}},{key:\"deleteMatrixTexture\",value:function deleteMatrixTexture(texture){var _this93=this;this.throwIfDisposed();if(this.outputTexture===texture){unbindColorTextureFromFramebuffer(this.gl,this.debug,this.framebuffer);this.outputTexture=null;}callAndCheck(this.gl,this.debug,function(){return _this93.gl.deleteTexture(texture);});}},{key:\"downloadByteEncodedFloatMatrixFromOutputTexture\",value:function downloadByteEncodedFloatMatrixFromOutputTexture(texture,rows,columns){var _this94=this;return this.downloadMatrixDriver(texture,function(){return _downloadByteEncodedFloatMatrixFromOutputTexture(_this94.gl,_this94.debug,rows,columns,_this94.textureConfig);});}},{key:\"downloadPackedMatrixFromBuffer\",value:function downloadPackedMatrixFromBuffer(buffer,batch,rows,columns,physicalRows,physicalCols){return _downloadPackedMatrixFromBuffer(this.gl,buffer,batch,rows,columns,physicalRows,physicalCols,this.textureConfig);}},{key:\"downloadFloat32MatrixFromBuffer\",value:function downloadFloat32MatrixFromBuffer(buffer,size){return _downloadFloat32MatrixFromBuffer(this.gl,buffer,size);}},{key:\"createBufferFromTexture\",value:function createBufferFromTexture(texture,rows,columns){this.bindTextureToFrameBuffer(texture);var result=createBufferFromOutputTexture(this.gl,this.debug,rows,columns,this.textureConfig);this.unbindTextureToFrameBuffer();return result;}},{key:\"createAndWaitForFence\",value:function createAndWaitForFence(){var fenceContext=this.createFence(this.gl);return this.pollFence(fenceContext);}},{key:\"createFence\",value:function createFence(gl){var _this95=this;var query;var isFencePassed;if(Object(dist[\"env\"])().getBool('WEBGL_FENCE_API_ENABLED')){var gl2=gl;var sync=gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE,0);gl.flush();isFencePassed=function isFencePassed(){var status=gl2.clientWaitSync(sync,0,0);return status===gl2.ALREADY_SIGNALED||status===gl2.CONDITION_SATISFIED;};query=sync;}else if(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')>0){query=this.beginQuery();this.endQuery();isFencePassed=function isFencePassed(){return _this95.isQueryAvailable(query,Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));};}else{// If we have no way to fence, return true immediately. This will fire in\n// WebGL 1.0 when there is no disjoint query timer. In this case, because\n// the fence passes immediately, we'll immediately ask for a download of\n// the texture, which will cause the UI thread to hang.\nisFencePassed=function isFencePassed(){return true;};}return{query:query,isFencePassed:isFencePassed};}},{key:\"downloadMatrixFromPackedTexture\",value:function downloadMatrixFromPackedTexture(texture,physicalRows,physicalCols){var _this96=this;return this.downloadMatrixDriver(texture,function(){return downloadMatrixFromPackedOutputTexture(_this96.gl,_this96.debug,physicalRows,physicalCols);});}},{key:\"createProgram\",value:function createProgram(fragmentShaderSource){this.throwIfDisposed();var gl=this.gl;var fragmentShader=createFragmentShader(gl,this.debug,fragmentShaderSource);var vertexShader=gpgpu_util_createVertexShader(gl,this.debug);var program=_createProgram(gl,this.debug);callAndCheck(gl,this.debug,function(){return gl.attachShader(program,vertexShader);});callAndCheck(gl,this.debug,function(){return gl.attachShader(program,fragmentShader);});linkProgram(gl,this.debug,program);if(this.debug){validateProgram(gl,this.debug,program);}if(!this.vertexAttrsAreBound){this.setProgram(program);this.vertexAttrsAreBound=bindVertexProgramAttributeStreams(gl,this.debug,this.program,this.vertexBuffer);}return program;}},{key:\"deleteProgram\",value:function deleteProgram(program){var _this97=this;this.throwIfDisposed();if(program===this.program){this.program=null;}if(program!=null){callAndCheck(this.gl,this.debug,function(){return _this97.gl.deleteProgram(program);});}}},{key:\"setProgram\",value:function setProgram(program){var _this98=this;this.throwIfDisposed();this.program=program;if(this.program!=null&&this.debug){validateProgram(this.gl,this.debug,this.program);}callAndCheck(this.gl,this.debug,function(){return _this98.gl.useProgram(program);});}},{key:\"getUniformLocation\",value:function getUniformLocation(program,uniformName){var shouldThrow=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;this.throwIfDisposed();if(shouldThrow){return getProgramUniformLocationOrThrow(this.gl,this.debug,program,uniformName);}else{return getProgramUniformLocation(this.gl,program,uniformName);}}},{key:\"getAttributeLocation\",value:function getAttributeLocation(program,attribute){var _this99=this;this.throwIfDisposed();return callAndCheck(this.gl,this.debug,function(){return _this99.gl.getAttribLocation(program,attribute);});}},{key:\"getUniformLocationNoThrow\",value:function getUniformLocationNoThrow(program,uniformName){this.throwIfDisposed();return this.gl.getUniformLocation(program,uniformName);}},{key:\"setInputMatrixTexture\",value:function setInputMatrixTexture(inputMatrixTexture,uniformLocation,textureUnit){this.throwIfDisposed();this.throwIfNoProgram();bindTextureToProgramUniformSampler(this.gl,this.debug,this.program,inputMatrixTexture,uniformLocation,textureUnit);}},{key:\"setOutputMatrixTexture\",value:function setOutputMatrixTexture(outputMatrixTexture,rows,columns){this.setOutputMatrixTextureDriver(outputMatrixTexture,columns,rows);}},{key:\"setOutputPackedMatrixTexture\",value:function setOutputPackedMatrixTexture(outputPackedMatrixTexture,rows,columns){this.throwIfDisposed();var _getPackedMatrixTextu7=getPackedMatrixTextureShapeWidthHeight(rows,columns),_getPackedMatrixTextu8=_slicedToArray(_getPackedMatrixTextu7,2),width=_getPackedMatrixTextu8[0],height=_getPackedMatrixTextu8[1];this.setOutputMatrixTextureDriver(outputPackedMatrixTexture,width,height);}},{key:\"setOutputMatrixWriteRegion\",value:function setOutputMatrixWriteRegion(startRow,numRows,startColumn,numColumns){this.setOutputMatrixWriteRegionDriver(startColumn,startRow,numColumns,numRows);}},{key:\"setOutputPackedMatrixWriteRegion\",value:function setOutputPackedMatrixWriteRegion(startRow,numRows,startColumn,numColumns){throw new Error('setOutputPackedMatrixWriteRegion not implemented.');}},{key:\"debugValidate\",value:function debugValidate(){if(this.program!=null){validateProgram(this.gl,this.debug,this.program);}validateFramebuffer(this.gl);}},{key:\"executeProgram\",value:function executeProgram(){this.throwIfDisposed();this.throwIfNoProgram();var gl=this.gl;if(this.debug){this.debugValidate();}callAndCheck(gl,this.debug,function(){return gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0);});}},{key:\"blockUntilAllProgramsCompleted\",value:function blockUntilAllProgramsCompleted(){var _this100=this;this.throwIfDisposed();callAndCheck(this.gl,this.debug,function(){return _this100.gl.finish();});}},{key:\"getQueryTimerExtension\",value:function getQueryTimerExtension(){if(this.disjointQueryTimerExtension==null){this.disjointQueryTimerExtension=getExtensionOrThrow(this.gl,this.debug,Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')===2?'EXT_disjoint_timer_query_webgl2':'EXT_disjoint_timer_query');}return this.disjointQueryTimerExtension;}},{key:\"getQueryTimerExtensionWebGL2\",value:function getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension();}},{key:\"getQueryTimerExtensionWebGL1\",value:function getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension();}},{key:\"beginQuery\",value:function beginQuery(){if(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')===2){var gl2=this.gl;var _ext=this.getQueryTimerExtensionWebGL2();var _query=gl2.createQuery();gl2.beginQuery(_ext.TIME_ELAPSED_EXT,_query);return _query;}var ext=this.getQueryTimerExtensionWebGL1();var query=ext.createQueryEXT();ext.beginQueryEXT(ext.TIME_ELAPSED_EXT,query);return query;}},{key:\"endQuery\",value:function endQuery(){if(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')===2){var gl2=this.gl;var _ext2=this.getQueryTimerExtensionWebGL2();gl2.endQuery(_ext2.TIME_ELAPSED_EXT);return;}var ext=this.getQueryTimerExtensionWebGL1();ext.endQueryEXT(ext.TIME_ELAPSED_EXT);}},{key:\"waitForQueryAndGetTime\",value:function(){var _waitForQueryAndGetTime=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee120(query){var _this101=this;return regeneratorRuntime.wrap(function _callee120$(_context120){while(1){switch(_context120.prev=_context120.next){case 0:_context120.next=2;return dist[\"util\"].repeatedTry(function(){return _this101.disposed||// while testing contexts are created / disposed\n// in rapid succession, so without this check we\n// may poll for the query timer indefinitely\n_this101.isQueryAvailable(query,Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));});case 2:return _context120.abrupt(\"return\",this.getQueryTime(query,Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));case 3:case\"end\":return _context120.stop();}}},_callee120,this);}));function waitForQueryAndGetTime(_x108){return _waitForQueryAndGetTime.apply(this,arguments);}return waitForQueryAndGetTime;}()},{key:\"getQueryTime\",value:function getQueryTime(query,queryTimerVersion){if(queryTimerVersion===0){return null;}if(queryTimerVersion===2){var gl2=this.gl;var timeElapsedNanos=gl2.getQueryParameter(query,gl2.QUERY_RESULT);// Return milliseconds.\nreturn timeElapsedNanos/1000000;}else{var ext=this.getQueryTimerExtensionWebGL1();var _timeElapsedNanos=ext.getQueryObjectEXT(query,ext.QUERY_RESULT_EXT);// Return milliseconds.\nreturn _timeElapsedNanos/1000000;}}},{key:\"isQueryAvailable\",value:function isQueryAvailable(query,queryTimerVersion){if(queryTimerVersion===0){return true;}if(queryTimerVersion===2){var gl2=this.gl;var ext=this.getQueryTimerExtensionWebGL2();var available=gl2.getQueryParameter(query,gl2.QUERY_RESULT_AVAILABLE);if(this.disjoint==null){this.disjoint=this.gl.getParameter(ext.GPU_DISJOINT_EXT);}return available&&!this.disjoint;}else{var _ext3=this.getQueryTimerExtensionWebGL1();var _available=_ext3.getQueryObjectEXT(query,_ext3.QUERY_RESULT_AVAILABLE_EXT);if(this.disjoint==null){this.disjoint=this.gl.getParameter(_ext3.GPU_DISJOINT_EXT);}return _available&&!this.disjoint;}}},{key:\"pollFence\",value:function pollFence(fenceContext){var _this102=this;return new Promise(function(resolve){_this102.addItemToPoll(function(){return fenceContext.isFencePassed();},function(){return resolve();});});}},{key:\"pollItems\",value:function pollItems(){// Find the last query that has finished.\nvar index=linearSearchLastTrue(this.itemsToPoll.map(function(x){return x.isDoneFn;}));for(var i=0;i<=index;++i){var resolveFn=this.itemsToPoll[i].resolveFn;resolveFn();}this.itemsToPoll=this.itemsToPoll.slice(index+1);}},{key:\"addItemToPoll\",value:function addItemToPoll(isDoneFn,resolveFn){var _this103=this;this.itemsToPoll.push({isDoneFn:isDoneFn,resolveFn:resolveFn});if(this.itemsToPoll.length>1){// We already have a running loop that polls.\nreturn;}// Start a new loop that polls.\ndist[\"util\"].repeatedTry(function(){_this103.pollItems();// End the loop if no more items to poll.\nreturn _this103.itemsToPoll.length===0;});}},{key:\"bindTextureToFrameBuffer\",value:function bindTextureToFrameBuffer(texture){this.throwIfDisposed();bindColorTextureToFramebuffer(this.gl,this.debug,texture,this.framebuffer);if(this.debug){validateFramebuffer(this.gl);}}},{key:\"unbindTextureToFrameBuffer\",value:function unbindTextureToFrameBuffer(){if(this.outputTexture!=null){bindColorTextureToFramebuffer(this.gl,this.debug,this.outputTexture,this.framebuffer);if(this.debug){validateFramebuffer(this.gl);}}else{unbindColorTextureFromFramebuffer(this.gl,this.debug,this.framebuffer);}}},{key:\"downloadMatrixDriver\",value:function downloadMatrixDriver(texture,downloadAndDecode){this.bindTextureToFrameBuffer(texture);var result=downloadAndDecode();this.unbindTextureToFrameBuffer();return result;}},{key:\"setOutputMatrixTextureDriver\",value:function setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked,width,height){this.throwIfDisposed();var gl=this.gl;bindColorTextureToFramebuffer(gl,this.debug,outputMatrixTextureMaybePacked,this.framebuffer);if(this.debug){validateFramebuffer(gl);}this.outputTexture=outputMatrixTextureMaybePacked;callAndCheck(gl,this.debug,function(){return gl.viewport(0,0,width,height);});callAndCheck(gl,this.debug,function(){return gl.scissor(0,0,width,height);});}},{key:\"setOutputMatrixWriteRegionDriver\",value:function setOutputMatrixWriteRegionDriver(x,y,width,height){var _this104=this;this.throwIfDisposed();callAndCheck(this.gl,this.debug,function(){return _this104.gl.scissor(x,y,width,height);});}},{key:\"throwIfDisposed\",value:function throwIfDisposed(){if(this.disposed){throw new Error('Attempted to use disposed GPGPUContext.');}}},{key:\"throwIfNoProgram\",value:function throwIfNoProgram(){if(this.program==null){throw new Error('No GPU program is currently set.');}}}]);return gpgpu_context_GPGPUContext;}();/**\r\n * Finds the index of the last true element using linear search.\r\n * Note: We can't do binary search because Chrome expects us to explicitly\r\n * test all fences before download:\r\n * https://github.com/tensorflow/tfjs/issues/1145\r\n */function linearSearchLastTrue(arr){var i=0;for(;i<arr.length;++i){var isDone=arr[i]();if(!isDone){break;}}return i-1;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function compileProgram(gpgpu,program,inputs,output){var userCode=program.userCode;var inputInfos=inputs.map(function(input,i){var shapeInfo={logicalShape:input.shape,texShape:input.isUniform?null:input.texData.texShape,isUniform:input.isUniform,isPacked:input.isUniform?false:input.texData.isPacked,flatOffset:null};if(input.texData!=null&&input.texData.slice!=null&&input.texData.slice.flatOffset>0){shapeInfo.flatOffset=input.texData.slice.flatOffset;}return{name:program.variableNames[i],shapeInfo:shapeInfo};});var inShapeInfos=inputInfos.map(function(x){return x.shapeInfo;});var outShapeInfo={logicalShape:output.shape,texShape:output.texData.texShape,isUniform:false,isPacked:output.texData.isPacked,flatOffset:null};var source=makeShader(inputInfos,outShapeInfo,userCode,program.packedInputs);var webGLProgram=gpgpu.createProgram(source);// Add special uniforms (NAN, INFINITY)\nvar infLoc=null;var nanLoc=gpgpu.getUniformLocation(webGLProgram,'NAN',false);if(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===1){infLoc=gpgpu.getUniformLocation(webGLProgram,'INFINITY',false);}// Add user-defined uniforms\nvar uniformLocations={};for(var i=0;i<program.variableNames.length;i++){var varName=program.variableNames[i];var shouldThrow=false;uniformLocations[varName]=gpgpu.getUniformLocation(webGLProgram,varName,shouldThrow);uniformLocations[\"offset\".concat(varName)]=gpgpu.getUniformLocation(webGLProgram,\"offset\".concat(varName),shouldThrow);}return{program:program,source:source,webGLProgram:webGLProgram,uniformLocations:uniformLocations,inShapeInfos:inShapeInfos,outShapeInfo:outShapeInfo,infLoc:infLoc,nanLoc:nanLoc};}function validateBinaryAndProgram(shapeInfos,inputs){if(shapeInfos.length!==inputs.length){throw Error(\"Binary was compiled with \".concat(shapeInfos.length,\" inputs, but \")+\"was executed with \".concat(inputs.length,\" inputs\"));}shapeInfos.forEach(function(s,i){var shapeA=s.logicalShape;var input=inputs[i];var shapeB=input.shape;if(!dist[\"util\"].arraysEqual(shapeA,shapeB)){throw Error(\"Binary was compiled with different shapes than \"+\"the current args. Shapes \".concat(shapeA,\" and \").concat(shapeB,\" must match\"));}// The input is uploaded as uniform.\nif(s.isUniform&&input.isUniform){return;}var texShapeA=s.texShape;var texShapeB=input.isUniform?null:input.texData.texShape;if(!dist[\"util\"].arraysEqual(texShapeA,texShapeB)){throw Error(\"Binary was compiled with different texture shapes than the\"+\" current args. Shape \".concat(texShapeA,\" and \").concat(texShapeB,\" must match\"));}});}function runProgram(gpgpu,binary,inputs,output,customSetup){validateBinaryAndProgram(binary.inShapeInfos,inputs);validateBinaryAndProgram([binary.outShapeInfo],[output]);var outTex=output.texData.texture;var outTexShape=output.texData.texShape;if(output.texData.isPacked){gpgpu.setOutputPackedMatrixTexture(outTex,outTexShape[0],outTexShape[1]);}else{gpgpu.setOutputMatrixTexture(outTex,outTexShape[0],outTexShape[1]);}gpgpu.setProgram(binary.webGLProgram);// Set special uniforms (NAN, INFINITY)\nif(Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===1){if(binary.infLoc!==null){gpgpu.gl.uniform1f(binary.infLoc,Infinity);}}if(binary.nanLoc!==null){gpgpu.gl.uniform1f(binary.nanLoc,NaN);}// Set user-defined inputs\ninputs.forEach(function(input,i){var varName=binary.program.variableNames[i];var varLoc=binary.uniformLocations[varName];var varOffsetLoc=binary.uniformLocations[\"offset\".concat(varName)];if(varLoc==null){// The compiler inferred that this variable is not used in this shader.\nreturn;}if(input.isUniform){// Upload the values of the tensor as uniform.\nif(dist[\"util\"].sizeFromShape(input.shape)<2){gpgpu.gl.uniform1f(varLoc,input.uniformValues[0]);}else{var vals=input.uniformValues;if(!(vals instanceof Float32Array)){vals=new Float32Array(vals);}gpgpu.gl.uniform1fv(varLoc,vals);}return;}// If the input was sliced, upload the flat offset index.\nif(input.texData.slice!=null&&varOffsetLoc!=null){gpgpu.gl.uniform1i(varOffsetLoc,input.texData.slice.flatOffset);}gpgpu.setInputMatrixTexture(input.texData.texture,varLoc,i);});if(customSetup!=null){customSetup(gpgpu,binary.webGLProgram);}gpgpu.executeProgram();}function makeShaderKey(program,inputs,output){var keyInputs='';inputs.concat(output).forEach(function(x){var hasOffset=x.texData!=null&&x.texData.slice!=null&&x.texData.slice.flatOffset>0;var texShape=x.isUniform?'uniform':x.texData.texShape;keyInputs+=\"\".concat(x.shape,\"_\").concat(texShape,\"_\").concat(hasOffset);});var keyUserCode=program.userCode;var key=program.constructor.name;// Fast string concat. See https://jsperf.com/string-concatenation/14.\nkey+='_'+keyInputs+'_'+keyUserCode;return key;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var im2col_packed_gpu_Im2ColPackedProgram=function im2col_packed_gpu_Im2ColPackedProgram(outputShape,inputShape,convInfo){_classCallCheck2(this,im2col_packed_gpu_Im2ColPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outputShape=outputShape;var filterWidth=convInfo.filterWidth,inChannels=convInfo.inChannels,strideWidth=convInfo.strideWidth,strideHeight=convInfo.strideHeight,padInfo=convInfo.padInfo,outWidth=convInfo.outWidth,dilationWidth=convInfo.dilationWidth,dilationHeight=convInfo.dilationHeight,dataFormat=convInfo.dataFormat;var left=padInfo.left,top=padInfo.top;var itemsPerBlockRow=inChannels*filterWidth;var glsl=getGlslDifferences();var isChannelsLast=dataFormat==='channelsLast';var rowDim=isChannelsLast?0:1;var colDim=isChannelsLast?1:2;var unrolled=\"\";for(var row=0;row<=1;row++){for(var col=0;col<=1;col++){unrolled+=\"\\n          blockIndex = rc.y + \".concat(col,\";\\n          pos = rc.x + \").concat(row,\";\\n\\n          if(blockIndex < \").concat(outputShape[1],\" && pos < \").concat(outputShape[0],\") {\\n            offsetY = int(blockIndex / (\").concat(outWidth,\")) * \").concat(strideHeight,\" - \").concat(top,\";\\n            d0 = offsetY + \").concat(dilationHeight,\" * (pos / \").concat(itemsPerBlockRow,\");\\n\\n            if(d0 < \").concat(inputShape[rowDim],\" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \").concat(outWidth,\".) * \").concat(strideWidth,\". - \").concat(left,\".);\\n              d1 = offsetX + \").concat(dilationWidth,\" * (int(mod(float(pos), \").concat(itemsPerBlockRow,\".) / \").concat(inChannels,\".));\\n\\n              if(d1 < \").concat(inputShape[colDim],\" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \").concat(inChannels,\".));\\n\\n                if (\").concat(isChannelsLast,\") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row*2+col,\"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row*2+col,\"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");}}this.userCode=\"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled,\"\\n\\n        \").concat(glsl.output,\" = result;\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var LRNProgram=function LRNProgram(xShape,radius,bias,alpha,beta){_classCallCheck2(this,LRNProgram);this.variableNames=['x'];this.outputShape=[];var rad=radius;var maxD=xShape[3]-1;this.outputShape=xShape;// optimize pow(bias + alpha * sum, -beta)\n// src: https://github.com/tensorflow/tensorflow/..\n// blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n// tensorflow/core/kernels/mkl_lrn_op.cc#L320\nvar powOperator;var basis=\"float(\".concat(bias,\") + float(\").concat(alpha,\") * sum\");if(beta===0.5){powOperator=\"inversesqrt(\".concat(basis,\")\");}else if(beta===1.0){powOperator=\"1.0/(\".concat(basis,\")\");}else{powOperator=\"exp(log(\".concat(basis,\") * float(-\").concat(beta,\"));\");}this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\".concat(rad,\"; j <= \").concat(rad,\"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \").concat(maxD,\") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \").concat(powOperator,\";\\n        setOutput(val);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var LRNGradProgram=function LRNGradProgram(inputShape,depthRadius,bias,alpha,beta){_classCallCheck2(this,LRNGradProgram);this.variableNames=['inputImage','outputImage','dy'];this.outputShape=[];this.outputShape=inputShape;this.depth=inputShape[3];this.depthRadius=depthRadius;this.bias=bias;this.alpha=alpha;this.beta=beta;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \".concat(this.depth,\"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \").concat(depthRadius,\")));\\n          int depthEnd = int(min(float(\").concat(this.depth,\"),\\n              float(d + \").concat(depthRadius,\" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \").concat(this.depth,\";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\").concat(alpha,\") * norm + float(\").concat(bias,\");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\").concat(alpha,\")\\n                * float(\").concat(beta,\")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \").concat(beta,\");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var LRNPackedProgram=function LRNPackedProgram(xShape,radius,bias,alpha,beta){_classCallCheck2(this,LRNPackedProgram);this.variableNames=['x'];this.outputShape=[];this.packedInputs=true;this.packedOutput=true;var rad=radius;var maxD=xShape[3]-1;this.outputShape=xShape;// optimize pow(bias + alpha * sum, -beta)\n// src: https://github.com/tensorflow/tensorflow/..\n// blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n// tensorflow/core/kernels/mkl_lrn_op.cc#L320\nvar powOperator;var basis=\"float(\".concat(bias,\") + float(\").concat(alpha,\") * sum\");if(beta===0.5){powOperator=\"inversesqrt(\".concat(basis,\")\");}else if(beta===1.0){powOperator=\"1.0/(\".concat(basis,\")\");}else{powOperator=\"exp(log(\".concat(basis,\") * float(-\").concat(beta,\"));\");}this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \".concat(this.outputShape[3],\";\\n        bool hasNextRow = c < \").concat(this.outputShape[2],\";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \").concat(rad,\";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \").concat(rad,\"; j <= \").concat(rad,\"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\").concat(maxD,\"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \").concat(powOperator,\";\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var MaxPool2DBackpropProgram=function MaxPool2DBackpropProgram(convInfo){_classCallCheck2(this,MaxPool2DBackpropProgram);this.variableNames=['dy','maxPos'];this.outputShape=convInfo.inShape;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var lastIndex=effectiveFilterHeight*effectiveFilterWidth-1;this.userCode=\"\\n      const ivec2 pads = ivec2(\".concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n          wR += \").concat(dilationHeight,\") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth,\"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \").concat(lastIndex,\" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \").concat(effectiveFilterWidth,\" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};var MaxPool3DBackpropProgram=function MaxPool3DBackpropProgram(convInfo){_classCallCheck2(this,MaxPool3DBackpropProgram);this.variableNames=['dy','maxPos'];this.outputShape=convInfo.inShape;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=effectiveFilterDepth-1-convInfo.padInfo.front;var padTop=effectiveFilterHeight-1-convInfo.padInfo.top;var padLeft=effectiveFilterWidth-1-convInfo.padInfo.left;var lastIndex=effectiveFilterDepth*effectiveFilterHeight*effectiveFilterWidth-1;this.userCode=\"\\n      const ivec3 pads = ivec3(\".concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth,\";\\n           wD += \").concat(dilationDepth,\") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth,\".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth,\".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n              wR += \").concat(dilationHeight,\") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight,\".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight,\".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth,\";\\n                wC += \").concat(dilationWidth,\") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth,\".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth,\".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \").concat(lastIndex,\" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \").concat(effectiveFilterHeight,\" * \").concat(effectiveFilterWidth,\" +\\n                  wR * \").concat(effectiveFilterWidth,\" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var MatMulPackedProgram=function MatMulPackedProgram(aShape,outputShape){var transposeA=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var transposeB=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var addBias=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var activation=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var hasPreluActivation=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;_classCallCheck2(this,MatMulPackedProgram);this.variableNames=['matrixA','matrixB'];this.packedInputs=true;this.packedOutput=true;this.outputShape=outputShape;var sharedDim=transposeA?aShape[1]:aShape[2];var sharedDimensionPacked=Math.ceil(sharedDim/2);var aSample=transposeA?'i * 2, rc.y':'rc.y, i * 2';var bSample=transposeB?'rc.z, i * 2':'i * 2, rc.z';var aSwizzle=transposeA?['a.xxyy','a.zzww']:['a.xxzz','a.yyww'];var bSwizzle=transposeB?['b.xzxz','b.ywyw']:['b.xyxy','b.zwzw'];var activationSnippet='',applyActivationSnippet='';if(activation){if(hasPreluActivation){activationSnippet=\"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation,\"\\n        }\");}else{activationSnippet=\"vec4 activation(vec4 x) {\\n          \".concat(activation,\"\\n        }\");}applyActivationSnippet=\"result = activation(result);\";}var addBiasSnippet=addBias?'result += getBiasAtOutCoords();':'';if(addBias){this.variableNames.push('bias');}if(hasPreluActivation){this.variableNames.push('preluActivationWeights');}this.userCode=\"\\n      \".concat(activationSnippet,\"\\n\\n      const float sharedDimension = \").concat(sharedDimensionPacked,\".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \").concat(sharedDimensionPacked,\"; i++) {\\n          vec4 a = getMatrixA(rc.x, \").concat(aSample,\");\\n          vec4 b = getMatrixB(rc.x, \").concat(bSample,\");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\").concat(aSwizzle[0],\" * \").concat(bSwizzle[0],\");\\n          result += (\").concat(aSwizzle[1],\" * \").concat(bSwizzle[1],\");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \").concat(addBiasSnippet,\"\\n\\n        \").concat(applyActivationSnippet,\"\\n\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var MultinomialProgram=/*#__PURE__*/function(){function MultinomialProgram(batchSize,numOutcomes,numSamples){_classCallCheck2(this,MultinomialProgram);this.variableNames=['probs'];this.outputShape=[batchSize,numSamples];this.userCode=\"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \".concat(numOutcomes-1,\"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\").concat(numOutcomes-1,\"));\\n      }\\n    \");}_createClass(MultinomialProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(seed){var _this105=this;return function(gpgpu,webGLProgram){if(_this105.seedLoc==null){_this105.seedLoc=gpgpu.getUniformLocation(webGLProgram,'seed');}gpgpu.gl.uniform1f(_this105.seedLoc,seed);};}}]);return MultinomialProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var OneHotProgram=function OneHotProgram(numIndices,depth,onValue,offValue){_classCallCheck2(this,OneHotProgram);this.variableNames=['indices'];this.outputShape=[numIndices,depth];this.userCode=\"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\".concat(offValue,\"), float(\").concat(onValue,\"),\\n                      float(index == coords.y)));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var pack_gpu_PackProgram=function pack_gpu_PackProgram(outputShape){_classCallCheck2(this,pack_gpu_PackProgram);this.variableNames=['A'];this.packedInputs=false;this.packedOutput=true;// Only input / output 3D tensors.\nthis.outputShape=outputShape;var rank=outputShape.length;if(rank===0){this.userCode=\"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";}else{var channels=getChannels('rc',rank);var dtype=getCoordsDataType(rank);var outOfBoundsCondition=getOutOfBoundsCondition(rank,outputShape,channels);var setup=getSetup(rank,outputShape[outputShape.length-1],outputShape[outputShape.length-2],channels);var output=getOutput(outputShape,channels);this.userCode=\"\\n        void main() {\\n          \".concat(dtype,\" rc = getOutputCoords();\\n\\n          if(\").concat(outOfBoundsCondition,\") {\\n            setOutput(vec4(0));\\n          } else {\\n            \").concat(setup,\"\\n\\n            setOutput(vec4(\").concat(output,\"));\\n          }\\n        }\\n      \");}};function getSourceCoordsArr(rank,dims){var coords=[];for(var row=0;row<=1;row++){for(var col=0;col<=1;col++){var coord=\"\".concat(row===0?'r':'rp1',\", \").concat(col===0?'c':'cp1');for(var d=2;d<rank;d++){coord=\"\".concat(dims[dims.length-1-d],\",\")+coord;}coords.push(coord);}}return coords;}function getOutOfBoundsCondition(rank,shape,dims){if(rank===1){return\"rc > \".concat(shape[0]);}var cond='';for(var i=rank-2;i<rank;i++){cond+=\"\".concat(dims[i],\" >= \").concat(shape[i]);if(i<rank-1){cond+='||';}}return cond;}function getSetup(rank,cols,rows,dims){if(rank===1){return'';}var innerDims=dims.slice(-2);return\"\\n    int r = \".concat(innerDims[0],\";\\n    int c = \").concat(innerDims[1],\";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \").concat(cols,\";\\n    bool rEdge = rp1 >= \").concat(rows,\";\\n  \");}function getOutput(shape,dims){var rank=shape.length;var sourceCoords=getSourceCoordsArr(rank,dims);if(rank===1){return\"getA(rc),\\n            rc + 1 >= \".concat(shape[0],\" ? 0. : getA(rc + 1),\\n            0, 0\");}return\"getA(\".concat(sourceCoords[0],\"),\\n          cEdge ? 0. : getA(\").concat(sourceCoords[1],\"),\\n          rEdge ? 0. : getA(\").concat(sourceCoords[2],\"),\\n          rEdge || cEdge ? 0. : getA(\").concat(sourceCoords[3],\")\");}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var pad_gpu_PadProgram=function pad_gpu_PadProgram(xShape,paddings,constantValue){_classCallCheck2(this,pad_gpu_PadProgram);this.variableNames=['x'];this.outputShape=paddings.map(function(p,i){return p[0]/* beforePad */+xShape[i]+p[1];}/* afterPad */);var rank=xShape.length;var type=getCoordsDataType(rank);var start=paddings.map(function(p){return p[0];}).join(',');var end=paddings.map(function(p,i){return p[0]+xShape[i];}).join(',');var unpackedCoords=['coords[0]','coords[1]','coords[2]','coords[3]'].slice(0,rank);if(rank===1){this.userCode=\"\\n        int start = \".concat(start,\";\\n        int end = \").concat(end,\";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\").concat(constantValue,\"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \");return;}this.userCode=\"\\n      \".concat(type,\" start = \").concat(type,\"(\").concat(start,\");\\n      \").concat(type,\" end = \").concat(type,\"(\").concat(end,\");\\n\\n      void main() {\\n        \").concat(type,\" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\").concat(constantValue,\"));\\n        } else {\\n          \").concat(type,\" coords = outC - start;\\n          setOutput(getX(\").concat(unpackedCoords,\"));\\n        }\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var pad_packed_gpu_PadPackedProgram=function pad_packed_gpu_PadPackedProgram(xShape,paddings,constantValue){_classCallCheck2(this,pad_packed_gpu_PadPackedProgram);this.variableNames=['x'];this.packedInputs=true;this.packedOutput=true;this.outputShape=paddings.map(function(p,i){return p[0]/* beforePad */+xShape[i]+p[1];}/* afterPad */);var rank=xShape.length;var dtype=getCoordsDataType(rank);var start=paddings.map(function(p){return p[0];}).join(',');var end=paddings.map(function(p,i){return p[0]+xShape[i];}).join(',');var coords=getChannels('rc',rank);var source=getChannels('source',rank);var cLimit=\"\".concat(coords[rank-1],\" < \").concat(this.outputShape[rank-1]);var innerDims=rank===1?'source':\"vec2(\".concat(source.slice(-2).join(),\")\");var componentSetup=[\"\".concat(dtype,\" rc = outputLoc;\"),\"\".concat(coords[rank-1],\" += 1;\\n       if(\").concat(cLimit,\") {\\n      \"),rank===1?'':\"}\\n       rc = outputLoc;\\n       \".concat(coords[rank-2],\" += 1;\\n       if(\").concat(coords[rank-2],\" < \").concat(this.outputShape[rank-2],\") {\"),rank===1?'':\"  \".concat(coords[rank-1],\" += 1;\\n         if(\").concat(cLimit,\") {\")];var paddingArea=rank===1?'rc < start || rc >= end':'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';var mainLoop='';for(var i=0,j=rank===1?2:4;i<j;i++){mainLoop+=\"\\n        \".concat(componentSetup[i],\"\\n        if (\").concat(paddingArea,\") {\\n          result[\").concat(i,\"] = float(\").concat(constantValue,\");\\n        } else {\\n          \").concat(dtype,\" source = rc - start;\\n          result[\").concat(i,\"] = getChannel(getX(\").concat(source.join(),\"), \").concat(innerDims,\");\\n        }\\n      \");}mainLoop+=rank===1?\"} \":\"}}\";this.userCode=\"\\n      const \".concat(dtype,\" start = \").concat(dtype,\"(\").concat(start,\");\\n      const \").concat(dtype,\" end = \").concat(dtype,\"(\").concat(end,\");\\n\\n      void main() {\\n        \").concat(dtype,\" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \").concat(mainLoop,\"\\n        setOutput(result);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var Pool2DProgram=function Pool2DProgram(convInfo,poolType,computePositions){var flattenPositions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var includeBatchInIndex=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;_classCallCheck2(this,Pool2DProgram);this.variableNames=['x'];if(poolType==='avg'&&computePositions){throw new Error('Cannot compute positions for average pool.');}var filterWidth=convInfo.filterWidth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;this.outputShape=convInfo.outShape;var isAvgPool=poolType==='avg';var batchFlattenPositionStr=\"((batch  * \".concat(convInfo.inHeight,\" + xR) * \").concat(convInfo.inWidth,\" + xC) * \").concat(convInfo.inChannels,\" + d\");var flattenPositionStr=\"(xR * \".concat(convInfo.inWidth,\" + xC) * \").concat(convInfo.inChannels,\" + d\");var initializationValue='0.0';if(!isAvgPool){// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\ninitializationValue='-1.0 / 1e-20';}if(computePositions){var _compareOp='>=';this.userCode=\"\\n        const ivec2 strides = ivec2(\".concat(strideHeight,\", \").concat(strideWidth,\");\\n        const ivec2 pads = ivec2(\").concat(padTop,\", \").concat(padLeft,\");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n              wR += \").concat(dilationHeight,\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth,\";\\n                wC += \").concat(dilationWidth,\") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value \").concat(_compareOp,\" currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \").concat(flattenPositions?includeBatchInIndex?batchFlattenPositionStr:flattenPositionStr:\"wR * \".concat(effectiveFilterWidth,\" + wC\"),\";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \");return;}var compareOp='max';var returnValue=\"\".concat(poolType,\"(\").concat(poolType,\"(\").concat(poolType,\"(\")+'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';if(poolType==='avg'){returnValue=\"avgValue / count\";}var filterWidthNearestVec4=Math.floor(filterWidth/4)*4;var filterWidthVec4Remainder=filterWidth%4;var updateSnippet=\"\\n      if (\".concat(isAvgPool,\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = \").concat(compareOp,\"(values, minMaxValue);\\n      }\\n    \");this.userCode=\"\\n      const ivec2 strides = ivec2(\".concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec2 pads = ivec2(\").concat(padTop,\", \").concat(padLeft,\");\\n      const float initializationValue = \").concat(initializationValue,\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\").concat(initializationValue,\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n            wR += \").concat(dilationHeight,\") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidthNearestVec4,\"; wC += 4) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth,\";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \").concat(dilationWidth,\", d),\\n              getValue(batch, xR, xC + 2 * \").concat(dilationWidth,\", d),\\n              getValue(batch, xR, xC + 3 * \").concat(dilationWidth,\", d)\\n            );\\n\\n            \").concat(updateSnippet,\"\\n          }\\n\\n          int xC = xCCorner + \").concat(filterWidthNearestVec4,\";\\n          if (\").concat(filterWidthVec4Remainder===1,\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \").concat(updateSnippet,\"\\n          } else if (\").concat(filterWidthVec4Remainder===2,\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \").concat(dilationWidth,\", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \").concat(updateSnippet,\"\\n          } else if (\").concat(filterWidthVec4Remainder===3,\") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \").concat(dilationWidth,\", d),\\n              getValue(batch, xR, xC + 2 * \").concat(dilationWidth,\", d),\\n              initializationValue\\n            );\\n\\n            \").concat(updateSnippet,\"\\n          }\\n        }\\n        setOutput(\").concat(returnValue,\");\\n      }\\n    \");};var Pool3DProgram=function Pool3DProgram(convInfo,poolType,computePositions){var flattenPositions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var includeBatchInIndex=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;_classCallCheck2(this,Pool3DProgram);this.variableNames=['x'];if(poolType==='avg'&&computePositions){throw new Error('Cannot compute positions for average pool.');}var filterWidth=convInfo.filterWidth;var strideDepth=convInfo.strideDepth;var strideHeight=convInfo.strideHeight;var strideWidth=convInfo.strideWidth;var dilationDepth=convInfo.dilationDepth;var dilationHeight=convInfo.dilationHeight;var dilationWidth=convInfo.dilationWidth;var effectiveFilterDepth=convInfo.effectiveFilterDepth;var effectiveFilterHeight=convInfo.effectiveFilterHeight;var effectiveFilterWidth=convInfo.effectiveFilterWidth;var padFront=convInfo.padInfo.front;var padTop=convInfo.padInfo.top;var padLeft=convInfo.padInfo.left;this.outputShape=convInfo.outShape;var isAvgPool=poolType==='avg';var initializationValue='0.0';if(!isAvgPool){// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\ninitializationValue='-1.0 / 1e-20';}if(computePositions){var _compareOp2='>=';this.userCode=\"\\n        const ivec3 strides =\\n            ivec3(\".concat(strideDepth,\", \").concat(strideHeight,\", \").concat(strideWidth,\");\\n        const ivec3 pads = ivec3(\").concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \").concat(effectiveFilterDepth,\";\\n              wD += \").concat(dilationDepth,\") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \").concat(convInfo.inDepth,\") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n                wR += \").concat(dilationHeight,\") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \").concat(effectiveFilterWidth,\";\\n                  wC += \").concat(dilationWidth,\") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value \").concat(_compareOp2,\" currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \").concat(flattenPositions?includeBatchInIndex?\"(((batch * \".concat(convInfo.inDepth,\" + xD) * \").concat(convInfo.inHeight,\" + xR) * \").concat(convInfo.inWidth,\" + xC) * \").concat(convInfo.inChannels,\" + ch\"):\"((xD * \".concat(convInfo.inHeight,\" + xR) * \").concat(convInfo.inWidth,\" + xC) * \").concat(convInfo.inChannels,\" + ch\"):\"wD * \".concat(effectiveFilterHeight,\" * \").concat(effectiveFilterWidth,\" +\\n                      wR * \").concat(effectiveFilterWidth,\" + wC\"),\";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \");return;}var compareOp='max';var returnValue=\"\".concat(poolType,\"(\").concat(poolType,\"(\").concat(poolType,\"(\")+'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';if(poolType==='avg'){returnValue=\"avgValue / count\";}var filterWidthNearestVec4=Math.floor(filterWidth/4)*4;var filterWidthVec4Remainder=filterWidth%4;var updateSnippet=\"\\n      if (\".concat(isAvgPool,\") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = \").concat(compareOp,\"(values, minMaxValue);\\n      }\\n    \");this.userCode=\"\\n      const ivec3 strides =\\n        ivec3(\".concat(strideDepth,\", \").concat(strideHeight,\", \").concat(strideWidth,\");\\n      const ivec3 pads = ivec3(\").concat(padFront,\", \").concat(padTop,\", \").concat(padLeft,\");\\n      const float initializationValue = \").concat(initializationValue,\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \").concat(convInfo.inWidth,\") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\").concat(initializationValue,\");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth,\";\\n            wD += \").concat(dilationDepth,\") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \").concat(convInfo.inDepth,\") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight,\";\\n            wR += \").concat(dilationHeight,\") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight,\") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \").concat(filterWidthNearestVec4,\"; wC += 4) {\\n              int xC = xCCorner + wC * \").concat(dilationWidth,\";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \").concat(dilationWidth,\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \").concat(dilationWidth,\", ch),\\n                getValue(batch, xD, xR, xC + 3 * \").concat(dilationWidth,\", ch)\\n              );\\n\\n              \").concat(updateSnippet,\"\\n            }\\n\\n            int xC = xCCorner + \").concat(filterWidthNearestVec4,\";\\n            if (\").concat(filterWidthVec4Remainder===1,\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \").concat(updateSnippet,\"\\n            } else if (\").concat(filterWidthVec4Remainder===2,\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \").concat(dilationWidth,\", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \").concat(updateSnippet,\"\\n            } else if (\").concat(filterWidthVec4Remainder===3,\") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \").concat(dilationWidth,\", ch),\\n                getValue(batch, xD, xR, xC + 2 * \").concat(dilationWidth,\", ch),\\n                initializationValue\\n              );\\n\\n              \").concat(updateSnippet,\"\\n            }\\n          }\\n          setOutput(\").concat(returnValue,\");\\n        }\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ReduceProgram=function ReduceProgram(reduceInfo,reduceType){_classCallCheck2(this,ReduceProgram);this.variableNames=['x'];var windowSize=reduceInfo.windowSize;var batchSize=reduceInfo.batchSize;var inSize=reduceInfo.inSize;var outSize=Math.ceil(inSize/windowSize);this.outputShape=[batchSize,outSize];var initializationValue='0.0';var compareOp=\"\";if(reduceType==='prod'){initializationValue='1.0';}else if(reduceType==='min'){// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\ninitializationValue='1.0 / 1e-20';compareOp=\"min\";}else if(reduceType==='max'){// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\ninitializationValue='-1.0 / 1e-20';compareOp=\"max\";}var returnValue=\"\".concat(reduceType,\"(\").concat(reduceType,\"(\").concat(reduceType,\"(\")+'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';if(reduceType==='sum'){returnValue=\"sumValue\";}else if(reduceType==='prod'){returnValue=\"prodValue\";}else if(reduceType==='all'){returnValue=\"allValue\";}else if(reduceType==='any'){returnValue=\"anyValue\";}var windowSizeNearestVec4=Math.floor(windowSize/4)*4;var windowSizeVec4Remainder=windowSize%4;var updateSnippet=\"\\n      if (\".concat(reduceType==='sum',\") {\\n        sumValue += dot(values, ones);\\n      } else if (\").concat(reduceType==='prod',\") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \").concat(compareOp,\"(values, minMaxValue);\\n      }\\n    \");var vecType=\"vec4\";if(reduceType==='all'){initializationValue='1.0';updateSnippet=\"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \";vecType=\"bvec4\";}else if(reduceType==='any'){initializationValue='0.0';updateSnippet=\"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \";vecType=\"bvec4\";}var checkOutOfBounds='';if(inSize%windowSize>0){checkOutOfBounds=\"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize,\") {\\n          return initializationValue;\\n        }\\n      \");}this.userCode=\"\\n      const float initializationValue = \".concat(initializationValue,\";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \").concat(checkOutOfBounds,\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \").concat(windowSize,\";\\n\\n        vec4 minMaxValue = vec4(\").concat(initializationValue,\");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \").concat(windowSizeNearestVec4,\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \").concat(vecType,\" values = \").concat(vecType,\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        }\\n\\n        int inIdx = inOffset + \").concat(windowSizeNearestVec4,\";\\n        if (\").concat(windowSizeVec4Remainder===1,\") {\\n          \").concat(vecType,\" values = \").concat(vecType,\"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        } else if (\").concat(windowSizeVec4Remainder===2,\") {\\n          \").concat(vecType,\" values = \").concat(vecType,\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        } else if (\").concat(windowSizeVec4Remainder===3,\") {\\n          \").concat(vecType,\" values = \").concat(vecType,\"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        }\\n        setOutput(\").concat(returnValue,\");\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var reshape_packed_gpu_ReshapePackedProgram=function reshape_packed_gpu_ReshapePackedProgram(outputShape,inputShape){_classCallCheck2(this,reshape_packed_gpu_ReshapePackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outputShape=outputShape;var mainLoop=\"\";for(var i=0;i<4;i++){var thisRC=\"thisRC = rc;\";if(i%2===1){thisRC+=\"thisRC.z += 1;\";}if(i>1){thisRC+=\"thisRC.y += 1;\";}mainLoop+=\"\\n        \".concat(thisRC,\"\\n        \").concat(i>0?\"if(thisRC.y < rows && thisRC.z < cols){\":'',\"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\").concat(i,\"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \").concat(i>0?'}':'',\"\\n      \");}this.userCode=\"\\n      \".concat(getReshapedInputCoords(inputShape),\"\\n      \").concat(getFlatIndexFrom3D(outputShape),\"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \").concat(outputShape[1],\";\\n        int cols = \").concat(outputShape[2],\";\\n\\n        \").concat(mainLoop,\"\\n\\n        setOutput(result);\\n      }\\n    \");};function getReshapedInputCoords(shape){var coordsFromIndexSnippet=getLogicalCoordinatesFromFlatIndex(['r','c','d'],shape);return\"\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \".concat(coordsFromIndexSnippet,\"\\n      return ivec3(r, c, d);\\n    }\\n  \");}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ResizeBilinearBackpropProgram=function ResizeBilinearBackpropProgram(dy,x,alignCorners){_classCallCheck2(this,ResizeBilinearBackpropProgram);this.variableNames=['dy'];this.outputShape=[];this.outputShape=x.shape;var _x$shape5=_slicedToArray(x.shape,3),xHeight=_x$shape5[1],xWidth=_x$shape5[2];var _dy$shape3=_slicedToArray(dy.shape,3),yHeight=_dy$shape3[1],yWidth=_dy$shape3[2];// In the backwards pass, we want to find the pixels that were generated for\n// each pixel in the input image the forward pass and add the corresponding\n// coefficient from dy to the gradient (with some interpolation).\nvar effectiveXSize=[alignCorners&&yHeight>1?xHeight-1:xHeight,alignCorners&&yWidth>1?xWidth-1:xWidth];var effectiveYSize=[alignCorners&&yHeight>1?yHeight-1:yHeight,alignCorners&&yWidth>1?yWidth-1:yWidth];var heightScale=effectiveXSize[0]/effectiveYSize[0];var widthScale=effectiveXSize[1]/effectiveYSize[1];var invHeightScale=1/heightScale;var invWidthScale=1/widthScale;// This defines the size of the window of values around a particular\n// index in dy that we want to search for contributions to dx.\nvar winHeight=Math.ceil(invHeightScale)*2+2;var winWidth=Math.ceil(invWidthScale)*2+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\".concat(heightScale,\");\\n        const float widthScale = float(\").concat(widthScale,\");\\n\\n        const float invHeightScale = float(\").concat(invHeightScale,\");\\n        const float invWidthScale = float(\").concat(invWidthScale,\");\\n\\n        const int winHeight = int(\").concat(winHeight,\");\\n        const int winWidth = int(\").concat(winWidth,\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \").concat(yHeight,\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \").concat(yWidth,\") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \").concat(xHeight-1,\".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \").concat(xWidth-1,\".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ResizeBilinearProgram=function ResizeBilinearProgram(inputShape,newHeight,newWidth,alignCorners){_classCallCheck2(this,ResizeBilinearProgram);this.variableNames=['A'];this.outputShape=[];var _inputShape=_slicedToArray(inputShape,4),batch=_inputShape[0],oldHeight=_inputShape[1],oldWidth=_inputShape[2],depth=_inputShape[3];this.outputShape=[batch,newHeight,newWidth,depth];var effectiveInSize=[alignCorners&&newHeight>1?oldHeight-1:oldHeight,alignCorners&&newWidth>1?oldWidth-1:oldWidth];var effectiveOutSize=[alignCorners&&newHeight>1?newHeight-1:newHeight,alignCorners&&newWidth>1?newWidth-1:newWidth];this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0]/effectiveOutSize[0],\",\\n          \").concat(effectiveInSize[1]/effectiveOutSize[1],\");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight,\".0, \").concat(oldWidth,\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ResizeBilinearPackedProgram=function ResizeBilinearPackedProgram(inputShape,newHeight,newWidth,alignCorners){_classCallCheck2(this,ResizeBilinearPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outputShape=[];var _inputShape2=_slicedToArray(inputShape,4),batch=_inputShape2[0],oldHeight=_inputShape2[1],oldWidth=_inputShape2[2],depth=_inputShape2[3];this.outputShape=[batch,newHeight,newWidth,depth];var effectiveInSize=[alignCorners&&newHeight>1?oldHeight-1:oldHeight,alignCorners&&newWidth>1?oldWidth-1:oldWidth];var effectiveOutSize=[alignCorners&&newHeight>1?newHeight-1:newHeight,alignCorners&&newWidth>1?newWidth-1:newWidth];this.userCode=\"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \".concat(effectiveInSize[0]/effectiveOutSize[0],\",\\n          \").concat(effectiveInSize[1]/effectiveOutSize[1],\",\\n          \").concat(effectiveInSize[1]/effectiveOutSize[1],\");\\n      const vec3 inputShapeRC = vec3(\").concat(oldHeight,\".0, \").concat(oldWidth,\".0,\\n                                     \").concat(oldWidth,\".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \").concat(depth-1,\";\\n        bool hasNextRow = coords.z < \").concat(newWidth-1,\";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ResizeNearestNeigborBackpropProgram=function ResizeNearestNeigborBackpropProgram(dy,x,alignCorners){_classCallCheck2(this,ResizeNearestNeigborBackpropProgram);this.variableNames=['dy'];this.outputShape=[];this.outputShape=x.shape;var _x$shape6=_slicedToArray(x.shape,3),xHeight=_x$shape6[1],xWidth=_x$shape6[2];var _dy$shape4=_slicedToArray(dy.shape,3),yHeight=_dy$shape4[1],yWidth=_dy$shape4[2];// In the backwards pass, we want to find the pixels that were generated for\n// each pixel in the input image the forward pass and add the corresponding\n// coefficient from dy to the gradient (with some interpolation).\nvar effectiveXSize=[alignCorners&&yHeight>1?xHeight-1:xHeight,alignCorners&&yWidth>1?xWidth-1:xWidth];var effectiveYSize=[alignCorners&&yHeight>1?yHeight-1:yHeight,alignCorners&&yWidth>1?yWidth-1:yWidth];var heightScale=effectiveXSize[0]/effectiveYSize[0];var widthScale=effectiveXSize[1]/effectiveYSize[1];var invHeightScale=1/heightScale;var invWidthScale=1/widthScale;// This defines the size of the window of values around a particular\n// index in dy that we want to search for contributions to dx.\nvar winHeight=Math.ceil(invHeightScale)*2+2;var winWidth=Math.ceil(invWidthScale)*2+2;this.userCode=\"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\".concat(heightScale,\");\\n        const float widthScale = float(\").concat(widthScale,\");\\n\\n        const float invHeightScale = float(\").concat(invHeightScale,\");\\n        const float invWidthScale = float(\").concat(invWidthScale,\");\\n\\n        const int winHeight = int(\").concat(winHeight,\");\\n        const int winWidth = int(\").concat(winWidth,\");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \").concat(yHeight,\") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \").concat(yWidth,\") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\").concat(effectiveXSize[0],\") *\\n                (float(dyR) / float(\").concat(effectiveYSize[0],\"));\\n\\n            float sourceFracCol =\\n                float(\").concat(effectiveXSize[1],\") *\\n                  (float(dyC) / float(\").concat(effectiveYSize[1],\"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\").concat(xHeight,\") - 1),\\n                \").concat(alignCorners,\" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\").concat(xWidth,\") - 1),\\n                \").concat(alignCorners,\" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var ResizeNearestNeighborProgram=function ResizeNearestNeighborProgram(inputShape,newHeight,newWidth,alignCorners){_classCallCheck2(this,ResizeNearestNeighborProgram);this.variableNames=['A'];this.outputShape=[];var _inputShape3=_slicedToArray(inputShape,4),batch=_inputShape3[0],oldHeight=_inputShape3[1],oldWidth=_inputShape3[2],depth=_inputShape3[3];this.outputShape=[batch,newHeight,newWidth,depth];var effectiveInSize=[alignCorners&&newHeight>1?oldHeight-1:oldHeight,alignCorners&&newWidth>1?oldWidth-1:oldWidth];var effectiveOutSize=[alignCorners&&newHeight>1?newHeight-1:newHeight,alignCorners&&newWidth>1?newWidth-1:newWidth];// When align corners is false, we rounds the value with floor.\nvar roundBase=alignCorners?'0.5':'0.0';this.userCode=\"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0]/effectiveOutSize[0],\",\\n          \").concat(effectiveInSize[1]/effectiveOutSize[1],\");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight,\".0, \").concat(oldWidth,\".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \").concat(roundBase,\")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var reverse_gpu_ReverseProgram=function reverse_gpu_ReverseProgram(xShape,axis){_classCallCheck2(this,reverse_gpu_ReverseProgram);this.variableNames=['x'];var rank=xShape.length;if(rank>4){throw new Error(\"WebGL backend: Reverse of rank-\".concat(rank,\" tensor is not yet supported\"));}this.outputShape=xShape;if(rank===1){this.userCode=\"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\".concat(xShape[0],\" - coord - 1));\\n        }\\n      \");return;}var getInCoord=function getInCoord(i){if(axis.indexOf(i)!==-1&&xShape[i]!==1){return\"\".concat(xShape[i],\" - coords[\").concat(i,\"] - 1\");}return\"coords[\".concat(i,\"]\");};var inCoords=xShape.map(function(_,i){return getInCoord(i);}).join(',');var type=getCoordsDataType(rank);this.userCode=\"\\n      void main() {\\n        \".concat(type,\" coords = getOutputCoords();\\n        setOutput(getX(\").concat(inCoords,\"));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var reverse_packed_gpu_ReversePackedProgram=function reverse_packed_gpu_ReversePackedProgram(xShape,axis){_classCallCheck2(this,reverse_packed_gpu_ReversePackedProgram);this.variableNames=['x'];this.packedInputs=true;this.packedOutput=true;var rank=xShape.length;if(rank>4){throw new Error(\"WebGL backend: Reverse of rank-\".concat(rank,\" tensor is not yet supported\"));}this.outputShape=xShape;var channels=getChannels('rc',rank);var nextColumn=\"\".concat(channels[rank-1],\" + 1 < \").concat(this.outputShape[rank-1]);var nextRow=\"\".concat(channels[rank-2],\" + 1 < \").concat(this.outputShape[rank-2]);var type=getCoordsDataType(rank);if(rank===1){this.userCode=\"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\".concat(xShape[0],\" - rc - 1),\\n            \").concat(xShape[0],\" - rc - 1);\\n          if(\").concat(nextColumn,\"){\\n              result.g = getChannel(getX(\").concat(xShape[0],\" - (rc  + 1) - 1),\\n                \").concat(xShape[0],\" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \");}else{this.userCode=\"\\n        void main() {\\n          \".concat(type,\" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \").concat(getR(channels.slice()),\";\\n          if(\").concat(nextColumn,\"){\\n            result.g = \").concat(getG(channels.slice()),\";\\n          }\\n          if(\").concat(nextRow,\") {\\n            result.b = \").concat(getB(channels.slice()),\";\\n            if(\").concat(nextColumn,\") {\\n              result.a = \").concat(getA(channels.slice()),\";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \");}function getR(channels){return getChannel(channels);}function getG(channels){channels[rank-1]='('+channels[rank-1]+\" + 1)\";return getChannel(channels);}function getB(channels){channels[rank-2]='('+channels[rank-2]+\" + 1)\";return getChannel(channels);}function getA(channels){channels[rank-1]='('+channels[rank-1]+\" + 1)\";channels[rank-2]='('+channels[rank-2]+\" + 1)\";return getChannel(channels);}function getChannel(channels){var inCoordsArray=xShape.map(function(_,i){return getInCoord(i,channels);});var inCoords=inCoordsArray.join(',');var innerDims=inCoordsArray.slice(-2).join(',');return\"getChannel(getX(\".concat(inCoords,\"), vec2(\").concat(innerDims,\"))\");}function getInCoord(i,channels1){if(axis.indexOf(i)!==-1&&xShape[i]!==1){return\"\".concat(xShape[i],\" - \").concat(channels1[i],\" - 1\");}else{return\"\".concat(channels1[i]);}}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var scatter_gpu_ScatterProgram=function scatter_gpu_ScatterProgram(updateSize,sliceDim,indicesRank,updatesRank,strides,shape){var summingDupeIndex=arguments.length>6&&arguments[6]!==undefined?arguments[6]:true;_classCallCheck2(this,scatter_gpu_ScatterProgram);this.variableNames=['updates','indices','defaultValue'];this.outputShape=shape;var stridesType=getCoordsDataType(strides.length);var dtype=getCoordsDataType(shape.length);var indicesString='';if(indicesRank===1){indicesString='i';}else if(indicesRank===2){indicesString='i, j';}var indicesSnippet=\"getIndices(\".concat(indicesString,\")\");var updatesString='';if(updatesRank===1){updatesString='i';}else if(updatesRank===2){updatesString='i, coords[1]';}var updatesSnippet=\"getUpdates(\".concat(updatesString,\")\");var strideString=sliceDim>1?'strides[j]':'strides';this.userCode=\"\\n        \".concat(stridesType,\" strides = \").concat(stridesType,\"(\").concat(strides,\");\\n\\n        void main() {\\n          \").concat(dtype,\" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \").concat(updateSize,\"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \").concat(sliceDim,\"; j++) {\\n              int index = round(\").concat(indicesSnippet,\");\\n              flattenedIndex += index * \").concat(strideString,\";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \").concat(updatesSnippet,\";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var SegmentOpProgram=function SegmentOpProgram(segOpInfo,segOpType){_classCallCheck2(this,SegmentOpProgram);this.variableNames=['x','segmentIds'];var windowSize=segOpInfo.windowSize;var batchSize=segOpInfo.batchSize;var inSize=segOpInfo.inSize;var numSegments=segOpInfo.numSegments;var outSize=numSegments*Math.ceil(inSize/windowSize);this.outputShape=[batchSize,outSize];var initializationValue='0.0';var returnValue=\"sumValue\";var windowSizeNearestVec4=Math.floor(windowSize/4)*4;var windowSizeVec4Remainder=windowSize%4;var updateSnippet=\"\\n        sumValue += dot(values, segFilter);\\n    \";var checkValueOutOfBounds='';if(inSize%windowSize>0){checkValueOutOfBounds=\"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize,\") {\\n          return initializationValue;\\n        }\\n      \");}var checkSegmentIdOutOfBounds='';if(inSize%windowSize>0){checkSegmentIdOutOfBounds=\"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize,\") {\\n          return -1.0;\\n        }\\n      \");}this.userCode=\"\\n      const float initializationValue = \".concat(initializationValue,\";\\n\\n      float getValue(int batch, int inIdx) {\\n        \").concat(checkValueOutOfBounds,\"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \").concat(checkSegmentIdOutOfBounds,\"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \").concat(numSegments,\")) * float(\").concat(windowSize,\"));\\n        int currentSeg = int(mod(float(outIdx), float(\").concat(numSegments,\")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \").concat(windowSizeNearestVec4,\"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        }\\n\\n        int inIdx = inOffset + \").concat(windowSizeNearestVec4,\";\\n        if (\").concat(windowSizeVec4Remainder===1,\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        } else if (\").concat(windowSizeVec4Remainder===2,\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        } else if (\").concat(windowSizeVec4Remainder===3,\") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \").concat(updateSnippet,\"\\n        }\\n        setOutput(\").concat(returnValue,\");\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var select_gpu_SelectProgram=function select_gpu_SelectProgram(cRank,shape,rank){_classCallCheck2(this,select_gpu_SelectProgram);this.variableNames=['c','a','b'];this.outputShape=shape;var cCoords;var abCoords;if(rank>4){throw Error(\"Where for rank \".concat(rank,\" is not yet supported\"));}if(rank===1){abCoords=\"resRC\";cCoords=\"resRC\";}else{var currentCoords=['resRC.x','resRC.y','resRC.z','resRC.w'];var cCoordVars=[];var abCoordVars=[];for(var i=0;i<shape.length;i++){abCoordVars.push(\"\".concat(currentCoords[i]));if(i<cRank){cCoordVars.push(\"\".concat(currentCoords[i]));}}cCoords=cCoordVars.join();abCoords=abCoordVars.join();}var dtype=getCoordsDataType(rank);this.userCode=\"\\n      void main() {\\n        \".concat(dtype,\" resRC = getOutputCoords();\\n        float cVal = getC(\").concat(cCoords,\");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\").concat(abCoords,\"));\\n        } else {\\n          setOutput(getB(\").concat(abCoords,\"));\\n        }\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var slice_gpu_SliceProgram=/*#__PURE__*/function(){function slice_gpu_SliceProgram(destSize){_classCallCheck2(this,slice_gpu_SliceProgram);this.variableNames=['source'];this.outputShape=destSize;this.rank=destSize.length;var dtype=getCoordsDataType(this.rank);var uniformPart=\"uniform int start[\".concat(this.rank,\"];\");var sourceCoords=slice_gpu_getCoords(this.rank);var body;var coordSum=destSize.map(function(_,i){return\"sourceLoc.\".concat(slice_gpu_coords[i],\" = start[\").concat(i,\"] + coords.\").concat(slice_gpu_coords[i],\";\");});body=\"\\n        \".concat(dtype,\" sourceLoc;\\n        \").concat(dtype,\" coords = getOutputCoords();\\n        \").concat(coordSum.join('\\n'),\"\\n      \");this.userCode=\"\\n      \".concat(uniformPart,\"\\n      void main() {\\n        \").concat(body,\"\\n        setOutput(getSource(\").concat(sourceCoords,\"));\\n      }\\n    \");}_createClass(slice_gpu_SliceProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(start){var _this106=this;if(start.length!==this.rank){throw Error(\"The rank (\".concat(this.rank,\") of the program must match the \")+\"length of start (\".concat(start.length,\")\"));}return function(gpgpu,webGLProgram){if(_this106.startLoc==null){_this106.startLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'start');if(_this106.startLoc==null){// This means the compiler has optimized and realized it doesn't need\n// the uniform.\nreturn;}}gpgpu.gl.uniform1iv(_this106.startLoc,start);};}}]);return slice_gpu_SliceProgram;}();var slice_gpu_coords=['x','y','z','w','u','v'];function slice_gpu_getCoords(rank){if(rank===1){return'sourceLoc';}else if(rank<=6){return slice_gpu_coords.slice(0,rank).map(function(x){return'sourceLoc.'+x;}).join(',');}else{throw Error(\"Slicing for rank \".concat(rank,\" is not yet supported\"));}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var slice_packed_gpu_SlicePackedProgram=/*#__PURE__*/function(){function slice_packed_gpu_SlicePackedProgram(destSize){_classCallCheck2(this,slice_packed_gpu_SlicePackedProgram);this.variableNames=['source'];this.packedInputs=true;this.packedOutput=true;this.outputShape=destSize;this.rank=destSize.length;var dtype=getCoordsDataType(this.rank);var coords=getChannels('coords',this.rank);var sourceLoc=getChannels('sourceLoc',this.rank);var innerDims=this.rank===1?'sourceLoc':\"vec2(\".concat(sourceLoc.slice(-2).join(),\")\");var getChannel=\"getChannel(getSource(\".concat(sourceLoc.join(),\"), \").concat(innerDims,\")\");var upperRow=\"\\n      result.x = \".concat(getChannel,\";\\n      if (++\").concat(coords[this.rank-1],\" < \").concat(destSize[this.rank-1],\") {\\n        ++\").concat(sourceLoc[this.rank-1],\";\\n        result.y = \").concat(getChannel,\";\\n        --\").concat(sourceLoc[this.rank-1],\";\\n      }\\n    \");var lowerRow=this.rank===1?'':\"\\n      --\".concat(coords[this.rank-1],\";\\n      if (++\").concat(coords[this.rank-2],\" < \").concat(destSize[this.rank-2],\") {\\n        ++\").concat(sourceLoc[this.rank-2],\";\\n        result.z = \").concat(getChannel,\";\\n        if (++\").concat(coords[this.rank-1],\" < \").concat(destSize[this.rank-1],\") {\\n          ++\").concat(sourceLoc[this.rank-1],\";\\n          result.w = \").concat(getChannel,\";\\n        }\\n      }\\n    \");var sourceLocSetup=this.rank<=4?\"sourceLoc = coords +\\n            \".concat(dtype,\"(\").concat(destSize.map(function(_,i){return\"start[\".concat(i,\"]\");}).join(),\");\"):destSize.map(function(_,i){return\"\".concat(sourceLoc[i],\" = \").concat(coords[i],\" + start[\").concat(i,\"];\");}).join('\\n');this.userCode=\"\\n      uniform int start[\".concat(this.rank,\"];\\n      void main() {\\n        \").concat(dtype,\" coords = getOutputCoords();\\n        \").concat(dtype,\" sourceLoc;\\n        \").concat(sourceLocSetup,\"\\n        vec4 result = vec4(0.);\\n        \").concat(upperRow,\"\\n        \").concat(lowerRow,\"\\n        setOutput(result);\\n      }\\n    \");}_createClass(slice_packed_gpu_SlicePackedProgram,[{key:\"getCustomSetupFunc\",value:function getCustomSetupFunc(start){var _this107=this;if(start.length!==this.rank){throw Error(\"The rank (\".concat(this.rank,\") of the program must match the \")+\"length of start (\".concat(start.length,\")\"));}return function(gpgpu,webGLProgram){if(_this107.startLoc==null){_this107.startLoc=gpgpu.getUniformLocationNoThrow(webGLProgram,'start');if(_this107.startLoc==null){// This means the compiler has optimized and realized it doesn't need\n// the uniform.\nreturn;}}gpgpu.gl.uniform1iv(_this107.startLoc,start);};}}]);return slice_packed_gpu_SlicePackedProgram;}();// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var strided_slice_gpu_StridedSliceProgram=function strided_slice_gpu_StridedSliceProgram(begin,strides,size){_classCallCheck2(this,strided_slice_gpu_StridedSliceProgram);this.variableNames=['x'];this.outputShape=size;var rank=size.length;var inputDtype=getCoordsDataType(size.length);var dtype=getCoordsDataType(size.length);var newCoords='';if(rank===1){newCoords='coords * strides + begin';}else{var outputAxis=0;newCoords=size.map(function(_,i){outputAxis++;return size.length===1?\"coords * strides[\".concat(i,\"] + begin[\").concat(i,\"]\"):\"coords[\".concat(outputAxis-1,\"] * strides[\").concat(i,\"] + begin[\").concat(i,\"]\");}).join(',');}this.userCode=\"\\n      \".concat(inputDtype,\" begin = \").concat(inputDtype,\"(\").concat(begin,\");\\n      \").concat(inputDtype,\" strides = \").concat(inputDtype,\"(\").concat(strides,\");\\n\\n      void main() {\\n        \").concat(dtype,\" coords = getOutputCoords();\\n        setOutput(getX(\").concat(newCoords,\"));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var texture_manager_TextureManager=/*#__PURE__*/function(){function texture_manager_TextureManager(gpgpu){_classCallCheck2(this,texture_manager_TextureManager);this.gpgpu=gpgpu;this.numUsedTextures=0;this.numFreeTextures=0;this.freeTextures={};this.logEnabled=false;this.usedTextures={};}_createClass(texture_manager_TextureManager,[{key:\"acquireTexture\",value:function acquireTexture(shapeRC,usage,isPacked){var physicalTexType=getPhysicalFromLogicalTextureType(usage,isPacked);var shapeKey=getKeyFromTextureShape(shapeRC,physicalTexType,isPacked);if(!(shapeKey in this.freeTextures)){this.freeTextures[shapeKey]=[];}if(!(shapeKey in this.usedTextures)){this.usedTextures[shapeKey]=[];}if(this.freeTextures[shapeKey].length>0){this.numFreeTextures--;this.numUsedTextures++;this.log();var _newTexture=this.freeTextures[shapeKey].shift();this.usedTextures[shapeKey].push(_newTexture);return _newTexture;}this.numUsedTextures++;this.log();var newTexture;if(physicalTexType===PhysicalTextureType.PACKED_2X2_FLOAT32){newTexture=this.gpgpu.createPackedMatrixTexture(shapeRC[0],shapeRC[1]);}else if(physicalTexType===PhysicalTextureType.PACKED_2X2_FLOAT16){newTexture=this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0],shapeRC[1]);}else if(physicalTexType===PhysicalTextureType.UNPACKED_FLOAT32){newTexture=this.gpgpu.createFloat32MatrixTexture(shapeRC[0],shapeRC[1]);}else if(physicalTexType===PhysicalTextureType.UNPACKED_FLOAT16){newTexture=this.gpgpu.createFloat16MatrixTexture(shapeRC[0],shapeRC[1]);}else if(physicalTexType===PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE){newTexture=this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0],shapeRC[1]);}this.usedTextures[shapeKey].push(newTexture);return newTexture;}},{key:\"releaseTexture\",value:function releaseTexture(texture,shape,logicalTexType,isPacked){if(this.freeTextures==null){// Already disposed.\nreturn;}var physicalTexType=getPhysicalFromLogicalTextureType(logicalTexType,isPacked);var shapeKey=getKeyFromTextureShape(shape,physicalTexType,isPacked);if(!(shapeKey in this.freeTextures)){this.freeTextures[shapeKey]=[];}this.freeTextures[shapeKey].push(texture);this.numFreeTextures++;this.numUsedTextures--;var texList=this.usedTextures[shapeKey];var texIndex=texList.indexOf(texture);if(texIndex<0){throw new Error('Cannot release a texture that was never provided by this '+'texture manager');}texList.splice(texIndex,1);this.log();}},{key:\"log\",value:function log(){if(!this.logEnabled){return;}var total=this.numFreeTextures+this.numUsedTextures;console.log('Free/Used',\"\".concat(this.numFreeTextures,\" / \").concat(this.numUsedTextures),\"(\".concat(total,\")\"));}},{key:\"getNumUsedTextures\",value:function getNumUsedTextures(){return this.numUsedTextures;}},{key:\"getNumFreeTextures\",value:function getNumFreeTextures(){return this.numFreeTextures;}},{key:\"dispose\",value:function dispose(){var _this108=this;if(this.freeTextures==null){// Already disposed.\nreturn;}for(var texShape in this.freeTextures){this.freeTextures[texShape].forEach(function(tex){_this108.gpgpu.deleteMatrixTexture(tex);});}for(var _texShape3 in this.usedTextures){this.usedTextures[_texShape3].forEach(function(tex){_this108.gpgpu.deleteMatrixTexture(tex);});}this.freeTextures=null;this.usedTextures=null;this.numUsedTextures=0;this.numFreeTextures=0;}}]);return texture_manager_TextureManager;}();function getPhysicalTextureForRendering(isPacked){if(Object(dist[\"env\"])().getBool('WEBGL_RENDER_FLOAT32_ENABLED')){if(isPacked){return PhysicalTextureType.PACKED_2X2_FLOAT32;}return PhysicalTextureType.UNPACKED_FLOAT32;}if(isPacked){return PhysicalTextureType.PACKED_2X2_FLOAT16;}return PhysicalTextureType.UNPACKED_FLOAT16;}function getPhysicalFromLogicalTextureType(logicalTexType,isPacked){if(logicalTexType===TextureUsage.UPLOAD){return PhysicalTextureType.PACKED_2X2_FLOAT32;}else if(logicalTexType===TextureUsage.RENDER||logicalTexType==null){return getPhysicalTextureForRendering(isPacked);}else if(logicalTexType===TextureUsage.DOWNLOAD||logicalTexType===TextureUsage.PIXELS){return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;}throw new Error(\"Unknown logical texture type \".concat(logicalTexType));}function getKeyFromTextureShape(shapeRowsCol,physicalTexType,isPacked){return\"\".concat(shapeRowsCol[0],\"_\").concat(shapeRowsCol[1],\"_\").concat(physicalTexType,\"_\").concat(isPacked);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var tile_gpu_TileProgram=function tile_gpu_TileProgram(aShape,reps){_classCallCheck2(this,tile_gpu_TileProgram);this.variableNames=['A'];var outputShape=new Array(aShape.length);for(var i=0;i<outputShape.length;i++){outputShape[i]=aShape[i]*reps[i];}this.outputShape=outputShape;this.rank=outputShape.length;var dtype=getCoordsDataType(this.rank);var sourceCoords=tile_gpu_getSourceCoords(aShape);this.userCode=\"\\n      void main() {\\n        \".concat(dtype,\" resRC = getOutputCoords();\\n        setOutput(getA(\").concat(sourceCoords,\"));\\n      }\\n    \");};function tile_gpu_getSourceCoords(aShape){var rank=aShape.length;if(rank>5){throw Error(\"Tile for rank \".concat(rank,\" is not yet supported\"));}if(rank===1){return\"imod(resRC, \".concat(aShape[0],\")\");}var currentCoords=['resRC.x','resRC.y','resRC.z','resRC.w','resRC.u'];var sourceCoords=[];for(var i=0;i<aShape.length;i++){sourceCoords.push(\"imod(\".concat(currentCoords[i],\", \").concat(aShape[i],\")\"));}return sourceCoords.join();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var UnaryOpProgram=function UnaryOpProgram(aShape,opSnippet){_classCallCheck2(this,UnaryOpProgram);this.variableNames=['A'];this.outputShape=aShape;this.userCode=\"\\n      float unaryOperation(float x) {\\n        \".concat(opSnippet,\"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \");};var unaryop_gpu_CHECK_NAN_SNIPPET=\"if (isnan(x)) return x;\";var LINEAR=\"return x;\";var ABS=\"return abs(x);\";var RELU=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  return (x < 0.0) ? 0.0 : x;\\n\";var RELU6=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\";var ELU=\"return (x >= 0.0) ? x : (exp(x) - 1.0);\";var SELU=\"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \".concat(dist[\"backend_util\"].SELU_SCALEALPHA,\";\\n  float scale = \").concat(dist[\"backend_util\"].SELU_SCALE,\";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\");function STEP(){var alpha=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.0;return unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n    return x > 0.0 ? 1.0 : float(\".concat(alpha,\");\\n  \");}var NEG=\"return -x;\";var CEIL=\"return ceil(x);\";var FLOOR=\"return floor(x);\";var SIGN=\"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\";var IS_NAN=\"return float(isnan(x));\";var IS_INF=\"return float(isinf(x));\";var IS_FINITE=\"return float(!isnan(x) && !isinf(x));\";var ROUND=\"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";var EXP=\"return exp(x);\";var EXPM1=\"return exp(x) - 1.0;\";var LOG=\"if (x < 0.0) return NAN;\\n  return log(x);\";var LOG1P=\"return log(1.0 + x);\";var SQRT=\"return sqrt(x);\";var RSQRT=\"return inversesqrt(x);\";var SIGMOID=\"return 1.0 / (1.0 + exp(-1.0 * x));\";/**\r\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\r\n *\r\n * epsilon is the difference between 1.0 and the next representable\r\n * float. For a single precision 32 bit float this should be 2^-23, see:\r\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\r\n *\r\n * too_large = (x > -threshold) is value above which exp(x) may overflow\r\n * but softplus(x) == x is within machine epsilon\r\n *\r\n * too_small = (x < threshold) is value below which exp(x) may underflow,\r\n * but softplus(x) == exp(x) is within machine epsilon.\r\n */var SOFTPLUS=\"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";var SIN=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  return sin(x);\\n\";var COS=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  return cos(x);\\n\";var TAN=\"return tan(x);\";var ASIN=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\";var ACOS=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\";var ATAN=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  return atan(x);\\n\";var SINH=\"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";var COSH=\"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";var TANH=\"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";var ASINH=unaryop_gpu_CHECK_NAN_SNIPPET+\"return log(x + sqrt(x * x + 1.0));\";var ACOSH=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\";var ATANH=unaryop_gpu_CHECK_NAN_SNIPPET+\"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";var ERF=\"\\n  // Error function is calculated approximately with elementary function.\\n  // See \\\"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\\\", Abramowitz and Stegun.\\n  float p = \".concat(dist[\"backend_util\"].ERF_P,\";\\n  float a1 = \").concat(dist[\"backend_util\"].ERF_A1,\";\\n  float a2 = \").concat(dist[\"backend_util\"].ERF_A2,\";\\n  float a3 = \").concat(dist[\"backend_util\"].ERF_A3,\";\\n  float a4 = \").concat(dist[\"backend_util\"].ERF_A4,\";\\n  float a5 = \").concat(dist[\"backend_util\"].ERF_A5,\";\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n\");var SQUARE=\"return x * x;\";var RECIPROCAL=\"return 1.0 / x;\";var LOGICAL_NOT=\"return float(!(x >= 1.0));\";var TO_INT=\"return float(int(x));\";var CLONE='return x;';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var unaryop_packed_gpu_LINEAR=\"return x;\";var unaryop_packed_gpu_LOG=\"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\";var unaryop_packed_gpu_RELU=\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\";var unaryop_packed_gpu_RELU6=\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\";var unaryop_packed_gpu_ELU=\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\";var UnaryOpPackedProgram=function UnaryOpPackedProgram(aShape,opSnippet){_classCallCheck2(this,UnaryOpPackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;this.outputShape=aShape;this.userCode=\"\\n      vec4 unaryOperation(vec4 x) {\\n        \".concat(opSnippet,\"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var unpack_gpu_UnpackProgram=function unpack_gpu_UnpackProgram(outputShape){_classCallCheck2(this,unpack_gpu_UnpackProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=false;this.outputShape=outputShape;var rank=outputShape.length;var channels=getChannels('rc',rank);var dtype=getCoordsDataType(rank);var sourceCoords=getSourceCoords(rank,channels);var innerDims=channels.slice(-2);var coords=rank<=1?'rc':\"vec2(\".concat(innerDims.join(','),\")\");this.userCode=\"\\n      void main() {\\n        \".concat(dtype,\" rc = getOutputCoords();\\n        vec4 packedInput = getA(\").concat(sourceCoords,\");\\n\\n        setOutput(getChannel(packedInput, \").concat(coords,\"));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Import webgl flags.\nvar segment_util=dist[\"backend_util\"].segment_util;var _split2=dist[\"kernel_impls\"].split;var _tile2=dist[\"kernel_impls\"].tile;var topkImpl=dist[\"kernel_impls\"].topkImpl;var whereImpl=dist[\"kernel_impls\"].whereImpl;var EPSILON_FLOAT32=1e-7;var EPSILON_FLOAT16=1e-4;var binaryCaches={};function getBinaryCache(webGLVersion){if(webGLVersion in binaryCaches){return binaryCaches[webGLVersion];}binaryCaches[webGLVersion]={};return binaryCaches[webGLVersion];}function mapActivationToShaderProgram(activation){var packed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(activation==='linear'){if(packed){return unaryop_packed_gpu_LINEAR;}return LINEAR;}else if(activation==='relu'){if(packed){return unaryop_packed_gpu_RELU;}return RELU;}else if(activation==='elu'){if(packed){return unaryop_packed_gpu_ELU;}return ELU;}else if(activation==='relu6'){if(packed){return unaryop_packed_gpu_RELU6;}return RELU6;}else if(activation==='prelu'){if(packed){return binaryop_packed_gpu_PRELU;}return PRELU;}throw new Error(\"Activation \".concat(activation,\" has not been implemented for the WebGL backend.\"));}// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nvar CPU_HANDOFF_SIZE_THRESHOLD=128;// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nvar BEFORE_PAGING_CONSTANT=600;function numMBBeforeWarning(){if(Object(dist[\"env\"])().global.screen==null){return 1024;// 1 GB.\n}return Object(dist[\"env\"])().global.screen.height*Object(dist[\"env\"])().global.screen.width*window.devicePixelRatio*BEFORE_PAGING_CONSTANT/1024/1024;}// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nvar MATMUL_SHARED_DIM_THRESHOLD=1000;var backend_webgl_MathBackendWebGL=/*#__PURE__*/function(_dist$KernelBackend2){_inherits(backend_webgl_MathBackendWebGL,_dist$KernelBackend2);var _super34=_createSuper(backend_webgl_MathBackendWebGL);function backend_webgl_MathBackendWebGL(gpgpu){var _this109;_classCallCheck2(this,backend_webgl_MathBackendWebGL);_this109=_super34.call(this);// Maps data ids that have a pending read operation, to list of subscribers.\n_this109.pendingRead=new WeakMap();// List of data ids that are scheduled for disposal, but are waiting on a\n// pending read operation.\n_this109.pendingDisposal=new WeakSet();// Used to count the number of 'shallow' sliced tensors that point to the\n// same data id.\n_this109.dataRefCount=new WeakMap();_this109.numBytesInGPU=0;// Accumulated time spent (including blocking) in uploading data to webgl.\n_this109.uploadWaitMs=0;// Accumulated time spent (including blocking in downloading data from webgl.\n_this109.downloadWaitMs=0;_this109.warnedAboutMemory=false;_this109.pendingDeletes=0;_this109.disposed=false;if(!Object(dist[\"env\"])().getBool('HAS_WEBGL')){throw new Error('WebGL is not supported on this device');}if(gpgpu==null){var gl=getWebGLContext(Object(dist[\"env\"])().getNumber('WEBGL_VERSION'));_this109.binaryCache=getBinaryCache(Object(dist[\"env\"])().getNumber('WEBGL_VERSION'));_this109.gpgpu=new gpgpu_context_GPGPUContext(gl);_this109.canvas=gl.canvas;_this109.gpgpuCreatedLocally=true;}else{_this109.gpgpu=gpgpu;_this109.binaryCache={};_this109.gpgpuCreatedLocally=false;_this109.canvas=gpgpu.gl.canvas;}_this109.textureManager=new texture_manager_TextureManager(_this109.gpgpu);_this109.numMBBeforeWarning=numMBBeforeWarning();_this109.texData=new dist[\"DataStorage\"](_assertThisInitialized(_this109),Object(dist[\"engine\"])());return _this109;}_createClass(backend_webgl_MathBackendWebGL,[{key:\"numDataIds\",value:function numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes;}},{key:\"write\",value:function write(values,shape,dtype){if(Object(dist[\"env\"])().getBool('DEBUG')){this.checkNumericalProblems(values);}if(dtype==='complex64'&&values!=null){throw new Error(\"Cannot write to a complex64 dtype. \"+\"Please use tf.complex(real, imag).\");}var dataId={};this.texData.set(dataId,{shape:shape,dtype:dtype,values:values,usage:TextureUsage.UPLOAD});return dataId;}},{key:\"move\",value:function move(dataId,values,shape,dtype){if(Object(dist[\"env\"])().getBool('DEBUG')){this.checkNumericalProblems(values);}if(dtype==='complex64'){throw new Error(\"Cannot write to a complex64 dtype. \"+\"Please use tf.complex(real, imag).\");}this.texData.set(dataId,{shape:shape,dtype:dtype,values:values,usage:TextureUsage.UPLOAD});}},{key:\"readSync\",value:function readSync(dataId){var texData=this.texData.get(dataId);var values=texData.values,dtype=texData.dtype,complexTensors=texData.complexTensors,slice=texData.slice,shape=texData.shape,isPacked=texData.isPacked;if(slice!=null){var program;if(isPacked){program=new UnaryOpPackedProgram(shape,CLONE);}else{program=new UnaryOpProgram(shape,CLONE);}var res=this.runWebGLProgram(program,[{dataId:dataId,shape:shape,dtype:dtype}],dtype);var data=this.readSync(res.dataId);this.disposeData(res.dataId);return data;}if(values!=null){return this.convertAndCacheOnCPU(dataId);}if(dtype==='string'){return values;}var shouldTimeProgram=this.activeTimers!=null;var start;if(shouldTimeProgram){start=dist[\"util\"].now();}var result;if(dtype==='complex64'){var realValues=complexTensors.real.dataSync();var imagValues=complexTensors.imag.dataSync();result=dist[\"backend_util\"].mergeRealAndImagArrays(realValues,imagValues);}else{result=this.getValuesFromTexture(dataId);}if(shouldTimeProgram){this.downloadWaitMs+=dist[\"util\"].now()-start;}return this.convertAndCacheOnCPU(dataId,result);}},{key:\"read\",value:function(){var _read2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee121(dataId){var _subscribers,texData,values,shape,slice,dtype,complexTensors,isPacked,program,res,data,buffer,tmpDownloadTarget,_this$gpgpu,tmpData,vals,ps,realValues,imagValues,size,dTypeVals,subscribers;return regeneratorRuntime.wrap(function _callee121$(_context121){while(1){switch(_context121.prev=_context121.next){case 0:if(!this.pendingRead.has(dataId)){_context121.next=3;break;}_subscribers=this.pendingRead.get(dataId);return _context121.abrupt(\"return\",new Promise(function(resolve){return _subscribers.push(resolve);}));case 3:texData=this.texData.get(dataId);values=texData.values,shape=texData.shape,slice=texData.slice,dtype=texData.dtype,complexTensors=texData.complexTensors,isPacked=texData.isPacked;if(!(slice!=null)){_context121.next=11;break;}if(isPacked){program=new UnaryOpPackedProgram(shape,CLONE);}else{program=new UnaryOpProgram(shape,CLONE);}res=this.runWebGLProgram(program,[{dataId:dataId,shape:shape,dtype:dtype}],dtype);data=this.read(res.dataId);this.disposeData(res.dataId);return _context121.abrupt(\"return\",data);case 11:if(!(values!=null)){_context121.next=13;break;}return _context121.abrupt(\"return\",this.convertAndCacheOnCPU(dataId));case 13:if(!(!Object(dist[\"env\"])().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')&&Object(dist[\"env\"])().getNumber('WEBGL_VERSION')===2)){_context121.next=15;break;}throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \"+\"WEBGL_VERSION=2 not yet supported.\");case 15:buffer=null;if(dtype!=='complex64'&&Object(dist[\"env\"])().get('WEBGL_BUFFER_SUPPORTED')){// Possibly copy the texture into a buffer before inserting a fence.\ntmpDownloadTarget=this.decode(dataId);tmpData=this.texData.get(tmpDownloadTarget.dataId);buffer=(_this$gpgpu=this.gpgpu).createBufferFromTexture.apply(_this$gpgpu,[tmpData.texture].concat(_toConsumableArray2(getDenseTexShape(shape))));}this.pendingRead.set(dataId,[]);if(!(dtype!=='complex64')){_context121.next=21;break;}_context121.next=21;return this.gpgpu.createAndWaitForFence();case 21:if(!(dtype==='complex64')){_context121.next=30;break;}_context121.next=24;return Promise.all([complexTensors.real.data(),complexTensors.imag.data()]);case 24:ps=_context121.sent;realValues=ps[0];imagValues=ps[1];vals=dist[\"backend_util\"].mergeRealAndImagArrays(realValues,imagValues);_context121.next=31;break;case 30:if(buffer==null){vals=this.getValuesFromTexture(dataId);}else{size=dist[\"util\"].sizeFromShape(shape);vals=this.gpgpu.downloadFloat32MatrixFromBuffer(buffer,size);}case 31:if(tmpDownloadTarget!=null){this.disposeData(tmpDownloadTarget.dataId);}dTypeVals=this.convertAndCacheOnCPU(dataId,vals);subscribers=this.pendingRead.get(dataId);this.pendingRead.delete(dataId);// Notify all pending reads.\nsubscribers.forEach(function(resolve){return resolve(dTypeVals);});if(this.pendingDisposal.has(dataId)){this.pendingDisposal.delete(dataId);this.disposeData(dataId);this.pendingDeletes--;}return _context121.abrupt(\"return\",dTypeVals);case 38:case\"end\":return _context121.stop();}}},_callee121,this);}));function read(_x109){return _read2.apply(this,arguments);}return read;}()},{key:\"checkNumericalProblems\",value:function checkNumericalProblems(values){if(values==null){return;}for(var i=0;i<values.length;i++){var num=values[i];if(!canBeRepresented(num)){if(Object(dist[\"env\"])().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')){throw Error(\"The value \".concat(num,\" cannot be represented with your \")+\"current settings. Consider enabling float32 rendering: \"+\"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");}throw Error(\"The value \".concat(num,\" cannot be represented on this device.\"));}}}},{key:\"getValuesFromTexture\",value:function getValuesFromTexture(dataId){var _this$texData$get=this.texData.get(dataId),shape=_this$texData$get.shape,dtype=_this$texData$get.dtype,isPacked=_this$texData$get.isPacked;var size=dist[\"util\"].sizeFromShape(shape);if(Object(dist[\"env\"])().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')){var _this$gpgpu2;var tmpTarget=this.decode(dataId);var _tmpData=this.texData.get(tmpTarget.dataId);var _vals=(_this$gpgpu2=this.gpgpu).downloadMatrixFromPackedTexture.apply(_this$gpgpu2,[_tmpData.texture].concat(_toConsumableArray2(getDenseTexShape(shape)))).subarray(0,size);this.disposeData(tmpTarget.dataId);return _vals;}var shouldUsePackedProgram=Object(dist[\"env\"])().getBool('WEBGL_PACK')&&isPacked===true;var outputShape=shouldUsePackedProgram?getShapeAs3D(shape):shape;var program=shouldUsePackedProgram?new encode_float_packed_gpu_EncodeFloatPackedProgram(outputShape):new encode_float_gpu_EncodeFloatProgram(outputShape);var output=this.runWebGLProgram(program,[{shape:outputShape,dtype:dtype,dataId:dataId}],'float32');var tmpData=this.texData.get(output.dataId);var vals=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture,tmpData.texShape[0],tmpData.texShape[1]).subarray(0,size);this.disposeData(output.dataId);return vals;}},{key:\"time\",value:function(){var _time3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee122(f){var oldActiveTimers,newActiveTimers,outerMostTime,flattenedActiveTimerQueries,flattenedActiveTimerNames,res,kernelMs;return regeneratorRuntime.wrap(function _callee122$(_context122){while(1){switch(_context122.prev=_context122.next){case 0:oldActiveTimers=this.activeTimers;newActiveTimers=[];outerMostTime=false;if(this.programTimersStack==null){this.programTimersStack=newActiveTimers;outerMostTime=true;}else{this.activeTimers.push(newActiveTimers);}this.activeTimers=newActiveTimers;f();// needing to split these up because util.flatten only accepts certain types\nflattenedActiveTimerQueries=dist[\"util\"].flatten(this.activeTimers.map(function(d){return d.query;})).filter(function(d){return d!=null;});flattenedActiveTimerNames=dist[\"util\"].flatten(this.activeTimers.map(function(d){return d.name;})).filter(function(d){return d!=null;});this.activeTimers=oldActiveTimers;if(outerMostTime){this.programTimersStack=null;}res={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null// will be filled by the engine\n};if(!(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE')>0)){_context122.next=19;break;}_context122.next=14;return Promise.all(flattenedActiveTimerQueries);case 14:kernelMs=_context122.sent;res['kernelMs']=dist[\"util\"].sum(kernelMs);res['getExtraProfileInfo']=function(){return kernelMs.map(function(d,i){return{name:flattenedActiveTimerNames[i],ms:d};}).map(function(d){return\"\".concat(d.name,\": \").concat(d.ms);}).join(', ');};_context122.next=20;break;case 19:res['kernelMs']={error:'WebGL query timers are not supported in this environment.'};case 20:this.uploadWaitMs=0;this.downloadWaitMs=0;return _context122.abrupt(\"return\",res);case 23:case\"end\":return _context122.stop();}}},_callee122,this);}));function time(_x110){return _time3.apply(this,arguments);}return time;}()},{key:\"memory\",value:function memory(){return{unreliable:false,numBytesInGPU:this.numBytesInGPU};}},{key:\"startTimer\",value:function startTimer(){if(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE')>0){return this.gpgpu.beginQuery();}return{startMs:dist[\"util\"].now(),endMs:null};}},{key:\"endTimer\",value:function endTimer(query){if(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE')>0){this.gpgpu.endQuery();return query;}query.endMs=dist[\"util\"].now();return query;}},{key:\"getQueryTime\",value:function(){var _getQueryTime=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee123(query){var timerQuery;return regeneratorRuntime.wrap(function _callee123$(_context123){while(1){switch(_context123.prev=_context123.next){case 0:if(!(Object(dist[\"env\"])().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE')>0)){_context123.next=2;break;}return _context123.abrupt(\"return\",this.gpgpu.waitForQueryAndGetTime(query));case 2:timerQuery=query;return _context123.abrupt(\"return\",timerQuery.endMs-timerQuery.startMs);case 4:case\"end\":return _context123.stop();}}},_callee123,this);}));function getQueryTime(_x111){return _getQueryTime.apply(this,arguments);}return getQueryTime;}()},{key:\"disposeData\",value:function disposeData(dataId){if(this.pendingDisposal.has(dataId)){return;}if(this.pendingRead.has(dataId)){this.pendingDisposal.add(dataId);this.pendingDeletes++;return;}// No-op if already disposed.\nif(!this.texData.has(dataId)){return;}this.releaseGPUData(dataId);var _this$texData$get2=this.texData.get(dataId),complexTensors=_this$texData$get2.complexTensors;if(complexTensors!=null){complexTensors.real.dispose();complexTensors.imag.dispose();}this.texData.delete(dataId);}},{key:\"releaseGPUData\",value:function releaseGPUData(dataId){var _this$texData$get3=this.texData.get(dataId),texture=_this$texData$get3.texture,dtype=_this$texData$get3.dtype,texShape=_this$texData$get3.texShape,usage=_this$texData$get3.usage,isPacked=_this$texData$get3.isPacked,slice=_this$texData$get3.slice;var key=slice&&slice.origDataId||dataId;var refCount=this.dataRefCount.get(key);if(refCount>1){this.dataRefCount.set(key,refCount-1);}else{this.dataRefCount.delete(key);if(texture!=null){this.numBytesInGPU-=this.computeBytes(texShape,dtype);this.textureManager.releaseTexture(texture,texShape,usage,isPacked);}}var texData=this.texData.get(dataId);texData.texture=null;texData.texShape=null;texData.isPacked=false;texData.slice=null;}},{key:\"getTexture\",value:function getTexture(dataId){this.uploadToGPU(dataId);return this.texData.get(dataId).texture;}/**\r\n     * Returns internal information for the specific data bucket. Used in unit\r\n     * tests.\r\n     */},{key:\"getDataInfo\",value:function getDataInfo(dataId){return this.texData.get(dataId);}},{key:\"getCPUBackend\",value:function getCPUBackend(){if(!Object(dist[\"env\"])().getBool('WEBGL_CPU_FORWARD')){return null;}if(this.cpuBackend==null){this.cpuBackend=Object(dist[\"engine\"])().findBackend('cpu');}return this.cpuBackend;}/*\r\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\r\n    determines when it would be faster to execute a kernel on the CPU. WebGL\r\n    kernels opt into running this check and forwarding when appropriate.\r\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\r\n    sustainable strategy for optimizing backend execution of ops.\r\n     */},{key:\"shouldExecuteOnCPU\",value:function shouldExecuteOnCPU(inputs){var _this110=this;var sizeThreshold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:CPU_HANDOFF_SIZE_THRESHOLD;return this.getCPUBackend()!=null&&inputs.every(function(input){return _this110.texData.get(input.dataId).texture==null&&dist[\"util\"].sizeFromShape(input.shape)<sizeThreshold;});}},{key:\"getGPGPUContext\",value:function getGPGPUContext(){return this.gpgpu;}},{key:\"complex\",value:function complex(real,imag){var result=this.makeOutput(real.shape,'complex64');var resultData=this.texData.get(result.dataId);// The backend owns the reference to the underlying real and imaginary\n// clones. These will explicitly get disposed when the complex tensor is\n// disposed.\nresultData.complexTensors={real:Object(dist[\"engine\"])().keep(real.clone()),imag:Object(dist[\"engine\"])().keep(imag.clone())};return result;}},{key:\"real\",value:function real(input){var resultData=this.texData.get(input.dataId);return resultData.complexTensors.real.clone();}},{key:\"imag\",value:function imag(input){var resultData=this.texData.get(input.dataId);return resultData.complexTensors.imag.clone();}},{key:\"slice\",value:function slice(x,begin,size){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.slice(x,begin,size);}// Short-circuit computation if the slice is zero-sized.\nif(dist[\"util\"].sizeFromShape(size)===0){return Object(dist[\"tensor\"])([],size,x.dtype);}var _this$texData$get4=this.texData.get(x.dataId),isPacked=_this$texData$get4.isPacked;var isContinous=dist[\"slice_util\"].isSliceContinous(x.shape,begin,size);if(isPacked||!isContinous){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_ARRAY_OPERATIONS')?new slice_packed_gpu_SlicePackedProgram(size):new slice_gpu_SliceProgram(size);var customSetup=program.getCustomSetupFunc(begin);return this.compileAndRun(program,[x],null,customSetup);}this.uploadToGPU(x.dataId);return this.shallowSlice(x,begin,size);}},{key:\"shallowSlice\",value:function shallowSlice(x,begin,size){var xTexData=this.texData.get(x.dataId);var t=this.makeOutput(size,x.dtype);var newTexData=this.texData.get(t.dataId);// Copy texture data from the original tensor.\nObject.assign(newTexData,xTexData);newTexData.shape=size;newTexData.dtype=x.dtype;var flatOffset=dist[\"slice_util\"].computeFlatOffset(begin,x.strides);if(xTexData.slice){// We are slicing an already sliced tensor, so we have to accumulate\n// the offset.\nflatOffset+=xTexData.slice.flatOffset;}newTexData.slice={flatOffset:flatOffset,// Point to the original dataId, which is used to do ref counting.\norigDataId:xTexData.slice&&xTexData.slice.origDataId||x.dataId};// Increase the ref count for that data bucket.\nvar refCount=this.dataRefCount.get(newTexData.slice.origDataId)||1;this.dataRefCount.set(newTexData.slice.origDataId,refCount+1);return t;}},{key:\"stridedSlice\",value:function stridedSlice(x,begin,end,strides){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.stridedSlice(x,begin,end,strides);}var outShape=dist[\"slice_util\"].computeOutShape(begin,end,strides);if(outShape.some(function(axis){return axis===0;})){return Object(dist[\"tensor\"])([],outShape);}var program=new strided_slice_gpu_StridedSliceProgram(begin,strides,outShape);return this.compileAndRun(program,[x]);}},{key:\"reverse\",value:function reverse(x,axis){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_ARRAY_OPERATIONS')?new reverse_packed_gpu_ReversePackedProgram(x.shape,axis):new reverse_gpu_ReverseProgram(x.shape,axis);return this.compileAndRun(program,[x]);}},{key:\"concat\",value:function concat(tensors,axis){if(tensors[0].dtype==='complex64'){var reals=tensors.map(function(t){return Object(dist[\"real\"])(t);});var imags=tensors.map(function(t){return Object(dist[\"imag\"])(t);});return Object(dist[\"complex\"])(this.concat(reals,axis),this.concat(imags,axis));}if(this.shouldExecuteOnCPU(tensors)){return this.cpuBackend.concat(tensors,axis);}if(tensors.length===1){return tensors[0];}if(tensors.length>Object(dist[\"env\"])().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')){var midIndex=Math.floor(tensors.length/2);var leftSide=this.concat(tensors.slice(0,midIndex),axis);var rightSide=this.concat(tensors.slice(midIndex),axis);return this.concat([leftSide,rightSide],axis);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_ARRAY_OPERATIONS')&&tensors[0].rank>1){var _program=new concat_packed_gpu_ConcatPackedProgram(tensors.map(function(t){return t.shape;}),axis);return this.compileAndRun(_program,tensors);}// Any concat of n-dimensional tensors across any axis can be reduced to\n// a concatenation of two-dimensional tensors across the axis 1 by first\n// partitioning the axes of the original tensors into those less than the\n// axis to be concatenated and the rest. Then reshape the tensors\n// into a two-dimensional tensor by collapsing these two sets of axes and\n// concatenate the resulting matrices across the axis 1, finally reshaping\n// the result to have the proper shape.\nvar outShape=dist[\"backend_util\"].computeOutShape(tensors.map(function(t){return t.shape;}),axis);var tensors2D=tensors.map(function(t){return t.as2D(-1,dist[\"util\"].sizeFromShape(t.shape.slice(axis)));});var program=new concat_gpu_ConcatProgram(tensors2D.map(function(t){return t.shape;}));var res=this.compileAndRun(program,tensors2D);return res.reshape(outShape);}},{key:\"neg\",value:function neg(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.neg(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,NEG,x.dtype);}var program=new UnaryOpProgram(x.shape,NEG);return this.compileAndRun(program,[x]);}},{key:\"batchMatMul\",value:function batchMatMul(a,b,transposeA,transposeB){var outerShapeA=transposeA?a.shape[2]:a.shape[1];var outerShapeB=transposeB?b.shape[1]:b.shape[2];var sharedDim=transposeA?a.shape[1]:a.shape[2];var _a$shape=_slicedToArray(a.shape,2),batch=_a$shape[0];// Since the matrices are vectors, it is faster to call mul().sum()\n// because sum() is O(sqrt(N)) due to divide-and-conquer.\nif((outerShapeA===1||outerShapeB===1)&&sharedDim>MATMUL_SHARED_DIM_THRESHOLD){if(transposeA){a=Object(dist[\"transpose\"])(a,[0,2,1]);}if(transposeB){b=Object(dist[\"transpose\"])(b,[0,2,1]);}var a3D=outerShapeB===1?a:a.as3D(batch,sharedDim,1);var axis=outerShapeB===1?2:1;var b3D=outerShapeB===1?b.as3D(batch,1,sharedDim):b;return this.multiply(a3D,b3D).sum(axis,true/* keepDims */);}var dtype=Object(dist[\"upcastType\"])(a.dtype,b.dtype);var program=new MatMulPackedProgram(a.shape,[batch,outerShapeA,outerShapeB],transposeA,transposeB);return this.compileAndRun(program,[a,b],dtype);}},{key:\"fusedBatchMatMul\",value:function fusedBatchMatMul(_ref34){var a=_ref34.a,b=_ref34.b,transposeA=_ref34.transposeA,transposeB=_ref34.transposeB,bias=_ref34.bias,activation=_ref34.activation,preluActivationWeights=_ref34.preluActivationWeights;var outerShapeA=transposeA?a.shape[2]:a.shape[1];var outerShapeB=transposeB?b.shape[1]:b.shape[2];var _a$shape2=_slicedToArray(a.shape,2),batch=_a$shape2[0];var dtype=Object(dist[\"upcastType\"])(a.dtype,b.dtype);var hasBias=bias!=null;var hasPreluActivationWeights=preluActivationWeights!=null;var fusedActivation=activation?mapActivationToShaderProgram(activation,true):null;var program=new MatMulPackedProgram(a.shape,[batch,outerShapeA,outerShapeB],transposeA,transposeB,hasBias,fusedActivation,hasPreluActivationWeights);var inputs=[a,b];if(bias){inputs.push(bias);}if(preluActivationWeights){inputs.push(preluActivationWeights);}return this.compileAndRun(program,inputs,dtype);}},{key:\"multiply\",value:function multiply(a,b){if(a.dtype==='complex64'){var aData=this.texData.get(a.dataId);var bData=this.texData.get(b.dataId);var realProgram=new binaryop_complex_gpu_BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL,a.shape,b.shape);var imagProgram=new binaryop_complex_gpu_BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG,a.shape,b.shape);var inputs=[this.makeComplexComponentTensorInfo(a,aData.complexTensors.real),this.makeComplexComponentTensorInfo(a,aData.complexTensors.imag),this.makeComplexComponentTensorInfo(b,bData.complexTensors.real),this.makeComplexComponentTensorInfo(b,bData.complexTensors.imag)];var real=this.compileAndRun(realProgram,inputs);var imag=this.compileAndRun(imagProgram,inputs);var complex=this.complex(real,imag);real.dispose();imag.dispose();return complex;}if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.multiply(a,b);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,MUL,a.dtype);}var program=new binaryop_gpu_BinaryOpProgram(MUL,a.shape,b.shape);return this.compileAndRun(program,[a,b],a.dtype);}},{key:\"batchNorm\",value:function batchNorm(x,mean,variance,offset,scale,varianceEpsilon){var inputs=[x,mean,variance];var offsetShape=null;if(offset!=null){offsetShape=offset.shape;inputs.push(offset);}var scaleShape=null;if(scale!=null){scaleShape=scale.shape;inputs.push(scale);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_NORMALIZATION')){var batchNormPackedProgram=new batchnorm_packed_gpu_BatchNormPackedProgram(x.shape,mean.shape,variance.shape,offsetShape,scaleShape,varianceEpsilon);return this.compileAndRun(batchNormPackedProgram,inputs);}var batchNormProgram=new batchnorm_gpu_BatchNormProgram(x.shape,mean.shape,variance.shape,offsetShape,scaleShape,varianceEpsilon);return this.compileAndRun(batchNormProgram,inputs);}},{key:\"localResponseNormalization4D\",value:function localResponseNormalization4D(x,radius,bias,alpha,beta){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_NORMALIZATION')?new LRNPackedProgram(x.shape,radius,bias,alpha,beta):new LRNProgram(x.shape,radius,bias,alpha,beta);return this.compileAndRun(program,[x]);}},{key:\"LRNGrad\",value:function LRNGrad(dy,inputImage,outputImage,depthRadius,bias,alpha,beta){var program=new LRNGradProgram(inputImage.shape,depthRadius,bias,alpha,beta);return this.compileAndRun(program,[inputImage,outputImage,dy]);}},{key:\"tile\",value:function tile(x,reps){if(x.dtype==='string'){var data=this.readSync(x.dataId);var decodedData=data.map(function(d){return dist[\"util\"].decodeString(d);});var buf=Object(dist[\"buffer\"])(x.shape,x.dtype,decodedData);return _tile2(buf,reps);}var program=new tile_gpu_TileProgram(x.shape,reps);return this.compileAndRun(program,[x]);}},{key:\"pad\",value:function pad(x,paddings,constantValue){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_ARRAY_OPERATIONS')?new pad_packed_gpu_PadPackedProgram(x.shape,paddings,constantValue):new pad_gpu_PadProgram(x.shape,paddings,constantValue);return this.compileAndRun(program,[x]);}},{key:\"gather\",value:function gather(x,indices,axis){if(this.shouldExecuteOnCPU([x,indices])){return this.cpuBackend.gather(x,indices,axis);}var program=new gather_gpu_GatherProgram(x.shape,indices.size,axis);return this.compileAndRun(program,[x,indices]);}},{key:\"batchToSpaceND\",value:function batchToSpaceND(x,blockShape,crops){dist[\"util\"].assert(x.rank<=4,function(){return'batchToSpaceND for rank > 4 with a WebGL backend not '+'implemented yet';});var prod=blockShape.reduce(function(a,b){return a*b;});var reshaped=dist[\"backend_util\"].getReshaped(x.shape,blockShape,prod);var permuted=dist[\"backend_util\"].getPermuted(reshaped.length,blockShape.length);var reshapedPermuted=dist[\"backend_util\"].getReshapedPermuted(x.shape,blockShape,prod);var sliceBeginCoords=dist[\"backend_util\"].getSliceBeginCoords(crops,blockShape.length);var sliceSize=dist[\"backend_util\"].getSliceSize(reshapedPermuted,crops,blockShape.length);return Object(dist[\"transpose\"])(x.reshape(reshaped),permuted).reshape(reshapedPermuted).slice(sliceBeginCoords,sliceSize);}},{key:\"spaceToBatchND\",value:function spaceToBatchND(x,blockShape,paddings){dist[\"util\"].assert(x.rank<=4,function(){return'spaceToBatchND for rank > 4 with a WebGL backend not '+'implemented yet';});var prod=blockShape.reduce(function(a,b){return a*b;});var completePaddings=[[0,0]];completePaddings.push.apply(completePaddings,_toConsumableArray2(paddings));for(var i=1+blockShape.length;i<x.shape.length;++i){completePaddings.push([0,0]);}var paddedX=x.pad(completePaddings);var reshapedPaddedShape=dist[\"backend_util\"].getReshaped(paddedX.shape,blockShape,prod,false);var permutedReshapedPaddedPermutation=dist[\"backend_util\"].getPermuted(reshapedPaddedShape.length,blockShape.length,false);var flattenShape=dist[\"backend_util\"].getReshapedPermuted(paddedX.shape,blockShape,prod,false);return Object(dist[\"transpose\"])(paddedX.reshape(reshapedPaddedShape),permutedReshapedPaddedPermutation).reshape(flattenShape);}},{key:\"reduce\",value:function reduce(x,reduceType,dtype){var batchSize=x.shape[0];var inSize=x.shape[1];var windowSize=dist[\"backend_util\"].computeOptimalWindowSize(inSize);var reduceInfo={windowSize:windowSize,inSize:inSize,batchSize:batchSize};var program=new ReduceProgram(reduceInfo,reduceType);var output=this.compileAndRun(program,[x],dtype);// No need to run another GPGPU program.\nif(output.shape[1]===1){return output;}return this.reduce(output,reduceType,dtype);}},{key:\"argReduce\",value:function argReduce(x,reduceType){var bestIndicesA=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var batchSize=x.shape[0];var inSize=x.shape[1];if(bestIndicesA!=null){batchSize=bestIndicesA.shape[0];inSize=bestIndicesA.shape[1];}var windowSize=dist[\"backend_util\"].computeOptimalWindowSize(inSize);var reduceInfo={windowSize:windowSize,inSize:inSize,batchSize:batchSize};var program=new ArgMinMaxProgram(reduceInfo,reduceType,bestIndicesA==null);var inputs=[x];if(bestIndicesA!=null){inputs.push(bestIndicesA);}var output=this.compileAndRun(program,inputs,'int32');// No need to run another GPGPU program.\nif(output.shape[1]===1){return output;}return this.argReduce(x,reduceType,output);}},{key:\"argReducePacked\",value:function argReducePacked(x,reduceType){var bestIndicesA=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var inShape=bestIndicesA!=null?bestIndicesA.shape:x.shape;var inSize=inShape[inShape.length-1];var windowSize=dist[\"backend_util\"].computeOptimalWindowSize(inSize);var program=new argminmax_packed_gpu_ArgMinMaxPackedProgram(inShape,windowSize,reduceType,bestIndicesA==null);var inputs=bestIndicesA==null?[x]:[x,bestIndicesA];var output=this.compileAndRun(program,inputs,'int32');if(output.rank===x.rank){return this.argReducePacked(x,reduceType,output);}return output;}},{key:\"sum\",value:function sum(x,axes){dist[\"backend_util\"].assertAxesAreInnerMostDims('sum',axes,x.rank);var _dist$backend_util$co15=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co16=_slicedToArray(_dist$backend_util$co15,2),outShape=_dist$backend_util$co16[0],reduceShape=_dist$backend_util$co16[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);var outputDType=dist[\"sumOutType\"](x.dtype);return this.reduce(a2D,'sum',outputDType).reshape(outShape);}},{key:\"prod\",value:function prod(x,axes){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.prod(x,axes);}var _dist$backend_util$co17=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co18=_slicedToArray(_dist$backend_util$co17,2),outShape=_dist$backend_util$co18[0],reduceShape=_dist$backend_util$co18[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);var outputDType=dist[\"sumOutType\"](x.dtype);return this.reduce(a2D,'prod',outputDType).reshape(outShape);}},{key:\"unsortedSegmentSum\",value:function unsortedSegmentSum(x,segmentIds,numSegments){var axis=0;var permutation=dist[\"backend_util\"].getAxesPermutation([axis],x.rank);var permutedX=x;if(permutation!=null){permutedX=Object(dist[\"transpose\"])(x,permutation);axis=dist[\"backend_util\"].getInnerMostAxes(1,x.rank)[0];}var outShape=segment_util.computeOutShape(permutedX.shape,axis,numSegments);var inSize=dist[\"util\"].sizeFromShape([permutedX.shape[axis]]);var a2D=permutedX.as2D(-1,inSize);var outputDType=dist[\"sumOutType\"](x.dtype);var result=this.segOpCompute(a2D,'unsortedSegmentSum',segmentIds,outputDType,numSegments).reshape(outShape);if(permutation!=null){result=Object(dist[\"transpose\"])(result,dist[\"backend_util\"].getUndoAxesPermutation(permutation));}return result;}},{key:\"segOpCompute\",value:function segOpCompute(x,segOpType,segmentIds,dtype,numSegments){var batchSize=x.shape[0];var inSize=x.shape[1];var windowSize=segment_util.segOpComputeOptimalWindowSize(inSize,numSegments);var segOpInfo={windowSize:windowSize,inSize:inSize,batchSize:batchSize,numSegments:numSegments};var program=new SegmentOpProgram(segOpInfo,segOpType);var output=this.compileAndRun(program,[x,segmentIds],dtype);// No need to run another GPGPU program.\nif(output.shape[1]===numSegments){return output;}segmentIds=Object(dist[\"range\"])(0,numSegments).tile([inSize/windowSize]);return this.segOpCompute(output,segOpType,segmentIds,dtype,numSegments);}},{key:\"argMinMaxReduce\",value:function argMinMaxReduce(x,axis,reduceType){var axes=[axis];dist[\"backend_util\"].assertAxesAreInnerMostDims('arg'+reduceType.charAt(0).toUpperCase()+reduceType.slice(1),axes,x.rank);if(!Object(dist[\"env\"])().getBool('WEBGL_PACK_REDUCE')||x.rank<=2){var _dist$backend_util$co19=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co20=_slicedToArray(_dist$backend_util$co19,2),outShape=_dist$backend_util$co20[0],reduceShape=_dist$backend_util$co20[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);return this.argReduce(a2D,reduceType).reshape(outShape);}return this.argReducePacked(x,reduceType);}},{key:\"argMin\",value:function argMin(x,axis){return this.argMinMaxReduce(x,axis,'min');}},{key:\"argMax\",value:function argMax(x,axis){return this.argMinMaxReduce(x,axis,'max');}},{key:\"cumsum\",value:function cumsum(x,axis,exclusive,reverse){if(axis!==x.rank-1){throw new Error(\"WebGL cumsum shader expects an inner-most axis=\".concat(x.rank-1,\" \")+\"but got axis=\".concat(axis));}var program=new cumsum_gpu_CumSumProgram(x.shape,exclusive,reverse);return this.compileAndRun(program,[x]);}},{key:\"equal\",value:function equal(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_EQUAL,'bool');}var program=new binaryop_gpu_BinaryOpProgram(EQUAL,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"notEqual\",value:function notEqual(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_NOT_EQUAL,'bool');}var program=new binaryop_gpu_BinaryOpProgram(NOT_EQUAL,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"less\",value:function less(a,b){if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.less(a,b);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_LESS,'bool');}var program=new binaryop_gpu_BinaryOpProgram(LESS,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"lessEqual\",value:function lessEqual(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_LESS_EQUAL,'bool');}var program=new binaryop_gpu_BinaryOpProgram(LESS_EQUAL,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"greater\",value:function greater(a,b){if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.greater(a,b);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_GREATER,'bool');}var program=new binaryop_gpu_BinaryOpProgram(GREATER,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"greaterEqual\",value:function greaterEqual(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_GREATER_EQUAL,'bool');}var program=new binaryop_gpu_BinaryOpProgram(GREATER_EQUAL,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"logicalNot\",value:function logicalNot(x){var program=new UnaryOpProgram(x.shape,LOGICAL_NOT);return this.compileAndRun(program,[x]);}},{key:\"logicalAnd\",value:function logicalAnd(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_LOGICAL_AND,'bool');}var program=new binaryop_gpu_BinaryOpProgram(LOGICAL_AND,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"logicalOr\",value:function logicalOr(a,b){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_LOGICAL_OR,'bool');}var program=new binaryop_gpu_BinaryOpProgram(LOGICAL_OR,a.shape,b.shape);return this.compileAndRun(program,[a,b],'bool');}},{key:\"select\",value:function select(condition,a,b){var program=new select_gpu_SelectProgram(condition.rank,a.shape,a.rank);return this.compileAndRun(program,[condition,a,b],Object(dist[\"upcastType\"])(a.dtype,b.dtype));}},{key:\"where\",value:function where(condition){dist[\"backend_util\"].warn('tf.where() in webgl locks the UI thread. '+'Call tf.whereAsync() instead');var condVals=condition.dataSync();return whereImpl(condition.shape,condVals);}},{key:\"topk\",value:function topk(x,k,sorted){var xVals=x.dataSync();return topkImpl(xVals,x.shape,x.dtype,k,sorted);}},{key:\"min\",value:function min(x,axes){dist[\"backend_util\"].assertAxesAreInnerMostDims('min',axes,x.rank);var _dist$backend_util$co21=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co22=_slicedToArray(_dist$backend_util$co21,2),outShape=_dist$backend_util$co22[0],reduceShape=_dist$backend_util$co22[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);return this.reduce(a2D,'min',a2D.dtype).reshape(outShape);}},{key:\"minimum\",value:function minimum(a,b){if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.minimum(a,b);}var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_MIN,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(MIN,a.shape,b.shape);return this.compileAndRun(program,[a,b]);}},{key:\"mod\",value:function mod(a,b){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_MOD,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(MOD,a.shape,b.shape);return this.compileAndRun(program,[a,b]);}},{key:\"maximum\",value:function maximum(a,b){if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.maximum(a,b);}var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_MAX,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(MAX,a.shape,b.shape);return this.compileAndRun(program,[a,b]);}},{key:\"all\",value:function all(x,axes){dist[\"backend_util\"].assertAxesAreInnerMostDims('all',axes,x.rank);var _dist$backend_util$co23=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co24=_slicedToArray(_dist$backend_util$co23,2),outShape=_dist$backend_util$co24[0],reduceShape=_dist$backend_util$co24[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);return this.reduce(a2D,'all',a2D.dtype).reshape(outShape);}},{key:\"any\",value:function any(x,axes){dist[\"backend_util\"].assertAxesAreInnerMostDims('any',axes,x.rank);var _dist$backend_util$co25=dist[\"backend_util\"].computeOutAndReduceShapes(x.shape,axes),_dist$backend_util$co26=_slicedToArray(_dist$backend_util$co25,2),outShape=_dist$backend_util$co26[0],reduceShape=_dist$backend_util$co26[1];var inSize=dist[\"util\"].sizeFromShape(reduceShape);var a2D=x.as2D(-1,inSize);return this.reduce(a2D,'any',a2D.dtype).reshape(outShape);}},{key:\"floorDiv\",value:function floorDiv(a,b){var op=INT_DIV;var outputDtype='int32';if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,binaryop_packed_gpu_INT_DIV,outputDtype);}var program=new binaryop_gpu_BinaryOpProgram(op,a.shape,b.shape);return this.compileAndRun(program,[a,b],outputDtype);}},{key:\"add\",value:function add(a,b){if(a.dtype==='complex64'&&b.dtype==='complex64'){return this.complexSeparableBinaryOp(a,b,ADD);}if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.add(a,b);}var dtype=Object(dist[\"upcastType\"])(a.dtype,b.dtype);if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,ADD,dtype);}var program=new binaryop_gpu_BinaryOpProgram(ADD,a.shape,b.shape);return this.compileAndRun(program,[a,b],dtype);}},{key:\"packedUnaryOp\",value:function packedUnaryOp(x,op,dtype){var program=new UnaryOpPackedProgram(x.shape,op);return this.compileAndRun(program,[x],dtype);}},{key:\"packedBinaryOp\",value:function packedBinaryOp(a,b,op,dtype){var checkOutOfBounds=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var program=new binaryop_packed_gpu_BinaryOpPackedProgram(op,a.shape,b.shape,checkOutOfBounds);return this.compileAndRun(program,[a,b],dtype);}/**\r\n     * Computes a complex binary operation that can be decomposed into a simple\r\n     * binary operation on both the real and imagary parts.\r\n     */},{key:\"complexSeparableBinaryOp\",value:function complexSeparableBinaryOp(a,b,op){var _this111=this;var aData=this.texData.get(a.dataId);var bData=this.texData.get(b.dataId);var _map=[[aData.complexTensors.real,bData.complexTensors.real],[aData.complexTensors.imag,bData.complexTensors.imag]].map(function(complexParts){var _complexParts=_slicedToArray(complexParts,2),aPart=_complexParts[0],bPart=_complexParts[1];var aHandle=_this111.makeComplexComponentTensorInfo(a,aPart);var bHandle=_this111.makeComplexComponentTensorInfo(b,bPart);var program=new binaryop_gpu_BinaryOpProgram(op,a.shape,b.shape);return _this111.compileAndRun(program,[aHandle,bHandle],Object(dist[\"upcastType\"])(aPart.dtype,bPart.dtype));}),_map2=_slicedToArray(_map,2),real=_map2[0],imag=_map2[1];var complex=this.complex(real,imag);real.dispose();imag.dispose();return complex;}// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\n},{key:\"makeComplexComponentTensorInfo\",value:function makeComplexComponentTensorInfo(complexTensor,complexPart){return{dataId:complexPart.dataId,dtype:complexPart.dtype,shape:complexTensor.shape};}},{key:\"addN\",value:function addN(tensors){if(tensors.length===1){return tensors[0];}// Limit the number of uploaded textures for optimization.\nif(tensors.length>Object(dist[\"env\"])().get('WEBGL_MAX_TEXTURES_IN_SHADER')){var midIndex=Math.floor(tensors.length/2);var leftSide=this.addN(tensors.slice(0,midIndex));var rightSide=this.addN(tensors.slice(midIndex));return this.addN([leftSide,rightSide]);}var dtype=tensors.map(function(t){return t.dtype;}).reduce(function(d1,d2){return Object(dist[\"upcastType\"])(d1,d2);});var shapes=tensors.map(function(t){return t.shape;});// We can make sure shapes are identical in op level.\nvar usePackedOp=Object(dist[\"env\"])().getBool('WEBGL_PACK');var program=usePackedOp?new AddNPackedProgram(tensors[0].shape,shapes):new AddNProgram(tensors[0].shape,shapes);return this.compileAndRun(program,tensors,dtype);}},{key:\"subtract\",value:function subtract(a,b){if(a.dtype==='complex64'&&b.dtype==='complex64'){return this.complexSeparableBinaryOp(a,b,SUB);}if(this.shouldExecuteOnCPU([a,b])){return this.cpuBackend.subtract(a,b);}var dtype=Object(dist[\"upcastType\"])(a.dtype,b.dtype);if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){return this.packedBinaryOp(a,b,SUB,a.dtype);}var program=new binaryop_gpu_BinaryOpProgram(SUB,a.shape,b.shape);return this.compileAndRun(program,[a,b],dtype);}},{key:\"pow\",value:function pow(a,b){var usePackedOp=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS');var program=usePackedOp?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_POW,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(POW,a.shape,b.shape);var dtype=Object(dist[\"upcastType\"])(a.dtype,b.dtype);return this.compileAndRun(program,[a,b],dtype);}},{key:\"ceil\",value:function ceil(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.ceil(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,CEIL,x.dtype);}var program=new UnaryOpProgram(x.shape,CEIL);return this.compileAndRun(program,[x]);}},{key:\"floor\",value:function floor(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.floor(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,FLOOR,x.dtype);}var program=new UnaryOpProgram(x.shape,FLOOR);return this.compileAndRun(program,[x]);}},{key:\"sign\",value:function sign(x){var program=new UnaryOpProgram(x.shape,SIGN);return this.compileAndRun(program,[x]);}},{key:\"isNaN\",value:function isNaN(x){var program=new UnaryOpProgram(x.shape,IS_NAN);return this.compileAndRun(program,[x],'bool');}},{key:\"isInf\",value:function isInf(x){var program=new UnaryOpProgram(x.shape,IS_INF);return this.compileAndRun(program,[x],'bool');}},{key:\"isFinite\",value:function isFinite(x){var program=new UnaryOpProgram(x.shape,IS_FINITE);return this.compileAndRun(program,[x],'bool');}},{key:\"round\",value:function round(x){var program=new UnaryOpProgram(x.shape,ROUND);return this.compileAndRun(program,[x]);}},{key:\"exp\",value:function exp(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.exp(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,EXP,x.dtype);}var program=new UnaryOpProgram(x.shape,EXP);return this.compileAndRun(program,[x]);}},{key:\"expm1\",value:function expm1(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.expm1(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,EXPM1,x.dtype);}var program=new UnaryOpProgram(x.shape,EXPM1);return this.compileAndRun(program,[x]);}},{key:\"softmax\",value:function softmax(logits,dim){var axes=dist[\"util\"].parseAxisParam([dim],logits.shape);// TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n// modularization.\nvar maxLogit=Object(dist[\"max\"])(logits,axes);var expandedShape=dist[\"backend_util\"].expandShapeToKeepDim(maxLogit.shape,axes);var a=this.subtract(logits,maxLogit.reshape(expandedShape));var b=this.exp(a);var sumExp=this.sum(b,axes).reshape(expandedShape);// TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n// modularization.\nreturn Object(dist[\"div\"])(b,sumExp);}},{key:\"log\",value:function log(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.log(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,unaryop_packed_gpu_LOG,x.dtype);}var program=new UnaryOpProgram(x.shape,LOG);return this.compileAndRun(program,[x]);}},{key:\"log1p\",value:function log1p(x){var program=new UnaryOpProgram(x.shape,LOG1P);return this.compileAndRun(program,[x]);}},{key:\"sqrt\",value:function sqrt(x){var program=new UnaryOpProgram(x.shape,SQRT);return this.compileAndRun(program,[x]);}},{key:\"rsqrt\",value:function rsqrt(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.rsqrt(x);}var program=new UnaryOpProgram(x.shape,RSQRT);return this.compileAndRun(program,[x]);}},{key:\"reciprocal\",value:function reciprocal(x){var program=new UnaryOpProgram(x.shape,RECIPROCAL);return this.compileAndRun(program,[x]);}},{key:\"relu\",value:function relu(x){var program;if(Object(dist[\"env\"])().getBool('WEBGL_PACK')){program=new UnaryOpPackedProgram(x.shape,unaryop_packed_gpu_RELU);}else{program=new UnaryOpProgram(x.shape,RELU);}return this.compileAndRun(program,[x]);}},{key:\"relu6\",value:function relu6(x){var program;if(Object(dist[\"env\"])().getBool('WEBGL_PACK')){program=new UnaryOpPackedProgram(x.shape,unaryop_packed_gpu_RELU6);}else{program=new UnaryOpProgram(x.shape,RELU6);}return this.compileAndRun(program,[x]);}},{key:\"prelu\",value:function prelu(x,alpha){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_PRELU,x.shape,alpha.shape):new binaryop_gpu_BinaryOpProgram(PRELU,x.shape,alpha.shape);return this.compileAndRun(program,[x,alpha]);}},{key:\"elu\",value:function elu(x){if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,unaryop_packed_gpu_ELU,x.dtype);}var program=new UnaryOpProgram(x.shape,ELU);return this.compileAndRun(program,[x]);}},{key:\"eluDer\",value:function eluDer(dy,y){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_ELU_DER,dy.shape,y.shape):new binaryop_gpu_BinaryOpProgram(ELU_DER,dy.shape,y.shape);return this.compileAndRun(program,[dy,y]);}},{key:\"selu\",value:function selu(x){var program=new UnaryOpProgram(x.shape,SELU);return this.compileAndRun(program,[x]);}},{key:\"int\",value:function int(x){var program=new UnaryOpProgram(x.shape,TO_INT);return this.compileAndRun(program,[x],'int32');}},{key:\"clip\",value:function clip(x,min,max){var program;if(Object(dist[\"env\"])().getBool('WEBGL_PACK_CLIP')){program=new ClipPackedProgram(x.shape);}else{program=new ClipProgram(x.shape);}var customSetup=program.getCustomSetupFunc(min,max);return this.compileAndRun(program,[x],null,customSetup);}},{key:\"abs\",value:function abs(x){if(this.shouldExecuteOnCPU([x])){return this.cpuBackend.abs(x);}if(Object(dist[\"env\"])().getBool('WEBGL_PACK_UNARY_OPERATIONS')){return this.packedUnaryOp(x,ABS,x.dtype);}var program=new UnaryOpProgram(x.shape,ABS);return this.compileAndRun(program,[x]);}},{key:\"complexAbs\",value:function complexAbs(x){var xData=this.texData.get(x.dataId);var program=new ComplexAbsProgram(x.shape);var inputs=[this.makeComplexComponentTensorInfo(x,xData.complexTensors.real),this.makeComplexComponentTensorInfo(x,xData.complexTensors.imag)];return this.compileAndRun(program,inputs);}},{key:\"sigmoid\",value:function sigmoid(x){var program=new UnaryOpProgram(x.shape,SIGMOID);return this.compileAndRun(program,[x]);}},{key:\"softplus\",value:function softplus(x){var program=new UnaryOpProgram(x.shape,SOFTPLUS);return this.compileAndRun(program,[x]);}},{key:\"sin\",value:function sin(x){var program=new UnaryOpProgram(x.shape,SIN);return this.compileAndRun(program,[x]);}},{key:\"cos\",value:function cos(x){var program=new UnaryOpProgram(x.shape,COS);return this.compileAndRun(program,[x]);}},{key:\"tan\",value:function tan(x){var program=new UnaryOpProgram(x.shape,TAN);return this.compileAndRun(program,[x]);}},{key:\"asin\",value:function asin(x){var program=new UnaryOpProgram(x.shape,ASIN);return this.compileAndRun(program,[x]);}},{key:\"acos\",value:function acos(x){var program=new UnaryOpProgram(x.shape,ACOS);return this.compileAndRun(program,[x]);}},{key:\"atan\",value:function atan(x){var program=new UnaryOpProgram(x.shape,ATAN);return this.compileAndRun(program,[x]);}},{key:\"atan2\",value:function atan2(a,b){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_ATAN2,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(ATAN2,a.shape,b.shape);return this.compileAndRun(program,[a,b]);}},{key:\"sinh\",value:function sinh(x){var program=new UnaryOpProgram(x.shape,SINH);return this.compileAndRun(program,[x]);}},{key:\"cosh\",value:function cosh(x){var program=new UnaryOpProgram(x.shape,COSH);return this.compileAndRun(program,[x]);}},{key:\"tanh\",value:function tanh(x){var program=new UnaryOpProgram(x.shape,TANH);return this.compileAndRun(program,[x]);}},{key:\"asinh\",value:function asinh(x){var program=new UnaryOpProgram(x.shape,ASINH);return this.compileAndRun(program,[x]);}},{key:\"acosh\",value:function acosh(x){var program=new UnaryOpProgram(x.shape,ACOSH);return this.compileAndRun(program,[x]);}},{key:\"atanh\",value:function atanh(x){var program=new UnaryOpProgram(x.shape,ATANH);return this.compileAndRun(program,[x]);}},{key:\"erf\",value:function erf(x){var program=new UnaryOpProgram(x.shape,ERF);return this.compileAndRun(program,[x]);}},{key:\"step\",value:function step(x,alpha){var program=new UnaryOpProgram(x.shape,STEP(alpha));return this.compileAndRun(program,[x]);}},{key:\"conv2dByMatMul\",value:function conv2dByMatMul(x,filter,convInfo,bias,activation,preluActivationWeights){// Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n// result from 2D to 4D.\nvar xShape=x.shape;var xTexData=this.texData.get(x.dataId);var sharedMatMulDim=convInfo.inChannels;var outerShapeX=xShape[0]*xShape[1]*xShape[2];var outerShapeFilter=convInfo.outChannels;var isChannelsLast=convInfo.dataFormat==='channelsLast';var transposeA=false;var transposeB=false;// TODO: Once reduction ops are packed, batchMatMul will always be packed\n// and we can remove this condition.\nvar batchMatMulWillBeUnpacked=(outerShapeX===1||outerShapeFilter===1)&&sharedMatMulDim>MATMUL_SHARED_DIM_THRESHOLD;var reshapeWillBeExpensive=xShape[2]%2!==0&&!!xTexData.isPacked;if(batchMatMulWillBeUnpacked||!Object(dist[\"env\"])().getBool('WEBGL_LAZILY_UNPACK')||!Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')||!reshapeWillBeExpensive){var _targetShape=isChannelsLast?xShape[0]*xShape[1]*xShape[2]:xShape[0]*xShape[2]*xShape[3];var _xReshaped=this.reshape(x,[1,_targetShape,convInfo.inChannels]);var _filterReshaped=this.reshape(filter,[1,convInfo.inChannels,convInfo.outChannels]);return this.reshape(this.fusedBatchMatMul({a:_xReshaped,b:_filterReshaped,transposeA:transposeA,transposeB:transposeB,bias:bias,activation:activation,preluActivationWeights:preluActivationWeights}),convInfo.outShape);}// Following optimization is specific to packed |x| with odd row count\n// (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n// we avoid expensive packed 2x2 reshape by padding row count to next,\n// even number. When x.shape[2] is odd, the result of packed batchMatMul is\n// the same (has the same texture layout and and values in the texture) as\n// it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n// even-rows tensor before the operation and, after the batchMatMul,\n// fix the even-rows result to have odd number of rows.\nvar targetShape=isChannelsLast?xShape[0]*xShape[1]*(xShape[2]+1):xShape[0]*xShape[2]*(xShape[3]+1);var xReshaped={dataId:x.dataId,shape:[1,targetShape,convInfo.inChannels],dtype:x.dtype};// xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n// Decrementing row count, after batchMatMul->...->compileProgram leads to\n// invalid row count within the reference in GPGPUBinary.inShapeInfos.\n// Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n// in compileProgram method, but that would affect compilation of all\n// programs - instead, provide a copy here, with even row count, before\n// calling batchMatMul->...->compileProgram and after that, the original\n// xTexData.shape is restored.\nvar originalXTexDataShape=xTexData.shape;xTexData.shape=xTexData.shape.slice();xTexData.shape[xTexData.shape.length-2]++;dist[\"util\"].assert(isReshapeFree(xTexData.shape,xReshaped.shape),function(){return\"packed reshape \".concat(xTexData.shape,\" to \").concat(xReshaped.shape,\" isn't free\");});var filterReshaped=this.reshape(filter,[1,convInfo.inChannels,convInfo.outChannels]);var pointwiseConv=this.fusedBatchMatMul({a:xReshaped,b:filterReshaped,transposeA:transposeA,transposeB:transposeB,bias:bias,activation:activation,preluActivationWeights:preluActivationWeights});var pointwiseConvTexData=this.texData.get(pointwiseConv.dataId);dist[\"util\"].assert(pointwiseConvTexData.isPacked,function(){return'batchMatMul result is expected to be packed';});// Restore the input shape to original.\nxTexData.shape=originalXTexDataShape;// Set the output shape - there is no need for expensive reshape as data\n// layout is already correct.\npointwiseConvTexData.shape=convInfo.outShape;return Object(dist[\"engine\"])().makeTensorFromDataId(pointwiseConv.dataId,convInfo.outShape,pointwiseConv.dtype);}},{key:\"conv2dWithIm2Row\",value:function conv2dWithIm2Row(x,filter,convInfo,bias,activation,preluActivationWeights){// Rearranges conv2d input so each block to be convolved over forms the\n// column of a new matrix with shape [filterWidth * filterHeight *\n// inChannels, outHeight * outWidth]. The filter is also rearranged so each\n// output channel forms a row of a new matrix with shape [outChannels,\n// filterWidth * filterHeight * inChannels]. The convolution is then\n// computed by multiplying these matrices and reshaping the result.\nvar filterWidth=convInfo.filterWidth,filterHeight=convInfo.filterHeight,inChannels=convInfo.inChannels,outWidth=convInfo.outWidth,outHeight=convInfo.outHeight,dataFormat=convInfo.dataFormat;var isChannelsLast=dataFormat==='channelsLast';var sharedDim=filterWidth*filterHeight*inChannels;var numCols=outHeight*outWidth;var x2ColShape=[sharedDim,numCols];var transposeA=true;var transposeB=false;var xSqueezed=x.squeeze([0]);var w2Row=filter.reshape([1,sharedDim,-1]);var im2ColProgram=new im2col_packed_gpu_Im2ColPackedProgram(x2ColShape,xSqueezed.shape,convInfo);var im2Col=this.compileAndRun(im2ColProgram,[xSqueezed]).reshape([1,x2ColShape[0],x2ColShape[1]]);var hasBias=bias!=null;var hasPreluActivationWeights=preluActivationWeights!=null;var fusedActivation=activation?mapActivationToShaderProgram(activation,true):null;var matmulProgram=new MatMulPackedProgram(im2Col.shape,[1,numCols,convInfo.outChannels],transposeA,transposeB,hasBias,fusedActivation,hasPreluActivationWeights);var inputs=[im2Col,w2Row];if(bias){inputs.push(bias);}if(hasPreluActivationWeights){inputs.push(preluActivationWeights);}var product=this.compileAndRun(matmulProgram,inputs);if(isChannelsLast){return product.reshape([1,outHeight,outWidth,convInfo.outChannels]);}else{return product.reshape([1,convInfo.outChannels,outHeight,outWidth]);}}},{key:\"fusedConv2d\",value:function fusedConv2d(_ref35){var input=_ref35.input,filter=_ref35.filter,convInfo=_ref35.convInfo,bias=_ref35.bias,activation=_ref35.activation,preluActivationWeights=_ref35.preluActivationWeights;if(convInfo.filterHeight===1&&convInfo.filterWidth===1&&convInfo.dilationHeight===1&&convInfo.dilationWidth===1&&convInfo.strideHeight===1&&convInfo.strideWidth===1&&(convInfo.padInfo.type==='SAME'||convInfo.padInfo.type==='VALID')){return this.conv2dByMatMul(input,filter,convInfo,bias,activation,preluActivationWeights);}if(Object(dist[\"env\"])().getBool('WEBGL_CONV_IM2COL')&&input.shape[0]===1){return this.conv2dWithIm2Row(input,filter,convInfo,bias,activation,preluActivationWeights);}var hasBias=bias!=null;var hasPreluActivationWeights=preluActivationWeights!=null;var fusedActivation=activation?mapActivationToShaderProgram(activation,false):null;var program=new Conv2DProgram(convInfo,hasBias,fusedActivation,hasPreluActivationWeights);var inputs=[input,filter];if(bias){inputs.push(bias);}if(preluActivationWeights){inputs.push(preluActivationWeights);}return this.compileAndRun(program,inputs);}},{key:\"conv2d\",value:function conv2d(x,filter,convInfo){if(convInfo.filterHeight===1&&convInfo.filterWidth===1&&convInfo.dilationHeight===1&&convInfo.dilationWidth===1&&convInfo.strideHeight===1&&convInfo.strideWidth===1&&(convInfo.padInfo.type==='SAME'||convInfo.padInfo.type==='VALID')){return this.conv2dByMatMul(x,filter,convInfo);}if(Object(dist[\"env\"])().getBool('WEBGL_CONV_IM2COL')&&x.shape[0]===1){return this.conv2dWithIm2Row(x,filter,convInfo);}var program=new Conv2DProgram(convInfo);return this.compileAndRun(program,[x,filter]);}},{key:\"conv2dDerInput\",value:function conv2dDerInput(dy,filter,convInfo){var program=new Conv2DDerInputProgram(convInfo);return this.compileAndRun(program,[dy,filter]);}},{key:\"conv2dDerFilter\",value:function conv2dDerFilter(x,dy,convInfo){var program=new Conv2DDerFilterProgram(convInfo);return this.compileAndRun(program,[x,dy]);}},{key:\"fusedDepthwiseConv2D\",value:function fusedDepthwiseConv2D(_ref36){var input=_ref36.input,filter=_ref36.filter,convInfo=_ref36.convInfo,bias=_ref36.bias,activation=_ref36.activation,preluActivationWeights=_ref36.preluActivationWeights;var shouldPackDepthwiseConv=Object(dist[\"env\"])().getBool('WEBGL_PACK_DEPTHWISECONV')&&convInfo.strideWidth<=2&&convInfo.outChannels/convInfo.inChannels===1;var fusedActivation=activation?mapActivationToShaderProgram(activation,shouldPackDepthwiseConv):null;var inputs=[input,filter];var hasBias=bias!=null;var hasPreluActivationWeights=preluActivationWeights!=null;if(hasBias){inputs.push(bias);}if(hasPreluActivationWeights){inputs.push(preluActivationWeights);}var program;if(shouldPackDepthwiseConv){program=new conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram(convInfo,hasBias,fusedActivation,hasPreluActivationWeights);return this.compileAndRun(program,inputs);}program=new DepthwiseConv2DProgram(convInfo,hasBias,fusedActivation,hasPreluActivationWeights);return this.compileAndRun(program,inputs);}},{key:\"depthwiseConv2D\",value:function depthwiseConv2D(x,filter,convInfo){var program;if(Object(dist[\"env\"])().getBool('WEBGL_PACK_DEPTHWISECONV')&&convInfo.strideWidth<=2&&convInfo.outChannels/convInfo.inChannels===1){program=new conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram(convInfo);return this.compileAndRun(program,[x,filter]);}program=new DepthwiseConv2DProgram(convInfo);return this.compileAndRun(program,[x,filter]);}},{key:\"depthwiseConv2DDerInput\",value:function depthwiseConv2DDerInput(dy,filter,convInfo){var program=new DepthwiseConv2DDerInputProgram(convInfo);return this.compileAndRun(program,[dy,filter]);}},{key:\"depthwiseConv2DDerFilter\",value:function depthwiseConv2DDerFilter(x,dy,convInfo){var program=new DepthwiseConv2DDerFilterProgram(convInfo);return this.compileAndRun(program,[x,dy]);}},{key:\"conv3d\",value:function conv3d(x,filter,convInfo){var program=new Conv3DProgram(convInfo);return this.compileAndRun(program,[x,filter]);}},{key:\"conv3dDerInput\",value:function conv3dDerInput(dy,filter,convInfo){var program=new Conv3DDerInputProgram(convInfo);return this.compileAndRun(program,[dy,filter]);}},{key:\"conv3dDerFilter\",value:function conv3dDerFilter(x,dy,convInfo){var program=new Conv3DDerFilterProgram(convInfo);return this.compileAndRun(program,[x,dy]);}},{key:\"maxPool\",value:function maxPool(x,convInfo){var program=new Pool2DProgram(convInfo,'max',false);return this.compileAndRun(program,[x]);}},{key:\"avgPool\",value:function avgPool(x,convInfo){var program=new Pool2DProgram(convInfo,'avg',false);return this.compileAndRun(program,[x],'float32');}},{key:\"maxPoolBackprop\",value:function maxPoolBackprop(dy,x,y,convInfo){var getPositions=true;var maxPoolPositionsProgram=new Pool2DProgram(convInfo,'max',getPositions);var maxPoolPositions=this.compileAndRun(maxPoolPositionsProgram,[x]);var maxPoolBackPropProgram=new MaxPool2DBackpropProgram(convInfo);var result=this.compileAndRun(maxPoolBackPropProgram,[dy,maxPoolPositions],x.dtype);maxPoolPositions.dispose();return result;}},{key:\"avgPoolBackprop\",value:function avgPoolBackprop(dy,x,convInfo){var avgPoolBackpropProgram=new AvgPool2DBackpropProgram(convInfo);return this.compileAndRun(avgPoolBackpropProgram,[dy],x.dtype);}},{key:\"cast\",value:function cast(x,dtype){return dist[\"backend_util\"].castTensor(x,dtype,this);}},{key:\"unstack\",value:function unstack(x,axis){var num=x.shape[axis];var outShape=new Array(x.rank-1);var outIndex=0;for(var i=0;i<x.rank;i++){if(i!==axis){outShape[outIndex++]=x.shape[i];}}var begin=new Array(x.rank).fill(0);var size=x.shape.slice();size[axis]=1;var res=new Array(num);for(var _i48=0;_i48<res.length;_i48++){begin[axis]=_i48;res[_i48]=this.slice(x,begin,size).reshape(outShape);}return res;}},{key:\"avgPool3d\",value:function avgPool3d(x,convInfo){var program=new Pool3DProgram(convInfo,'avg',false);return this.compileAndRun(program,[x],'float32');}},{key:\"avgPool3dBackprop\",value:function avgPool3dBackprop(dy,x,convInfo){var avgPool3dBackpropProgram=new AvgPool3DBackpropProgram(convInfo);return this.compileAndRun(avgPool3dBackpropProgram,[dy],x.dtype);}},{key:\"maxPool3d\",value:function maxPool3d(x,convInfo){var program=new Pool3DProgram(convInfo,'max',false);return this.compileAndRun(program,[x],'float32');}},{key:\"maxPool3dBackprop\",value:function maxPool3dBackprop(dy,x,y,convInfo){var getPositions=true;var maxPool3dPositionsProgram=new Pool3DProgram(convInfo,'max',getPositions);var maxPool3dPositions=this.compileAndRun(maxPool3dPositionsProgram,[x]);var maxPool3dBackPropProgram=new MaxPool3DBackpropProgram(convInfo);var result=this.compileAndRun(maxPool3dBackPropProgram,[dy,maxPool3dPositions],x.dtype);maxPool3dPositions.dispose();return result;}},{key:\"reshape\",value:function reshape(x,shape){var texData=this.texData.get(x.dataId);if(texData.isPacked&&!isReshapeFree(x.shape,shape)&&!(texData.texture!==null&&isReshapeFree(texData.shape,shape))){var info=this.packedReshape(x,shape);return Object(dist[\"engine\"])().makeTensorFromDataId(info.dataId,info.shape,info.dtype);}return dist[\"backend_util\"].reshapeTensor(x,shape);}},{key:\"resizeBilinear\",value:function resizeBilinear(x,newHeight,newWidth,alignCorners){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_IMAGE_OPERATIONS')?new ResizeBilinearPackedProgram(x.shape,newHeight,newWidth,alignCorners):new ResizeBilinearProgram(x.shape,newHeight,newWidth,alignCorners);return this.compileAndRun(program,[x],'float32');}},{key:\"resizeBilinearBackprop\",value:function resizeBilinearBackprop(dy,x,alignCorners){var program=new ResizeBilinearBackpropProgram(dy,x,alignCorners);return this.compileAndRun(program,[dy]);}},{key:\"resizeNearestNeighbor\",value:function resizeNearestNeighbor(x,newHeight,newWidth,alignCorners){var program=new ResizeNearestNeighborProgram(x.shape,newHeight,newWidth,alignCorners);return this.compileAndRun(program,[x]);}},{key:\"resizeNearestNeighborBackprop\",value:function resizeNearestNeighborBackprop(dy,x,alignCorners){var program=new ResizeNearestNeigborBackpropProgram(dy,x,alignCorners);return this.compileAndRun(program,[dy]);}},{key:\"multinomial\",value:function multinomial(logits,normalized,numSamples,seed){var probs=normalized?logits:Object(dist[\"softmax\"])(logits);var batchSize=probs.shape[0];var numOutcomes=probs.shape[1];var program=new MultinomialProgram(batchSize,numOutcomes,numSamples);var customSetup=program.getCustomSetupFunc(seed);return this.compileAndRun(program,[probs],'int32',customSetup);}},{key:\"oneHot\",value:function oneHot(indices,depth,onValue,offValue){var program=new OneHotProgram(indices.size,depth,onValue,offValue);return this.compileAndRun(program,[indices]);}},{key:\"diag\",value:function diag(x){var program=new DiagProgram(x.size);return this.compileAndRun(program,[x]);}},{key:\"cropAndResize\",value:function cropAndResize(image,boxes,boxIndex,cropSize,method,extrapolationValue){var program=new CropAndResizeProgram(image.shape,boxes.shape,cropSize,method,extrapolationValue);return this.compileAndRun(program,[image,boxes,boxIndex],'float32');}},{key:\"depthToSpace\",value:function depthToSpace(x,blockSize,dataFormat){dist[\"util\"].assert(blockSize>1,function(){return\"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);});var batchSize=x.shape[0];var inputHeight=dataFormat==='NHWC'?x.shape[1]:x.shape[2];var inputWidth=dataFormat==='NHWC'?x.shape[2]:x.shape[3];var inputDepth=dataFormat==='NHWC'?x.shape[3]:x.shape[1];var outputHeight=inputHeight*blockSize;var outputWidth=inputWidth*blockSize;var outputDepth=inputDepth/(blockSize*blockSize);var outputShape=dataFormat==='NHWC'?[batchSize,outputHeight,outputWidth,outputDepth]:[batchSize,outputDepth,outputHeight,outputWidth];var program=new DepthToSpaceProgram(outputShape,blockSize,dataFormat);return this.compileAndRun(program,[x]);}},{key:\"split\",value:function split(x,sizeSplits,axis){return _split2(x,sizeSplits,axis);}},{key:\"scatterND\",value:function scatterND(indices,updates,shape){var _dist$backend_util$ca3=dist[\"backend_util\"].calculateShapes(updates,indices,shape),sliceRank=_dist$backend_util$ca3.sliceRank,numUpdates=_dist$backend_util$ca3.numUpdates,sliceSize=_dist$backend_util$ca3.sliceSize,strides=_dist$backend_util$ca3.strides,outputSize=_dist$backend_util$ca3.outputSize;var flattenShape=[outputSize/sliceSize,sliceSize];var flattenIndices=indices.reshape([numUpdates,sliceRank]);var flattenX=updates.reshape([numUpdates,sliceSize]);if(outputSize===0){return dist[\"backend_util\"].reshapeTensor(Object(dist[\"tensor\"])([]),shape);}var defaultValue=Object(dist[\"scalar\"])(0);var program=new scatter_gpu_ScatterProgram(numUpdates,sliceRank,flattenIndices.rank,flattenX.rank,strides,flattenShape);var res=this.compileAndRun(program,[flattenX,flattenIndices,defaultValue]);return res.reshape(shape);}},{key:\"sparseToDense\",value:function sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue){var _dist$backend_util$ca4=dist[\"backend_util\"].calculateShapes(sparseValues,sparseIndices,outputShape),sliceRank=_dist$backend_util$ca4.sliceRank,numUpdates=_dist$backend_util$ca4.numUpdates,strides=_dist$backend_util$ca4.strides,outputSize=_dist$backend_util$ca4.outputSize;var sumDupeIndices=false;var program=new scatter_gpu_ScatterProgram(numUpdates,sliceRank,sparseIndices.rank,sparseValues.rank,strides,[outputSize,1],sumDupeIndices);var res=this.compileAndRun(program,[sparseValues,sparseIndices,defaultValue]);return res.reshape(outputShape);}},{key:\"fft\",value:function fft(x){var inverse=false;return this.fftImpl(x,inverse);}},{key:\"ifft\",value:function ifft(x){var inverse=true;return this.fftImpl(x,inverse);}},{key:\"fftImpl\",value:function fftImpl(x,inverse){var xData=this.texData.get(x.dataId);var realProgram=new FFTProgram(COMPLEX_FFT.REAL,x.shape,inverse);var imagProgram=new FFTProgram(COMPLEX_FFT.IMAG,x.shape,inverse);var inputs=[this.makeComplexComponentTensorInfo(x,xData.complexTensors.real),this.makeComplexComponentTensorInfo(x,xData.complexTensors.imag)];var real=this.compileAndRun(realProgram,inputs);var imag=this.compileAndRun(imagProgram,inputs);var complex=this.complex(real,imag).as2D(x.shape[0],x.shape[1]);real.dispose();imag.dispose();return complex;}},{key:\"gatherND\",value:function gatherND(x,indices){var indicesShape=indices.shape;var sliceRank=indicesShape[indicesShape.length-1];var _dist$backend_util$pr3=dist[\"backend_util\"].prepareAndValidate(x,indices),_dist$backend_util$pr4=_slicedToArray(_dist$backend_util$pr3,4),resultShape=_dist$backend_util$pr4[0],numSlices=_dist$backend_util$pr4[1],sliceSize=_dist$backend_util$pr4[2],strides=_dist$backend_util$pr4[3];var flattenIndices=indices.reshape([numSlices,sliceRank]);var flattenX=x.reshape([x.size/sliceSize,sliceSize]);var program=new gather_nd_gpu_GatherNDProgram(sliceRank,strides,[numSlices,sliceSize]);var res=this.compileAndRun(program,[flattenX,flattenIndices]);return res.reshape(resultShape);}},{key:\"fill\",value:function fill(shape,value,dtype){dtype=dtype||dist[\"util\"].inferDtype(value);if(dtype==='string'){// String type should be handled in CPU memory.\nvar values=dist[\"util\"].getArrayFromDType(dtype,dist[\"util\"].sizeFromShape(shape));values.fill(value);return Object(dist[\"engine\"])().makeTensor(values,shape,dtype,this);}else{var program=new FillProgram(shape,value);var customSetup=program.getCustomSetupFunc(value);return this.compileAndRun(program,[],dtype,customSetup);}}},{key:\"onesLike\",value:function onesLike(x){if(x.dtype==='string'){throw new Error('onesLike is not supported under string dtype');}else{// TODO(cais, smilkov): Add WebGL shader for onesLike:\n//   https://github.com/tensorflow/tfjs/issues/1293\nreturn this.fill(x.shape,1,x.dtype);}}},{key:\"zerosLike\",value:function zerosLike(x){return this.fill(x.shape,x.dtype==='string'?'':0,x.dtype);}},{key:\"linspace\",value:function linspace(start,stop,num){// TODO: Use CPU implementation due to the precision problem in Safari.\nreturn dist[\"backend_util\"].linspaceImpl(start,stop,num);}},{key:\"makeTensorInfo\",value:function makeTensorInfo(shape,dtype){var dataId=this.write(null/* values */,shape,dtype);this.texData.get(dataId).usage=null;return{dataId:dataId,shape:shape,dtype:dtype};}},{key:\"makeOutput\",value:function makeOutput(shape,dtype){var _this$makeTensorInfo=this.makeTensorInfo(shape,dtype),dataId=_this$makeTensorInfo.dataId;return Object(dist[\"engine\"])().makeTensorFromDataId(dataId,shape,dtype,this);}},{key:\"unpackTensor\",value:function unpackTensor(input){var program=new unpack_gpu_UnpackProgram(input.shape);return this.runWebGLProgram(program,[input],input.dtype);}},{key:\"packTensor\",value:function packTensor(input){var program=new pack_gpu_PackProgram(input.shape);var preventEagerUnpackingOutput=true;return this.runWebGLProgram(program,[input],input.dtype,null/* customSetup */,preventEagerUnpackingOutput);}},{key:\"packedReshape\",value:function packedReshape(input,afterShape){var input3DShape=[getBatchDim(input.shape)].concat(_toConsumableArray2(getRowsCols(input.shape)));var input3D={dtype:input.dtype,shape:input3DShape,dataId:input.dataId};var afterShapeAs3D=[getBatchDim(afterShape)].concat(_toConsumableArray2(getRowsCols(afterShape)));var program=new reshape_packed_gpu_ReshapePackedProgram(afterShapeAs3D,input3DShape);var preventEagerUnpackingOfOutput=true;var output=this.runWebGLProgram(program,[input3D],input.dtype,null/* customSetup */,preventEagerUnpackingOfOutput);return{dataId:output.dataId,shape:afterShape,dtype:output.dtype};}},{key:\"decode\",value:function decode(dataId){var texData=this.texData.get(dataId);var isPacked=texData.isPacked,shape=texData.shape,dtype=texData.dtype;var shapeAs3D=getShapeAs3D(shape);var program;if(isPacked){program=new decode_matrix_packed_gpu_DecodeMatrixPackedProgram(shapeAs3D);}else{program=new decode_matrix_gpu_DecodeMatrixProgram(shapeAs3D);}var preventEagerUnpackingOfOutput=true;var out=this.runWebGLProgram(program,[{shape:shapeAs3D,dtype:dtype,dataId:dataId}],dtype,null/* customSetup */,preventEagerUnpackingOfOutput);return{dtype:dtype,shape:shape,dataId:out.dataId};}},{key:\"runWebGLProgram\",value:function runWebGLProgram(program,inputs,outputDtype,customSetup){var _this112=this;var preventEagerUnpackingOfOutput=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var output=this.makeTensorInfo(program.outputShape,outputDtype);var outData=this.texData.get(output.dataId);if(program.packedOutput){outData.isPacked=true;}if(program.outPackingScheme===PackingScheme.DENSE){var texelShape=getDenseTexShape(program.outputShape);// For a densely packed output, we explicitly set texShape\n// so it doesn't get assigned later according to our typical packing\n// scheme wherein a single texel can only contain values from adjacent\n// rows/cols.\noutData.texShape=texelShape.map(function(d){return d*2;});}if(program.outTexUsage!=null){outData.usage=program.outTexUsage;}if(dist[\"util\"].sizeFromShape(output.shape)===0){// Short-circuit the computation since the result is empty (has 0 in its\n// shape).\noutData.values=dist[\"util\"].getTypedArrayFromDType(output.dtype,0);return output;}var dataToDispose=[];var inputsData=inputs.map(function(input){if(input.dtype==='complex64'){throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \"+\"dtypes, please separate the program into real and imaginary \"+\"parts.\");}var texData=_this112.texData.get(input.dataId);if(texData.texture==null){if(!program.packedInputs&&dist[\"util\"].sizeFromShape(input.shape)<=Object(dist[\"env\"])().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')){// Upload small tensors that live on the CPU as uniforms, not as\n// textures. Do this only when the environment supports 32bit floats\n// due to problems when comparing 16bit floats with 32bit floats.\n// TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n// possible for packed shaders to sample from uniforms.\nreturn{shape:input.shape,texData:null,isUniform:true,uniformValues:texData.values};}// This ensures that if a packed program's inputs have not yet been\n// uploaded to the GPU, they get uploaded as packed right off the bat.\nif(program.packedInputs){texData.isPacked=true;texData.shape=input.shape;}}else if(!!texData.isPacked!==!!program.packedInputs){input=texData.isPacked?_this112.unpackTensor(input):_this112.packTensor(input);dataToDispose.push(input);texData=_this112.texData.get(input.dataId);}else if(texData.isPacked&&!isReshapeFree(texData.shape,input.shape)){// This is a special case where a texture exists for a tensor\n// but the shapes are incompatible (due to packing constraints) because\n// the tensor did not have a chance to go through the packed reshape\n// shader. This only happens when we reshape the *same* tensor to form\n// *distinct* inputs to an op, e.g. dotting a vector with itself. This\n// case will disappear once packed uploading is the default.\nvar savedInput=input;var targetShape=input.shape;input.shape=texData.shape;input=_this112.packedReshape(input,targetShape);dataToDispose.push(input);texData=_this112.texData.get(input.dataId);savedInput.shape=targetShape;}_this112.uploadToGPU(input.dataId);return{shape:input.shape,texData:texData,isUniform:false};});this.uploadToGPU(output.dataId);var outputData={shape:output.shape,texData:outData,isUniform:false};var key=makeShaderKey(program,inputsData,outputData);var binary=this.getAndSaveBinary(key,function(){return compileProgram(_this112.gpgpu,program,inputsData,outputData);});var shouldTimeProgram=this.activeTimers!=null;var query;if(shouldTimeProgram){query=this.startTimer();}runProgram(this.gpgpu,binary,inputsData,outputData,customSetup);dataToDispose.forEach(function(info){return _this112.disposeData(info.dataId);});if(shouldTimeProgram){query=this.endTimer(query);this.activeTimers.push({name:program.constructor.name,query:this.getQueryTime(query)});}if(!Object(dist[\"env\"])().getBool('WEBGL_LAZILY_UNPACK')&&outData.isPacked&&preventEagerUnpackingOfOutput===false){var unpacked=this.unpackTensor(output);this.disposeData(output.dataId);return unpacked;}return output;}},{key:\"compileAndRun\",value:function compileAndRun(program,inputs,outputDtype,customSetup){var preventEagerUnpackingOfOutput=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;outputDtype=outputDtype||inputs[0].dtype;var outInfo=this.runWebGLProgram(program,inputs,outputDtype,customSetup,preventEagerUnpackingOfOutput);return Object(dist[\"engine\"])().makeTensorFromDataId(outInfo.dataId,outInfo.shape,outInfo.dtype);}},{key:\"getAndSaveBinary\",value:function getAndSaveBinary(key,getBinary){if(!(key in this.binaryCache)){this.binaryCache[key]=getBinary();}return this.binaryCache[key];}},{key:\"getTextureManager\",value:function getTextureManager(){return this.textureManager;}},{key:\"dispose\",value:function dispose(){var _this113=this;if(this.disposed){return;}// Avoid disposing the compiled webgl programs during unit testing because\n// it slows down test execution.\nif(!Object(dist[\"env\"])().getBool('IS_TEST')){var allKeys=Object.keys(this.binaryCache);allKeys.forEach(function(key){_this113.gpgpu.deleteProgram(_this113.binaryCache[key].webGLProgram);delete _this113.binaryCache[key];});}this.textureManager.dispose();if(this.canvas!=null&&typeof HTMLCanvasElement!=='undefined'&&this.canvas instanceof HTMLCanvasElement){this.canvas.remove();}else{this.canvas=null;}if(this.gpgpuCreatedLocally){this.gpgpu.program=null;this.gpgpu.dispose();}this.disposed=true;}},{key:\"floatPrecision\",value:function floatPrecision(){var _this114=this;if(this.floatPrecisionValue==null){this.floatPrecisionValue=Object(dist[\"tidy\"])(function(){if(!Object(dist[\"env\"])().get('WEBGL_RENDER_FLOAT32_ENABLED')){// Momentarily switching DEBUG flag to false so we don't throw an\n// error trying to upload a small value.\nvar debugFlag=Object(dist[\"env\"])().getBool('DEBUG');Object(dist[\"env\"])().set('DEBUG',false);var underflowCheckValue=_this114.abs(Object(dist[\"scalar\"])(1e-8)).dataSync()[0];Object(dist[\"env\"])().set('DEBUG',debugFlag);if(underflowCheckValue>0){return 32;}}return 16;});}return this.floatPrecisionValue;}/** Returns the smallest representable number.  */},{key:\"epsilon\",value:function epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32:EPSILON_FLOAT16;}},{key:\"uploadToGPU\",value:function uploadToGPU(dataId){var texData=this.texData.get(dataId);var shape=texData.shape,dtype=texData.dtype,values=texData.values,texture=texData.texture,usage=texData.usage,isPacked=texData.isPacked;if(texture!=null){// Array is already on GPU. No-op.\nreturn;}var shouldTimeProgram=this.activeTimers!=null;var start;if(shouldTimeProgram){start=dist[\"util\"].now();}var texShape=texData.texShape;if(texShape==null){texShape=getTextureShapeFromLogicalShape(shape,isPacked);texData.texShape=texShape;}if(values!=null){var shapeAs3D=getShapeAs3D(shape);var program;var width=texShape[1],height=texShape[0];var isByteArray=values instanceof Uint8Array;if(isPacked){var _getPackedMatrixTextu9=getPackedMatrixTextureShapeWidthHeight(texShape[0],texShape[1]);var _getPackedMatrixTextu10=_slicedToArray(_getPackedMatrixTextu9,2);width=_getPackedMatrixTextu10[0];height=_getPackedMatrixTextu10[1];program=new encode_matrix_packed_gpu_EncodeMatrixPackedProgram(shapeAs3D,[height,width],isByteArray);}else{program=new encode_matrix_gpu_EncodeMatrixProgram(shapeAs3D,[height,width],isByteArray);}var tempDenseInputHandle=this.makeTensorInfo([height,width],dtype);if(isByteArray){this.texData.get(tempDenseInputHandle.dataId).usage=TextureUsage.PIXELS;}else{this.texData.get(tempDenseInputHandle.dataId).usage=TextureUsage.UPLOAD;}this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId),width,height,values);// We want the output to remain packed regardless of the value of\n// WEBGL_PACK.\nvar preventEagerUnpacking=true;var encodedOutputTarget=this.runWebGLProgram(program,[tempDenseInputHandle],dtype,null,preventEagerUnpacking);// Have the original texture assume the identity of the encoded output.\nvar outputTexData=this.texData.get(encodedOutputTarget.dataId);texData.texture=outputTexData.texture;texData.texShape=outputTexData.texShape;texData.isPacked=outputTexData.isPacked;texData.usage=outputTexData.usage;this.disposeData(tempDenseInputHandle.dataId);this.texData.delete(encodedOutputTarget.dataId);// Once uploaded, don't store the values on cpu.\ntexData.values=null;if(shouldTimeProgram){this.uploadWaitMs+=dist[\"util\"].now()-start;}}else{var newTexture=this.acquireTexture(texShape,usage,dtype,isPacked);texData.texture=newTexture;}}},{key:\"convertAndCacheOnCPU\",value:function convertAndCacheOnCPU(dataId,float32Values){var texData=this.texData.get(dataId);var dtype=texData.dtype;this.releaseGPUData(dataId);if(float32Values!=null){texData.values=float32ToTypedArray(float32Values,dtype);}return texData.values;}},{key:\"acquireTexture\",value:function acquireTexture(texShape,texType,dtype,isPacked){this.numBytesInGPU+=this.computeBytes(texShape,dtype);if(!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){var mb=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=true;console.warn(\"High memory usage in GPU: \".concat(mb,\" MB, \")+\"most likely due to a memory leak\");}return this.textureManager.acquireTexture(texShape,texType,isPacked);}},{key:\"computeBytes\",value:function computeBytes(shape,dtype){return shape[0]*shape[1]*dist[\"util\"].bytesPerElement(dtype);}}]);return backend_webgl_MathBackendWebGL;}(dist[\"KernelBackend\"]);function float32ToTypedArray(a,dtype){if(dtype==='float32'||dtype==='complex64'){return a;}else if(dtype==='int32'||dtype==='bool'){var result=dtype==='int32'?new Int32Array(a.length):new Uint8Array(a.length);for(var i=0;i<result.length;++i){result[i]=Math.round(a[i]);}return result;}else{throw new Error(\"Unknown dtype \".concat(dtype));}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nvar version_version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function divImpl(a,b,backend){var program=new binaryop_gpu_BinaryOpProgram(DIV,a.shape,b.shape);if(Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')){program=new binaryop_packed_gpu_BinaryOpPackedProgram(binaryop_packed_gpu_DIV,a.shape,b.shape,true);}var output=backend.runWebGLProgram(program,[a,b],'float32');return output;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var divConfig={kernelName:dist[\"Div\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref37){var inputs=_ref37.inputs,backend=_ref37.backend;var a=inputs.a,b=inputs.b;var webglBackend=backend;return divImpl(a,b,webglBackend);}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var from_pixels_gpu_FromPixelsProgram=function from_pixels_gpu_FromPixelsProgram(outputShape){_classCallCheck2(this,from_pixels_gpu_FromPixelsProgram);this.variableNames=['A'];var glsl=getGlslDifferences();var _outputShape=_slicedToArray(outputShape,2),height=_outputShape[0],width=_outputShape[1];this.outputShape=outputShape;this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\".concat(width,\".0, \").concat(height,\".0);\\n\\n        vec4 values = \").concat(glsl.texture2D,\"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var from_pixels_packed_gpu_FromPixelsPackedProgram=function from_pixels_packed_gpu_FromPixelsPackedProgram(outputShape){_classCallCheck2(this,from_pixels_packed_gpu_FromPixelsPackedProgram);this.variableNames=['A'];this.packedInputs=false;this.packedOutput=true;var glsl=getGlslDifferences();var _outputShape2=_slicedToArray(outputShape,2),height=_outputShape2[0],width=_outputShape2[1];this.outputShape=outputShape;this.userCode=\"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\".concat(width,\".0, \").concat(height,\".0);\\n            vec4 values = \").concat(glsl.texture2D,\"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \").concat(glsl.output,\" = result;\\n      }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var fromPixelsConfig={kernelName:dist[\"FromPixels\"],backendName:'webgl',kernelFunc:fromPixels};var fromPixels2DContext;function fromPixels(args){var inputs=args.inputs,backend=args.backend,attrs=args.attrs;var pixels=inputs.pixels;var numChannels=attrs.numChannels;var isVideo=typeof HTMLVideoElement!=='undefined'&&pixels instanceof HTMLVideoElement;var isImage=typeof HTMLImageElement!=='undefined'&&pixels instanceof HTMLImageElement;var _ref38=isVideo?[pixels.videoWidth,pixels.videoHeight]:[pixels.width,pixels.height],_ref39=_slicedToArray(_ref38,2),width=_ref39[0],height=_ref39[1];var texShape=[height,width];var outShape=[height,width,numChannels];if(isImage||isVideo){if(fromPixels2DContext==null){fromPixels2DContext=document.createElement('canvas').getContext('2d');}fromPixels2DContext.canvas.width=width;fromPixels2DContext.canvas.height=height;fromPixels2DContext.drawImage(pixels,0,0,width,height);pixels=fromPixels2DContext.canvas;}var tempPixelHandle=backend.makeTensorInfo(texShape,'int32');// This is a byte texture with pixels.\nbackend.texData.get(tempPixelHandle.dataId).usage=TextureUsage.PIXELS;backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId),pixels);var program=Object(dist[\"env\"])().getBool('WEBGL_PACK')?new from_pixels_packed_gpu_FromPixelsPackedProgram(outShape):new from_pixels_gpu_FromPixelsProgram(outShape);var res=backend.runWebGLProgram(program,[tempPixelHandle],'int32');backend.disposeData(tempPixelHandle.dataId);return res;}// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js + 3 modules\nvar base=__webpack_require__(31);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nvar _base$b=base[\"b\"/* shared */],maxImplCPU=_base$b.maxImpl,transposeImplCPU=_base$b.transposeImpl;// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function reduce(x,dtype,reductionType,backend){var _x$shape7=_slicedToArray(x.shape,2),batchSize=_x$shape7[0],inSize=_x$shape7[1];var windowSize=dist[\"backend_util\"].computeOptimalWindowSize(inSize);var reduceInfo={windowSize:windowSize,inSize:inSize,batchSize:batchSize};var program=new ReduceProgram(reduceInfo,reductionType);var output=backend.runWebGLProgram(program,[x],dtype);if(output.shape[1]===1){return output;}return reduce(output,dtype,reductionType,backend);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function packedReshape(input,afterShape,backend){var input3DShape=[getBatchDim(input.shape)].concat(_toConsumableArray2(getRowsCols(input.shape)));var input3D={dtype:input.dtype,shape:input3DShape,dataId:input.dataId};var afterShapeAs3D=[getBatchDim(afterShape)].concat(_toConsumableArray2(getRowsCols(afterShape)));var program=new reshape_packed_gpu_ReshapePackedProgram(afterShapeAs3D,input3DShape);var preventEagerUnpackingOfOutput=true;var output=backend.runWebGLProgram(program,[input3D],input.dtype,null/* customSetup */,preventEagerUnpackingOfOutput);return{dataId:output.dataId,shape:afterShape,dtype:output.dtype};}function reshape(x,afterShape,backend){var xTexData=backend.texData.get(x.dataId);if(xTexData.isPacked&&!isReshapeFree(x.shape,afterShape)&&!(xTexData.texture!==null&&isReshapeFree(xTexData.shape,afterShape))){return packedReshape(x,afterShape,backend);}return{dataId:x.dataId,shape:afterShape,dtype:x.dtype};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function maxImpl(x,reduceShape,outShape,backend){var inSize=dist[\"util\"].sizeFromShape(reduceShape);var xSize=dist[\"util\"].sizeFromShape(x.shape);var batchSize=xSize/inSize;var reshapedInput=reshape(x,[batchSize,inSize],backend);var reduced=reduce(reshapedInput,x.dtype,'max',backend);if(reshapedInput.dataId!==x.dataId){// dispose the output of the packed reshape.\nbackend.disposeData(reshapedInput.dataId);}return reshape(reduced,outShape,backend);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js\n/**\r\n * @license\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transpose_gpu_TransposeProgram=function transpose_gpu_TransposeProgram(aShape,newDim){_classCallCheck2(this,transpose_gpu_TransposeProgram);this.variableNames=['A'];var outputShape=new Array(aShape.length);for(var i=0;i<outputShape.length;i++){outputShape[i]=aShape[newDim[i]];}this.outputShape=outputShape;this.rank=outputShape.length;var dtype=getCoordsDataType(this.rank);var switched=getSwitchedCoords(newDim);this.userCode=\"\\n    void main() {\\n      \".concat(dtype,\" resRC = getOutputCoords();\\n      setOutput(getA(\").concat(switched,\"));\\n    }\\n    \");};function getSwitchedCoords(newDim){var rank=newDim.length;if(rank>6){throw Error(\"Transpose for rank \".concat(rank,\" is not yet supported\"));}var originalOrder=['resRC.x','resRC.y','resRC.z','resRC.w','resRC.u','resRC.v'];var switchedCoords=new Array(rank);for(var i=0;i<newDim.length;i++){switchedCoords[newDim[i]]=originalOrder[i];}return switchedCoords.join();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transpose_packed_gpu_TransposePackedProgram=function transpose_packed_gpu_TransposePackedProgram(aShape,newDim){_classCallCheck2(this,transpose_packed_gpu_TransposePackedProgram);this.variableNames=['A'];this.packedInputs=true;this.packedOutput=true;var outputShape=new Array(aShape.length);for(var i=0;i<outputShape.length;i++){outputShape[i]=aShape[newDim[i]];}this.outputShape=outputShape;this.rank=outputShape.length;if(this.rank>6){throw Error(\"Packed transpose for rank \".concat(this.rank,\" is not yet supported.\"));}var dtype=getCoordsDataType(this.rank);var outputOrder=getVecChannels('rc',this.rank);var switchedOrder=new Array(this.rank);for(var _i49=0;_i49<newDim.length;_i49++){switchedOrder[newDim[_i49]]=outputOrder[_i49];}var innerDims=\"vec2(\".concat(switchedOrder.slice(-2).join(),\")\");var nextColumn=\"++\".concat(outputOrder[this.rank-1],\" < \").concat(outputShape[this.rank-1]);var getc=\"getChannel(getA(\".concat(switchedOrder.join(),\"), \").concat(innerDims,\")\");this.userCode=\"\\n    void main() {\\n      \".concat(dtype,\" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \").concat(getc,\";\\n      if(\").concat(nextColumn,\") {\\n        result[1] = \").concat(getc,\";\\n      }\\n      --\").concat(outputOrder[this.rank-1],\";\\n      if(++\").concat(outputOrder[this.rank-2],\" < \").concat(outputShape[this.rank-2],\") {\\n        result[2] = \").concat(getc,\";\\n        if(\").concat(nextColumn,\") {\\n          result[3] = \").concat(getc,\";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \");};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function transposeImpl(x,perm,backend){var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_ARRAY_OPERATIONS')?new transpose_packed_gpu_TransposePackedProgram(x.shape,perm):new transpose_gpu_TransposeProgram(x.shape,perm);return backend.runWebGLProgram(program,[x],x.dtype);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxConfig={kernelName:dist[\"Max\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref40){var inputs=_ref40.inputs,attrs=_ref40.attrs,backend=_ref40.backend;var x=inputs.x;var reductionIndices=attrs.reductionIndices;var webglBackend=backend;var xRank=x.shape.length;var origAxes=dist[\"util\"].parseAxisParam(reductionIndices,x.shape);var axes=origAxes;var permutedAxes=dist[\"backend_util\"].getAxesPermutation(axes,xRank);var maxInputIsTransposed=permutedAxes!=null;var shouldExecuteOnCPU=webglBackend.shouldExecuteOnCPU([x]);var maxInput=x;if(maxInputIsTransposed){if(shouldExecuteOnCPU){var xTexData=webglBackend.texData.get(maxInput.dataId);var values=xTexData.values;var newShape=new Array(xRank);for(var i=0;i<newShape.length;i++){newShape[i]=x.shape[permutedAxes[i]];}var maxInputValues=transposeImplCPU(values,x.shape,x.dtype,permutedAxes,newShape);maxInput=webglBackend.makeTensorInfo(newShape,x.dtype);var maxInputData=webglBackend.texData.get(maxInput.dataId);maxInputData.values=maxInputValues;}else{maxInput=transposeImpl(x,permutedAxes,webglBackend);}axes=dist[\"backend_util\"].getInnerMostAxes(axes.length,xRank);}dist[\"backend_util\"].assertAxesAreInnerMostDims('max',axes,xRank);var _dist$backend_util$co27=dist[\"backend_util\"].computeOutAndReduceShapes(maxInput.shape,axes),_dist$backend_util$co28=_slicedToArray(_dist$backend_util$co27,2),maxOutShape=_dist$backend_util$co28[0],reduceShape=_dist$backend_util$co28[1];var out;if(shouldExecuteOnCPU){var _xTexData=webglBackend.texData.get(maxInput.dataId);var _values=_xTexData.values;var outValues=maxImplCPU(_values,dist[\"util\"].sizeFromShape(reduceShape),maxOutShape,x.dtype);out=webglBackend.makeTensorInfo(maxOutShape,x.dtype);var outData=webglBackend.texData.get(out.dataId);outData.values=outValues;}else{out=maxImpl(maxInput,reduceShape,maxOutShape,webglBackend);}if(maxInputIsTransposed){webglBackend.disposeData(maxInput.dataId);}return out;}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function maxPoolWithArgmaxImpl(x,includeBatchInIndex,convInfo,backend){var program=new Pool2DProgram(convInfo,'max',false);var poolOutput=backend.runWebGLProgram(program,[x],'float32');program=new Pool2DProgram(convInfo,'max',true,true,includeBatchInIndex);var indexOutput=backend.runWebGLProgram(program,[x],'float32');return[poolOutput,indexOutput];}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxPoolWithArgmaxConfig={kernelName:dist[\"MaxPoolWithArgmax\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref41){var inputs=_ref41.inputs,attrs=_ref41.attrs,backend=_ref41.backend;var x=inputs.x;var filterSize=attrs.filterSize,strides=attrs.strides,pad=attrs.pad,includeBatchInIndex=attrs.includeBatchInIndex;var webglBackend=backend;dist[\"util\"].assert(x.shape.length===4,function(){return\"Error in maxPool: input must be rank 4 but got rank \".concat(x.shape.length,\".\");});var dilations=[1,1];dist[\"util\"].assert(dist[\"backend_util\"].eitherStridesOrDilationsAreOne(strides,dilations),function(){return'Error in maxPool: Either strides or dilations must be 1. '+\"Got strides \".concat(strides,\" and dilations '\").concat(dilations,\"'\");});var convInfo=dist[\"backend_util\"].computePool2DInfo(x.shape,filterSize,strides,dilations,pad);var _maxPoolWithArgmaxImp=maxPoolWithArgmaxImpl(x,includeBatchInIndex,convInfo,webglBackend),_maxPoolWithArgmaxImp2=_slicedToArray(_maxPoolWithArgmaxImp,2),result=_maxPoolWithArgmaxImp2[0],indexes=_maxPoolWithArgmaxImp2[1];return[result,indexes];}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var nonMaxSuppressionV3Config={kernelName:dist[\"NonMaxSuppressionV3\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref42){var inputs=_ref42.inputs,backend=_ref42.backend,attrs=_ref42.attrs;dist[\"backend_util\"].warn('tf.nonMaxSuppression() in webgl locks the UI thread. '+'Call tf.nonMaxSuppressionAsync() instead');var boxes=inputs.boxes,scores=inputs.scores;var maxOutputSize=attrs.maxOutputSize,iouThreshold=attrs.iouThreshold,scoreThreshold=attrs.scoreThreshold;var gpuBackend=backend;var boxesVals=gpuBackend.readSync(boxes.dataId);var scoresVals=gpuBackend.readSync(scores.dataId);var maxOutputSizeVal=maxOutputSize;var iouThresholdVal=iouThreshold;var scoreThresholdVal=scoreThreshold;return dist[\"kernel_impls\"].nonMaxSuppressionV3(boxesVals,scoresVals,maxOutputSizeVal,iouThresholdVal,scoreThresholdVal);}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var nonMaxSuppressionV5=dist[\"kernel_impls\"].nonMaxSuppressionV5;var nonMaxSuppressionV5Config={kernelName:dist[\"NonMaxSuppressionV5\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref43){var inputs=_ref43.inputs,backend=_ref43.backend,attrs=_ref43.attrs;dist[\"backend_util\"].warn('tf.nonMaxSuppression() in webgl locks the UI thread. '+'Call tf.nonMaxSuppressionAsync() instead');var boxes=inputs.boxes,scores=inputs.scores;var maxOutputSize=attrs.maxOutputSize,iouThreshold=attrs.iouThreshold,scoreThreshold=attrs.scoreThreshold,softNmsSigma=attrs.softNmsSigma;var gpuBackend=backend;var boxesVals=gpuBackend.readSync(boxes.dataId);var scoresVals=gpuBackend.readSync(scores.dataId);var maxOutputSizeVal=maxOutputSize;var iouThresholdVal=iouThreshold;var scoreThresholdVal=scoreThreshold;var softNmsSigmaVal=softNmsSigma;var _nonMaxSuppressionV=nonMaxSuppressionV5(boxesVals,scoresVals,maxOutputSizeVal,iouThresholdVal,scoreThresholdVal,softNmsSigmaVal),selectedIndices=_nonMaxSuppressionV.selectedIndices,selectedScores=_nonMaxSuppressionV.selectedScores;return[selectedIndices,selectedScores];}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squareConfig={kernelName:dist[\"Square\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref44){var inputs=_ref44.inputs,backend=_ref44.backend;var x=inputs.x;var webglBackend=backend;var program=new UnaryOpProgram(x.shape,SQUARE);return webglBackend.runWebGLProgram(program,[x],x.dtype);}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squaredDifferenceConfig={kernelName:dist[\"SquaredDifference\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref45){var inputs=_ref45.inputs,backend=_ref45.backend;var a=inputs.a,b=inputs.b;var SQUARED_DIFFERENCE='return (a - b) * (a - b);';var webGLBackend=backend;var program=Object(dist[\"env\"])().getBool('WEBGL_PACK_BINARY_OPERATIONS')?new binaryop_packed_gpu_BinaryOpPackedProgram(SQUARED_DIFFERENCE,a.shape,b.shape):new binaryop_gpu_BinaryOpProgram(SQUARED_DIFFERENCE,a.shape,b.shape);return webGLBackend.compileAndRun(program,[a,b]);}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transposeConfig={kernelName:dist[\"Transpose\"],backendName:'webgl',kernelFunc:function kernelFunc(_ref46){var inputs=_ref46.inputs,attrs=_ref46.attrs,backend=_ref46.backend;var x=inputs.x;var perm=attrs.perm;var webglBackend=backend;var xRank=x.shape.length;var newShape=new Array(xRank);for(var i=0;i<newShape.length;i++){newShape[i]=x.shape[perm[i]];}var out;if(webglBackend.shouldExecuteOnCPU([x])){var xTexData=webglBackend.texData.get(x.dataId);var values=xTexData.values;var outValues=transposeImplCPU(values,x.shape,x.dtype,perm,newShape);out=webglBackend.makeTensorInfo(newShape,x.dtype);var outData=webglBackend.texData.get(out.dataId);outData.values=outValues;}else{out=transposeImpl(x,perm,webglBackend);}return out;}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // List all kernel configs here\nvar kernelConfigs=[maxConfig,fromPixelsConfig,divConfig,nonMaxSuppressionV3Config,nonMaxSuppressionV5Config,squareConfig,squaredDifferenceConfig,transposeConfig,maxPoolWithArgmaxConfig];for(var _i50=0,_kernelConfigs=kernelConfigs;_i50<_kernelConfigs.length;_i50++){var kernelConfig=_kernelConfigs[_i50];Object(dist[\"registerKernel\"])(kernelConfig);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // WebGL specific utils.\n/**\r\n * Enforce use of half precision textures if available on the platform.\r\n */ /** @doc {heading: 'Environment', namespace: 'webgl'} */function forceHalfFloat(){Object(dist[\"env\"])().set('WEBGL_FORCE_F16_TEXTURES',true);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */if(dist[\"device_util\"].isBrowser()){Object(dist[\"registerBackend\"])('webgl',function(){return new backend_webgl_MathBackendWebGL();},2/* priority */);}// Export webgl utilities\n// Export forceHalfFlost under webgl namespace for the union bundle.\nvar webgl={forceHalfFloat:forceHalfFloat};/***/},/* 87 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"CallbackList\",function(){return(/* reexport */CallbackList);});__webpack_require__.d(__webpack_exports__,\"CustomCallback\",function(){return(/* reexport */base_callbacks_CustomCallback);});__webpack_require__.d(__webpack_exports__,\"History\",function(){return(/* reexport */History);});__webpack_require__.d(__webpack_exports__,\"Callback\",function(){return(/* reexport */callbacks_Callback);});__webpack_require__.d(__webpack_exports__,\"callbacks\",function(){return(/* reexport */callbacks_callbacks);});__webpack_require__.d(__webpack_exports__,\"EarlyStopping\",function(){return(/* reexport */callbacks_EarlyStopping);});__webpack_require__.d(__webpack_exports__,\"InputSpec\",function(){return(/* reexport */InputSpec);});__webpack_require__.d(__webpack_exports__,\"SymbolicTensor\",function(){return(/* reexport */topology_SymbolicTensor);});__webpack_require__.d(__webpack_exports__,\"LayersModel\",function(){return(/* reexport */training_LayersModel);});__webpack_require__.d(__webpack_exports__,\"input\",function(){return(/* reexport */exports_input);});__webpack_require__.d(__webpack_exports__,\"loadLayersModel\",function(){return(/* reexport */loadLayersModel);});__webpack_require__.d(__webpack_exports__,\"model\",function(){return(/* reexport */exports_model);});__webpack_require__.d(__webpack_exports__,\"registerCallbackConstructor\",function(){return(/* reexport */registerCallbackConstructor);});__webpack_require__.d(__webpack_exports__,\"sequential\",function(){return(/* reexport */sequential);});__webpack_require__.d(__webpack_exports__,\"RNN\",function(){return(/* reexport */recurrent_RNN);});__webpack_require__.d(__webpack_exports__,\"Sequential\",function(){return(/* reexport */models_Sequential);});__webpack_require__.d(__webpack_exports__,\"LayerVariable\",function(){return(/* reexport */variables_LayerVariable);});__webpack_require__.d(__webpack_exports__,\"version_layers\",function(){return(/* reexport */version);});__webpack_require__.d(__webpack_exports__,\"constraints\",function(){return(/* reexport */exports_constraints_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"initializers\",function(){return(/* reexport */exports_initializers_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"layers\",function(){return(/* reexport */exports_layers_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"metrics\",function(){return(/* reexport */exports_metrics_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"models\",function(){return(/* reexport */exports_models_namespaceObject);});__webpack_require__.d(__webpack_exports__,\"regularizers\",function(){return(/* reexport */exports_regularizers_namespaceObject);});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js\nvar exports_constraints_namespaceObject={};__webpack_require__.r(exports_constraints_namespaceObject);__webpack_require__.d(exports_constraints_namespaceObject,\"maxNorm\",function(){return maxNorm;});__webpack_require__.d(exports_constraints_namespaceObject,\"unitNorm\",function(){return unitNorm;});__webpack_require__.d(exports_constraints_namespaceObject,\"nonNeg\",function(){return nonNeg;});__webpack_require__.d(exports_constraints_namespaceObject,\"minMaxNorm\",function(){return minMaxNorm;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js\nvar exports_initializers_namespaceObject={};__webpack_require__.r(exports_initializers_namespaceObject);__webpack_require__.d(exports_initializers_namespaceObject,\"zeros\",function(){return zeros;});__webpack_require__.d(exports_initializers_namespaceObject,\"ones\",function(){return exports_initializers_ones;});__webpack_require__.d(exports_initializers_namespaceObject,\"constant\",function(){return constant;});__webpack_require__.d(exports_initializers_namespaceObject,\"randomUniform\",function(){return randomUniform;});__webpack_require__.d(exports_initializers_namespaceObject,\"randomNormal\",function(){return exports_initializers_randomNormal;});__webpack_require__.d(exports_initializers_namespaceObject,\"truncatedNormal\",function(){return truncatedNormal;});__webpack_require__.d(exports_initializers_namespaceObject,\"identity\",function(){return identity;});__webpack_require__.d(exports_initializers_namespaceObject,\"varianceScaling\",function(){return varianceScaling;});__webpack_require__.d(exports_initializers_namespaceObject,\"glorotUniform\",function(){return glorotUniform;});__webpack_require__.d(exports_initializers_namespaceObject,\"glorotNormal\",function(){return glorotNormal;});__webpack_require__.d(exports_initializers_namespaceObject,\"heNormal\",function(){return heNormal;});__webpack_require__.d(exports_initializers_namespaceObject,\"heUniform\",function(){return heUniform;});__webpack_require__.d(exports_initializers_namespaceObject,\"leCunNormal\",function(){return leCunNormal;});__webpack_require__.d(exports_initializers_namespaceObject,\"leCunUniform\",function(){return leCunUniform;});__webpack_require__.d(exports_initializers_namespaceObject,\"orthogonal\",function(){return orthogonal;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js\nvar exports_layers_namespaceObject={};__webpack_require__.r(exports_layers_namespaceObject);__webpack_require__.d(exports_layers_namespaceObject,\"inputLayer\",function(){return exports_layers_inputLayer;});__webpack_require__.d(exports_layers_namespaceObject,\"elu\",function(){return exports_layers_elu;});__webpack_require__.d(exports_layers_namespaceObject,\"reLU\",function(){return reLU;});__webpack_require__.d(exports_layers_namespaceObject,\"leakyReLU\",function(){return leakyReLU;});__webpack_require__.d(exports_layers_namespaceObject,\"prelu\",function(){return prelu;});__webpack_require__.d(exports_layers_namespaceObject,\"softmax\",function(){return softmax;});__webpack_require__.d(exports_layers_namespaceObject,\"thresholdedReLU\",function(){return thresholdedReLU;});__webpack_require__.d(exports_layers_namespaceObject,\"conv1d\",function(){return exports_layers_conv1d;});__webpack_require__.d(exports_layers_namespaceObject,\"conv2d\",function(){return exports_layers_conv2d;});__webpack_require__.d(exports_layers_namespaceObject,\"conv2dTranspose\",function(){return conv2dTranspose;});__webpack_require__.d(exports_layers_namespaceObject,\"conv3d\",function(){return exports_layers_conv3d;});__webpack_require__.d(exports_layers_namespaceObject,\"separableConv2d\",function(){return separableConv2d;});__webpack_require__.d(exports_layers_namespaceObject,\"cropping2D\",function(){return cropping2D;});__webpack_require__.d(exports_layers_namespaceObject,\"upSampling2d\",function(){return upSampling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"depthwiseConv2d\",function(){return exports_layers_depthwiseConv2d;});__webpack_require__.d(exports_layers_namespaceObject,\"activation\",function(){return exports_layers_activation;});__webpack_require__.d(exports_layers_namespaceObject,\"dense\",function(){return dense;});__webpack_require__.d(exports_layers_namespaceObject,\"dropout\",function(){return exports_layers_dropout;});__webpack_require__.d(exports_layers_namespaceObject,\"spatialDropout1d\",function(){return spatialDropout1d;});__webpack_require__.d(exports_layers_namespaceObject,\"flatten\",function(){return exports_layers_flatten;});__webpack_require__.d(exports_layers_namespaceObject,\"repeatVector\",function(){return repeatVector;});__webpack_require__.d(exports_layers_namespaceObject,\"reshape\",function(){return reshape;});__webpack_require__.d(exports_layers_namespaceObject,\"permute\",function(){return permute;});__webpack_require__.d(exports_layers_namespaceObject,\"embedding\",function(){return embedding;});__webpack_require__.d(exports_layers_namespaceObject,\"add\",function(){return exports_layers_add;});__webpack_require__.d(exports_layers_namespaceObject,\"average\",function(){return exports_layers_average;});__webpack_require__.d(exports_layers_namespaceObject,\"concatenate\",function(){return exports_layers_concatenate;});__webpack_require__.d(exports_layers_namespaceObject,\"maximum\",function(){return exports_layers_maximum;});__webpack_require__.d(exports_layers_namespaceObject,\"minimum\",function(){return exports_layers_minimum;});__webpack_require__.d(exports_layers_namespaceObject,\"multiply\",function(){return exports_layers_multiply;});__webpack_require__.d(exports_layers_namespaceObject,\"dot\",function(){return exports_layers_dot;});__webpack_require__.d(exports_layers_namespaceObject,\"batchNormalization\",function(){return exports_layers_batchNormalization;});__webpack_require__.d(exports_layers_namespaceObject,\"layerNormalization\",function(){return layerNormalization;});__webpack_require__.d(exports_layers_namespaceObject,\"zeroPadding2d\",function(){return zeroPadding2d;});__webpack_require__.d(exports_layers_namespaceObject,\"averagePooling1d\",function(){return averagePooling1d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPool1d\",function(){return avgPool1d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPooling1d\",function(){return avgPooling1d;});__webpack_require__.d(exports_layers_namespaceObject,\"averagePooling2d\",function(){return averagePooling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPool2d\",function(){return avgPool2d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPooling2d\",function(){return avgPooling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"averagePooling3d\",function(){return averagePooling3d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPool3d\",function(){return avgPool3d;});__webpack_require__.d(exports_layers_namespaceObject,\"avgPooling3d\",function(){return avgPooling3d;});__webpack_require__.d(exports_layers_namespaceObject,\"globalAveragePooling1d\",function(){return globalAveragePooling1d;});__webpack_require__.d(exports_layers_namespaceObject,\"globalAveragePooling2d\",function(){return globalAveragePooling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"globalMaxPooling1d\",function(){return globalMaxPooling1d;});__webpack_require__.d(exports_layers_namespaceObject,\"globalMaxPooling2d\",function(){return globalMaxPooling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"maxPooling1d\",function(){return maxPooling1d;});__webpack_require__.d(exports_layers_namespaceObject,\"maxPooling2d\",function(){return maxPooling2d;});__webpack_require__.d(exports_layers_namespaceObject,\"maxPooling3d\",function(){return maxPooling3d;});__webpack_require__.d(exports_layers_namespaceObject,\"gru\",function(){return gru;});__webpack_require__.d(exports_layers_namespaceObject,\"gruCell\",function(){return gruCell;});__webpack_require__.d(exports_layers_namespaceObject,\"lstm\",function(){return lstm;});__webpack_require__.d(exports_layers_namespaceObject,\"lstmCell\",function(){return lstmCell;});__webpack_require__.d(exports_layers_namespaceObject,\"simpleRNN\",function(){return simpleRNN;});__webpack_require__.d(exports_layers_namespaceObject,\"simpleRNNCell\",function(){return simpleRNNCell;});__webpack_require__.d(exports_layers_namespaceObject,\"rnn\",function(){return exports_layers_rnn;});__webpack_require__.d(exports_layers_namespaceObject,\"stackedRNNCells\",function(){return stackedRNNCells;});__webpack_require__.d(exports_layers_namespaceObject,\"bidirectional\",function(){return bidirectional;});__webpack_require__.d(exports_layers_namespaceObject,\"timeDistributed\",function(){return timeDistributed;});__webpack_require__.d(exports_layers_namespaceObject,\"globalMaxPool1d\",function(){return globalMaxPool1d;});__webpack_require__.d(exports_layers_namespaceObject,\"globalMaxPool2d\",function(){return globalMaxPool2d;});__webpack_require__.d(exports_layers_namespaceObject,\"maxPool1d\",function(){return maxPool1d;});__webpack_require__.d(exports_layers_namespaceObject,\"maxPool2d\",function(){return maxPool2d;});__webpack_require__.d(exports_layers_namespaceObject,\"Layer\",function(){return topology_Layer;});__webpack_require__.d(exports_layers_namespaceObject,\"RNN\",function(){return recurrent_RNN;});__webpack_require__.d(exports_layers_namespaceObject,\"RNNCell\",function(){return recurrent_RNNCell;});__webpack_require__.d(exports_layers_namespaceObject,\"input\",function(){return exports_input;});__webpack_require__.d(exports_layers_namespaceObject,\"gaussianNoise\",function(){return gaussianNoise;});__webpack_require__.d(exports_layers_namespaceObject,\"gaussianDropout\",function(){return gaussianDropout;});__webpack_require__.d(exports_layers_namespaceObject,\"alphaDropout\",function(){return alphaDropout;});__webpack_require__.d(exports_layers_namespaceObject,\"masking\",function(){return masking;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_metrics.js\nvar exports_metrics_namespaceObject={};__webpack_require__.r(exports_metrics_namespaceObject);__webpack_require__.d(exports_metrics_namespaceObject,\"binaryAccuracy\",function(){return exports_metrics_binaryAccuracy;});__webpack_require__.d(exports_metrics_namespaceObject,\"binaryCrossentropy\",function(){return exports_metrics_binaryCrossentropy;});__webpack_require__.d(exports_metrics_namespaceObject,\"sparseCategoricalAccuracy\",function(){return exports_metrics_sparseCategoricalAccuracy;});__webpack_require__.d(exports_metrics_namespaceObject,\"categoricalAccuracy\",function(){return exports_metrics_categoricalAccuracy;});__webpack_require__.d(exports_metrics_namespaceObject,\"categoricalCrossentropy\",function(){return exports_metrics_categoricalCrossentropy;});__webpack_require__.d(exports_metrics_namespaceObject,\"precision\",function(){return exports_metrics_precision;});__webpack_require__.d(exports_metrics_namespaceObject,\"recall\",function(){return exports_metrics_recall;});__webpack_require__.d(exports_metrics_namespaceObject,\"cosineProximity\",function(){return exports_metrics_cosineProximity;});__webpack_require__.d(exports_metrics_namespaceObject,\"meanAbsoluteError\",function(){return exports_metrics_meanAbsoluteError;});__webpack_require__.d(exports_metrics_namespaceObject,\"meanAbsolutePercentageError\",function(){return exports_metrics_meanAbsolutePercentageError;});__webpack_require__.d(exports_metrics_namespaceObject,\"MAPE\",function(){return exports_metrics_MAPE;});__webpack_require__.d(exports_metrics_namespaceObject,\"mape\",function(){return exports_metrics_mape;});__webpack_require__.d(exports_metrics_namespaceObject,\"meanSquaredError\",function(){return exports_metrics_meanSquaredError;});__webpack_require__.d(exports_metrics_namespaceObject,\"MSE\",function(){return exports_metrics_MSE;});__webpack_require__.d(exports_metrics_namespaceObject,\"mse\",function(){return exports_metrics_mse;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_models.js\nvar exports_models_namespaceObject={};__webpack_require__.r(exports_models_namespaceObject);__webpack_require__.d(exports_models_namespaceObject,\"modelFromJSON\",function(){return modelFromJSON;});// NAMESPACE OBJECT: ./node_modules/@tensorflow/tfjs-layers/dist/exports_regularizers.js\nvar exports_regularizers_namespaceObject={};__webpack_require__.r(exports_regularizers_namespaceObject);__webpack_require__.d(exports_regularizers_namespaceObject,\"l1l2\",function(){return l1l2;});__webpack_require__.d(exports_regularizers_namespaceObject,\"l1\",function(){return exports_regularizers_l1;});__webpack_require__.d(exports_regularizers_namespaceObject,\"l2\",function(){return exports_regularizers_l2;});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */var _epsilon;/**\r\n * Returns the value of the fuzz factor used in numeric expressions.\r\n */function common_epsilon(){if(_epsilon==null){_epsilon=Object(dist[\"backend\"])().epsilon();}return _epsilon;}/**\r\n * Sets the value of the fuzz factor used in numeric expressions.\r\n * @param e New value of epsilon.\r\n */function setEpsilon(e){_epsilon=e;}/**\r\n * Returns the default image data format convention.\r\n */function imageDataFormat(){return'channelsLast';}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/errors.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Explicit error types.\r\n *\r\n * See the following link for more information about why the code includes\r\n * calls to setPrototypeOf:\r\n *\r\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n */ // tslint:enable\n/**\r\n * Equivalent of Python's AttributeError.\r\n */var AttributeError=/*#__PURE__*/function(_Error){_inherits(AttributeError,_Error);var _super35=_createSuper(AttributeError);function AttributeError(message){var _this115;_classCallCheck2(this,AttributeError);_this115=_super35.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this115),AttributeError.prototype);return _this115;}return AttributeError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\r\n * Equivalent of Python's RuntimeError.\r\n */var RuntimeError=/*#__PURE__*/function(_Error2){_inherits(RuntimeError,_Error2);var _super36=_createSuper(RuntimeError);function RuntimeError(message){var _this116;_classCallCheck2(this,RuntimeError);_this116=_super36.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this116),RuntimeError.prototype);return _this116;}return RuntimeError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\r\n * Equivalent of Python's ValueError.\r\n */var ValueError=/*#__PURE__*/function(_Error3){_inherits(ValueError,_Error3);var _super37=_createSuper(ValueError);function ValueError(message){var _this117;_classCallCheck2(this,ValueError);_this117=_super37.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this117),ValueError.prototype);return _this117;}return ValueError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\r\n * Equivalent of Python's NotImplementedError.\r\n */var NotImplementedError=/*#__PURE__*/function(_Error4){_inherits(NotImplementedError,_Error4);var _super38=_createSuper(NotImplementedError);function NotImplementedError(message){var _this118;_classCallCheck2(this,NotImplementedError);_this118=_super38.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this118),NotImplementedError.prototype);return _this118;}return NotImplementedError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\r\n * Equivalent of Python's AssertionError.\r\n */var AssertionError=/*#__PURE__*/function(_Error5){_inherits(AssertionError,_Error5);var _super39=_createSuper(AssertionError);function AssertionError(message){var _this119;_classCallCheck2(this,AssertionError);_this119=_super39.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this119),AssertionError.prototype);return _this119;}return AssertionError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\r\n * Equivalent of Python's IndexError.\r\n */var IndexError=/*#__PURE__*/function(_Error6){_inherits(IndexError,_Error6);var _super40=_createSuper(IndexError);function IndexError(message){var _this120;_classCallCheck2(this,IndexError);_this120=_super40.call(this,message);// Set the prototype explicitly.\nObject.setPrototypeOf(_assertThisInitialized(_this120),IndexError.prototype);return _this120;}return IndexError;}(/*#__PURE__*/_wrapNativeSuper(Error));// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: utils/generic_utils.py */ // tslint:enable\n/**\r\n * If `value` is an Array, equivalent to Python's `value * numValues`.\r\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\r\n */ // tslint:disable-next-line:no-any\nfunction pyListRepeat(value,numValues){if(Array.isArray(value)){// tslint:disable-next-line:no-any\nvar newArray=[];for(var i=0;i<numValues;i++){newArray=newArray.concat(value);}return newArray;}else{var _newArray=new Array(numValues);_newArray.fill(value);return _newArray;}}function assert(val,message){if(!val){throw new AssertionError(message);}}/**\r\n * Count the number of elements of the `array` that are equal to `reference`.\r\n */function generic_utils_count(array,refernce){var counter=0;var _iterator12=_createForOfIteratorHelper(array),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var item=_step12.value;if(item===refernce){counter++;}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}return counter;}/**\r\n * If an array is of length 1, just return the first element. Otherwise, return\r\n * the full array.\r\n * @param tensors\r\n */function singletonOrArray(xs){if(xs.length===1){return xs[0];}return xs;}/**\r\n * Normalizes a list/tensor into a list.\r\n *\r\n * If a tensor is passed, we return\r\n * a list of size 1 containing the tensor.\r\n *\r\n * @param x target object to be normalized.\r\n */ // tslint:disable-next-line:no-any\nfunction toList(x){if(Array.isArray(x)){return x;}return[x];}/**\r\n * Generate a UID for a list\r\n */ // tslint:disable-next-line:no-any\nfunction objectListUid(objs){var objectList=toList(objs);var retVal='';var _iterator13=_createForOfIteratorHelper(objectList),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var obj=_step13.value;if(obj.id==null){throw new ValueError(\"Object \".concat(obj,\" passed to objectListUid without an id\"));}if(retVal!==''){retVal=retVal+', ';}retVal=\"\".concat(retVal).concat(Math.abs(obj.id));}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return retVal;}/**\r\n * Converts string to snake-case.\r\n * @param name\r\n */function toSnakeCase(name){var intermediate=name.replace(/(.)([A-Z][a-z0-9]+)/g,'$1_$2');var insecure=intermediate.replace(/([a-z])([A-Z])/g,'$1_$2').toLowerCase();/*\r\n     If the class is private the name starts with \"_\" which is not secure\r\n     for creating scopes. We prefix the name with \"private\" in this case.\r\n     */if(insecure[0]!=='_'){return insecure;}return'private'+insecure;}function toCamelCase(identifier){// quick return for empty string or single character strings\nif(identifier.length<=1){return identifier;}// Check for the underscore indicating snake_case\nif(identifier.indexOf('_')===-1){return identifier;}return identifier.replace(/[_]+(\\w|$)/g,function(m,p1){return p1.toUpperCase();});}// tslint:disable-next-line:no-any\nvar _GLOBAL_CUSTOM_OBJECTS={};function serializeKerasObject(instance){if(instance===null||instance===undefined){return null;}var dict={};dict['className']=instance.getClassName();dict['config']=instance.getConfig();return dict;}/**\r\n * Replace ndarray-style scalar objects in serialization objects with numbers.\r\n *\r\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\r\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\r\n * where in `num` is a plain number. This method converts such serialization\r\n * to a `number`.\r\n *\r\n * @param config The keras-format serialization object to be processed\r\n *   (in place).\r\n */function convertNDArrayScalarsInConfig(config){if(config==null||_typeof2(config)!=='object'){return;}else if(Array.isArray(config)){config.forEach(function(configItem){return convertNDArrayScalarsInConfig(configItem);});}else{var fields=Object.keys(config);for(var _i51=0,_fields=fields;_i51<_fields.length;_i51++){var field=_fields[_i51];var value=config[field];if(value!=null&&_typeof2(value)==='object'){if(!Array.isArray(value)&&value['type']==='ndarray'&&typeof value['value']==='number'){config[field]=value['value'];}else{convertNDArrayScalarsInConfig(value);}}}}}/**\r\n * Deserialize a saved Keras Object\r\n * @param identifier either a string ID or a saved Keras dictionary\r\n * @param moduleObjects a list of Python class names to object constructors\r\n * @param customObjects a list of Python class names to object constructors\r\n * @param printableModuleName debug text for the object being reconstituted\r\n * @param fastWeightInit Optional flag to use fast weight initialization\r\n *   during deserialization. This is applicable to cases in which\r\n *   the initialization will be immediately overwritten by loaded weight\r\n *   values. Default: `false`.\r\n * @returns a TensorFlow.js Layers object\r\n */ // tslint:disable:no-any\nfunction deserializeKerasObject(identifier){var moduleObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var printableModuleName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'object';var fastWeightInit=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// tslint:enable\nif(typeof identifier==='string'){var functionName=identifier;var fn;if(functionName in customObjects){fn=customObjects[functionName];}else if(functionName in _GLOBAL_CUSTOM_OBJECTS){fn=_GLOBAL_CUSTOM_OBJECTS[functionName];}else{fn=moduleObjects[functionName];if(fn==null){throw new ValueError(\"Unknown \".concat(printableModuleName,\": \").concat(identifier,\". \")+\"This may be due to one of the following reasons:\\n\"+\"1. The \".concat(printableModuleName,\" is defined in Python, in which \")+\"case it needs to be ported to TensorFlow.js or your JavaScript \"+\"code.\\n\"+\"2. The custom \".concat(printableModuleName,\" is defined in JavaScript, \")+\"but is not registered properly with \"+\"tf.serialization.registerClass().\");// TODO(cais): Add link to tutorial page on custom layers.\n}}return fn;}else{// In this case we are dealing with a Keras config dictionary.\nvar config=identifier;if(config['className']==null||config['config']==null){throw new ValueError(\"\".concat(printableModuleName,\": Improper config format: \")+\"\".concat(JSON.stringify(config),\".\\n\")+\"'className' and 'config' must set.\");}var className=config['className'];var cls,fromConfig;if(className in customObjects){var _customObjects$classN=_slicedToArray(customObjects[className],2);cls=_customObjects$classN[0];fromConfig=_customObjects$classN[1];}else if(className in _GLOBAL_CUSTOM_OBJECTS){var _GLOBAL_CUSTOM_OBJECT=_slicedToArray(_GLOBAL_CUSTOM_OBJECTS['className'],2);cls=_GLOBAL_CUSTOM_OBJECT[0];fromConfig=_GLOBAL_CUSTOM_OBJECT[1];}else if(className in moduleObjects){var _moduleObjects$classN=_slicedToArray(moduleObjects[className],2);cls=_moduleObjects$classN[0];fromConfig=_moduleObjects$classN[1];}if(cls==null){throw new ValueError(\"Unknown \".concat(printableModuleName,\": \").concat(className,\". \")+\"This may be due to one of the following reasons:\\n\"+\"1. The \".concat(printableModuleName,\" is defined in Python, in which \")+\"case it needs to be ported to TensorFlow.js or your JavaScript \"+\"code.\\n\"+\"2. The custom \".concat(printableModuleName,\" is defined in JavaScript, \")+\"but is not registered properly with \"+\"tf.serialization.registerClass().\");// TODO(cais): Add link to tutorial page on custom layers.\n}if(fromConfig!=null){// Porting notes: Instead of checking to see whether fromConfig accepts\n// customObjects, we create a customObjects dictionary and tack it on to\n// config['config'] as config['config'].customObjects. Objects can use it,\n// if they want.\n// tslint:disable-next-line:no-any\nvar customObjectsCombined={};for(var _i52=0,_Object$keys=Object.keys(_GLOBAL_CUSTOM_OBJECTS);_i52<_Object$keys.length;_i52++){var key=_Object$keys[_i52];customObjectsCombined[key]=_GLOBAL_CUSTOM_OBJECTS[key];}for(var _i53=0,_Object$keys2=Object.keys(customObjects);_i53<_Object$keys2.length;_i53++){var _key6=_Object$keys2[_i53];customObjectsCombined[_key6]=customObjects[_key6];}// Add the customObjects to config\nvar nestedConfig=config['config'];nestedConfig['customObjects']=customObjectsCombined;var backupCustomObjects=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(var _i54=0,_Object$keys3=Object.keys(customObjects);_i54<_Object$keys3.length;_i54++){var _key7=_Object$keys3[_i54];_GLOBAL_CUSTOM_OBJECTS[_key7]=customObjects[_key7];}convertNDArrayScalarsInConfig(config['config']);var returnObj=fromConfig(cls,config['config'],customObjects,fastWeightInit);_GLOBAL_CUSTOM_OBJECTS=Object.assign({},backupCustomObjects);return returnObj;}else{// Then `cls` may be a function returning a class.\n// In this case by convention `config` holds\n// the kwargs of the function.\nvar _backupCustomObjects=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(var _i55=0,_Object$keys4=Object.keys(customObjects);_i55<_Object$keys4.length;_i55++){var _key8=_Object$keys4[_i55];_GLOBAL_CUSTOM_OBJECTS[_key8]=customObjects[_key8];}// In python this is **config['config'], for tfjs-layers we require\n// classes that use this fall-through construction method to take\n// a config interface that mimics the expansion of named parameters.\nvar _returnObj=new cls(config['config']);_GLOBAL_CUSTOM_OBJECTS=Object.assign({},_backupCustomObjects);return _returnObj;}}}/**\r\n * Compares two numbers for sorting.\r\n * @param a\r\n * @param b\r\n */function numberCompare(a,b){return a<b?-1:a>b?1:0;}/**\r\n * Comparison of two numbers for reverse sorting.\r\n * @param a\r\n * @param b\r\n */function reverseNumberCompare(a,b){return-1*numberCompare(a,b);}/**\r\n * Convert a string into the corresponding DType.\r\n * @param dtype\r\n * @returns An instance of DType.\r\n */function stringToDType(dtype){switch(dtype){case'float32':return'float32';default:throw new ValueError(\"Invalid dtype: \".concat(dtype));}}/**\r\n * Test the element-by-element equality of two Arrays of strings.\r\n * @param xs First array of strings.\r\n * @param ys Second array of strings.\r\n * @returns Wether the two arrays are all equal, element by element.\r\n */function stringsEqual(xs,ys){if(xs==null||ys==null){return xs===ys;}if(xs.length!==ys.length){return false;}for(var i=0;i<xs.length;++i){if(xs[i]!==ys[i]){return false;}}return true;}/**\r\n * Get the unique elements of an array.\r\n * @param xs Array.\r\n * @returns An Array consisting of the unique elements in `xs`.\r\n */function unique(xs){if(xs==null){return xs;}var out=[];// TODO(cais): Maybe improve performance by sorting.\nvar _iterator14=_createForOfIteratorHelper(xs),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var x=_step14.value;if(out.indexOf(x)===-1){out.push(x);}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}return out;}/**\r\n * Determine if an Object is empty (i.e., does not have own properties).\r\n * @param obj Object\r\n * @returns Whether the Object is empty.\r\n * @throws ValueError: If object is `null` or `undefined`.\r\n */function isObjectEmpty(obj){if(obj==null){throw new ValueError(\"Invalid value in obj: \".concat(JSON.stringify(obj)));}for(var key in obj){if(obj.hasOwnProperty(key)){return false;}}return true;}/**\r\n * Helper function used to build type union/enum run-time checkers.\r\n * @param values The list of allowed values.\r\n * @param label A string name for the type\r\n * @param value The value to test.\r\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\r\n */function checkStringTypeUnionValue(values,label,value){if(value==null){return;}if(values.indexOf(value)<0){throw new ValueError(\"\".concat(value,\" is not a valid \").concat(label,\".  Valid values are \").concat(values,\" or null/undefined.\"));}}/**\r\n * Helper function for verifying the types of inputs.\r\n *\r\n * Ensures that the elements of `x` are all of type `expectedType`.\r\n * Also verifies that the length of `x` is within bounds.\r\n *\r\n * @param x Object to test.\r\n * @param expectedType The string expected type of all of the elements in the\r\n * Array.\r\n * @param minLength Return false if x.length is less than this.\r\n * @param maxLength Return false if x.length is greater than this.\r\n * @returns true if and only if `x` is an `Array<expectedType>` with\r\n * length >= `minLength` and <= `maxLength`.\r\n */ // tslint:disable:no-any\nfunction checkArrayTypeAndLength(x,expectedType){var minLength=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var maxLength=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Infinity;assert(minLength>=0);assert(maxLength>=minLength);return Array.isArray(x)&&x.length>=minLength&&x.length<=maxLength&&x.every(function(e){return _typeof2(e)===expectedType;});}// tslint:enable:no-any\n/**\r\n * Assert that a value or an array of value are positive integer.\r\n *\r\n * @param value The value being asserted on. May be a single number or an array\r\n *   of numbers.\r\n * @param name Name of the value, used to make the error message.\r\n */function assertPositiveInteger(value,name){if(Array.isArray(value)){dist[\"util\"].assert(value.length>0,function(){return\"\".concat(name,\" is unexpectedly an empty array.\");});value.forEach(function(v,i){return assertPositiveInteger(v,\"element \".concat(i+1,\" of \").concat(name));});}else{dist[\"util\"].assert(Number.isInteger(value)&&value>0,function(){return\"Expected \".concat(name,\" to be a positive integer, but got \")+\"\".concat(formatAsFriendlyString(value),\".\");});}}/**\r\n * Format a value into a display-friendly, human-readable fashion.\r\n *\r\n * - `null` is formatted as `'null'`\r\n * - Strings are formated with flanking pair of quotes.\r\n * - Arrays are formatted with flanking pair of square brackets.\r\n *\r\n * @param value The value to display.\r\n * @return Formatted string.\r\n */ // tslint:disable-next-line:no-any\nfunction formatAsFriendlyString(value){if(value===null){return'null';}else if(Array.isArray(value)){return'['+value.map(function(v){return formatAsFriendlyString(v);}).join(',')+']';}else if(typeof value==='string'){return\"\\\"\".concat(value,\"\\\"\");}else{return\"\".concat(value);}}/**\r\n * Returns a function `f2` (decorator) which wraps the original function\r\n * `f`. `f2` guarantees that `f` can be called at most once\r\n * every `waitMs` ms. If `f2` is called more often, it will return\r\n * the last returned result of `f`.\r\n *\r\n * @param f The original function `f` to wrap.\r\n * @param waitMs The time between two consecutive calls to `f` in ms.\r\n */function debounce(f,waitMs){var lastTime=dist[\"util\"].now();var lastResult;var f2=function f2(){var now=dist[\"util\"].now();if(now-lastTime<waitMs){return lastResult;}lastTime=now;lastResult=f.apply(void 0,arguments);return lastResult;};return f2;}/**\r\n * Returns the fusable activation given a layers identifier.\r\n *\r\n * @param activationName The layers identifier string.\r\n * @return The name of the fusable activation.\r\n */function mapActivationToFusedKernel(activationName){if(activationName==='relu'){return'relu';}if(activationName==='linear'){return'linear';}if(activationName==='elu'){return'elu';}return null;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: keras/contraints.py */ /**\r\n * Helper function used by many of the Constraints to find the L2Norms.\r\n */function calcL2Norms(w,axis){return Object(dist[\"tidy\"])(function(){return dist[\"sqrt\"](dist[\"sum\"](dist[\"mul\"](w,w),axis,true));});}/**\r\n * Base class for functions that impose constraints on weight values\r\n */ /**\r\n * @doc {\r\n *   heading: 'Constraints',\r\n *   subheading: 'Classes',\r\n *   namespace: 'constraints'\r\n * }\r\n */var constraints_Constraint=/*#__PURE__*/function(_dist$serialization$S){_inherits(constraints_Constraint,_dist$serialization$S);var _super41=_createSuper(constraints_Constraint);function constraints_Constraint(){_classCallCheck2(this,constraints_Constraint);return _super41.apply(this,arguments);}_createClass(constraints_Constraint,[{key:\"getConfig\",value:function getConfig(){return{};}}]);return constraints_Constraint;}(dist[\"serialization\"].Serializable);var constraints_MaxNorm=/*#__PURE__*/function(_constraints_Constrai){_inherits(constraints_MaxNorm,_constraints_Constrai);var _super42=_createSuper(constraints_MaxNorm);function constraints_MaxNorm(args){var _this121;_classCallCheck2(this,constraints_MaxNorm);_this121=_super42.call(this);_this121.defaultMaxValue=2;_this121.defaultAxis=0;_this121.maxValue=args.maxValue!=null?args.maxValue:_this121.defaultMaxValue;_this121.axis=args.axis!=null?args.axis:_this121.defaultAxis;return _this121;}_createClass(constraints_MaxNorm,[{key:\"apply\",value:function apply(w){var _this122=this;return Object(dist[\"tidy\"])(function(){var norms=calcL2Norms(w,_this122.axis);var desired=dist[\"clipByValue\"](norms,0,_this122.maxValue);return dist[\"mul\"](w,dist[\"div\"](desired,dist[\"add\"](common_epsilon(),norms)));});}},{key:\"getConfig\",value:function getConfig(){return{maxValue:this.maxValue,axis:this.axis};}}]);return constraints_MaxNorm;}(constraints_Constraint);/** @nocollapse */constraints_MaxNorm.className='MaxNorm';dist[\"serialization\"].registerClass(constraints_MaxNorm);var constraints_UnitNorm=/*#__PURE__*/function(_constraints_Constrai2){_inherits(constraints_UnitNorm,_constraints_Constrai2);var _super43=_createSuper(constraints_UnitNorm);function constraints_UnitNorm(args){var _this123;_classCallCheck2(this,constraints_UnitNorm);_this123=_super43.call(this);_this123.defaultAxis=0;_this123.axis=args.axis!=null?args.axis:_this123.defaultAxis;return _this123;}_createClass(constraints_UnitNorm,[{key:\"apply\",value:function apply(w){var _this124=this;return Object(dist[\"tidy\"])(function(){return dist[\"div\"](w,dist[\"add\"](common_epsilon(),calcL2Norms(w,_this124.axis)));});}},{key:\"getConfig\",value:function getConfig(){return{axis:this.axis};}}]);return constraints_UnitNorm;}(constraints_Constraint);/** @nocollapse */constraints_UnitNorm.className='UnitNorm';dist[\"serialization\"].registerClass(constraints_UnitNorm);var constraints_NonNeg=/*#__PURE__*/function(_constraints_Constrai3){_inherits(constraints_NonNeg,_constraints_Constrai3);var _super44=_createSuper(constraints_NonNeg);function constraints_NonNeg(){_classCallCheck2(this,constraints_NonNeg);return _super44.apply(this,arguments);}_createClass(constraints_NonNeg,[{key:\"apply\",value:function apply(w){return dist[\"relu\"](w);}}]);return constraints_NonNeg;}(constraints_Constraint);/** @nocollapse */constraints_NonNeg.className='NonNeg';dist[\"serialization\"].registerClass(constraints_NonNeg);var constraints_MinMaxNorm=/*#__PURE__*/function(_constraints_Constrai4){_inherits(constraints_MinMaxNorm,_constraints_Constrai4);var _super45=_createSuper(constraints_MinMaxNorm);function constraints_MinMaxNorm(args){var _this125;_classCallCheck2(this,constraints_MinMaxNorm);_this125=_super45.call(this);_this125.defaultMinValue=0.0;_this125.defaultMaxValue=1.0;_this125.defaultRate=1.0;_this125.defaultAxis=0;_this125.minValue=args.minValue!=null?args.minValue:_this125.defaultMinValue;_this125.maxValue=args.maxValue!=null?args.maxValue:_this125.defaultMaxValue;_this125.rate=args.rate!=null?args.rate:_this125.defaultRate;_this125.axis=args.axis!=null?args.axis:_this125.defaultAxis;return _this125;}_createClass(constraints_MinMaxNorm,[{key:\"apply\",value:function apply(w){var _this126=this;return Object(dist[\"tidy\"])(function(){var norms=calcL2Norms(w,_this126.axis);var desired=dist[\"add\"](dist[\"mul\"](_this126.rate,dist[\"clipByValue\"](norms,_this126.minValue,_this126.maxValue)),dist[\"mul\"](1.0-_this126.rate,norms));return dist[\"mul\"](w,dist[\"div\"](desired,dist[\"add\"](common_epsilon(),norms)));});}},{key:\"getConfig\",value:function getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis};}}]);return constraints_MinMaxNorm;}(constraints_Constraint);/** @nocollapse */constraints_MinMaxNorm.className='MinMaxNorm';dist[\"serialization\"].registerClass(constraints_MinMaxNorm);// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nvar CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP={'maxNorm':'MaxNorm','minMaxNorm':'MinMaxNorm','nonNeg':'NonNeg','unitNorm':'UnitNorm'};function serializeConstraint(constraint){return serializeKerasObject(constraint);}function deserializeConstraint(config){var customObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return deserializeKerasObject(config,dist[\"serialization\"].SerializationMap.getMap().classNameMap,customObjects,'constraint');}function getConstraint(identifier){if(identifier==null){return null;}if(typeof identifier==='string'){var className=identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP?CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier]:identifier;var config={className:className,config:{}};return deserializeConstraint(config);}else if(identifier instanceof constraints_Constraint){return identifier;}else{return deserializeConstraint(identifier);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // tslint:disable-next-line:max-line-length\n/**\r\n * MaxNorm weight constraint.\r\n *\r\n * Constrains the weights incident to each hidden unit\r\n * to have a norm less than or equal to a desired value.\r\n *\r\n * References\r\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\r\n * Srivastava, Hinton, et al.\r\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\r\n */ /** @doc {heading: 'Constraints',namespace: 'constraints'} */function maxNorm(args){return new constraints_MaxNorm(args);}/**\r\n * Constrains the weights incident to each hidden unit to have unit norm.\r\n */ /** @doc {heading: 'Constraints', namespace: 'constraints'} */function unitNorm(args){return new constraints_UnitNorm(args);}/**\r\n * Constains the weight to be non-negative.\r\n */ /** @doc {heading: 'Constraints', namespace: 'constraints'} */function nonNeg(){return new constraints_NonNeg();}/** @doc {heading: 'Constraints', namespace: 'constraints'} */function minMaxNorm(config){return new constraints_MinMaxNorm(config);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/keras_format/common.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */var VALID_DATA_FORMAT_VALUES=['channelsFirst','channelsLast'];var VALID_PADDING_MODE_VALUES=['valid','same','causal'];var VALID_POOL_MODE_VALUES=['max','avg'];var VALID_BIDIRECTIONAL_MERGE_MODES=['sum','mul','concat','ave'];var VALID_SAMPLE_WEIGHT_MODES=['temporal'];// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/common.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Common functions for TensorFlow.js Layers.\r\n */ // A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nvar nameMap=new Map();function checkDataFormat(value){checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES,'DataFormat',value);}function checkPaddingMode(value){checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES,'PaddingMode',value);}function checkPoolMode(value){checkStringTypeUnionValue(VALID_POOL_MODE_VALUES,'PoolMode',value);}var _nameScopeStack=[];var _nameScopeDivider='/';/**\r\n * Enter namescope, which can be nested.\r\n */function nameScope(name,fn){_nameScopeStack.push(name);try{var val=fn();_nameScopeStack.pop();return val;}catch(e){_nameScopeStack.pop();throw e;}}/**\r\n * Get the current namescope as a flat, concatenated string.\r\n */function currentNameScopePrefix(){if(_nameScopeStack.length===0){return'';}else{return _nameScopeStack.join(_nameScopeDivider)+_nameScopeDivider;}}/**\r\n * Get the name a Tensor (or Variable) would have if not uniqueified.\r\n * @param tensorName\r\n * @return Scoped name string.\r\n */function getScopedTensorName(tensorName){if(!isValidTensorName(tensorName)){throw new Error('Not a valid tensor name: \\''+tensorName+'\\'');}return currentNameScopePrefix()+tensorName;}/**\r\n * Get unique names for Tensors and Variables.\r\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\r\n *  `getScopedTensorName()`.\r\n * @return A unique version of the given fully scoped name.\r\n *   If this is the first time that the scoped name is seen in this session,\r\n *   then the given `scopedName` is returned unaltered.  If the same name is\r\n *   seen again (producing a collision), an incrementing suffix is added to the\r\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\r\n */function getUniqueTensorName(scopedName){if(!isValidTensorName(scopedName)){throw new Error('Not a valid tensor name: \\''+scopedName+'\\'');}if(!nameMap.has(scopedName)){nameMap.set(scopedName,0);}var index=nameMap.get(scopedName);nameMap.set(scopedName,nameMap.get(scopedName)+1);if(index>0){var result=\"\".concat(scopedName,\"_\").concat(index);// Mark the composed name as used in case someone wants\n// to call getUniqueTensorName(\"name_1\").\nnameMap.set(result,1);return result;}else{return scopedName;}}var tensorNameRegex=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);/**\r\n * Determine whether a string is a valid tensor name.\r\n * @param name\r\n * @returns A Boolean indicating whether `name` is a valid tensor name.\r\n */function isValidTensorName(name){return!!name.match(tensorNameRegex);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Math utility functions.\r\n *\r\n * This file contains some frequently used math function that operates on\r\n * number[] or Float32Array and return a number. Many of these functions are\r\n * not-so-thick wrappers around TF.js Core functions. But they offer the\r\n * convenience of\r\n * 1) not having to convert the inputs into Tensors,\r\n * 2) not having to convert the returned Tensors to numbers.\r\n */ /**\r\n * Determine if a number is an integer.\r\n */function isInteger(x){return x===parseInt(x.toString(),10);}/**\r\n * Calculate the product of an array of numbers.\r\n * @param array The array to calculate the product over.\r\n * @param begin Beginning index, inclusive.\r\n * @param end Ending index, exclusive.\r\n * @return The product.\r\n */function arrayProd(array,begin,end){if(begin==null){begin=0;}if(end==null){end=array.length;}var prod=1;for(var i=begin;i<end;++i){prod*=array[i];}return prod;}/**\r\n * A helper function transforms the two input types to an instance of Tensor1D,\r\n * so the return value can be fed directly into various TF.js Core functions.\r\n * @param array\r\n */function toArray1D(array){array=Array.isArray(array)?new Float32Array(array):array;return Object(dist[\"tensor1d\"])(array);}/**\r\n * Compute minimum value.\r\n * @param array\r\n * @return minimum value.\r\n */function min(array){return dist[\"min\"](toArray1D(array)).dataSync()[0];}/**\r\n * Compute maximum value.\r\n * @param array\r\n * @return maximum value\r\n */function max(array){return dist[\"max\"](toArray1D(array)).dataSync()[0];}/**\r\n * Compute sum of array.\r\n * @param array\r\n * @return The sum.\r\n */function sum(array){return dist[\"sum\"](toArray1D(array)).dataSync()[0];}/**\r\n * Compute mean of array.\r\n * @param array\r\n * @return The mean.\r\n */function math_utils_mean(array){return sum(array)/array.length;}/**\r\n * Compute variance of array.\r\n * @param array\r\n * @return The variance.\r\n */function math_utils_variance(array){var demeaned=dist[\"sub\"](toArray1D(array),Object(dist[\"scalar\"])(math_utils_mean(array)));var sumSquare=dist[\"sum\"](dist[\"mul\"](demeaned,demeaned)).dataSync()[0];return sumSquare/array.length;}/**\r\n * Compute median of array.\r\n * @param array\r\n * @return The median value.\r\n */function median(array){var arraySorted=array.slice().sort(function(a,b){return a-b;});var lowIdx=Math.floor((arraySorted.length-1)/2);var highIdx=Math.ceil((arraySorted.length-1)/2);if(lowIdx===highIdx){return arraySorted[lowIdx];}return(arraySorted[lowIdx]+arraySorted[highIdx])/2;}/**\r\n * Generate an array of integers in [begin, end).\r\n * @param begin Beginning integer, inclusive.\r\n * @param end Ending integer, exclusive.\r\n * @returns Range array.\r\n * @throws ValueError, iff `end` < `begin`.\r\n */function range(begin,end){if(end<begin){throw new ValueError(\"end (\".concat(end,\") < begin (\").concat(begin,\") is forbidden.\"));}var out=[];for(var i=begin;i<end;++i){out.push(i);}return out;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * deeplearn.js backend.\r\n */ // tslint:enable\n/* Setting and getting backend from deeplearn.js. */ // Default deeplearn.js backend is WebGL (GPU).\nvar backend='webgl';function setBackend(requestedBackend){dist[\"setBackend\"](requestedBackend);backend=requestedBackend;}function getBackend(){return backend;}/**\r\n * Indicates whether the backend is operating symbolically.\r\n *\r\n * This function will be used to determine how to interpret user code. If\r\n * it returns true, calls to the backend construct a symbolic graph; if\r\n * it returns false, calls to the backend execute immediately.\r\n */function isBackendSymbolic(){return false;}/**\r\n * Get the number of elements in a Tensor.\r\n * @param x The Tensor.\r\n * @return Number of elements in `x`.\r\n */function countParams(x){var shape=x.shape;if(shape.length>0){return shape.reduce(function(a,b){return a*b;});}else{// Scalar.\nreturn 1;}}/**\r\n * Casts a tensor to a different dtype and returns it.\r\n * @param x Input tensor.\r\n * @param dtype String: 'float32'|'int32'|'bool'.\r\n * @returns Tensor of the specified `dtype`.\r\n */function cast(x,dtype){return x.asType(dtype);}/**\r\n * Adds a 1-sized dimension at index \"axis\".\r\n * @param x Input tensor.\r\n * @param axis Position where to add the new axis.\r\n * @returns Result of the dimension expansion.\r\n */function expandDims(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var outShape=x.shape.slice();if(axis<0){axis=outShape.length+axis+1;}outShape.splice(axis,0,1);return x.reshape(outShape);}/**\r\n * Repeats a 2D tensor.\r\n *\r\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\r\n * will have shape `[samples, 2, dim]`.\r\n *\r\n * @param x Input tensor.\r\n * @param n Integer, number of times to repeat.\r\n * @returns The result of the repeat operation.\r\n * @throws ValueError: If input tensor is not 2D.\r\n */function repeat(x,n){return Object(dist[\"tidy\"])(function(){if(x.shape.length!==2){throw new ValueError(\"repeat() expects a rank-2 tensor, but received a \"+\"rank-\".concat(x.shape.length,\" tensor.\"));}var y=expandDims(x,1);return tile(y,[1,n,1]);});}/**\r\n * Flatten a Tensor into 1D.\r\n * @param x Input tensor.\r\n * @return The result of the flattening `x`.\r\n */function flatten(x){var newShape=[arrayProd(x.shape)];return x.reshape(newShape);}/**\r\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\r\n * In other words, it flattens each data samples of a batch.\r\n *\r\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\r\n *   or higher.\r\n * @return The result of the flattening.\r\n */function batchFlatten(x){if(x.rank<=1){throw new ValueError(\"batchFlatten requires a minimum rank of 2. Got rank: \".concat(x.rank,\".\"));}var newShape=[x.shape[0],arrayProd(x.shape,1)];return x.reshape(newShape);}/**\r\n * Do slicing along the first axis.\r\n * @param array input `tf.Tensor`.\r\n * @param start starting index, inclusive.\r\n * @param size size of the slice along the first axis.\r\n * @returns result of the slicing.\r\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\r\n */function sliceAlongFirstAxis(array,start,size){return Object(dist[\"tidy\"])(function(){switch(array.rank){case 1:return dist[\"slice1d\"](array,start,size);case 2:return dist[\"slice2d\"](array,[start,0],[size,array.shape[1]]);case 3:return dist[\"slice3d\"](array,[start,0,0],[size,array.shape[1],array.shape[2]]);case 4:return dist[\"slice4d\"](array,[start,0,0,0],[size,array.shape[1],array.shape[2],array.shape[3]]);case 5:return dist[\"slice\"](array,[start,0,0,0,0],[size,array.shape[1],array.shape[2],array.shape[3],array.shape[4]]);case 6:return dist[\"slice\"](array,[start,0,0,0,0,0],[size,array.shape[1],array.shape[2],array.shape[3],array.shape[4],array.shape[5]]);default:throw new ValueError(\"sliceAlongFirstAxis() received an unsupported tensor rank: \"+\"\".concat(array.rank));}});}/**\r\n * Do slicing along the last axis.\r\n * @param array input `tf.Tensor`.\r\n * @param start starting index, inclusive.\r\n * @param size size of the slice along the last axis.\r\n * @returns result of the slicing.\r\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\r\n */function sliceAlongLastAxis(array,start,size){return Object(dist[\"tidy\"])(function(){switch(array.rank){case 1:return dist[\"slice1d\"](array,start,size);case 2:return dist[\"slice2d\"](array,[0,start],[array.shape[0],size]);case 3:return dist[\"slice3d\"](array,[0,0,start],[array.shape[0],array.shape[1],size]);case 4:return dist[\"slice4d\"](array,[0,0,0,start],[array.shape[0],array.shape[1],array.shape[2],size]);default:throw new ValueError(\"sliceAlongLastAxis() received an unsupported tensor rank: \"+\"\".concat(array.rank));}});}/**\r\n * Do slicing along the sepcified axis.\r\n * @param array input `tf.Tensor`.\r\n * @param start starting index, inclusive.\r\n * @param size of the slice along the chosen axis.\r\n * @param choose an axis.\r\n * @returns result of the slicing.\r\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\r\n */function sliceAlongAxis(array,start,size,axis){return Object(dist[\"tidy\"])(function(){switch(array.rank){case 1:return dist[\"slice1d\"](array,start,size);case 2:switch(axis){case 1:return sliceAlongFirstAxis(array,start,size);case 2:return sliceAlongLastAxis(array,start,size);default:throw new ValueError(\"The axis is not within the rank of the tensor \"+\"\".concat(axis));}case 3:switch(axis){case 1:return sliceAlongFirstAxis(array,start,size);case 2:return dist[\"slice3d\"](array,[0,start,0],[array.shape[0],size,array.shape[2]]);case 3:return sliceAlongLastAxis(array,start,size);default:throw new ValueError(\"The axis is not within the rank of the tensor \"+\"\".concat(axis));}case 4:switch(axis){case 1:return sliceAlongFirstAxis(array,start,size);case 2:return dist[\"slice4d\"](array,[0,start,0,0],[array.shape[0],size,array.shape[2],array.shape[3]]);case 3:return dist[\"slice4d\"](array,[0,0,start,0],[array.shape[0],array.shape[1],size,array.shape[3]]);case 4:return sliceAlongLastAxis(array,start,size);default:throw new ValueError(\"The axis is not within the rank of the tensor \"+\"\".concat(axis));}default:throw new ValueError(\"sliceAlongLastAxis() received an unsupported tensor rank: \"+\"\".concat(array.rank));}});}/**\r\n * Concatenates a list of tensors alongside the specified axis.\r\n * @param tensors `Array` of tensors to concatenate.\r\n * @param axis Concatenation axis.\r\n * @returns The result of the concatenation.\r\n */function concatenate(tensors){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;var rank;if(axis<0){rank=tensors[0].rank;if(rank!==0){axis=rank;}else{axis=0;}}if(axis===tensors[0].rank){// Porting Note: This is necessary because tfc.concat() requires axis to be\n//   in the interval [-rank, rank).\naxis=-1;}// Porting Note: Sparse concat is not supported yet.\nreturn dist[\"concat\"](tensors,axis);}/**\r\n * Concatenate two arrays along the first dimension.\r\n * @param a The 1st `tf.Tensor` to concatenate.\r\n * @param b The 2nd `tf.Tensor` to concatenate.\r\n * @returns Result of the concatenation.\r\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\r\n */function concatAlongFirstAxis(a,b){switch(a.rank){case 1:return dist[\"concat1d\"]([a,b]);case 2:return dist[\"concat2d\"]([a,b],0);case 3:return dist[\"concat3d\"]([a,b],0);case 4:return dist[\"concat4d\"]([a,b],0);default:throw new ValueError(\"concatAlongFirstAxis() received an unsupported \"+\"tensor rank: \".concat(a.rank));}}/**\r\n * Creates a tensor by tiling `x` by `n`.\r\n * @param x A tensor.\r\n * @param n An Array of integers or a single integer. If an Array, the length\r\n *   must be the same as the number of dimensions in `x`. If a single integer,\r\n *   it will be treated as an Array of length 1.\r\n */function tile(x,n){if(!Array.isArray(n)){n=[n];}if(x.rank!==n.length){throw new ValueError(\"The length of input n (\".concat(n.length,\") does not match \")+\"the number of dimensions in input x (\".concat(x.rank,\")\"));}return dist[\"tile\"](x,n);}/* Creation of random tensors. */ /**\r\n * Get a tensor with normal distribution of values.\r\n *\r\n * @param shape Shape of the tensor.\r\n * @param mean mean value of the normal distribution.\r\n * @param stddev standard deviation of the normal distribution.\r\n * @param dtype\r\n * @param seed\r\n * @return The normal tensor.\r\n */function randomNormal(shape){var mean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.0;var stddev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1.0;var dtype=arguments.length>3?arguments[3]:undefined;var seed=arguments.length>4?arguments[4]:undefined;return dist[\"randomNormal\"](shape,mean,stddev,dtype,seed);}/* Linear Algebra */ /**\r\n * Multiply two tensors and returns the result as a tensor.\r\n *\r\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\r\n * For tensors of higher ranks, it follows the Theano behavior,\r\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\r\n *\r\n * For N dimensions it is a sum product over the last axis of x and the\r\n * second-to-last of y:\r\n *\r\n * @param a A tensor of at least rank 2.\r\n * @param b A tensor of at least rank 2.\r\n * @param activation (optional) A string identifying the activation\r\n *   function.\r\n * @return Result of the dot operation.\r\n */function dot(a,b,activation,bias){if(a.rank<2||b.rank<2){throw new NotImplementedError(\"dot requires both inputs to be rank >= 2\"+\" but got x shape = \".concat(a.shape,\" and y shape = \").concat(b.shape));}if(b.rank>=3){var xLastDim=a.shape.slice(-1)[0];var ySecondLastDim=b.shape.slice(-2)[0];if(xLastDim!==ySecondLastDim){throw new NotImplementedError(\"If rank y >= 3, then the second last dim\"+\" of y must equal the last dim of x but got x shape = \".concat(a.shape,\" and \")+\" y shape = \".concat(b.shape));}}// Handle basic 2D x 2D case.\nif(a.rank===2&&b.rank===2){var transposeA=false;var transposeB=false;// tfc.fused.matMul only fuses certain activation functions. Unsupported\n// activation functions are treated as 'linear' activations, which is\n// equivalent to a no-op.\nreturn dist[\"fused\"].matMul({a:a,b:b,transposeA:transposeA,transposeB:transposeB,bias:bias?reshapeBias(a.rank,bias,imageDataFormat()):null,activation:activation});}else{// Reshape x into the analogous 2D Tensor.\nvar aFirstDims=a.shape.slice();// Holds all but the last dim of x.\nvar aLastDim=aFirstDims.pop();a=a.reshape([-1,aLastDim]);// Reshape y into the analogous 2D Tensor, and keep track of the\n// required dimensions to reproduce the output shape.\nvar bShape=b.shape.slice();var bLastDim=bShape.pop();var _ySecondLastDim=bShape.pop();var yOtherDims=[].concat(_toConsumableArray2(bShape),[bLastDim]);// permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n// where r is the rank of y.\nvar perm=Array.from({length:b.rank},function(_,i){if(i===0){return b.rank-2;}else if(i<=b.rank-2){return i-1;}return i;});b=b.transpose(perm).reshape([_ySecondLastDim,-1]);// Multiply x and y as 2D Tensors, and then reshape back to original.\nvar outputShape=[].concat(_toConsumableArray2(aFirstDims),_toConsumableArray2(yOtherDims));var _transposeA=false;var _transposeB=false;return dist[\"fused\"].matMul({a:a,b:b,transposeA:_transposeA,transposeB:_transposeB,bias:bias?reshapeBias(a.rank,bias,imageDataFormat()):null,activation:activation}).reshape(outputShape);}}/**\r\n * Compute the sign Tensor of an input Tensor.\r\n *\r\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\r\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\r\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\r\n *\r\n * @param x Input `tf.Tensor`.\r\n * @return The sign `tf.Tensor`.\r\n */function sign(x){// TODO(cais): Move to the core.\nreturn Object(dist[\"tidy\"])(function(){var zerosLikeX=Object(dist[\"zerosLike\"])(x);var onesLikeX=Object(dist[\"onesLike\"])(x);return Object(dist[\"where\"])(dist[\"equal\"](x,zerosLikeX),zerosLikeX,Object(dist[\"where\"])(dist[\"greater\"](x,Object(dist[\"zerosLike\"])(x)),onesLikeX,dist[\"mul\"](-1,onesLikeX)));});}/**\r\n * Computes the one-hot representation of an integer tensor.\r\n * @param indices nD integer tensor of shape\r\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\r\n * @param numClasses Integer, number of classes to consider.\r\n * @returns (n + 1)D one hot representation of the input\r\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\r\n */function oneHot(indices,numClasses){return Object(dist[\"tidy\"])(function(){if(indices.rank!==1){throw new Error('Only 1D one-hot tensors are supported in the '+'deeplearn backend, at present.');}indices=indices.toInt();return dist[\"oneHot\"](indices,numClasses).toFloat();});}/* Elementary math functions. */ /**\r\n * Retrieves the elements of indices `indices` in the tensor `reference`.\r\n * @param reference A tensor.\r\n * @param indices An integer tensor of indices or an `Array` of integers.\r\n * @param axis Axis along which to perform the gather operation.\r\n * @returns The result of the gathering as a tensor.\r\n */function gather(reference,indices,axis){return Object(dist[\"tidy\"])(function(){if(Array.isArray(indices)){indices=Object(dist[\"tensor1d\"])(indices,'int32');}else{indices=indices.toInt();}return dist[\"gather\"](reference,indices,axis);});}/**\r\n * Element-wise square.\r\n * @param x Input tensor.\r\n * @return element-wise x^2\r\n */function square(x){return dist[\"mul\"](x,x);}/**\r\n * Element-wise exponentiation.\r\n *\r\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\r\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\r\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\r\n *\r\n * @param x The base tensor.\r\n * @param a The exponent, tensor or number. If a number, it is rounded to the\r\n *   nearest integer and converted to a tensor.\r\n * @returns A tensor of the same shape as `x`.\r\n */function pow(x,a){return Object(dist[\"tidy\"])(function(){if(typeof a==='number'){a=Object(dist[\"scalar\"])(Math.round(a),'int32');}if(a.dtype!=='int32'){throw new NotImplementedError(\"Non-int32 dtype (\".concat(a.dtype,\") is not supported by pow() yet\"));}return dist[\"pow\"](x,a);});}/**\r\n * Reshapes bias tensor according to rank of x.\r\n */function reshapeBias(xRank,bias,dataFormat){var biasShape=bias.shape;if(bias.rank!==1&&bias.rank!==xRank){throw new ValueError(\"Unexpected bias dimensions: \".concat(bias.rank)+\"; expected it to be 1 or \".concat(xRank));}if(xRank===5){if(dataFormat==='channelsFirst'){if(biasShape.length===1){return bias.reshape([1,biasShape[0],1,1,1]);}else{return bias.reshape([1,biasShape[3],biasShape[0],biasShape[1],biasShape[2]]);}}else if(dataFormat==='channelsLast'){if(biasShape.length===1){return bias.reshape([1,1,1,1,biasShape[0]]);}else{return bias.reshape([1].concat(biasShape));}}}else if(xRank===4){if(dataFormat==='channelsFirst'){if(biasShape.length===1){return bias.reshape([1,biasShape[0],1,1]);}else{return bias.reshape([1,biasShape[2],biasShape[0],biasShape[1]]);}}else if(dataFormat==='channelsLast'){if(biasShape.length===1){return bias.reshape([1,1,1,biasShape[0]]);}else{return bias.reshape([1].concat(biasShape));}}}else if(xRank===3){if(dataFormat==='channelsFirst'){if(biasShape.length===1){return bias.reshape([1,biasShape[0],1]);}else{return bias.reshape([1,biasShape[1],biasShape[0]]);}}else if(dataFormat==='channelsLast'){if(biasShape.length===1){return bias.reshape([1,1,biasShape[0]]);}else{return bias.reshape([1].concat(biasShape));}}}else if(xRank<3){return bias;}throw new ValueError(\"Unsupported input rank by biasAdd: \".concat(bias.rank));}/* Neural-network operations. */ /**\r\n * Add a bias to a tensor.\r\n *\r\n * @param x The tensor to add the bias to.\r\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\r\n * @return Result of the bias adding.\r\n * @throws ValueError: If the rank of `bias` is incorrect.\r\n */function biasAdd(x,bias,dataFormat){return Object(dist[\"tidy\"])(function(){if(dataFormat==null){dataFormat=imageDataFormat();}checkDataFormat(dataFormat);return x.add(reshapeBias(x.rank,bias,dataFormat));});}/**\r\n * Exponential linear unit (ELU).\r\n * @param x A tensor or variable to compute the activation function for.\r\n * @param alpha: A scalar, a scaling factor for the negative section.\r\n * @return Output of the ELU operation.\r\n */function elu(x){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;// TODO(cais): Add support for alpha values other than 1.\nif(alpha!==1){throw new NotImplementedError(\"Support for alpha values other than 1 (\".concat(alpha,\") is not implemented \")+\"yet.\");}return dist[\"elu\"](x);}/**\r\n * Softsign of a tensor.\r\n *\r\n * Defined as x / (abs(x) + 1), element-wise.\r\n *\r\n * @param x: Input.\r\n * @returns Output.\r\n */function softsign(x){return Object(dist[\"tidy\"])(function(){return dist[\"div\"](x,dist[\"abs\"](x).add(1));});}/**\r\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\r\n *\r\n * @param x input tensor.\r\n * @param level fraction of the entries in the tensor that will be set to 0.\r\n * @param noiseShape shape of randomly generated keep/drop flags, must be\r\n *   broadcastable to the shape of `x`. Optional.\r\n * @param seed random seed to ensure determinism. Optional.\r\n * @returns Result of the dropout operation.\r\n */function dropout(x,level,noiseShape,seed){return Object(dist[\"tidy\"])(function(){return dist[\"dropout\"](x,level,noiseShape,seed);});}/**\r\n * Element-wise, segment-wise linear approximation of sigmoid.\r\n *\r\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\r\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\r\n *\r\n * @param x Input tensor.\r\n * @returns Output tensor.\r\n */function hardSigmoid(x){return Object(dist[\"tidy\"])(function(){var y=dist[\"add\"](.5,dist[\"mul\"](.2,x));return dist[\"clipByValue\"](y,0,1);});}/**\r\n * Invoke `x` in the training phase, and `alt` otherwise.\r\n *\r\n * Porting Note: We do not create placeholder tensors for the `training`\r\n * boolean flag here, because there is no such thing in the TF.js imperative\r\n * backend.\r\n *\r\n * @param x The function to invoke iff `training` is `true`.\r\n * @param alt The function to invoke iff `training` is `false`.\r\n * @param training Boolean flag for whether training phase is active.\r\n * @returns The return value of `x()` if `training` is `true`, or the return\r\n *   value of `alt()` if `training` is `false`.\r\n */function inTrainPhase(x,alt){var training=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return training?x():alt();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/keras_format/initializer_config.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */var VALID_FAN_MODE_VALUES=['fanIn','fanOut','fanAvg'];var VALID_DISTRIBUTION_VALUES=['normal','uniform','truncatedNormal'];// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid\n// and that we have the right number of them.\n/**\r\n * A string array of valid Initializer class names.\r\n *\r\n * This is guaranteed to match the `InitializerClassName` union type.\r\n */var initializerClassNames=['Zeros','Ones','Constant','RandomNormal','RandomUniform','TruncatedNormal','VarianceScaling','Orthogonal','Identity'];// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */function checkFanMode(value){checkStringTypeUnionValue(VALID_FAN_MODE_VALUES,'FanMode',value);}function checkDistribution(value){checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES,'Distribution',value);}/**\r\n * Initializer base class.\r\n *\r\n * @doc {\r\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\r\n */var initializers_Initializer=/*#__PURE__*/function(_dist$serialization$S2){_inherits(initializers_Initializer,_dist$serialization$S2);var _super46=_createSuper(initializers_Initializer);function initializers_Initializer(){_classCallCheck2(this,initializers_Initializer);return _super46.apply(this,arguments);}_createClass(initializers_Initializer,[{key:\"fromConfigUsesCustomObjects\",value:function fromConfigUsesCustomObjects(){return false;}},{key:\"getConfig\",value:function getConfig(){return{};}}]);return initializers_Initializer;}(dist[\"serialization\"].Serializable);var initializers_Zeros=/*#__PURE__*/function(_initializers_Initial){_inherits(initializers_Zeros,_initializers_Initial);var _super47=_createSuper(initializers_Zeros);function initializers_Zeros(){_classCallCheck2(this,initializers_Zeros);return _super47.apply(this,arguments);}_createClass(initializers_Zeros,[{key:\"apply\",value:function apply(shape,dtype){return Object(dist[\"zeros\"])(shape,dtype);}}]);return initializers_Zeros;}(initializers_Initializer);/** @nocollapse */initializers_Zeros.className='Zeros';dist[\"serialization\"].registerClass(initializers_Zeros);var initializers_Ones=/*#__PURE__*/function(_initializers_Initial2){_inherits(initializers_Ones,_initializers_Initial2);var _super48=_createSuper(initializers_Ones);function initializers_Ones(){_classCallCheck2(this,initializers_Ones);return _super48.apply(this,arguments);}_createClass(initializers_Ones,[{key:\"apply\",value:function apply(shape,dtype){return Object(dist[\"ones\"])(shape,dtype);}}]);return initializers_Ones;}(initializers_Initializer);/** @nocollapse */initializers_Ones.className='Ones';dist[\"serialization\"].registerClass(initializers_Ones);var initializers_Constant=/*#__PURE__*/function(_initializers_Initial3){_inherits(initializers_Constant,_initializers_Initial3);var _super49=_createSuper(initializers_Constant);function initializers_Constant(args){var _this127;_classCallCheck2(this,initializers_Constant);_this127=_super49.call(this);if(_typeof2(args)!=='object'){throw new ValueError(\"Expected argument of type ConstantConfig but got \".concat(args));}if(args.value===undefined){throw new ValueError(\"config must have value set but got \".concat(args));}_this127.value=args.value;return _this127;}_createClass(initializers_Constant,[{key:\"apply\",value:function apply(shape,dtype){var _this128=this;return Object(dist[\"tidy\"])(function(){return Object(dist[\"mul\"])(Object(dist[\"scalar\"])(_this128.value),Object(dist[\"ones\"])(shape,dtype));});}},{key:\"getConfig\",value:function getConfig(){return{value:this.value};}}]);return initializers_Constant;}(initializers_Initializer);/** @nocollapse */initializers_Constant.className='Constant';dist[\"serialization\"].registerClass(initializers_Constant);var initializers_RandomUniform=/*#__PURE__*/function(_initializers_Initial4){_inherits(initializers_RandomUniform,_initializers_Initial4);var _super50=_createSuper(initializers_RandomUniform);function initializers_RandomUniform(args){var _this129;_classCallCheck2(this,initializers_RandomUniform);_this129=_super50.call(this);_this129.DEFAULT_MINVAL=-0.05;_this129.DEFAULT_MAXVAL=0.05;_this129.minval=args.minval||_this129.DEFAULT_MINVAL;_this129.maxval=args.maxval||_this129.DEFAULT_MAXVAL;_this129.seed=args.seed;return _this129;}_createClass(initializers_RandomUniform,[{key:\"apply\",value:function apply(shape,dtype){return Object(dist[\"randomUniform\"])(shape,this.minval,this.maxval,dtype);}},{key:\"getConfig\",value:function getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed};}}]);return initializers_RandomUniform;}(initializers_Initializer);/** @nocollapse */initializers_RandomUniform.className='RandomUniform';dist[\"serialization\"].registerClass(initializers_RandomUniform);var initializers_RandomNormal=/*#__PURE__*/function(_initializers_Initial5){_inherits(initializers_RandomNormal,_initializers_Initial5);var _super51=_createSuper(initializers_RandomNormal);function initializers_RandomNormal(args){var _this130;_classCallCheck2(this,initializers_RandomNormal);_this130=_super51.call(this);_this130.DEFAULT_MEAN=0.;_this130.DEFAULT_STDDEV=0.05;_this130.mean=args.mean||_this130.DEFAULT_MEAN;_this130.stddev=args.stddev||_this130.DEFAULT_STDDEV;_this130.seed=args.seed;return _this130;}_createClass(initializers_RandomNormal,[{key:\"apply\",value:function apply(shape,dtype){dtype=dtype||'float32';if(dtype!=='float32'&&dtype!=='int32'){throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype,\".\"));}return randomNormal(shape,this.mean,this.stddev,dtype,this.seed);}},{key:\"getConfig\",value:function getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed};}}]);return initializers_RandomNormal;}(initializers_Initializer);/** @nocollapse */initializers_RandomNormal.className='RandomNormal';dist[\"serialization\"].registerClass(initializers_RandomNormal);var initializers_TruncatedNormal=/*#__PURE__*/function(_initializers_Initial6){_inherits(initializers_TruncatedNormal,_initializers_Initial6);var _super52=_createSuper(initializers_TruncatedNormal);function initializers_TruncatedNormal(args){var _this131;_classCallCheck2(this,initializers_TruncatedNormal);_this131=_super52.call(this);_this131.DEFAULT_MEAN=0.;_this131.DEFAULT_STDDEV=0.05;_this131.mean=args.mean||_this131.DEFAULT_MEAN;_this131.stddev=args.stddev||_this131.DEFAULT_STDDEV;_this131.seed=args.seed;return _this131;}_createClass(initializers_TruncatedNormal,[{key:\"apply\",value:function apply(shape,dtype){dtype=dtype||'float32';if(dtype!=='float32'&&dtype!=='int32'){throw new NotImplementedError(\"truncatedNormal does not support dType \".concat(dtype,\".\"));}return Object(dist[\"truncatedNormal\"])(shape,this.mean,this.stddev,dtype,this.seed);}},{key:\"getConfig\",value:function getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed};}}]);return initializers_TruncatedNormal;}(initializers_Initializer);/** @nocollapse */initializers_TruncatedNormal.className='TruncatedNormal';dist[\"serialization\"].registerClass(initializers_TruncatedNormal);var initializers_Identity=/*#__PURE__*/function(_initializers_Initial7){_inherits(initializers_Identity,_initializers_Initial7);var _super53=_createSuper(initializers_Identity);function initializers_Identity(args){var _this132;_classCallCheck2(this,initializers_Identity);_this132=_super53.call(this);_this132.gain=args.gain!=null?args.gain:1.0;return _this132;}_createClass(initializers_Identity,[{key:\"apply\",value:function apply(shape,dtype){var _this133=this;return Object(dist[\"tidy\"])(function(){if(shape.length!==2||shape[0]!==shape[1]){throw new ValueError('Identity matrix initializer can only be used for'+' 2D square matrices.');}else{return Object(dist[\"mul\"])(_this133.gain,Object(dist[\"eye\"])(shape[0]));}});}},{key:\"getConfig\",value:function getConfig(){return{gain:this.gain};}}]);return initializers_Identity;}(initializers_Initializer);/** @nocollapse */initializers_Identity.className='Identity';dist[\"serialization\"].registerClass(initializers_Identity);/**\r\n * Computes the number of input and output units for a weight shape.\r\n * @param shape Shape of weight.\r\n * @param dataFormat data format to use for convolution kernels.\r\n *   Note that all kernels in Keras are standardized on the\r\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\r\n * @return An length-2 array: fanIn, fanOut.\r\n */function computeFans(shape){var dataFormat=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'channelsLast';var fanIn;var fanOut;checkDataFormat(dataFormat);if(shape.length===2){fanIn=shape[0];fanOut=shape[1];}else if([3,4,5].indexOf(shape.length)!==-1){if(dataFormat==='channelsFirst'){var receptiveFieldSize=arrayProd(shape,2);fanIn=shape[1]*receptiveFieldSize;fanOut=shape[0]*receptiveFieldSize;}else if(dataFormat==='channelsLast'){var _receptiveFieldSize=arrayProd(shape,0,shape.length-2);fanIn=shape[shape.length-2]*_receptiveFieldSize;fanOut=shape[shape.length-1]*_receptiveFieldSize;}}else{var shapeProd=arrayProd(shape);fanIn=Math.sqrt(shapeProd);fanOut=Math.sqrt(shapeProd);}return[fanIn,fanOut];}var initializers_VarianceScaling=/*#__PURE__*/function(_initializers_Initial8){_inherits(initializers_VarianceScaling,_initializers_Initial8);var _super54=_createSuper(initializers_VarianceScaling);/**\r\n     * Constructor of VarianceScaling.\r\n     * @throws ValueError for invalid value in scale.\r\n     */function initializers_VarianceScaling(args){var _this134;_classCallCheck2(this,initializers_VarianceScaling);_this134=_super54.call(this);if(args.scale<0.0){throw new ValueError(\"scale must be a positive float. Got: \".concat(args.scale));}_this134.scale=args.scale==null?1.0:args.scale;_this134.mode=args.mode==null?'fanIn':args.mode;checkFanMode(_this134.mode);_this134.distribution=args.distribution==null?'normal':args.distribution;checkDistribution(_this134.distribution);_this134.seed=args.seed;return _this134;}_createClass(initializers_VarianceScaling,[{key:\"apply\",value:function apply(shape,dtype){var fans=computeFans(shape);var fanIn=fans[0];var fanOut=fans[1];var scale=this.scale;if(this.mode==='fanIn'){scale/=Math.max(1,fanIn);}else if(this.mode==='fanOut'){scale/=Math.max(1,fanOut);}else{scale/=Math.max(1,(fanIn+fanOut)/2);}if(this.distribution==='normal'){var stddev=Math.sqrt(scale);dtype=dtype||'float32';if(dtype!=='float32'&&dtype!=='int32'){throw new NotImplementedError(\"\".concat(this.getClassName(),\" does not support dType \").concat(dtype,\".\"));}return Object(dist[\"truncatedNormal\"])(shape,0,stddev,dtype,this.seed);}else{var limit=Math.sqrt(3*scale);return Object(dist[\"randomUniform\"])(shape,-limit,limit,dtype);}}},{key:\"getConfig\",value:function getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed};}}]);return initializers_VarianceScaling;}(initializers_Initializer);/** @nocollapse */initializers_VarianceScaling.className='VarianceScaling';dist[\"serialization\"].registerClass(initializers_VarianceScaling);var GlorotUniform=/*#__PURE__*/function(_initializers_Varianc){_inherits(GlorotUniform,_initializers_Varianc);var _super55=_createSuper(GlorotUniform);/**\r\n     * Constructor of GlorotUniform\r\n     * @param scale\r\n     * @param mode\r\n     * @param distribution\r\n     * @param seed\r\n     */function GlorotUniform(args){_classCallCheck2(this,GlorotUniform);return _super55.call(this,{scale:1.0,mode:'fanAvg',distribution:'uniform',seed:args==null?null:args.seed});}_createClass(GlorotUniform,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, GlorotUniform is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return GlorotUniform;}(initializers_VarianceScaling);/** @nocollapse */GlorotUniform.className='GlorotUniform';dist[\"serialization\"].registerClass(GlorotUniform);var GlorotNormal=/*#__PURE__*/function(_initializers_Varianc2){_inherits(GlorotNormal,_initializers_Varianc2);var _super56=_createSuper(GlorotNormal);/**\r\n     * Constructor of GlorotNormal.\r\n     * @param scale\r\n     * @param mode\r\n     * @param distribution\r\n     * @param seed\r\n     */function GlorotNormal(args){_classCallCheck2(this,GlorotNormal);return _super56.call(this,{scale:1.0,mode:'fanAvg',distribution:'normal',seed:args==null?null:args.seed});}_createClass(GlorotNormal,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, GlorotNormal is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return GlorotNormal;}(initializers_VarianceScaling);/** @nocollapse */GlorotNormal.className='GlorotNormal';dist[\"serialization\"].registerClass(GlorotNormal);var HeNormal=/*#__PURE__*/function(_initializers_Varianc3){_inherits(HeNormal,_initializers_Varianc3);var _super57=_createSuper(HeNormal);function HeNormal(args){_classCallCheck2(this,HeNormal);return _super57.call(this,{scale:2.0,mode:'fanIn',distribution:'normal',seed:args==null?null:args.seed});}_createClass(HeNormal,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, HeNormal is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return HeNormal;}(initializers_VarianceScaling);/** @nocollapse */HeNormal.className='HeNormal';dist[\"serialization\"].registerClass(HeNormal);var HeUniform=/*#__PURE__*/function(_initializers_Varianc4){_inherits(HeUniform,_initializers_Varianc4);var _super58=_createSuper(HeUniform);function HeUniform(args){_classCallCheck2(this,HeUniform);return _super58.call(this,{scale:2.0,mode:'fanIn',distribution:'uniform',seed:args==null?null:args.seed});}_createClass(HeUniform,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, HeUniform is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return HeUniform;}(initializers_VarianceScaling);/** @nocollapse */HeUniform.className='HeUniform';dist[\"serialization\"].registerClass(HeUniform);var LeCunNormal=/*#__PURE__*/function(_initializers_Varianc5){_inherits(LeCunNormal,_initializers_Varianc5);var _super59=_createSuper(LeCunNormal);function LeCunNormal(args){_classCallCheck2(this,LeCunNormal);return _super59.call(this,{scale:1.0,mode:'fanIn',distribution:'normal',seed:args==null?null:args.seed});}_createClass(LeCunNormal,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, LeCunNormal is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return LeCunNormal;}(initializers_VarianceScaling);/** @nocollapse */LeCunNormal.className='LeCunNormal';dist[\"serialization\"].registerClass(LeCunNormal);var LeCunUniform=/*#__PURE__*/function(_initializers_Varianc6){_inherits(LeCunUniform,_initializers_Varianc6);var _super60=_createSuper(LeCunUniform);function LeCunUniform(args){_classCallCheck2(this,LeCunUniform);return _super60.call(this,{scale:1.0,mode:'fanIn',distribution:'uniform',seed:args==null?null:args.seed});}_createClass(LeCunUniform,[{key:\"getClassName\",value:function getClassName(){// In Python Keras, LeCunUniform is not a class, but a helper method\n// that creates a VarianceScaling object. Use 'VarianceScaling' as\n// class name to be compatible with that.\nreturn initializers_VarianceScaling.className;}}]);return LeCunUniform;}(initializers_VarianceScaling);/** @nocollapse */LeCunUniform.className='LeCunNormal';dist[\"serialization\"].registerClass(LeCunUniform);var initializers_Orthogonal=/*#__PURE__*/function(_initializers_Initial9){_inherits(initializers_Orthogonal,_initializers_Initial9);var _super61=_createSuper(initializers_Orthogonal);function initializers_Orthogonal(args){var _this135;_classCallCheck2(this,initializers_Orthogonal);_this135=_super61.call(this);_this135.DEFAULT_GAIN=1;_this135.gain=args.gain==null?_this135.DEFAULT_GAIN:args.gain;_this135.seed=args.seed;if(_this135.seed!=null){throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');}return _this135;}_createClass(initializers_Orthogonal,[{key:\"apply\",value:function apply(shape,dtype){var _this136=this;return Object(dist[\"tidy\"])(function(){if(shape.length!==2){throw new NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');}if(shape[0]*shape[1]>2000){console.warn(\"Orthogonal initializer is being called on a matrix with more \"+\"than 2000 (\".concat(shape[0]*shape[1],\") elements: \")+\"Slowness may result.\");}// TODO(cais): Add seed support.\nvar normalizedShape=shape[0]>shape[1]?[shape[1],shape[0]]:shape;var a=randomNormal(normalizedShape,0,1,'float32');var q=dist[\"linalg\"].gramSchmidt(a);if(shape[0]>shape[1]){q=q.transpose();}return Object(dist[\"mul\"])(_this136.gain,q);});}},{key:\"getConfig\",value:function getConfig(){return{gain:this.gain,seed:this.seed};}}]);return initializers_Orthogonal;}(initializers_Initializer);/** @nocollapse */initializers_Orthogonal.className='Orthogonal';dist[\"serialization\"].registerClass(initializers_Orthogonal);// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nvar INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={'constant':'Constant','glorotNormal':'GlorotNormal','glorotUniform':'GlorotUniform','heNormal':'HeNormal','heUniform':'HeUniform','identity':'Identity','leCunNormal':'LeCunNormal','leCunUniform':'LeCunUniform','ones':'Ones','orthogonal':'Orthogonal','randomNormal':'RandomNormal','randomUniform':'RandomUniform','truncatedNormal':'TruncatedNormal','varianceScaling':'VarianceScaling','zeros':'Zeros'};function deserializeInitializer(config){var customObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return deserializeKerasObject(config,dist[\"serialization\"].SerializationMap.getMap().classNameMap,customObjects,'initializer');}function serializeInitializer(initializer){return serializeKerasObject(initializer);}function getInitializer(identifier){if(typeof identifier==='string'){var className=identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier]:identifier;/* We have four 'helper' classes for common initializers that\r\n        all get serialized as 'VarianceScaling' and shouldn't go through\r\n        the deserializeInitializer pathway. */if(className==='GlorotNormal'){return new GlorotNormal();}else if(className==='GlorotUniform'){return new GlorotUniform();}else if(className==='HeNormal'){return new HeNormal();}else if(className==='HeUniform'){return new HeUniform();}else if(className==='LeCunNormal'){return new LeCunNormal();}else if(className==='LeCunUniform'){return new LeCunUniform();}else{var config={};config['className']=className;config['config']={};return deserializeInitializer(config);}}else if(identifier instanceof initializers_Initializer){return identifier;}else{return deserializeInitializer(identifier);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // tslint:disable-next-line:max-line-length\n/**\r\n * Initializer that generates tensors initialized to 0.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function zeros(){return new initializers_Zeros();}/**\r\n * Initializer that generates tensors initialized to 1.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function exports_initializers_ones(){return new initializers_Ones();}/**\r\n * Initializer that generates values initialized to some constant.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function constant(args){return new initializers_Constant(args);}/**\r\n * Initializer that generates random values initialized to a uniform\r\n * distribution.\r\n *\r\n * Values will be distributed uniformly between the configured minval and\r\n * maxval.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function randomUniform(args){return new initializers_RandomUniform(args);}/**\r\n * Initializer that generates random values initialized to a normal\r\n * distribution.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function exports_initializers_randomNormal(args){return new initializers_RandomNormal(args);}/**\r\n * Initializer that generates random values initialized to a truncated normal.\r\n * distribution.\r\n *\r\n * These values are similar to values from a `RandomNormal` except that values\r\n * more than two standard deviations from the mean are discarded and re-drawn.\r\n * This is the recommended initializer for neural network weights and filters.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function truncatedNormal(args){return new initializers_TruncatedNormal(args);}/**\r\n * Initializer that generates the identity matrix.\r\n * Only use for square 2D matrices.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function identity(args){return new initializers_Identity(args);}/**\r\n * Initializer capable of adapting its scale to the shape of weights.\r\n * With distribution=NORMAL, samples are drawn from a truncated normal\r\n * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\r\n *   - number of input units in the weight tensor, if mode = FAN_IN.\r\n *   - number of output units, if mode = FAN_OUT.\r\n *   - average of the numbers of input and output units, if mode = FAN_AVG.\r\n * With distribution=UNIFORM,\r\n * samples are drawn from a uniform distribution\r\n * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.\r\n */ /** @doc {heading: 'Initializers',namespace: 'initializers'} */function varianceScaling(config){return new initializers_VarianceScaling(config);}/**\r\n * Glorot uniform initializer, also called Xavier uniform initializer.\r\n * It draws samples from a uniform distribution within [-limit, limit]\r\n * where `limit` is `sqrt(6 / (fan_in + fan_out))`\r\n * where `fan_in` is the number of input units in the weight tensor\r\n * and `fan_out` is the number of output units in the weight tensor\r\n *\r\n * Reference:\r\n *   Glorot & Bengio, AISTATS 2010\r\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function glorotUniform(args){return new GlorotUniform(args);}/**\r\n * Glorot normal initializer, also called Xavier normal initializer.\r\n * It draws samples from a truncated normal distribution centered on 0\r\n * with `stddev = sqrt(2 / (fan_in + fan_out))`\r\n * where `fan_in` is the number of input units in the weight tensor\r\n * and `fan_out` is the number of output units in the weight tensor.\r\n *\r\n * Reference:\r\n *   Glorot & Bengio, AISTATS 2010\r\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function glorotNormal(args){return new GlorotNormal(args);}/**\r\n * He normal initializer.\r\n *\r\n * It draws samples from a truncated normal distribution centered on 0\r\n * with `stddev = sqrt(2 / fanIn)`\r\n * where `fanIn` is the number of input units in the weight tensor.\r\n *\r\n * Reference:\r\n *     He et al., http://arxiv.org/abs/1502.01852\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function heNormal(args){return new HeNormal(args);}/**\r\n * He uniform initializer.\r\n *\r\n * It draws samples from a uniform distribution within [-limit, limit]\r\n * where `limit` is `sqrt(6 / fan_in)`\r\n * where `fanIn` is the number of input units in the weight tensor.\r\n *\r\n * Reference:\r\n *     He et al., http://arxiv.org/abs/1502.01852\r\n */ /** @doc {heading: 'Initializers',namespace: 'initializers'} */function heUniform(args){return new HeUniform(args);}/**\r\n * LeCun normal initializer.\r\n *\r\n * It draws samples from a truncated normal distribution centered on 0\r\n * with `stddev = sqrt(1 / fanIn)`\r\n * where `fanIn` is the number of input units in the weight tensor.\r\n *\r\n * References:\r\n *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\r\n *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function leCunNormal(args){return new LeCunNormal(args);}/**\r\n * LeCun uniform initializer.\r\n *\r\n * It draws samples from a uniform distribution in the interval\r\n * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,\r\n * where `fanIn` is the number of input units in the weight tensor.\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function leCunUniform(args){return new LeCunUniform(args);}/**\r\n * Initializer that generates a random orthogonal matrix.\r\n *\r\n * Reference:\r\n * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)\r\n */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */function orthogonal(args){return new initializers_Orthogonal(args);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/backend/state.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Utilities related to persistent state in the backend.\r\n */ /**\r\n * An ID to track `tf.SymbolicTensor`s and derived classes.\r\n * Required in different places in engine/topology.ts to identify unique\r\n * tensors.\r\n */var _nextUniqueTensorId=0;function getNextUniqueTensorId(){return _nextUniqueTensorId++;}var _uidPrefixes={};/**\r\n * Provides a unique UID given a string prefix.\r\n *\r\n * @param prefix\r\n */function getUid(){var prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';if(!(prefix in _uidPrefixes)){_uidPrefixes[prefix]=0;}_uidPrefixes[prefix]+=1;return prefix+_uidPrefixes[prefix].toString();}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // tslint:enable\n/**\r\n * Determine whether the input is an Array of Shapes.\r\n */function isArrayOfShapes(x){return Array.isArray(x)&&Array.isArray(x[0]);}/**\r\n * Special case of normalizing shapes to lists.\r\n *\r\n * @param x A shape or list of shapes to normalize into a list of Shapes.\r\n * @return A list of Shapes.\r\n */function normalizeShapeList(x){if(x.length===0){return[];}if(!Array.isArray(x[0])){return[x];}return x;}/**\r\n * Helper function to obtain exactly one Tensor.\r\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\r\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\r\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\r\n */function getExactlyOneTensor(xs){var x;if(Array.isArray(xs)){if(xs.length!==1){throw new ValueError(\"Expected Tensor length to be 1; got \".concat(xs.length));}x=xs[0];}else{x=xs;}return x;}/**\r\n * Helper function to obtain exactly on instance of Shape.\r\n *\r\n * @param shapes Input single `Shape` or Array of `Shape`s.\r\n * @returns If input is a single `Shape`, return it unchanged. If the input is\r\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\r\n *   Otherwise, throw a `ValueError`.\r\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\r\n *   1.\r\n */function getExactlyOneShape(shapes){if(Array.isArray(shapes)&&Array.isArray(shapes[0])){if(shapes.length===1){shapes=shapes;return shapes[0];}else{throw new ValueError(\"Expected exactly 1 Shape; got \".concat(shapes.length));}}else{return shapes;}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Count the elements in an Array of LayerVariables.\r\n *\r\n * @param weights: The LayerVariables of which the constituent numbers are to\r\n *   be counted.\r\n * @returns A count of the elements in all the LayerVariables\r\n */function countParamsInWeights(weights){var count=0;var _iterator15=_createForOfIteratorHelper(weights),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var weight=_step15.value;if(weight.shape.length===0){count+=1;}else{count+=weight.shape.reduce(function(a,b){return a*b;});}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}return count;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/variables.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */var DEFAULT_VARIABLE_NAME_PREFIX='Variable';/**\r\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\r\n * dtype and shape, but its value is mutable.  The value is itself represented\r\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\r\n * the `write()` method.\r\n */var variables_LayerVariable=/*#__PURE__*/function(){/**\r\n     * Construct Variable from a `tf.Tensor`.\r\n     *\r\n     * If not explicitly named, the Variable will be given a name with the\r\n     * prefix 'Variable'. Variable names are unique. In the case of name\r\n     * collision, suffixies '_<num>' will be added to the name.\r\n     *\r\n     * @param val Initial value of the Variable.\r\n     * @param name Name of the variable. If `null` or `undefined` is provided, it\r\n     *   will default a name with the prefix 'Variable'.\r\n     * @param constraint Optional, projection function to be applied to the\r\n     * variable after optimize updates\r\n     * @throws ValueError if `name` is `null` or `undefined`.\r\n     */function variables_LayerVariable(val){var dtype=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'float32';var name=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_VARIABLE_NAME_PREFIX;var trainable=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var constraint=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck2(this,variables_LayerVariable);this.dtype=dtype==null?'float32':dtype;this.shape=val.shape;this.id=getNextUniqueTensorId();name=name==null?DEFAULT_VARIABLE_NAME_PREFIX:name;this.originalName=getScopedTensorName(name);this.name=getUniqueTensorName(this.originalName);this.trainable_=trainable;this.constraint=constraint;this.val=dist[\"variable\"](val,this.trainable_,this.name,this.dtype);}/**\r\n     * Get a snapshot of the Variable's value.\r\n     *\r\n     * The returned value is a snapshot of the Variable's value at the time of\r\n     * the invocation. Future mutations in the value of the tensor will only\r\n     * be reflected by future calls to this method.\r\n     */_createClass(variables_LayerVariable,[{key:\"read\",value:function read(){this.assertNotDisposed();return this.val;}/**\r\n     * Update the value of the Variable.\r\n     *\r\n     * @param newVal: The new value to update to. Must be consistent with the\r\n     *   dtype and shape of the Variable.\r\n     * @return This Variable.\r\n     */},{key:\"write\",value:function write(newVal){// TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\nthis.assertNotDisposed();checkShapesMatch(this.val,newVal);// Skip updating if this is the exact same tensor.\nif(this.val.id!==newVal.id){this.val.assign(newVal);if(this.constraint!=null){this.val.assign(this.constraint.apply(this.val));}}return this;}/**\r\n     * Dispose this LayersVariable instance from memory.\r\n     */},{key:\"dispose\",value:function dispose(){this.assertNotDisposed();this.val.dispose();}},{key:\"assertNotDisposed\",value:function assertNotDisposed(){if(this.val.isDisposed){throw new Error(\"LayersVariable \".concat(this.name,\" is already disposed.\"));}}},{key:\"trainable\",get:function get(){return this.trainable_;},set:function set(trainable){this.trainable_=trainable;this.val.trainable=trainable;}}]);return variables_LayerVariable;}();function checkShapesMatch(x,y){if(x.shape.toString()!==y.shape.toString()){throw new Error('Shape mismatch: '+JSON.stringify(x.shape)+' vs. '+JSON.stringify(y.shape));}}/**\r\n * Create a Variable.\r\n * @param x The initial value of the `Variable`.\r\n * @param dtype optional, the type of the variable.\r\n * @param name optional, the name of the variable, default provided by\r\n * Variable.\r\n * @param constraint optional, a constraint to be applied after every update.\r\n * @return The newly instantiated `Variable`.\r\n */function variables_variable(x,dtype,name,constraint){return new variables_LayerVariable(x,dtype,name,true,constraint);}/**\r\n * Instantiates an all-zeros Variable and returns it.\r\n *\r\n * @param shape Shape of the tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return An all-zero Variable.\r\n */function zerosVariable(shape,dtype,name){// TODO(cais): Implement logic for dtype.\nreturn new variables_LayerVariable(dist[\"zeros\"](shape),dtype,name);}/**\r\n * Instantiates an all-zeros tensor of the same shape as another tensor.\r\n *\r\n * @param x The other tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return A newly instantiated Variable.\r\n */function zerosLike(x,dtype,name){return new variables_LayerVariable(dist[\"zerosLike\"](x),dtype,name);}/**\r\n * Instantiates an all-ones tensor and returns it.\r\n *\r\n * @param shape Shape of the tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return An all-ones Variable.\r\n */function onesVariable(shape,dtype,name){// TODO(cais): Implement logic for dtype.\nvar allocated=dist[\"ones\"](shape);return new variables_LayerVariable(allocated,dtype,name);}/**\r\n * Instantiates an all-ones tensor of the same shape as another tensor.\r\n *\r\n * @param x The other tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return A newly instantiated Variable.\r\n */function onesLike(x,dtype,name){var allocated=dist[\"onesLike\"](x);return new variables_LayerVariable(allocated,dtype,name);}/**\r\n * Instantiate an identity matrix and returns it, as a Variable\r\n *\r\n * @param size Number of rows/columns.\r\n * @param dtype Data type of returned Variable.\r\n * @param name Name of returned Variable.\r\n * @return A Variable, an identity matrix.\r\n */function eyeVariable(size,dtype,name){return new variables_LayerVariable(dist[\"eye\"](size),dtype,name);}/**\r\n * Get a Variable with uniform distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param minval Lower bound of the uniform distribution.\r\n * @param maxval Upper bound of the uniform distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The uniform-random Variable.\r\n */function randomUniformVariable(shape,minval,maxval,dtype,seed){var name=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'randomUniform';return new variables_LayerVariable(dist[\"randomUniform\"](shape,minval,maxval,dtype),dtype,name);}/**\r\n * Get a Variable with truncated-normal distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param mean mean value of the normal distribution.\r\n * @param stddev standard deviation of the normal distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The truncated-normal-random Variable.\r\n */function truncatedNormalVariable(shape){var mean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.0;var stddev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1.0;var dtype=arguments.length>3?arguments[3]:undefined;var seed=arguments.length>4?arguments[4]:undefined;var name=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'truncatedNormal';// TODO(cais): Implement logic for dtype and seed once they are supported\n// by deeplearn.js.\ndtype=dtype||'float32';if(dtype!=='float32'&&dtype!=='int32'){throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype,\".\"));}return new variables_LayerVariable(dist[\"truncatedNormal\"](shape,mean,stddev,dtype,seed),dtype,name);}/**\r\n * Get a Variable with normal distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param mean mean value of the normal distribution.\r\n * @param stddev standard deviation of the normal distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The truncated-normal-random Variable.\r\n */function randomNormalVariable(shape){var mean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.0;var stddev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1.0;var dtype=arguments.length>3?arguments[3]:undefined;var seed=arguments.length>4?arguments[4]:undefined;var name=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'randomNormal';dtype=dtype||'float32';if(dtype!=='float32'&&dtype!=='int32'){throw new NotImplementedError(\"randomNormalVariable does not support dType \".concat(dtype,\".\"));}return new variables_LayerVariable(dist[\"randomNormal\"](shape,mean,stddev,dtype,seed),dtype,name);}/**\r\n * Update the value of a Variable.\r\n * @param x The Variable to be updated.\r\n * @param xNew The new value to update to.\r\n * @return The Variable updated.\r\n */function update(x,xNew){return x.write(xNew);}/**\r\n * Update the value of a Variable by adding an increment.\r\n * @param x The Variable to be updated.\r\n * @param increment The incrment to add to `x`.\r\n * @return The Variable updated.\r\n */function updateAdd(x,increment){return x.write(dist[\"add\"](x.read(),increment));}/**\r\n * Update the value of a Variable by subtracting a decrement.\r\n * @param x The Variable to be updated.\r\n * @param decrement The decrement to subtract from `x`.\r\n * @return The Variable updated.\r\n */function updateSub(x,decrement){return x.write(dist[\"sub\"](x.read(),decrement));}/**\r\n * Get the values of an array of Variables.\r\n *\r\n * @param tensors An `Array` of `Variable`s to get the values of.\r\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\r\n */function batchGetValue(xs){return xs.map(function(x){return x.read();});}/**\r\n * Update the value of multiple Variables at once.\r\n *\r\n * @param variablesAndValues An `Array`, each element is of type\r\n *   [Variable, Tensor]. The first item is the\r\n *   `Variable` of which the value is to be updated. The second item\r\n *   carries the new value.\r\n */function batchSetValue(variablesAndValues){variablesAndValues.forEach(function(variableAndValue){var variable=variableAndValue[0];variable.write(variableAndValue[1]);});}/**\r\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\r\n * @param lossFn A function which returns a Scalar to be used as the function\r\n *   value (i.e., numerator) for differentiation.\r\n * @param variables List of variables to be used as the independent variables\r\n *   (i.e., denominator) for differentiation.\r\n * @returns An Array of gradients tensors.\r\n */function gradients(lossFn,variables){// TODO(cais): The return type signature can be simplified if deeplearn makes\n//   the corresponding type public.\nvar variableList=variables.map(function(variable){return variable.read();});var valudAndGrads=Object(dist[\"variableGrads\"])(lossFn,variableList);return variables.map(function(variable){return valudAndGrads.grads[variable.name];});}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: keras/engine/topology.py */ /**\r\n * Specifies the ndim, dtype and shape of every input to a layer.\r\n *\r\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\r\n * a list of instances of InputSpec (one per input tensor).\r\n *\r\n * A null entry in a shape is compatible with any dimension,\r\n * a null shape is compatible with any shape.\r\n */var InputSpec=function InputSpec(args){_classCallCheck2(this,InputSpec);this.dtype=args.dtype;this.shape=args.shape;/*\r\n          TODO(michaelterry): Could throw error if ndim and shape are both defined\r\n            (then backport).\r\n        */if(args.shape!=null){this.ndim=args.shape.length;}else{this.ndim=args.ndim;}this.maxNDim=args.maxNDim;this.minNDim=args.minNDim;this.axes=args.axes||{};};/**\r\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\r\n *\r\n * They are most often encountered when building a graph of `Layer`s for a\r\n * a `tf.LayersModel` and the input data's shape, but not values are known.\r\n */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */var topology_SymbolicTensor=/**\r\n     *\r\n     * @param dtype\r\n     * @param shape\r\n     * @param sourceLayer The Layer that produced this symbolic tensor.\r\n     * @param inputs The inputs passed to sourceLayer's __call__() method.\r\n     * @param nodeIndex\r\n     * @param tensorIndex\r\n     * @param callArgs The keyword arguments passed to the __call__() method.\r\n     * @param name\r\n     * @param outputTensorIndex The index of this tensor in the list of outputs\r\n     *   returned by apply().\r\n     */function topology_SymbolicTensor(dtype,shape,sourceLayer,inputs,callArgs,name,outputTensorIndex){_classCallCheck2(this,topology_SymbolicTensor);this.dtype=dtype;this.shape=shape;this.sourceLayer=sourceLayer;this.inputs=inputs;this.callArgs=callArgs;this.outputTensorIndex=outputTensorIndex;this.id=getNextUniqueTensorId();if(name!=null){this.originalName=getScopedTensorName(name);this.name=getUniqueTensorName(this.originalName);}this.rank=shape.length;};var _nextNodeID=0;/**\r\n * A `Node` describes the connectivity between two layers.\r\n *\r\n * Each time a layer is connected to some new input,\r\n * a node is added to `layer.inboundNodes`.\r\n *\r\n * Each time the output of a layer is used by another layer,\r\n * a node is added to `layer.outboundNodes`.\r\n *\r\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\r\n * describing the origin of the `inputTensors`, verifying the following:\r\n *\r\n * `inputTensors[i] ==\r\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\r\n *   tensorIndices[i]]`\r\n *\r\n * A node from layer A to layer B is added to:\r\n *     A.outboundNodes\r\n *     B.inboundNodes\r\n */var Node=/*#__PURE__*/function(){function Node(args,// TODO(michaelterry): Define actual type for this.\ncallArgs){_classCallCheck2(this,Node);this.callArgs=callArgs;this.id=_nextNodeID++;/*\r\n          Layer instance (NOT a list).\r\n          this is the layer that takes a list of input tensors\r\n          and turns them into a list of output tensors.\r\n          the current node will be added to\r\n          the inboundNodes of outboundLayer.\r\n        */this.outboundLayer=args.outboundLayer;/*\r\n            The following 3 properties describe where\r\n            the input tensors come from: which layers,\r\n            and for each layer, which node and which\r\n            tensor output of each node.\r\n        */ // List of layer instances.\nthis.inboundLayers=args.inboundLayers;// List of integers, 1:1 mapping with inboundLayers.\nthis.nodeIndices=args.nodeIndices;// List of integers, 1:1 mapping with inboundLayers.\nthis.tensorIndices=args.tensorIndices;/*\r\n            Following 2 properties:\r\n            tensor inputs and outputs of outboundLayer.\r\n        */ // List of tensors. 1:1 mapping with inboundLayers.\nthis.inputTensors=args.inputTensors;// List of tensors, created by outboundLayer.call().\nthis.outputTensors=args.outputTensors;/*\r\n            Following 2 properties: input and output masks.\r\n            List of tensors, 1:1 mapping with inputTensor.\r\n        */this.inputMasks=args.inputMasks;// List of tensors, created by outboundLayer.computeMask().\nthis.outputMasks=args.outputMasks;// Following 2 properties: input and output shapes.\n// List of shape tuples, shapes of inputTensors.\nthis.inputShapes=args.inputShapes;// List of shape tuples, shapes of outputTensors.\nthis.outputShapes=args.outputShapes;// Add nodes to all layers involved.\nvar _iterator16=_createForOfIteratorHelper(args.inboundLayers),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var layer=_step16.value;if(layer!=null){layer.outboundNodes.push(this);}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}args.outboundLayer.inboundNodes.push(this);}_createClass(Node,[{key:\"getConfig\",value:function getConfig(){var inboundNames=[];var _iterator17=_createForOfIteratorHelper(this.inboundLayers),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var layer=_step17.value;if(layer!=null){inboundNames.push(layer.name);}else{inboundNames.push(null);}}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:inboundNames,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices};}}]);return Node;}();var _nextLayerID=0;/**\r\n * A layer is a grouping of operations and weights that can be composed to\r\n * create a `tf.LayersModel`.\r\n *\r\n * Layers are constructed by using the functions under the\r\n * [tf.layers](#Layers-Basic) namespace.\r\n */ /** @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'} */var topology_Layer=/*#__PURE__*/function(_dist$serialization$S3){_inherits(topology_Layer,_dist$serialization$S3);var _super62=_createSuper(topology_Layer);function topology_Layer(){var _this137;var args=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck2(this,topology_Layer);_this137=_super62.call(this);_this137._callHook=null;_this137._addedWeightNames=[];// Porting Notes: PyKeras does not have this property in this base Layer\n//   class. Instead lets Layer subclass set it dynamically and checks the\n//   value with `hasattr`. In tfjs-layers, we let this be a member of this\n//   base class.\n_this137._stateful=false;_this137.id=_nextLayerID++;_this137.activityRegularizer=null;_this137.inputSpec=null;_this137.supportsMasking=false;// These properties will be set upon call of this.build()\n_this137._trainableWeights=[];_this137._nonTrainableWeights=[];_this137._losses=[];_this137._updates=[];_this137._built=false;/*\r\n          These lists will be filled via successive calls\r\n          to this.addInboundNode().\r\n         */_this137.inboundNodes=[];_this137.outboundNodes=[];var name=args.name;if(!name){var prefix=_this137.getClassName();name=toSnakeCase(prefix)+'_'+getUid(prefix);}_this137.name=name;_this137.trainable_=args.trainable==null?true:args.trainable;if(args.inputShape!=null||args.batchInputShape!=null){/*\r\n              In this case we will later create an input layer\r\n              to insert before the current layer\r\n             */var batchInputShape;if(args.batchInputShape!=null){batchInputShape=args.batchInputShape;}else if(args.inputShape!=null){var batchSize=null;if(args.batchSize!=null){batchSize=args.batchSize;}batchInputShape=[batchSize].concat(args.inputShape);}_this137.batchInputShape=batchInputShape;// Set dtype.\nvar dtype=args.dtype;if(dtype==null){dtype=args.inputDType;}if(dtype==null){dtype='float32';}_this137.dtype=dtype;}if(args.weights!=null){_this137.initialWeights=args.weights;}else{_this137.initialWeights=null;}// The value of `_refCount` is initialized to null. When the layer is used\n// in a symbolic way for the first time, it will be set to 1.\n_this137._refCount=null;_this137.fastWeightInitDuringBuild=false;return _this137;}/**\r\n     * Converts a layer and its index to a unique (immutable type) name.\r\n     * This function is used internally with `this.containerNodes`.\r\n     * @param layer The layer.\r\n     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\r\n     *   nodes.\r\n     *\r\n     * @returns The unique name.\r\n     */_createClass(topology_Layer,[{key:\"getNodeAtIndex\",value:/**\r\n     * Returns this.inboundNode at index nodeIndex.\r\n     *\r\n     * Porting note: This is a replacement for _get_node_attribute_at_index()\r\n     * @param nodeIndex\r\n     * @param attrName The name of the attribute related to request for this node.\r\n     */function getNodeAtIndex(nodeIndex,attrName){if(this.inboundNodes.length===0){throw new RuntimeError('The layer has never been called '+\"and thus has no defined \".concat(attrName,\".\"));}if(this.inboundNodes.length<=nodeIndex){throw new ValueError(\"Asked to get \".concat(attrName,\" at node \").concat(nodeIndex,\", \")+\"but the layer has only \".concat(this.inboundNodes.length,\" inbound nodes.\"));}return this.inboundNodes[nodeIndex];}/**\r\n     * Retrieves the input tensor(s) of a layer at a given node.\r\n     *\r\n     * @param nodeIndex Integer, index of the node from which to retrieve the\r\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\r\n     *   was called.\r\n     *\r\n     * @return A tensor (or list of tensors if the layer has multiple inputs).\r\n     */},{key:\"getInputAt\",value:function getInputAt(nodeIndex){return singletonOrArray(this.getNodeAtIndex(nodeIndex,'input').inputTensors);}/**\r\n     * Retrieves the output tensor(s) of a layer at a given node.\r\n     *\r\n     * @param nodeIndex Integer, index of the node from which to retrieve the\r\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\r\n     *   was called.\r\n     *\r\n     * @return A tensor (or list of tensors if the layer has multiple outputs).\r\n     */},{key:\"getOutputAt\",value:function getOutputAt(nodeIndex){return singletonOrArray(this.getNodeAtIndex(nodeIndex,'output').outputTensors);}// Properties\n/**\r\n     * Retrieves the input tensor(s) of a layer.\r\n     *\r\n     * Only applicable if the layer has exactly one inbound node,\r\n     * i.e. if it is connected to one incoming layer.\r\n     *\r\n     * @return Input tensor or list of input tensors.\r\n     *\r\n     * @exception AttributeError if the layer is connected to more than one\r\n     *   incoming layers.\r\n     */},{key:\"input\",get:function get(){if(this.inboundNodes.length>1){throw new AttributeError(\"Layer \".concat(this.name)+' has multiple inbound nodes, '+'hence the notion of \"layer input\" '+'is ill-defined. '+'Use `getInputAt(nodeIndex)` instead.');}else if(this.inboundNodes.length===0){throw new AttributeError(\"Layer \".concat(this.name)+' is not connected, no input to return.');}return singletonOrArray(this.getNodeAtIndex(0,'input').inputTensors);}/**\r\n     * Retrieves the output tensor(s) of a layer.\r\n     *\r\n     * Only applicable if the layer has exactly one inbound node,\r\n     * i.e. if it is connected to one incoming layer.\r\n     *\r\n     * @return Output tensor or list of output tensors.\r\n     *\r\n     * @exception AttributeError if the layer is connected to more than one\r\n     *   incoming layers.\r\n     */},{key:\"output\",get:function get(){if(this.inboundNodes.length===0){throw new AttributeError(\"Layer \".concat(this.name)+' has no inbound nodes.');}if(this.inboundNodes.length>1){throw new AttributeError(\"Layer \".concat(this.name)+' has multiple inbound nodes, '+'hence the notion of \"layer output\" '+'is ill-defined. '+'Use `getOutputAt(nodeIndex)` instead.');}return singletonOrArray(this.getNodeAtIndex(0,'output').outputTensors);}},{key:\"losses\",get:function get(){return this._losses;}/**\r\n     * Retrieves the Layer's current loss values.\r\n     *\r\n     * Used for regularizers during training.\r\n     */},{key:\"calculateLosses\",value:function calculateLosses(){// Porting Node: This is an augmentation to Layer.loss in PyKeras.\n//   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n//   Tensor (specifically Scalar) values are returned. This is due to the\n//   imperative backend.\nreturn this.losses.map(function(lossFn){return lossFn();});}},{key:\"updates\",get:function get(){return this._updates;}},{key:\"built\",get:function get(){return this._built;},set:function set(built){this._built=built;}},{key:\"trainable\",get:function get(){return this.trainable_;},set:function set(trainable){this._trainableWeights.forEach(function(w){return w.trainable=trainable;});this.trainable_=trainable;}},{key:\"trainableWeights\",get:function get(){if(this.trainable_){return this._trainableWeights.filter(function(w){return w.trainable;});}else{return[];}},set:function set(weights){this._trainableWeights=weights;}},{key:\"nonTrainableWeights\",get:function get(){if(this.trainable){return this._trainableWeights.filter(function(w){return!w.trainable;}).concat(this._nonTrainableWeights);}else{return this._trainableWeights.concat(this._nonTrainableWeights);}},set:function set(weights){this._nonTrainableWeights=weights;}/**\r\n     * The concatenation of the lists trainableWeights and nonTrainableWeights\r\n     * (in this order).\r\n     */},{key:\"weights\",get:function get(){return this.trainableWeights.concat(this.nonTrainableWeights);}},{key:\"stateful\",get:function get(){return this._stateful;}/**\r\n     * Reset the states of the layer.\r\n     *\r\n     * This method of the base Layer class is essentially a no-op.\r\n     * Subclasses that are stateful (e.g., stateful RNNs) should override this\r\n     * method.\r\n     */},{key:\"resetStates\",value:function resetStates(){if(!this.stateful){throw new Error('Cannot call the resetStates() method of a non-stateful Layer '+'object.');}}/**\r\n     * Checks compatibility between the layer and provided inputs.\r\n     *\r\n     * This checks that the tensor(s) `input`\r\n     * verify the input assumptions of the layer\r\n     * (if any). If not, exceptions are raised.\r\n     *\r\n     * @param inputs Input tensor or list of input tensors.\r\n     *\r\n     * @exception ValueError in case of mismatch between\r\n     *   the provided inputs and the expectations of the layer.\r\n     */},{key:\"assertInputCompatibility\",value:function assertInputCompatibility(inputs){inputs=toList(inputs);if(this.inputSpec==null||this.inputSpec.length===0){return;}var inputSpec=toList(this.inputSpec);if(inputs.length!==inputSpec.length){throw new ValueError(\"Layer \".concat(this.name,\" expects \").concat(inputSpec.length,\" inputs, \")+\"but it received \".concat(inputs.length,\" input tensors. \")+\"Input received: \".concat(inputs));}for(var inputIndex=0;inputIndex<inputs.length;inputIndex++){var x=inputs[inputIndex];var spec=inputSpec[inputIndex];if(spec==null){continue;}// Check ndim.\nvar ndim=x.rank;if(spec.ndim!=null){if(ndim!==spec.ndim){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \").concat(this.name,\": \")+\"expected ndim=\".concat(spec.ndim,\", found ndim=\").concat(ndim));}}if(spec.maxNDim!=null){if(ndim>spec.maxNDim){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \").concat(this.name)+\": expected max_ndim=\".concat(spec.maxNDim,\", found ndim=\").concat(ndim));}}if(spec.minNDim!=null){if(ndim<spec.minNDim){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \").concat(this.name)+\": expected min_ndim=\".concat(spec.minNDim,\", found ndim=\").concat(ndim,\".\"));}}// Check dtype.\nif(spec.dtype!=null){if(x.dtype!==spec.dtype){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \").concat(this.name,\" \")+\": expected dtype=\".concat(spec.dtype,\", found dtype=\").concat(x.dtype,\".\"));}}// Check specific shape axes.\nif(spec.axes){var xShape=x.shape;for(var key in spec.axes){var axis=Number(key);var value=spec.axes[key];// Perform Python-style slicing in case axis < 0;\n// TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n// ensure type safety through Underscore calls.\nvar xShapeAtAxis=axis>=0?xShape[axis]:xShape[xShape.length+axis];if(value!=null&&[value,null].indexOf(xShapeAtAxis)===-1){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \")+\"\".concat(this.name,\": expected axis \").concat(axis,\" of input shape to \")+\"have value \".concat(value,\" but got shape \").concat(xShape,\".\"));}}}// Check shape.\nif(spec.shape!=null){for(var i=0;i<spec.shape.length;++i){var specDim=spec.shape[i];var dim=x.shape[i];if(specDim!=null&&dim!=null){if(specDim!==dim){throw new ValueError(\"Input \".concat(inputIndex,\" is incompatible with layer \")+\"\".concat(this.name,\": expected shape=\").concat(spec.shape,\", \")+\"found shape=\".concat(x.shape,\".\"));}}}}}}/**\r\n     * This is where the layer's logic lives.\r\n     *\r\n     * @param inputs Input tensor, or list/tuple of input tensors.\r\n     * @param kwargs Additional keyword arguments.\r\n     *\r\n     * @return A tensor or list/tuple of tensors.\r\n     */},{key:\"call\",value:function call(inputs,kwargs){return inputs;}},{key:\"invokeCallHook\",value:function invokeCallHook(inputs,kwargs){if(this._callHook!=null){this._callHook(inputs,kwargs);}}/**\r\n     * Set call hook.\r\n     * This is currently used for testing only.\r\n     * @param callHook\r\n     */},{key:\"setCallHook\",value:function setCallHook(callHook){this._callHook=callHook;}/**\r\n     * Clear call hook.\r\n     * This is currently used for testing only.\r\n     */},{key:\"clearCallHook\",value:function clearCallHook(){this._callHook=null;}/**\r\n     * Builds or executes a `Layer's logic.\r\n     *\r\n     * When called with `tf.Tensor`(s), execute the `Layer`s computation and\r\n     * return Tensor(s). For example:\r\n     *\r\n     * ```js\r\n     * const denseLayer = tf.layers.dense({\r\n     *   units: 1,\r\n     *   kernelInitializer: 'zeros',\r\n     *   useBias: false\r\n     * });\r\n     *\r\n     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\r\n     * // numeric values).\r\n     * const input = tf.ones([2, 2]);\r\n     * const output = denseLayer.apply(input);\r\n     *\r\n     * // The output's value is expected to be [[0], [0]], due to the fact that\r\n     * // the dense layer has a kernel initialized to all-zeros and does not have\r\n     * // a bias.\r\n     * output.print();\r\n     * ```\r\n     *\r\n     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\r\n     * future execution.  This entails internal book-keeping on shapes of\r\n     * expected Tensors, wiring layers together, and initializing weights.\r\n     *\r\n     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\r\n     * building of non-`tf.Sequential` models. For example:\r\n     *\r\n     * ```js\r\n     * const flattenLayer = tf.layers.flatten();\r\n     * const denseLayer = tf.layers.dense({units: 1});\r\n     *\r\n     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\r\n     * const input = tf.input({shape: [2, 2]});\r\n     * const output1 = flattenLayer.apply(input);\r\n     *\r\n     * // output1.shape is [null, 4]. The first dimension is the undetermined\r\n     * // batch size. The second dimension comes from flattening the [2, 2]\r\n     * // shape.\r\n     * console.log(JSON.stringify(output1.shape));\r\n     *\r\n     * // The output SymbolicTensor of the flatten layer can be used to call\r\n     * // the apply() of the dense layer:\r\n     * const output2 = denseLayer.apply(output1);\r\n     *\r\n     * // output2.shape is [null, 1]. The first dimension is the undetermined\r\n     * // batch size. The second dimension matches the number of units of the\r\n     * // dense layer.\r\n     * console.log(JSON.stringify(output2.shape));\r\n     *\r\n     * // The input and output and be used to construct a model that consists\r\n     * // of the flatten and dense layers.\r\n     * const model = tf.model({inputs: input, outputs: output2});\r\n     * ```\r\n     *\r\n     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\r\n     * @param kwargs Additional keyword arguments to be passed to `call()`.\r\n     *\r\n     * @return Output of the layer's `call` method.\r\n     *\r\n     * @exception ValueError error in case the layer is missing shape information\r\n     *   for its `build` call.\r\n     */ // Porting Note: This is a replacement for __call__() in Python.\n/** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"apply\",value:function apply(inputs,kwargs){var _this138=this;kwargs=kwargs||{};this.assertNotDisposed();// Ensure inputs are all the same type.\nvar inputsList=toList(inputs);var allAreSymbolic=true;var _iterator18=_createForOfIteratorHelper(inputsList),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var input=_step18.value;if(!(input instanceof topology_SymbolicTensor)){allAreSymbolic=false;break;}}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}var noneAreSymbolic=true;var _iterator19=_createForOfIteratorHelper(inputsList),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var _input2=_step19.value;if(_input2 instanceof topology_SymbolicTensor){noneAreSymbolic=false;break;}}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}if(allAreSymbolic===noneAreSymbolic){throw new ValueError('Arguments to apply() must be all '+'SymbolicTensors or all Tensors');}// TODO(michaelterry): nameScope() may not be necessary.\nreturn nameScope(this.name,function(){// Handle laying building (weight creating, input spec locking).\nif(!_this138.built){/*\r\n                  Throw exceptions in case the input is not compatible\r\n                  with the inputSpec specified in the layer constructor.\r\n                 */_this138.assertInputCompatibility(inputs);// Collect input shapes to build layer.\nvar inputShapes=[];var _iterator20=_createForOfIteratorHelper(toList(inputs)),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var xElem=_step20.value;inputShapes.push(xElem.shape);}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}_this138.build(singletonOrArray(inputShapes));_this138.built=true;// Load weights that were specified at layer instantiation.\nif(_this138.initialWeights){_this138.setWeights(_this138.initialWeights);}if(_this138._refCount===null&&noneAreSymbolic){// The first use of this layer is a non-symbolic call, set ref count\n// to 1 so the Layer can be properly disposed if its dispose() method\n// is called.\n_this138._refCount=1;}}/*\r\n              Throw exceptions in case the input is not compatible\r\n              with the inputSpec set at build time.\r\n            */_this138.assertInputCompatibility(inputs);// Handle mask propagation.\n// TODO(michaelterry): Mask propagation not currently implemented.\n// Actually call the layer, collecting output(s), mask(s), and shape(s).\nif(noneAreSymbolic){var output=_this138.call(inputs,kwargs);// TODO(michaelterry): Compute the outputMask\n// If the layer returns tensors from its inputs, unmodified,\n// we copy them to avoid loss of tensor metadata.\nvar outputList=toList(output);var outputListCopy=[];// TODO(michaelterry): This copying may not be necessary given our eager\n// backend.\nvar _iterator21=_createForOfIteratorHelper(outputList),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var x=_step21.value;if(inputsList.indexOf(x)!==-1){x=x.clone();}outputListCopy.push(x);}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}output=singletonOrArray(outputListCopy);if(_this138.activityRegularizer!=null){throw new NotImplementedError('Layer invocation in the presence of activity '+'regularizer(s) is not supported yet.');}// TODO(michaelterry): Call addInboundNode()?\nreturn output;}else{var inputShape=collectInputShape(inputs);var outputShape=_this138.computeOutputShape(inputShape);var _output;var outputDType=guessOutputDType(inputs);_this138.warnOnIncompatibleInputShape(Array.isArray(inputs)?inputShape[0]:inputShape);if(outputShape!=null&&outputShape.length>0&&Array.isArray(outputShape[0])){// We have multiple output shapes. Create multiple output tensors.\n_output=outputShape.map(function(shape,index){return new topology_SymbolicTensor(outputDType,shape,_this138,toList(inputs),kwargs,_this138.name,index);});}else{_output=new topology_SymbolicTensor(outputDType,outputShape,_this138,toList(inputs),kwargs,_this138.name);}/*\r\n                  Add an inbound node to the layer, so that it keeps track\r\n                  of the call and of all new variables created during the call.\r\n                  This also updates the layer history of the output tensor(s).\r\n                  If the input tensor(s) had no previous history,\r\n                  this does nothing.\r\n                */_this138.addInboundNode(inputs,_output,null,null,inputShape,outputShape,kwargs);_this138._refCount++;if(_this138.activityRegularizer!=null){throw new NotImplementedError('Layer invocation in the presence of activity '+'regularizer(s) is not supported yet.');}return _output;}});}/**\r\n     * Check compatibility between input shape and this layer's batchInputShape.\r\n     *\r\n     * Print warning if any incompatibility is found.\r\n     *\r\n     * @param inputShape Input shape to be checked.\r\n     */},{key:\"warnOnIncompatibleInputShape\",value:function warnOnIncompatibleInputShape(inputShape){if(this.batchInputShape==null){return;}else if(inputShape.length!==this.batchInputShape.length){console.warn(\"The rank of the input tensor provided (shape: \"+\"\".concat(JSON.stringify(inputShape),\") does not match that of the \")+\"batchInputShape (\".concat(JSON.stringify(this.batchInputShape),\") \")+\"of the layer \".concat(this.name));}else{var dimMismatch=false;this.batchInputShape.forEach(function(dimension,i){if(dimension!=null&&inputShape[i]!=null&&inputShape[i]!==dimension){dimMismatch=true;}});if(dimMismatch){console.warn(\"The shape of the input tensor \"+\"(\".concat(JSON.stringify(inputShape),\") does not \")+\"match the expectation of layer \".concat(this.name,\": \")+\"\".concat(JSON.stringify(this.batchInputShape)));}}}/**\r\n     * Retrieves the output shape(s) of a layer.\r\n     *\r\n     * Only applicable if the layer has only one inbound node, or if all inbound\r\n     * nodes have the same output shape.\r\n     *\r\n     * @returns Output shape or shapes.\r\n     * @throws AttributeError: if the layer is connected to more than one incoming\r\n     *   nodes.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"outputShape\",get:function get(){if(this.inboundNodes==null||this.inboundNodes.length===0){throw new AttributeError(\"The layer \".concat(this.name,\" has never been called and thus has no \")+\"defined output shape.\");}var allOutputShapes=[];var _iterator22=_createForOfIteratorHelper(this.inboundNodes),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var node=_step22.value;var shapeString=JSON.stringify(node.outputShapes);if(allOutputShapes.indexOf(shapeString)===-1){allOutputShapes.push(shapeString);}}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}if(allOutputShapes.length===1){var outputShapes=this.inboundNodes[0].outputShapes;if(Array.isArray(outputShapes)&&Array.isArray(outputShapes[0])&&outputShapes.length===1){return outputShapes[0];}else{return outputShapes;}}else{throw new AttributeError(\"The layer \".concat(this.name,\" has multiple inbound nodes with different \")+\"output shapes. Hence the notion of \\\"outut shape\\\" is ill-defined \"+\"for the layer.\");// TODO(cais): Implement getOutputShapeAt().\n}}/**\r\n     * Counts the total number of numbers (e.g., float32, int32) in the\r\n     * weights.\r\n     *\r\n     * @returns An integer count.\r\n     * @throws RuntimeError: If the layer is not built yet (in which case its\r\n     *   weights are not defined yet.)\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"countParams\",value:function countParams(){if(!this.built){throw new RuntimeError(\"You tried to call countParams() on \".concat(this.name,\", \")+\"but the layer is not built yet. Build it first by calling \"+\"build(batchInputShape).\");}return countParamsInWeights(this.weights);}/**\r\n     * Creates the layer weights.\r\n     *\r\n     * Must be implemented on all layers that have weights.\r\n     *\r\n     * Called when apply() is called to construct the weights.\r\n     *\r\n     * @param inputShape A `Shape` or array of `Shape` (unused).\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"build\",value:function build(inputShape){this.built=true;}/**\r\n     * Returns the current values of the weights of the layer.\r\n     *\r\n     * @param trainableOnly Whether to get the values of only trainable weights.\r\n     * @returns Weight values as an `Array` of `tf.Tensor`s.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"getWeights\",value:function getWeights(){var trainableOnly=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return batchGetValue(trainableOnly?this.trainableWeights:this.weights);}/**\r\n     * Sets the weights of the layer, from Tensors.\r\n     *\r\n     * @param weights a list of Tensors. The number of arrays and their shape\r\n     *   must match number of the dimensions of the weights of the layer (i.e.\r\n     *   it should match the output of `getWeights`).\r\n     *\r\n     * @exception ValueError If the provided weights list does not match the\r\n     *   layer's specifications.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"setWeights\",value:function setWeights(weights){var _this139=this;Object(dist[\"tidy\"])(function(){var params=_this139.weights;if(params.length!==weights.length){// TODO(cais): Restore the following and use `providedWeights`, instead\n// of `weights` in the error message, once the deeplearn.js bug is\n// fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n// providedWeights = JSON.stringify(weights).substr(0, 50);\nthrow new ValueError(\"You called setWeights(weights) on layer \\\"\".concat(_this139.name,\"\\\" \")+\"with a weight list of length \".concat(weights.length,\", \")+\"but the layer was expecting \".concat(params.length,\" weights. \")+\"Provided weights: \".concat(weights,\"...\"));}if(params.length===0){return;}var weightValueTuples=[];var paramValues=batchGetValue(params);for(var i=0;i<paramValues.length;++i){var pv=paramValues[i];var p=params[i];var w=weights[i];if(!dist[\"util\"].arraysEqual(pv.shape,w.shape)){throw new ValueError(\"Layer weight shape \".concat(pv.shape,\" \")+\"not compatible with provided weight shape \".concat(w.shape));}weightValueTuples.push([p,w]);}batchSetValue(weightValueTuples);});}/**\r\n     * Adds a weight variable to the layer.\r\n     *\r\n     * @param name Name of the new weight variable.\r\n     * @param shape The shape of the weight.\r\n     * @param dtype The dtype of the weight.\r\n     * @param initializer An initializer instance.\r\n     * @param regularizer A regularizer instance.\r\n     * @param trainable Whether the weight should be trained via backprop or not\r\n     *   (assuming that the layer itself is also trainable).\r\n     * @param constraint An optional trainable.\r\n     * @return The created weight variable.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"addWeight\",value:function addWeight(name,shape,dtype,initializer,regularizer,trainable,constraint){// Reject duplicate weight names.\nif(this._addedWeightNames.indexOf(name)!==-1){throw new ValueError(\"Duplicate weight name \".concat(name,\" for layer \").concat(this.name));}this._addedWeightNames.push(name);if(dtype==null){dtype='float32';}if(this.fastWeightInitDuringBuild){initializer=getInitializer('zeros');}var initValue=initializer.apply(shape,dtype);var weight=new variables_LayerVariable(initValue,dtype,name,trainable,constraint);initValue.dispose();// Request backend not to dispose the weights of the model on scope() exit.\nif(regularizer!=null){this.addLoss(function(){return regularizer.apply(weight.read());});}if(trainable==null){trainable=true;}if(trainable){this._trainableWeights.push(weight);}else{this._nonTrainableWeights.push(weight);}return weight;}/**\r\n     * Set the fast-weight-initialization flag.\r\n     *\r\n     * In cases where the initialized weight values will be immediately\r\n     * overwritten by loaded weight values during model loading, setting\r\n     * the flag to `true` saves unnecessary calls to potentially expensive\r\n     * initializers and speeds up the loading process.\r\n     *\r\n     * @param value Target value of the flag.\r\n     */},{key:\"setFastWeightInitDuringBuild\",value:function setFastWeightInitDuringBuild(value){this.fastWeightInitDuringBuild=value;}/**\r\n     * Add losses to the layer.\r\n     *\r\n     * The loss may potentionally be conditional on some inputs tensors,\r\n     * for instance activity losses are conditional on the layer's inputs.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"addLoss\",value:function addLoss(losses){if(losses==null||Array.isArray(losses)&&losses.length===0){return;}// Update this.losses\nlosses=toList(losses);if(this._losses!==undefined&&this._losses!==null){var _this$losses;(_this$losses=this.losses).push.apply(_this$losses,_toConsumableArray2(losses));}}/**\r\n     * Computes the output shape of the layer.\r\n     *\r\n     * Assumes that the layer will be built to match that input shape provided.\r\n     *\r\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\r\n     *   (one per output tensor of the layer). Shape tuples can include null for\r\n     *   free dimensions, instead of an integer.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}/**\r\n     * Computes an output mask tensor.\r\n     *\r\n     * @param inputs Tensor or list of tensors.\r\n     * @param mask Tensor or list of tensors.\r\n     *\r\n     * @return null or a tensor (or list of tensors, one per output tensor of the\r\n     * layer).\r\n     */},{key:\"computeMask\",value:function computeMask(inputs,mask){var _this140=this;if(!this.supportsMasking){if(mask!=null){if(Array.isArray(mask)){mask.forEach(function(maskElement){if(maskElement!=null){throw new TypeError(\"Layer \".concat(_this140.name,\" does not support masking, \")+'but was passed an inputMask.');}});}else{throw new TypeError(\"Layer \".concat(this.name,\" does not support masking, \")+'but was passed an inputMask.');}}// masking not explicitly supported: return null as mask\nreturn null;}// if masking is explictly supported, by default\n// carry over the input mask\nreturn mask;}/**\r\n     * Internal method to create an inbound node for the layer.\r\n     *\r\n     * @param inputTensors List of input tensors.\r\n     * @param outputTensors List of output tensors.\r\n     * @param inputMasks List of input masks (a mask can be a tensor, or null).\r\n     * @param outputMasks List of output masks (a mask can be a tensor, or null).\r\n     * @param inputShapes List of input shape tuples.\r\n     * @param outputShapes List of output shape tuples.\r\n     * @param kwargs Dictionary of keyword arguments that were passed to the\r\n     *   `call` method of the layer at the call that created the node.\r\n     */},{key:\"addInboundNode\",value:function addInboundNode(inputTensors,outputTensors,inputMasks,outputMasks,inputShapes,outputShapes){var kwargs=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var inputTensorList=toList(inputTensors);outputTensors=toList(outputTensors);inputMasks=toList(inputMasks);outputMasks=toList(outputMasks);inputShapes=normalizeShapeList(inputShapes);outputShapes=normalizeShapeList(outputShapes);// Collect input tensor(s) coordinates.\nvar inboundLayers=[];var nodeIndices=[];var tensorIndices=[];var _iterator23=_createForOfIteratorHelper(inputTensorList),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var x=_step23.value;/*\r\n             * TODO(michaelterry): Keras adds this value to tensors; it's not\r\n             * clear whether we'll use this or not.\r\n             */inboundLayers.push(x.sourceLayer);nodeIndices.push(x.nodeIndex);tensorIndices.push(x.tensorIndex);}// Create node, add it to inbound nodes.\n// (This call has side effects.)\n// tslint:disable-next-line:no-unused-expression\n}catch(err){_iterator23.e(err);}finally{_iterator23.f();}new Node({outboundLayer:this,inboundLayers:inboundLayers,nodeIndices:nodeIndices,tensorIndices:tensorIndices,inputTensors:inputTensorList,outputTensors:outputTensors,inputMasks:inputMasks,outputMasks:outputMasks,inputShapes:inputShapes,outputShapes:outputShapes},kwargs);// Update tensor history\nfor(var i=0;i<outputTensors.length;i++){// TODO(michaelterry: _uses_learning_phase not tracked.\noutputTensors[i].sourceLayer=this;outputTensors[i].nodeIndex=this.inboundNodes.length-1;outputTensors[i].tensorIndex=i;}}/**\r\n     * Returns the config of the layer.\r\n     *\r\n     * A layer config is a TS dictionary (serializable)\r\n     * containing the configuration of a layer.\r\n     * The same layer can be reinstantiated later\r\n     * (without its trained weights) from this configuration.\r\n     *\r\n     * The config of a layer does not include connectivity\r\n     * information, nor the layer class name.  These are handled\r\n     * by 'Container' (one layer of abstraction above).\r\n     *\r\n     * Porting Note: The TS dictionary follows TS naming standrds for\r\n     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\r\n     * should use a helper function to convert to the pythonic storage\r\n     * standard. (see serialization_utils.convertTsToPythonic)\r\n     *\r\n     * @returns TS dictionary of configuration.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"getConfig\",value:function getConfig(){var config={name:this.name,trainable:this.trainable};if(this.batchInputShape!=null){config['batchInputShape']=this.batchInputShape;}if(this.dtype!=null){config['dtype']=this.dtype;}return config;}/**\r\n     * Dispose the weight variables that this Layer instance holds.\r\n     *\r\n     * @returns {number} Number of disposed variables.\r\n     */},{key:\"disposeWeights\",value:function disposeWeights(){this.weights.forEach(function(weight){return weight.dispose();});return this.weights.length;}},{key:\"assertNotDisposed\",value:function assertNotDisposed(){if(this._refCount===0){throw new Error(\"Layer '\".concat(this.name,\"' is already disposed.\"));}}/**\r\n     * Attempt to dispose layer's weights.\r\n     *\r\n     * This method decrease the reference count of the Layer object by 1.\r\n     *\r\n     * A Layer is reference-counted. Its reference count is incremented by 1\r\n     * the first item its `apply()` method is called and when it becomes a part\r\n     * of a new `Node` (through calling the `apply()`) method on a\r\n     * `tf.SymbolicTensor`).\r\n     *\r\n     * If the reference count of a Layer becomes 0, all the weights will be\r\n     * disposed and the underlying memory (e.g., the textures allocated in WebGL)\r\n     * will be freed.\r\n     *\r\n     * Note: If the reference count is greater than 0 after the decrement, the\r\n     * weights of the Layer will *not* be disposed.\r\n     *\r\n     * After a Layer is disposed, it cannot be used in calls such as `apply()`,\r\n     * `getWeights()` or `setWeights()` anymore.\r\n     *\r\n     * @returns A DisposeResult Object with the following fields:\r\n     *   - refCountAfterDispose: The reference count of the Container after this\r\n     *     `dispose()` call.\r\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\r\n     *     during this `dispose()` call.\r\n     * @throws {Error} If the layer is not built yet, or if the layer has already\r\n     *   been disposed.\r\n     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */},{key:\"dispose\",value:function dispose(){if(!this.built){throw new Error(\"Cannot dispose Layer \".concat(this.name,\" because it has not been \")+\"built yet.\");}if(this._refCount===null){throw new Error(\"Cannot dispose Layer \".concat(this.name,\" because it has not been used \")+\"yet.\");}this.assertNotDisposed();var numDisposedVariables=0;if(--this._refCount===0){numDisposedVariables=this.disposeWeights();}return{refCountAfterDispose:this._refCount,numDisposedVariables:numDisposedVariables};}}],[{key:\"nodeKey\",value:function nodeKey(layer,nodeIndex){return layer.name+'_ib-'+nodeIndex.toString();}}]);return topology_Layer;}(dist[\"serialization\"].Serializable);/**\r\n * Collects the input shape(s) of a list of `tf.Tensor`s or\r\n * `tf.SymbolicTensor`s.\r\n *\r\n * TODO(michaelterry): Update PyKeras docs (backport).\r\n *\r\n * @param inputTensors List of input tensors (or single input tensor).\r\n *\r\n * @return List of shape tuples (or single tuple), one tuple per input.\r\n */function collectInputShape(inputTensors){inputTensors=toList(inputTensors);var shapes=[];var _iterator24=_createForOfIteratorHelper(inputTensors),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var x=_step24.value;shapes.push(x.shape);}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}return singletonOrArray(shapes);}/**\r\n * Guesses output dtype based on inputs.\r\n *\r\n * At present, just returns 'float32' for any input.\r\n *\r\n * @param inputTensors List of input tensors (or single input tensor).\r\n *\r\n * @return The guessed DType. At present, always returns 'float32'.\r\n */function guessOutputDType(inputTensors){return'float32';}/**\r\n * Returns the list of input tensors necessary to compute `tensor`.\r\n *\r\n * Output will always be a list of tensors (potentially with 1 element).\r\n *\r\n * @param tensor The tensor to start from.\r\n * @param layer Origin layer of the tensor.\r\n * @param nodeIndex Origin node index of the tensor.\r\n *\r\n * @return Array of input tensors.\r\n */function getSourceInputs(tensor,layer,nodeIndex){if(layer==null||nodeIndex!=null&&nodeIndex>0){layer=tensor.sourceLayer;nodeIndex=tensor.nodeIndex;}if(layer.inboundNodes.length===0){return[tensor];}else{var node=layer.inboundNodes[nodeIndex];if(node.inboundLayers.length===0){return node.inputTensors;}else{var sourceTensors=[];for(var i=0;i<node.inboundLayers.length;i++){var x=node.inputTensors[i];var _layer=node.inboundLayers[i];var _nodeIndex=node.nodeIndices[i];var previousSources=getSourceInputs(x,_layer,_nodeIndex);// Avoid input redundancy.\nvar _iterator25=_createForOfIteratorHelper(previousSources),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var _x112=_step25.value;if(sourceTensors.indexOf(_x112)===-1){sourceTensors.push(_x112);}}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}}return sourceTensors;}}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */var input_layer_InputLayer=/*#__PURE__*/function(_topology_Layer){_inherits(input_layer_InputLayer,_topology_Layer);var _super63=_createSuper(input_layer_InputLayer);function input_layer_InputLayer(args){var _this141;_classCallCheck2(this,input_layer_InputLayer);_this141=_super63.call(this,{dtype:args.dtype,name:args.name!=null?args.name:getUid('input').toString()});// Normalize config.batchSize and config.sparse\nif(args.batchSize==null){args.batchSize=null;}if(args.sparse==null){args.sparse=false;}_this141.trainable=false;_this141.built=true;_this141.sparse=args.sparse;if(args.inputShape!=null&&args.batchInputShape!=null){throw new ValueError('Only provide the inputShape OR '+'batchInputShape argument to inputLayer, not both at the same time.');}var batchInputShape=args.batchInputShape;if(batchInputShape==null){if(args.inputShape==null){throw new ValueError('An InputLayer should be passed either a '+'`batchInputShape` or an `inputShape`.');}else{batchInputShape=[args.batchSize].concat(args.inputShape);}}else{// TODO(michaelterry): Backport to PyKeras\nif(args.batchSize!=null){throw new ValueError('Cannot specify batchSize if batchInputShape is '+'specified when creating an InputLayer.');}}var dtype=args.dtype||'float32';_this141.batchInputShape=batchInputShape;_this141.dtype=dtype;// TODO(michaelterry): Backport this to PyKeras?\n_this141.inputSpec=[{shape:batchInputShape}];var inputTensor=new topology_SymbolicTensor(_this141.dtype,_this141.batchInputShape,_assertThisInitialized(_this141),[],{},_this141.name);inputTensor.nodeIndex=0;inputTensor.tensorIndex=0;// Create an input node to add to this.outboundNode.\n// (This call has side effects.)\n// tslint:disable-next-line:no-unused-expression\nnew Node({outboundLayer:_assertThisInitialized(_this141),inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[inputTensor],outputTensors:[inputTensor],inputMasks:[null],outputMasks:[null],inputShapes:[batchInputShape],outputShapes:[batchInputShape]});return _this141;}_createClass(input_layer_InputLayer,[{key:\"apply\",value:function apply(inputs,kwargs){throw new ValueError('Cannot pass any input to an '+\"InputLayer's apply() method. InputLayer name: \".concat(this.name));}},{key:\"dispose\",value:function dispose(){// dispose() for InputLayer is overridden as no-op.\nreturn{refCountAfterDispose:this._refCount,numDisposedVariables:0};}},{key:\"getConfig\",value:function getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name};}}]);return input_layer_InputLayer;}(topology_Layer);/** @nocollapse */input_layer_InputLayer.className='InputLayer';dist[\"serialization\"].registerClass(input_layer_InputLayer);function Input(config){if(config.batchShape==null&&config.shape==null){throw new Error('Please provide to Input either a `shape`'+' or a `batchShape` argument. Note that '+'`shape` does not include the batch '+'dimension.');}if(config.batchShape!=null&&config.shape!=null){// TODO(michaelterry): Backport to PyKeras.\nthrow new ValueError('Please provide either a `shape` or `batchShape` '+'argument to Input, but not both.');}var batchShape=config.batchShape;if(config.shape!=null&&batchShape==null){batchShape=[null].concat(config.shape);}var dtype=config.dtype;if(dtype==null){dtype='float32';}var inputLayer=new input_layer_InputLayer({batchInputShape:batchShape,name:config.name,dtype:dtype,sparse:config.sparse});var outputs=inputLayer.inboundNodes[0].outputTensors;return outputs[0];}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/logs.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Turn any Scalar values in a Logs object into actual number values.\r\n *\r\n * @param logs The `Logs` object to be resolved in place.\r\n */function resolveScalarsInLogs(_x113){return _resolveScalarsInLogs.apply(this,arguments);}/**\r\n * Dispose all Tensors in an UnresolvedLogs object.\r\n *\r\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\r\n *   places where the values can be `tf.Tensor` or `number`.\r\n */function _resolveScalarsInLogs(){_resolveScalarsInLogs=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee162(logs){var promises,keys,scalarsToDispose,key,value,valueScalar,values,i;return regeneratorRuntime.wrap(function _callee162$(_context162){while(1){switch(_context162.prev=_context162.next){case 0:if(!(logs==null)){_context162.next=2;break;}return _context162.abrupt(\"return\");case 2:promises=[];keys=[];scalarsToDispose=[];for(key in logs){value=logs[key];if(typeof value!=='number'){valueScalar=value;promises.push(valueScalar.data());keys.push(key);scalarsToDispose.push(valueScalar);}}if(!(promises.length>0)){_context162.next=12;break;}_context162.next=9;return Promise.all(promises);case 9:values=_context162.sent;for(i=0;i<values.length;++i){logs[keys[i]]=values[i][0];}// Dispose the original scalar tensors.\nObject(dist[\"dispose\"])(scalarsToDispose);case 12:case\"end\":return _context162.stop();}}},_callee162);}));return _resolveScalarsInLogs.apply(this,arguments);}function disposeTensorsInLogs(logs){if(logs==null){return;}for(var key in logs){var value=logs[key];if(typeof value!=='number'){value.dispose();}}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: keras/callbacks.py */ /** Verbosity logging level when fitting a model. */var ModelLoggingVerbosity;(function(ModelLoggingVerbosity){ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"]=0]=\"SILENT\";ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"]=1]=\"VERBOSE\";})(ModelLoggingVerbosity||(ModelLoggingVerbosity={}));/** How often to yield to the main thread when training (in ms). */var DEFAULT_YIELD_EVERY_MS=125;/**\r\n * Abstract base class used to build new callbacks.\r\n *\r\n * The `logs` dictionary that callback methods take as argument will contain\r\n * keys for quantities relevant to the current batch or epoch.\r\n *\r\n * Currently, the `.fit()` method of the `Sequential` model class\r\n * will include the following quantities in the `logs` that\r\n * it passes to its callbacks:\r\n *\r\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\r\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\r\n *   accuracy monitoring are enabled).\r\n * onBatchBegin: Logs include `size`, the number of samples in the current\r\n *   batch.\r\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\r\n *   is enabled).\r\n */var BaseCallback=/*#__PURE__*/function(){function BaseCallback(){_classCallCheck2(this,BaseCallback);// TODO(michaelterry): This type is a best guess.\nthis.validationData=null;}_createClass(BaseCallback,[{key:\"setParams\",value:function setParams(params){this.params=params;}},{key:\"onEpochBegin\",value:function(){var _onEpochBegin=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee124(epoch,logs){return regeneratorRuntime.wrap(function _callee124$(_context124){while(1){switch(_context124.prev=_context124.next){case 0:case\"end\":return _context124.stop();}}},_callee124);}));function onEpochBegin(_x114,_x115){return _onEpochBegin.apply(this,arguments);}return onEpochBegin;}()},{key:\"onEpochEnd\",value:function(){var _onEpochEnd=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee125(epoch,logs){return regeneratorRuntime.wrap(function _callee125$(_context125){while(1){switch(_context125.prev=_context125.next){case 0:case\"end\":return _context125.stop();}}},_callee125);}));function onEpochEnd(_x116,_x117){return _onEpochEnd.apply(this,arguments);}return onEpochEnd;}()},{key:\"onBatchBegin\",value:function(){var _onBatchBegin=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee126(batch,logs){return regeneratorRuntime.wrap(function _callee126$(_context126){while(1){switch(_context126.prev=_context126.next){case 0:case\"end\":return _context126.stop();}}},_callee126);}));function onBatchBegin(_x118,_x119){return _onBatchBegin.apply(this,arguments);}return onBatchBegin;}()},{key:\"onBatchEnd\",value:function(){var _onBatchEnd=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee127(batch,logs){return regeneratorRuntime.wrap(function _callee127$(_context127){while(1){switch(_context127.prev=_context127.next){case 0:case\"end\":return _context127.stop();}}},_callee127);}));function onBatchEnd(_x120,_x121){return _onBatchEnd.apply(this,arguments);}return onBatchEnd;}()},{key:\"onTrainBegin\",value:function(){var _onTrainBegin=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee128(logs){return regeneratorRuntime.wrap(function _callee128$(_context128){while(1){switch(_context128.prev=_context128.next){case 0:case\"end\":return _context128.stop();}}},_callee128);}));function onTrainBegin(_x122){return _onTrainBegin.apply(this,arguments);}return onTrainBegin;}()},{key:\"onTrainEnd\",value:function(){var _onTrainEnd=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee129(logs){return regeneratorRuntime.wrap(function _callee129$(_context129){while(1){switch(_context129.prev=_context129.next){case 0:case\"end\":return _context129.stop();}}},_callee129);}));function onTrainEnd(_x123){return _onTrainEnd.apply(this,arguments);}return onTrainEnd;}()// LayersModel needs to call Callback.setModel(), but cannot actually depend\n// on Callback because that creates a cyclic dependency.  Providing this no-op\n// method on BaseCallback breaks the cycle: this way LayersModel can depend on\n// BaseCallback but not on Callback.  The argument is typed as `Container`\n// (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n// overrides this method and enforces that the argument is really a\n// LayersModel.\n},{key:\"setModel\",value:function setModel(model){// Do nothing. Use Callback instead of BaseCallback to track the model.\n}}]);return BaseCallback;}();/**\r\n * Container abstracting a list of callbacks.\r\n */var CallbackList=/*#__PURE__*/function(){// TODO(cais): When the need arises, uncomment the following lines and\n// implement the queue for time values.\n// private deltaTBatch: number;\n// private deltaTsBatchBegin: Array<number>;\n// private deltaTsBatchEnd: Array<number>;\n/**\r\n     * Constructor of CallbackList.\r\n     * @param callbacks Array of `Callback` instances.\r\n     * @param queueLength Queue length for keeping running statistics over\r\n     *   callback execution time.\r\n     */function CallbackList(callbacks){var queueLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;_classCallCheck2(this,CallbackList);// TODO(cais): Make use of queueLength when implementing the queue for time\n// values.\nif(callbacks==null){callbacks=[];}this.callbacks=callbacks;this.queueLength=queueLength;}_createClass(CallbackList,[{key:\"append\",value:function append(callback){this.callbacks.push(callback);}},{key:\"setParams\",value:function setParams(params){var _iterator26=_createForOfIteratorHelper(this.callbacks),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var callback=_step26.value;callback.setParams(params);}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}}},{key:\"setModel\",value:function setModel(model){var _iterator27=_createForOfIteratorHelper(this.callbacks),_step27;try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var callback=_step27.value;callback.setModel(model);}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}}/**\r\n     * Called at the start of an epoch.\r\n     * @param epoch Index of epoch.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onEpochBegin\",value:function(){var _onEpochBegin2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee130(epoch,logs){var _iterator28,_step28,callback;return regeneratorRuntime.wrap(function _callee130$(_context130){while(1){switch(_context130.prev=_context130.next){case 0:if(logs==null){logs={};}_iterator28=_createForOfIteratorHelper(this.callbacks);_context130.prev=2;_iterator28.s();case 4:if((_step28=_iterator28.n()).done){_context130.next=10;break;}callback=_step28.value;_context130.next=8;return callback.onEpochBegin(epoch,logs);case 8:_context130.next=4;break;case 10:_context130.next=15;break;case 12:_context130.prev=12;_context130.t0=_context130[\"catch\"](2);_iterator28.e(_context130.t0);case 15:_context130.prev=15;_iterator28.f();return _context130.finish(15);case 18:case\"end\":return _context130.stop();}}},_callee130,this,[[2,12,15,18]]);}));function onEpochBegin(_x124,_x125){return _onEpochBegin2.apply(this,arguments);}return onEpochBegin;}()/**\r\n     * Called at the end of an epoch.\r\n     * @param epoch Index of epoch.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onEpochEnd\",value:function(){var _onEpochEnd2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee131(epoch,logs){var _iterator29,_step29,callback;return regeneratorRuntime.wrap(function _callee131$(_context131){while(1){switch(_context131.prev=_context131.next){case 0:if(logs==null){logs={};}_iterator29=_createForOfIteratorHelper(this.callbacks);_context131.prev=2;_iterator29.s();case 4:if((_step29=_iterator29.n()).done){_context131.next=10;break;}callback=_step29.value;_context131.next=8;return callback.onEpochEnd(epoch,logs);case 8:_context131.next=4;break;case 10:_context131.next=15;break;case 12:_context131.prev=12;_context131.t0=_context131[\"catch\"](2);_iterator29.e(_context131.t0);case 15:_context131.prev=15;_iterator29.f();return _context131.finish(15);case 18:case\"end\":return _context131.stop();}}},_callee131,this,[[2,12,15,18]]);}));function onEpochEnd(_x126,_x127){return _onEpochEnd2.apply(this,arguments);}return onEpochEnd;}()/**\r\n     * Called  right before processing a batch.\r\n     * @param batch Index of batch within the current epoch.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onBatchBegin\",value:function(){var _onBatchBegin2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee132(batch,logs){var _iterator30,_step30,callback;return regeneratorRuntime.wrap(function _callee132$(_context132){while(1){switch(_context132.prev=_context132.next){case 0:if(logs==null){logs={};}_iterator30=_createForOfIteratorHelper(this.callbacks);_context132.prev=2;_iterator30.s();case 4:if((_step30=_iterator30.n()).done){_context132.next=10;break;}callback=_step30.value;_context132.next=8;return callback.onBatchBegin(batch,logs);case 8:_context132.next=4;break;case 10:_context132.next=15;break;case 12:_context132.prev=12;_context132.t0=_context132[\"catch\"](2);_iterator30.e(_context132.t0);case 15:_context132.prev=15;_iterator30.f();return _context132.finish(15);case 18:case\"end\":return _context132.stop();}}},_callee132,this,[[2,12,15,18]]);}));function onBatchBegin(_x128,_x129){return _onBatchBegin2.apply(this,arguments);}return onBatchBegin;}()/**\r\n     * Called at the end of a batch.\r\n     * @param batch Index of batch within the current epoch.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onBatchEnd\",value:function(){var _onBatchEnd2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee133(batch,logs){var _iterator31,_step31,callback;return regeneratorRuntime.wrap(function _callee133$(_context133){while(1){switch(_context133.prev=_context133.next){case 0:if(logs==null){logs={};}_iterator31=_createForOfIteratorHelper(this.callbacks);_context133.prev=2;_iterator31.s();case 4:if((_step31=_iterator31.n()).done){_context133.next=10;break;}callback=_step31.value;_context133.next=8;return callback.onBatchEnd(batch,logs);case 8:_context133.next=4;break;case 10:_context133.next=15;break;case 12:_context133.prev=12;_context133.t0=_context133[\"catch\"](2);_iterator31.e(_context133.t0);case 15:_context133.prev=15;_iterator31.f();return _context133.finish(15);case 18:case\"end\":return _context133.stop();}}},_callee133,this,[[2,12,15,18]]);}));function onBatchEnd(_x130,_x131){return _onBatchEnd2.apply(this,arguments);}return onBatchEnd;}()/**\r\n     * Called at the beginning of training.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onTrainBegin\",value:function(){var _onTrainBegin2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee134(logs){var _iterator32,_step32,callback;return regeneratorRuntime.wrap(function _callee134$(_context134){while(1){switch(_context134.prev=_context134.next){case 0:if(logs==null){logs={};}_iterator32=_createForOfIteratorHelper(this.callbacks);_context134.prev=2;_iterator32.s();case 4:if((_step32=_iterator32.n()).done){_context134.next=10;break;}callback=_step32.value;_context134.next=8;return callback.onTrainBegin(logs);case 8:_context134.next=4;break;case 10:_context134.next=15;break;case 12:_context134.prev=12;_context134.t0=_context134[\"catch\"](2);_iterator32.e(_context134.t0);case 15:_context134.prev=15;_iterator32.f();return _context134.finish(15);case 18:case\"end\":return _context134.stop();}}},_callee134,this,[[2,12,15,18]]);}));function onTrainBegin(_x132){return _onTrainBegin2.apply(this,arguments);}return onTrainBegin;}()/**\r\n     * Called at the end of training.\r\n     * @param logs Dictionary of logs.\r\n     */},{key:\"onTrainEnd\",value:function(){var _onTrainEnd2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee135(logs){var _iterator33,_step33,callback;return regeneratorRuntime.wrap(function _callee135$(_context135){while(1){switch(_context135.prev=_context135.next){case 0:if(logs==null){logs={};}_iterator33=_createForOfIteratorHelper(this.callbacks);_context135.prev=2;_iterator33.s();case 4:if((_step33=_iterator33.n()).done){_context135.next=10;break;}callback=_step33.value;_context135.next=8;return callback.onTrainEnd(logs);case 8:_context135.next=4;break;case 10:_context135.next=15;break;case 12:_context135.prev=12;_context135.t0=_context135[\"catch\"](2);_iterator33.e(_context135.t0);case 15:_context135.prev=15;_iterator33.f();return _context135.finish(15);case 18:case\"end\":return _context135.stop();}}},_callee135,this,[[2,12,15,18]]);}));function onTrainEnd(_x133){return _onTrainEnd2.apply(this,arguments);}return onTrainEnd;}()}]);return CallbackList;}();/**\r\n * Callback that accumulates epoch averages of metrics.\r\n *\r\n * This callback is automatically applied to every LayersModel.\r\n */var base_callbacks_BaseLogger=/*#__PURE__*/function(_BaseCallback){_inherits(base_callbacks_BaseLogger,_BaseCallback);var _super64=_createSuper(base_callbacks_BaseLogger);function base_callbacks_BaseLogger(){_classCallCheck2(this,base_callbacks_BaseLogger);return _super64.call(this);}_createClass(base_callbacks_BaseLogger,[{key:\"onEpochBegin\",value:function(){var _onEpochBegin3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee136(epoch){return regeneratorRuntime.wrap(function _callee136$(_context136){while(1){switch(_context136.prev=_context136.next){case 0:this.seen=0;this.totals={};case 2:case\"end\":return _context136.stop();}}},_callee136,this);}));function onEpochBegin(_x134){return _onEpochBegin3.apply(this,arguments);}return onEpochBegin;}()},{key:\"onBatchEnd\",value:function(){var _onBatchEnd3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee137(batch,logs){var _this142=this;var batchSize,_loop14,key;return regeneratorRuntime.wrap(function _callee137$(_context137){while(1){switch(_context137.prev=_context137.next){case 0:if(logs==null){logs={};}batchSize=logs['size']==null?0:logs['size'];this.seen+=batchSize;_loop14=function _loop14(key){var value=logs[key];if(typeof value==='number'){if(!_this142.totals.hasOwnProperty(key)){_this142.totals[key]=0;}_this142.totals[key]=_this142.totals[key]+value*batchSize;}else{var oldTotalsToDispose;if(key in _this142.totals){oldTotalsToDispose=_this142.totals[key];}else{_this142.totals[key]=0;}var total=Object(dist[\"tidy\"])(function(){return Object(dist[\"add\"])(_this142.totals[key],Object(dist[\"mul\"])(value,batchSize));});_this142.totals[key]=total;if(oldTotalsToDispose!=null){oldTotalsToDispose.dispose();}}};for(key in logs){_loop14(key);}case 5:case\"end\":return _context137.stop();}}},_callee137,this);}));function onBatchEnd(_x135,_x136){return _onBatchEnd3.apply(this,arguments);}return onBatchEnd;}()},{key:\"onEpochEnd\",value:function(){var _onEpochEnd3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee138(epoch,logs){var _this143=this;var _iterator34,_step34,_loop15,_ret2;return regeneratorRuntime.wrap(function _callee138$(_context138){while(1){switch(_context138.prev=_context138.next){case 0:if(!(logs!=null)){_context138.next=19;break;}_iterator34=_createForOfIteratorHelper(this.params['metrics']);_context138.prev=2;_loop15=function _loop15(){var key=_step34.value;if(_this143.totals[key]==null){return\"continue\";}if(typeof _this143.totals[key]==='number'){logs[key]=_this143.totals[key]/_this143.seen;}else{Object(dist[\"tidy\"])(function(){var log=Object(dist[\"mul\"])(Object(dist[\"div\"])(1,_this143.seen),_this143.totals[key]);logs[key]=log;_this143.totals[key].dispose();Object(dist[\"keep\"])(logs[key]);});}};_iterator34.s();case 5:if((_step34=_iterator34.n()).done){_context138.next=11;break;}_ret2=_loop15();if(!(_ret2===\"continue\")){_context138.next=9;break;}return _context138.abrupt(\"continue\",9);case 9:_context138.next=5;break;case 11:_context138.next=16;break;case 13:_context138.prev=13;_context138.t0=_context138[\"catch\"](2);_iterator34.e(_context138.t0);case 16:_context138.prev=16;_iterator34.f();return _context138.finish(16);case 19:case\"end\":return _context138.stop();}}},_callee138,this,[[2,13,16,19]]);}));function onEpochEnd(_x137,_x138){return _onEpochEnd3.apply(this,arguments);}return onEpochEnd;}()}]);return base_callbacks_BaseLogger;}(BaseCallback);/**\r\n * Callback that records events into a `History` object. This callback is\r\n * automatically applied to every TF.js Layers model. The `History` object\r\n * gets returned by the `fit` method of models.\r\n */var History=/*#__PURE__*/function(_BaseCallback2){_inherits(History,_BaseCallback2);var _super65=_createSuper(History);function History(){_classCallCheck2(this,History);return _super65.apply(this,arguments);}_createClass(History,[{key:\"onTrainBegin\",value:function(){var _onTrainBegin3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee139(logs){return regeneratorRuntime.wrap(function _callee139$(_context139){while(1){switch(_context139.prev=_context139.next){case 0:this.epoch=[];this.history={};case 2:case\"end\":return _context139.stop();}}},_callee139,this);}));function onTrainBegin(_x139){return _onTrainBegin3.apply(this,arguments);}return onTrainBegin;}()},{key:\"onEpochEnd\",value:function(){var _onEpochEnd4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee140(epoch,logs){var key;return regeneratorRuntime.wrap(function _callee140$(_context140){while(1){switch(_context140.prev=_context140.next){case 0:if(logs==null){logs={};}this.epoch.push(epoch);for(key in logs){if(this.history[key]==null){this.history[key]=[];}this.history[key].push(logs[key]);}case 3:case\"end\":return _context140.stop();}}},_callee140,this);}));function onEpochEnd(_x140,_x141){return _onEpochEnd4.apply(this,arguments);}return onEpochEnd;}()/**\r\n     * Await the values of all losses and metrics.\r\n     */},{key:\"syncData\",value:function(){var _syncData=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee141(){var promises,keys,indices,key,valueArray,i,valueScalar,values,_n3,tensorToDispose;return regeneratorRuntime.wrap(function _callee141$(_context141){while(1){switch(_context141.prev=_context141.next){case 0:promises=[];keys=[];indices=[];for(key in this.history){valueArray=this.history[key];for(i=0;i<valueArray.length;++i){if(typeof valueArray[i]!=='number'){valueScalar=valueArray[i];promises.push(valueScalar.data());keys.push(key);indices.push(i);}}}_context141.next=6;return Promise.all(promises);case 6:values=_context141.sent;for(_n3=0;_n3<values.length;++_n3){tensorToDispose=this.history[keys[_n3]][indices[_n3]];tensorToDispose.dispose();this.history[keys[_n3]][indices[_n3]]=values[_n3][0];}case 8:case\"end\":return _context141.stop();}}},_callee141,this);}));function syncData(){return _syncData.apply(this,arguments);}return syncData;}()}]);return History;}(BaseCallback);/**\r\n * Custom callback for training.\r\n */var base_callbacks_CustomCallback=/*#__PURE__*/function(_BaseCallback3){_inherits(base_callbacks_CustomCallback,_BaseCallback3);var _super66=_createSuper(base_callbacks_CustomCallback);function base_callbacks_CustomCallback(args,yieldEvery){var _this144;_classCallCheck2(this,base_callbacks_CustomCallback);_this144=_super66.call(this);_this144.currentEpoch=0;_this144.yieldEvery=yieldEvery||'auto';if(_this144.yieldEvery==='auto'){_this144.yieldEvery=DEFAULT_YIELD_EVERY_MS;}if(_this144.yieldEvery==='never'&&args.onYield!=null){throw new Error('yieldEvery is `never` but you provided an `onYield` callback. '+'Either change `yieldEvery` or remove the callback');}if(dist[\"util\"].isNumber(_this144.yieldEvery)){// Decorate `maybeWait` so it will be called at most once every\n// `yieldEvery` ms.\n_this144.maybeWait=debounce(_this144.maybeWait.bind(_assertThisInitialized(_this144)),_this144.yieldEvery);}_this144.trainBegin=args.onTrainBegin;_this144.trainEnd=args.onTrainEnd;_this144.epochBegin=args.onEpochBegin;_this144.epochEnd=args.onEpochEnd;_this144.batchBegin=args.onBatchBegin;_this144.batchEnd=args.onBatchEnd;_this144.yield=args.onYield;return _this144;}_createClass(base_callbacks_CustomCallback,[{key:\"maybeWait\",value:function(){var _maybeWait=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee142(epoch,batch,logs){var ps;return regeneratorRuntime.wrap(function _callee142$(_context142){while(1){switch(_context142.prev=_context142.next){case 0:ps=[];if(!(this.yield!=null)){_context142.next=5;break;}_context142.next=4;return resolveScalarsInLogs(logs);case 4:ps.push(this.yield(epoch,batch,logs));case 5:ps.push(Object(dist[\"nextFrame\"])());_context142.next=8;return Promise.all(ps);case 8:case\"end\":return _context142.stop();}}},_callee142,this);}));function maybeWait(_x142,_x143,_x144){return _maybeWait.apply(this,arguments);}return maybeWait;}()},{key:\"onEpochBegin\",value:function(){var _onEpochBegin4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee143(epoch,logs){return regeneratorRuntime.wrap(function _callee143$(_context143){while(1){switch(_context143.prev=_context143.next){case 0:this.currentEpoch=epoch;if(!(this.epochBegin!=null)){_context143.next=6;break;}_context143.next=4;return resolveScalarsInLogs(logs);case 4:_context143.next=6;return this.epochBegin(epoch,logs);case 6:case\"end\":return _context143.stop();}}},_callee143,this);}));function onEpochBegin(_x145,_x146){return _onEpochBegin4.apply(this,arguments);}return onEpochBegin;}()},{key:\"onEpochEnd\",value:function(){var _onEpochEnd5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee144(epoch,logs){var ps;return regeneratorRuntime.wrap(function _callee144$(_context144){while(1){switch(_context144.prev=_context144.next){case 0:ps=[];if(!(this.epochEnd!=null)){_context144.next=5;break;}_context144.next=4;return resolveScalarsInLogs(logs);case 4:ps.push(this.epochEnd(epoch,logs));case 5:if(this.yieldEvery==='epoch'){ps.push(Object(dist[\"nextFrame\"])());}_context144.next=8;return Promise.all(ps);case 8:case\"end\":return _context144.stop();}}},_callee144,this);}));function onEpochEnd(_x147,_x148){return _onEpochEnd5.apply(this,arguments);}return onEpochEnd;}()},{key:\"onBatchBegin\",value:function(){var _onBatchBegin3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee145(batch,logs){return regeneratorRuntime.wrap(function _callee145$(_context145){while(1){switch(_context145.prev=_context145.next){case 0:if(!(this.batchBegin!=null)){_context145.next=5;break;}_context145.next=3;return resolveScalarsInLogs(logs);case 3:_context145.next=5;return this.batchBegin(batch,logs);case 5:case\"end\":return _context145.stop();}}},_callee145,this);}));function onBatchBegin(_x149,_x150){return _onBatchBegin3.apply(this,arguments);}return onBatchBegin;}()},{key:\"onBatchEnd\",value:function(){var _onBatchEnd4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee146(batch,logs){var ps;return regeneratorRuntime.wrap(function _callee146$(_context146){while(1){switch(_context146.prev=_context146.next){case 0:ps=[];if(!(this.batchEnd!=null)){_context146.next=5;break;}_context146.next=4;return resolveScalarsInLogs(logs);case 4:ps.push(this.batchEnd(batch,logs));case 5:if(this.yieldEvery==='batch'){ps.push(Object(dist[\"nextFrame\"])());}else if(dist[\"util\"].isNumber(this.yieldEvery)){ps.push(this.maybeWait(this.currentEpoch,batch,logs));}_context146.next=8;return Promise.all(ps);case 8:case\"end\":return _context146.stop();}}},_callee146,this);}));function onBatchEnd(_x151,_x152){return _onBatchEnd4.apply(this,arguments);}return onBatchEnd;}()},{key:\"onTrainBegin\",value:function(){var _onTrainBegin4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee147(logs){return regeneratorRuntime.wrap(function _callee147$(_context147){while(1){switch(_context147.prev=_context147.next){case 0:if(!(this.trainBegin!=null)){_context147.next=5;break;}_context147.next=3;return resolveScalarsInLogs(logs);case 3:_context147.next=5;return this.trainBegin(logs);case 5:case\"end\":return _context147.stop();}}},_callee147,this);}));function onTrainBegin(_x153){return _onTrainBegin4.apply(this,arguments);}return onTrainBegin;}()},{key:\"onTrainEnd\",value:function(){var _onTrainEnd3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee148(logs){return regeneratorRuntime.wrap(function _callee148$(_context148){while(1){switch(_context148.prev=_context148.next){case 0:if(!(this.trainEnd!=null)){_context148.next=5;break;}_context148.next=3;return resolveScalarsInLogs(logs);case 3:_context148.next=5;return this.trainEnd(logs);case 5:case\"end\":return _context148.stop();}}},_callee148,this);}));function onTrainEnd(_x154){return _onTrainEnd3.apply(this,arguments);}return onTrainEnd;}()}]);return base_callbacks_CustomCallback;}(BaseCallback);/**\r\n * Standardize callbacks or configurations of them to an Array of callbacks.\r\n */function standardizeCallbacks(callbacks,yieldEvery){if(callbacks==null){callbacks={};}if(callbacks instanceof BaseCallback){return[callbacks];}if(Array.isArray(callbacks)&&callbacks[0]instanceof BaseCallback){return callbacks;}// Convert custom callback configs to custom callback objects.\nvar callbackConfigs=toList(callbacks);return callbackConfigs.map(function(callbackConfig){return new base_callbacks_CustomCallback(callbackConfig,yieldEvery);});}/**\r\n * A global registry for callback constructors to be used during\r\n * LayersModel.fit().\r\n */var base_callbacks_CallbackConstructorRegistry=/*#__PURE__*/function(){/**\r\n     * Blocks public access to constructor.\r\n     */function base_callbacks_CallbackConstructorRegistry(){_classCallCheck2(this,base_callbacks_CallbackConstructorRegistry);}/**\r\n     * Register a tf.LayersModel.fit() callback constructor.\r\n     *\r\n     * The registered callback constructor will be used to instantiate\r\n     * callbacks for every tf.LayersModel.fit() call afterwards.\r\n     *\r\n     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\r\n     *   is to be reigstered.\r\n     * @param callbackConstructor A no-arg constructor for `tf.Callback`.\r\n     * @throws Error, if the same callbackConstructor has been registered before,\r\n     *   either at the same or a different `verbosityLevel`.\r\n     */_createClass(base_callbacks_CallbackConstructorRegistry,null,[{key:\"registerCallbackConstructor\",value:function registerCallbackConstructor(verbosityLevel,callbackConstructor){dist[\"util\"].assert(verbosityLevel>=0&&Number.isInteger(verbosityLevel),function(){return\"Verbosity level is expected to be an integer >= 0, \"+\"but got \".concat(verbosityLevel);});base_callbacks_CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);if(base_callbacks_CallbackConstructorRegistry.constructors[verbosityLevel]==null){base_callbacks_CallbackConstructorRegistry.constructors[verbosityLevel]=[];}base_callbacks_CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);}},{key:\"checkForDuplicate\",value:function checkForDuplicate(callbackConstructor){for(var levelName in base_callbacks_CallbackConstructorRegistry.constructors){var constructors=base_callbacks_CallbackConstructorRegistry.constructors[+levelName];constructors.forEach(function(ctor){if(ctor===callbackConstructor){throw new ValueError('Duplicate callback constructor.');}});}}/**\r\n     * Clear all registered callback constructors.\r\n     */},{key:\"clear\",value:function clear(){base_callbacks_CallbackConstructorRegistry.constructors={};}/**\r\n     * Create callbacks using the registered callback constructors.\r\n     *\r\n     * Given `verbosityLevel`, all constructors registered at that level or above\r\n     * will be called and the instantiated callbacks will be used.\r\n     *\r\n     * @param verbosityLevel: Level of verbosity.\r\n     */},{key:\"createCallbacks\",value:function createCallbacks(verbosityLevel){var constructors=[];for(var levelName in base_callbacks_CallbackConstructorRegistry.constructors){var level=+levelName;if(verbosityLevel>=level){constructors.push.apply(constructors,_toConsumableArray2(base_callbacks_CallbackConstructorRegistry.constructors[level]));}}return constructors.map(function(ctor){return new ctor();});}}]);return base_callbacks_CallbackConstructorRegistry;}();base_callbacks_CallbackConstructorRegistry.constructors={};function configureCallbacks(callbacks,verbose,epochs,initialEpoch,numTrainSamples,stepsPerEpoch,batchSize,doValidation,callbackMetrics){var history=new History();var actualCallbacks=[new base_callbacks_BaseLogger()].concat(_toConsumableArray2(base_callbacks_CallbackConstructorRegistry.createCallbacks(verbose)));if(callbacks!=null){actualCallbacks.push.apply(actualCallbacks,_toConsumableArray2(callbacks));}actualCallbacks.push(history);var callbackList=new CallbackList(actualCallbacks);// TODO(cais): Figure out when this LayersModel instance can have a\n// dynamically\n//   set property called 'callback_model' as in PyKeras.\ncallbackList.setParams({epochs:epochs,initialEpoch:initialEpoch,samples:numTrainSamples,steps:stepsPerEpoch,batchSize:batchSize,verbose:verbose,doValidation:doValidation,metrics:callbackMetrics});return{callbackList:callbackList,history:history};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original Source layers/__init__.py */ /**\r\n * Instantiate a layer from a config dictionary.\r\n * @param config dict of the form {class_name: str, config: dict}\r\n * @param customObjects dict mapping class names (or function names)\r\n *   of custom (non-Keras) objects to class/functions\r\n * @param fastWeightInit Optional flag to use fast weight initialization\r\n *   during deserialization. This is applicable to cases in which\r\n *   the initialization will be immediately overwritten by loaded weight\r\n *   values. Default: `false`.\r\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\r\n */function deserialize(config){var customObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var fastWeightInit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return deserializeKerasObject(config,dist[\"serialization\"].SerializationMap.getMap().classNameMap,customObjects,'layer',fastWeightInit);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/losses.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original Source: losses.py */ /**\r\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\r\n * @param x\r\n * @param axis Axis along which to perform normalization.\r\n */function l2Normalize(x,axis){return Object(dist[\"tidy\"])(function(){if(x.dtype!=='float32'){x=x.asType('float32');}var squareSum=dist[\"sum\"](square(x),axis,true);var epsilonTensor=dist[\"fill\"](squareSum.shape,common_epsilon());var norm=dist[\"sqrt\"](dist[\"maximum\"](squareSum,epsilonTensor));return dist[\"div\"](x,norm);});}function meanSquaredError(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return dist[\"mean\"](square(dist[\"sub\"](yPred,yTrue)),-1);});}function meanAbsoluteError(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return dist[\"mean\"](dist[\"abs\"](dist[\"sub\"](yPred,yTrue)),-1);});}function meanAbsolutePercentageError(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var diff=dist[\"sub\"](yTrue,yPred);var clippedTrue=dist[\"clipByValue\"](dist[\"abs\"](yTrue),common_epsilon(),Number.MAX_VALUE);var absResult=dist[\"abs\"](dist[\"div\"](diff,clippedTrue));return dist[\"mul\"](100,dist[\"mean\"](absResult,-1));});}function meanSquaredLogarithmicError(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var clippedPred=dist[\"clipByValue\"](yPred,common_epsilon(),Number.MAX_VALUE);var firstLog=dist[\"log\"](dist[\"add\"](1,clippedPred));var clippedTrue=dist[\"clipByValue\"](yTrue,common_epsilon(),Number.MAX_VALUE);var secondLog=dist[\"log\"](dist[\"add\"](1,clippedTrue));return dist[\"mean\"](square(dist[\"sub\"](firstLog,secondLog)),-1);});}function squaredHinge(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var maxResult=dist[\"maximum\"](0,dist[\"sub\"](1,dist[\"mul\"](yTrue,yPred)));return dist[\"mean\"](square(maxResult),-1);});}function hinge(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var maxResult=dist[\"maximum\"](0,dist[\"sub\"](1,dist[\"mul\"](yTrue,yPred)));return dist[\"mean\"](maxResult,-1);});}function categoricalHinge(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var pos=dist[\"sum\"](dist[\"mul\"](yTrue,yPred),-1);var neg=dist[\"max\"](dist[\"mul\"](dist[\"sub\"](1,yTrue),yPred),-1);return dist[\"maximum\"](0,dist[\"add\"](1,dist[\"sub\"](neg,pos)));});}/**\r\n * Logarithm of the hyperbolic cosine of the prediction error.\r\n *\r\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\r\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\r\n * like the mean squared error, but will not be so strongly affected by the\r\n * occasional wildly incorrect prediction.\r\n */function logcosh(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var log2=Math.log(2);var predictionDiff=dist[\"sub\"](yPred,yTrue);var logcoshResult=dist[\"sub\"](dist[\"add\"](predictionDiff,dist[\"softplus\"](dist[\"mul\"](-2,predictionDiff))),log2);return dist[\"mean\"](logcoshResult,-1);});}function categoricalCrossentropy(target,output){var fromLogits=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return Object(dist[\"tidy\"])(function(){if(fromLogits){output=dist[\"softmax\"](output);}else{// scale preds so that the class probabilities of each sample sum to 1.\nvar outputSum=dist[\"sum\"](output,output.shape.length-1,true);output=dist[\"div\"](output,outputSum);}output=dist[\"clipByValue\"](output,common_epsilon(),1-common_epsilon());return dist[\"neg\"](dist[\"sum\"](dist[\"mul\"](target.toFloat(),dist[\"log\"](output)),output.shape.length-1));});}/**\r\n * Categorical crossentropy with integer targets.\r\n *\r\n * @param target An integer tensor.\r\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\r\n *  `true`, in which case `output` is expected to be the logits).\r\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\r\n *   a tensor of logits.\r\n */function sparseCategoricalCrossentropy(target,output){var fromLogits=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return Object(dist[\"tidy\"])(function(){var flatTarget=dist[\"floor\"](flatten(target)).toInt();output=dist[\"clipByValue\"](output,common_epsilon(),1-common_epsilon());var outputShape=output.shape;var oneHotTarget=dist[\"oneHot\"](flatTarget,outputShape[outputShape.length-1]).reshape(outputShape);return categoricalCrossentropy(oneHotTarget,output,fromLogits);});}/**\r\n * From TensorFlow's implementation in nn_impl.py:\r\n *\r\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\r\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\r\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\r\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\r\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\r\n *    = (1 - z) * x + log(1 + exp(-x))\r\n *    = x - x * z + log(1 + exp(-x))\r\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\r\n *      x - x * z + log(1 + exp(-x))\r\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\r\n *    = - x * z + log(1 + exp(x))\r\n * Hence, to ensure stability and avoid overflow, the implementation uses this\r\n * equivalent formulation\r\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\r\n *\r\n * @param labels The labels.\r\n * @param logits The logits.\r\n */function sigmoidCrossEntropyWithLogits(labels,logits){if(!dist[\"util\"].arraysEqual(labels.shape,logits.shape)){throw new ValueError(\"logits and labels must have the same shape, but got shapes \"+\"\".concat(JSON.stringify(labels.shape),\" and \").concat(JSON.stringify(logits.shape)));}return Object(dist[\"tidy\"])(function(){// The logistic loss formula from above is\n//   x - x * z + log(1 + exp(-x))\n// For x < 0, a more numerically stable formula is\n//   -x * z + log(1 + exp(x))\n// Note that these two expressions can be combined into the following:\n//   max(x, 0) - x * z + log(1 + exp(-abs(x)))\nvar reluLogits=logits.relu();var negAbsLogits=logits.abs().neg();return reluLogits.sub(logits.mul(labels)).add(negAbsLogits.exp().log1p());});}function binaryCrossentropy(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var y;y=dist[\"clipByValue\"](yPred,common_epsilon(),1-common_epsilon());y=dist[\"log\"](dist[\"div\"](y,dist[\"sub\"](1,y)));return dist[\"mean\"](sigmoidCrossEntropyWithLogits(yTrue,y),-1);});}function kullbackLeiblerDivergence(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var clippedTrue=dist[\"clipByValue\"](yTrue,common_epsilon(),1);var clippedPred=dist[\"clipByValue\"](yPred,common_epsilon(),1);return dist[\"sum\"](dist[\"mul\"](yTrue,dist[\"log\"](dist[\"div\"](clippedTrue,clippedPred))),-1);});}function poisson(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var logPred=dist[\"log\"](dist[\"add\"](common_epsilon(),yPred));return dist[\"mean\"](dist[\"sub\"](yPred,dist[\"mul\"](yTrue,logPred)),-1);});}function cosineProximity(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var trueNormalized=l2Normalize(yTrue,-1);var predNormalized=l2Normalize(yPred,-1);var trueXPred=dist[\"mul\"](trueNormalized,predNormalized);return dist[\"neg\"](dist[\"sum\"](trueXPred,-1));});}var mse=meanSquaredError;var MSE=meanSquaredError;var mae=meanAbsoluteError;var MAE=meanAbsoluteError;var mape=meanAbsolutePercentageError;var MAPE=meanAbsolutePercentageError;var msle=meanSquaredLogarithmicError;var MSLE=meanSquaredLogarithmicError;var kld=kullbackLeiblerDivergence;var KLD=kullbackLeiblerDivergence;var cosine=cosineProximity;// TODO(michaelterry): Add deserialize() function.\nvar lossesMap={meanSquaredError:meanSquaredError,meanAbsoluteError:meanAbsoluteError,meanAbsolutePercentageError:meanAbsolutePercentageError,meanSquaredLogarithmicError:meanSquaredLogarithmicError,squaredHinge:squaredHinge,hinge:hinge,categoricalHinge:categoricalHinge,logcosh:logcosh,categoricalCrossentropy:categoricalCrossentropy,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy,binaryCrossentropy:binaryCrossentropy,kullbackLeiblerDivergence:kullbackLeiblerDivergence,poisson:poisson,cosineProximity:cosineProximity};// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nfunction get(identifierOrFn){if(typeof identifierOrFn==='string'){if(identifierOrFn in lossesMap){return lossesMap[identifierOrFn];}var errMsg=\"Unknown loss \".concat(identifierOrFn);if(identifierOrFn.toLowerCase().includes('softmaxcrossentropy')){errMsg=\"Unknown loss \".concat(identifierOrFn,\". \")+'Use \"categoricalCrossentropy\" as the string name for '+'tf.losses.softmaxCrossEntropy';}throw new ValueError(errMsg);}else{return identifierOrFn;}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/metrics.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Built-in metrics.\r\n */function binaryAccuracy(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var threshold=dist[\"mul\"](.5,dist[\"onesLike\"](yPred));var yPredThresholded=cast(dist[\"greater\"](yPred,threshold),yTrue.dtype);return dist[\"mean\"](dist[\"equal\"](yTrue,yPredThresholded),-1);});}function categoricalAccuracy(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return cast(dist[\"equal\"](dist[\"argMax\"](yTrue,-1),dist[\"argMax\"](yPred,-1)),'float32');});}function truePositives(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return dist[\"logicalAnd\"](yTrue.equal(1),yPred.equal(1)).sum().cast('float32');});}function falseNegatives(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return dist[\"logicalAnd\"](yTrue.equal(1),yPred.equal(0)).sum().cast('float32');});}function falsePositives(yTrue,yPred){return Object(dist[\"tidy\"])(function(){return dist[\"logicalAnd\"](yTrue.equal(0),yPred.equal(1)).sum().cast('float32');});}function precision(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var tp=truePositives(yTrue,yPred);var fp=falsePositives(yTrue,yPred);var denominator=tp.add(fp);return dist[\"where\"](dist[\"greater\"](denominator,0),tp.div(denominator),0).cast('float32');});}function recall(yTrue,yPred){return Object(dist[\"tidy\"])(function(){var tp=truePositives(yTrue,yPred);var fn=falseNegatives(yTrue,yPred);var denominator=tp.add(fn);return dist[\"where\"](dist[\"greater\"](denominator,0),tp.div(denominator),0).cast('float32');});}function metrics_binaryCrossentropy(yTrue,yPred){return binaryCrossentropy(yTrue,yPred);}function sparseCategoricalAccuracy(yTrue,yPred){if(yTrue.rank===yPred.rank){yTrue=yTrue.squeeze([yTrue.rank-1]);}yPred=yPred.argMax(-1);if(yPred.dtype!==yTrue.dtype){yPred=yPred.asType(yTrue.dtype);}return dist[\"equal\"](yTrue,yPred).asType('float32');}function topKCategoricalAccuracy(yTrue,yPred){throw new NotImplementedError();}function sparseTopKCategoricalAccuracy(yTrue,yPred){throw new NotImplementedError();}// Aliases.\nvar metrics_mse=meanSquaredError;var metrics_MSE=meanSquaredError;var metrics_mae=meanAbsoluteError;var metrics_MAE=meanAbsoluteError;var metrics_mape=meanAbsolutePercentageError;var metrics_MAPE=meanAbsolutePercentageError;var metrics_categoricalCrossentropy=categoricalCrossentropy;var metrics_cosine=cosineProximity;var metrics_sparseCategoricalCrossentropy=sparseCategoricalCrossentropy;// TODO(cais, nielsene): Add serialize().\nvar metricsMap={binaryAccuracy:binaryAccuracy,categoricalAccuracy:categoricalAccuracy,precision:precision,categoricalCrossentropy:metrics_categoricalCrossentropy,sparseCategoricalCrossentropy:metrics_sparseCategoricalCrossentropy,mse:metrics_mse,MSE:metrics_MSE,mae:metrics_mae,MAE:metrics_MAE,mape:metrics_mape,MAPE:metrics_MAPE,cosine:metrics_cosine};function metrics_get(identifier){if(typeof identifier==='string'&&identifier in metricsMap){return metricsMap[identifier];}else if(typeof identifier!=='string'&&identifier!=null){return identifier;}else{throw new ValueError(\"Unknown metric \".concat(identifier));}}/**\r\n * Get the shortcut function name.\r\n *\r\n * If the fn name is a string,\r\n *   directly return the string name.\r\n * If the function is included in metricsMap or lossesMap,\r\n *   return key of the map.\r\n *   - If the function relative to multiple keys,\r\n *     return the first found key as the function name.\r\n *   - If the function exists in both lossesMap and metricsMap,\r\n *     search lossesMap first.\r\n * If the function is not included in metricsMap or lossesMap,\r\n *   return the function name.\r\n *\r\n * @param fn loss function, metric function, or short cut name.\r\n * @returns Loss or Metric name in string.\r\n */function getLossOrMetricName(fn){assert(fn!==null,\"Unknown LossOrMetricFn \".concat(fn));if(typeof fn==='string'){return fn;}else{var fnName;for(var _i56=0,_Object$keys5=Object.keys(lossesMap);_i56<_Object$keys5.length;_i56++){var key=_Object$keys5[_i56];if(lossesMap[key]===fn){fnName=key;break;}}if(fnName!==undefined){return fnName;}for(var _i57=0,_Object$keys6=Object.keys(metricsMap);_i57<_Object$keys6.length;_i57++){var _key9=_Object$keys6[_i57];if(metricsMap[_key9]===fn){fnName=_key9;break;}}if(fnName!==undefined){return fnName;}return fn.name;}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Optimizers.\r\n */ // Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nfunction getOptimizer(identifier){var optimizerMap={'Adagrad':function Adagrad(){return dist[\"train\"].adagrad(0.01);},'Adadelta':function Adadelta(){return dist[\"train\"].adadelta(1,0.95,common_epsilon());},'Adam':function Adam(){return dist[\"train\"].adam(0.001,0.9,0.999,common_epsilon());},'Adamax':function Adamax(){return dist[\"train\"].adamax(0.002,0.9,0.999,common_epsilon(),0);},'RMSProp':function RMSProp(){return dist[\"train\"].rmsprop(0.001,0.9,0,common_epsilon());},'SGD':function SGD(){return dist[\"train\"].sgd(0.01);}};optimizerMap['adagrad']=optimizerMap['Adagrad'];optimizerMap['adadelta']=optimizerMap['Adadelta'];optimizerMap['adam']=optimizerMap['Adam'];optimizerMap['adamax']=optimizerMap['Adamax'];optimizerMap['rmsprop']=optimizerMap['RMSProp'];optimizerMap['sgd']=optimizerMap['SGD'];if(identifier in optimizerMap){return optimizerMap[identifier]();}throw new ValueError(\"Unknown Optimizer \".concat(identifier));}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/user_defined_metadata.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /** Utility functions related to user-defined metadata. */ // Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nvar MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH=1*1024*1024;/**\r\n * Check validity of user-defined metadata.\r\n *\r\n * @param userDefinedMetadata\r\n * @param modelName Name of the model that the user-defined metadata belongs to.\r\n *   Used during construction of error messages.\r\n * @param checkSize Whether to check the size of the metadata is under\r\n *   recommended limit. Default: `false`. If `true`, will try stringify the\r\n *   JSON object and print a console warning if the serialzied size is above the\r\n *   limit.\r\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\r\n */function checkUserDefinedMetadata(userDefinedMetadata,modelName){var checkSize=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(userDefinedMetadata==null||_typeof2(userDefinedMetadata)!=='object'||Object.getPrototypeOf(userDefinedMetadata)!==Object.prototype||!plainObjectCheck(userDefinedMetadata)){throw new Error('User-defined metadata is expected to be a JSON object, but is not.');}if(checkSize){var out=JSON.stringify(userDefinedMetadata);if(out.length>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH){console.warn(\"User-defined metadata of model \\\"\".concat(modelName,\"\\\" is too large in \")+\"size (length=\".concat(out.length,\" when serialized). It is not \")+\"recommended to store such large objects in user-defined metadata. \"+\"Please make sure its serialized length is <= \"+\"\".concat(MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH,\".\"));}}}/**\r\n * Check if an input is plain JSON object or any valid subfield of it.\r\n *\r\n * @param x The input to be checked.\r\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\r\n *   cases of arrays and primitives.\r\n * @return Returns `true` if and only if `x` is a plain JSON object,\r\n *   a JSON-valid primitive including string, number, boolean and null,\r\n *   or an array of the said types.\r\n */ // tslint:disable-next-line:no-any\nfunction plainObjectCheck(x){if(x===null){// Note: typeof `null` is 'object', and `null` is valid in JSON.\nreturn true;}else if(_typeof2(x)==='object'){if(Object.getPrototypeOf(x)===Object.prototype){// `x` is a JavaScript object and its prototype is Object.\nvar keys=Object.keys(x);for(var _i58=0,_keys=keys;_i58<_keys.length;_i58++){var key=_keys[_i58];if(typeof key!=='string'){// JSON keys must be strings.\nreturn false;}if(!plainObjectCheck(x[key])){// Recursive call.\nreturn false;}}return true;}else{// `x` is a JavaScript object but its prototype is not Object.\nif(Array.isArray(x)){// `x` is a JavaScript array.\nvar _iterator35=_createForOfIteratorHelper(x),_step35;try{for(_iterator35.s();!(_step35=_iterator35.n()).done;){var item=_step35.value;if(!plainObjectCheck(item)){// Recursive call.\nreturn false;}}}catch(err){_iterator35.e(err);}finally{_iterator35.f();}return true;}else{// `x` is a JavaScript object and its prototype is not Object,\n// and it's not an Array. I.e., it's a complex object such as\n// `Error` and `Date`.\nreturn false;}}}else{// `x` is not a JavaScript object or `null`.\nvar xType=_typeof2(x);return xType==='string'||xType==='number'||xType==='boolean';}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/layer_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Print the summary of a LayersModel object.\r\n *\r\n * @param model tf.LayersModel instance.\r\n * @param lineLength Total length of printed lines. Set this to adapt to the\r\n *   display to different terminal or console sizes.\r\n * @param positions Relative or absolute positions of log elements in each\r\n *   line. Each number corresponds to right-most (i.e., ending) position of a\r\n *   column.\r\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\r\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\r\n * @param printFn Print function to use.\r\n *   It will be called on each line of the summary. You can provide a custom\r\n *   function in order to capture the string summary. Defaults to `console.log`.\r\n */function printSummary(model,lineLength,positions){var printFn=arguments.length>3&&arguments[3]!==undefined?arguments[3]:console.log;var sequentialLike=isModelSequentialLike(model);// Header names for different log elements.\nvar toDisplay=['Layer (type)','Output shape','Param #'];if(sequentialLike){lineLength=lineLength||65;positions=positions||[0.45,0.85,1];}else{lineLength=lineLength||98;positions=positions||[0.33,0.55,0.67,1];// Header names for different log elements.\n}if(positions[positions.length-1]<=1){// `positions` is relative. Convert it to absolute positioning.\npositions=positions.map(function(p){return Math.floor(lineLength*p);});}var relevantNodes;if(!sequentialLike){toDisplay.push('Receives inputs');relevantNodes=[];for(var depth in model.nodesByDepth){var _relevantNodes;(_relevantNodes=relevantNodes).push.apply(_relevantNodes,_toConsumableArray2(model.nodesByDepth[depth]));}}printFn('_'.repeat(lineLength));printRow(toDisplay,positions,printFn);printFn('='.repeat(lineLength));var layers=model.layers;for(var i=0;i<layers.length;++i){if(sequentialLike){printLayerSummary(layers[i],positions,printFn);}else{printLayerSummaryWithConnections(layers[i],positions,relevantNodes,printFn);}printFn((i===layers.length-1?'=':'_').repeat(lineLength));}// tslint:disable-next-line:no-any\nmodel.checkTrainableWeightsConsistency();var trainableCount=countTrainableParams(model);var nonTrainableCount=countParamsInWeights(model.nonTrainableWeights);printFn(\"Total params: \".concat(trainableCount+nonTrainableCount));printFn(\"Trainable params: \".concat(trainableCount));printFn(\"Non-trainable params: \".concat(nonTrainableCount));printFn('_'.repeat(lineLength));}function countTrainableParams(model){var trainableCount;// tslint:disable:no-any\nif(model.collectedTrainableWeights!=null){trainableCount=countParamsInWeights(model.collectedTrainableWeights);}else{trainableCount=countParamsInWeights(model.trainableWeights);}// tslint:enable:no-any\nreturn trainableCount;}function isModelSequentialLike(model){var sequentialLike=true;var nodesByDepth=[];var nodes=[];for(var depth in model.nodesByDepth){nodesByDepth.push(model.nodesByDepth[depth]);}for(var _i59=0,_nodesByDepth=nodesByDepth;_i59<_nodesByDepth.length;_i59++){var depthNodes=_nodesByDepth[_i59];if(depthNodes.length>1||depthNodes.length===1&&depthNodes[0].inboundLayers.length>1){sequentialLike=false;break;}nodes.push.apply(nodes,_toConsumableArray2(depthNodes));}if(sequentialLike){// Search for shared layers.\nvar _iterator36=_createForOfIteratorHelper(model.layers),_step36;try{for(_iterator36.s();!(_step36=_iterator36.n()).done;){var layer=_step36.value;var flag=false;var _iterator37=_createForOfIteratorHelper(layer.inboundNodes),_step37;try{for(_iterator37.s();!(_step37=_iterator37.n()).done;){var node=_step37.value;if(nodes.indexOf(node)!==-1){if(flag){sequentialLike=false;break;}else{flag=true;}}}}catch(err){_iterator37.e(err);}finally{_iterator37.f();}if(!sequentialLike){break;}}}catch(err){_iterator36.e(err);}finally{_iterator36.f();}}return sequentialLike;}function printRow(fields,positions){var printFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:console.log;var line='';for(var i=0;i<fields.length;++i){if(i>0){line=line.slice(0,line.length-1)+' ';}line+=fields[i];line=line.slice(0,positions[i]);line+=' '.repeat(positions[i]-line.length);}printFn(line);}/**\r\n * Prints a summary for a single Layer, without connectivity information.\r\n *\r\n * @param layer: Layer instance to print.\r\n */function printLayerSummary(layer,positions,// tslint:disable-next-line:no-any\nprintFn){var outputShape;try{outputShape=JSON.stringify(layer.outputShape);}catch(err){outputShape='multiple';}var name=layer.name;var className=layer.getClassName();var fields=[\"\".concat(name,\" (\").concat(className,\")\"),outputShape,layer.countParams().toString()];printRow(fields,positions,printFn);}/**\r\n * Prints a summary for a single Layer, with connectivity information.\r\n */function printLayerSummaryWithConnections(layer,positions,relevantNodes,// tslint:disable-next-line:no-any\nprintFn){var outputShape;try{outputShape=JSON.stringify(layer.outputShape);}catch(err){outputShape='multiple';}var connections=[];var _iterator38=_createForOfIteratorHelper(layer.inboundNodes),_step38;try{for(_iterator38.s();!(_step38=_iterator38.n()).done;){var node=_step38.value;if(relevantNodes!=null&&relevantNodes.length>0&&relevantNodes.indexOf(node)===-1){continue;}for(var _i60=0;_i60<node.inboundLayers.length;++_i60){var inboundLayer=node.inboundLayers[_i60].name;var inboundLayerIndex=node.nodeIndices[_i60];var inboundTensorIndex=node.tensorIndices[_i60];connections.push(\"\".concat(inboundLayer,\"[\").concat(inboundLayerIndex,\"][\").concat(inboundTensorIndex,\"]\"));}}}catch(err){_iterator38.e(err);}finally{_iterator38.f();}var name=layer.name;var className=layer.getClassName();var firstConnection=connections.length===0?'':connections[0];var fields=[\"\".concat(name,\" (\").concat(className,\")\"),outputShape,layer.countParams().toString(),firstConnection];printRow(fields,positions,printFn);for(var i=1;i<connections.length;++i){printRow(['','','',connections[i]],positions,printFn);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // tslint:enable\n/**\r\n * Test whether a value in an array is the name of a LayersModel or Layer.\r\n * @param key The key name that the value is found under. Note that the key\r\n *   may not be at the level immediately above the value, if the value is in a\r\n *   nested array.\r\n * @param index Index of the value in the Array that it is found in.\r\n * @param value The value object.\r\n * @returns A boolean indicating whether value is a name.\r\n */function isArrayItemInputOrOutputName(key,index,value){return(key==='inboundNodes'||key==='outputLayers'||key==='inputLayers')&&index===0&&typeof value==='string';}/**\r\n * Convert a Pythonic config object to TypeScript config object.\r\n * @param pythonicConfig The config object to convert.\r\n * @param key Optional key name of the object being converted.\r\n * @returns Result of the conversion.\r\n */function convertPythonicToTs(pythonicConfig,key){if(pythonicConfig===null){return null;}else if(typeof pythonicConfig==='string'){return toCamelCase(pythonicConfig);}else if(typeof pythonicConfig==='number'||typeof pythonicConfig==='boolean'){return pythonicConfig;}else if(pythonicConfig instanceof Array){var tsArray=[];var arrayLength=pythonicConfig.length;for(var i=0;i<arrayLength;++i){var item=pythonicConfig[i];if(isArrayItemInputOrOutputName(key,i,item)){tsArray.push(item);}else{tsArray.push(convertPythonicToTs(item,key));}}return tsArray;}else{var tsDict={};for(var _i61=0,_Object$keys7=Object.keys(pythonicConfig);_i61<_Object$keys7.length;_i61++){var pythonicKey=_Object$keys7[_i61];var pythonicValue=pythonicConfig[pythonicKey];if(pythonicKey==='name'&&typeof pythonicValue==='string'){// Special case the 'name' key with a string value. Name values, such as\n// the names of LayersModel and Layer instances, should not undergo the\n// camel-case conversion.\ntsDict[pythonicKey]=pythonicValue;}else{var tsKey=toCamelCase(pythonicKey);tsDict[tsKey]=convertPythonicToTs(pythonicValue,tsKey);}}return tsDict;}}/**\r\n * Convert a TypeScript config object to Python config object.\r\n * @param tsConfig The config object to convert.\r\n * @param key Optional key name of the object being converted.\r\n * @returns Result of the conversion.\r\n */function convertTsToPythonic(tsConfig,key){if(tsConfig===null||tsConfig===undefined){return null;}else if(typeof tsConfig==='string'){return toSnakeCase(tsConfig);}else if(typeof tsConfig==='number'||typeof tsConfig==='boolean'){return tsConfig;}else if(tsConfig instanceof Array){var pyArray=[];var arrayLength=tsConfig.length;for(var i=0;i<arrayLength;++i){var item=tsConfig[i];if(isArrayItemInputOrOutputName(key,i,item)){pyArray.push(item);}else{pyArray.push(convertTsToPythonic(item,key));}}return pyArray;}else{var pyDict={};for(var _i62=0,_Object$keys8=Object.keys(tsConfig);_i62<_Object$keys8.length;_i62++){var tsKey=_Object$keys8[_i62];var tsValue=tsConfig[tsKey];var pyKey=toSnakeCase(tsKey);if((tsKey==='name'||tsKey==='className')&&typeof tsValue==='string'){// Special case the 'name' key with a string value. Name values, such as\n// the names of LayersModel and Layer instances, should not undergo the\n// snake-case conversion.\npyDict[pyKey]=tsValue;}else{pyDict[pyKey]=convertTsToPythonic(tsValue,tsKey);}}return pyDict;}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nvar version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Executor: Evaluates SymbolicTensor based on feeds.\r\n */ /**\r\n * Helper function to check the dtype and shape compatibility of a feed value.\r\n */function assertFeedCompatibility(key,val){// Check dtype compatibility.\nif(key.dtype==null||key.dtype===val.dtype){//  a.  If types match, return val tensor as is.\nreturn val;}try{//  b. Attempt to convert to expected type.\nreturn Object(dist[\"cast\"])(val,key.dtype);}catch(err){//  c. If conversion fails, return helpful error.\nthrow new ValueError(\"The dtype of the feed (\".concat(val.dtype,\") can not be cast to the dtype \")+\"of the key '\".concat(key.name,\"' (\").concat(key.dtype,\").\"));}}/**\r\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\r\n * A feed value is a concrete value represented as an `Tensor`.\r\n */var executor_FeedDict=/*#__PURE__*/function(){/**\r\n     * Constructor, optionally does copy-construction.\r\n     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\r\n     *   copy-construction will be performed.\r\n     */function executor_FeedDict(feeds){_classCallCheck2(this,executor_FeedDict);this.id2Value={};this.id2Mask={};this.name2Id={};if(feeds instanceof executor_FeedDict){for(var id in feeds.id2Value){this.id2Value[id]=feeds.id2Value[id];if(id in feeds.id2Mask){this.id2Mask[id]=feeds.id2Mask[id];}}}else{if(feeds==null){return;}var _iterator39=_createForOfIteratorHelper(feeds),_step39;try{for(_iterator39.s();!(_step39=_iterator39.n()).done;){var feed=_step39.value;this.add(feed.key,feed.value);}}catch(err){_iterator39.e(err);}finally{_iterator39.f();}}}/**\r\n     * Add a key-value pair to the FeedDict.\r\n     *\r\n     * @param key The key of the feed.\r\n     * @param value The value of the tensor feed.\r\n     * @param mask The value of the mask feed (optional).\r\n     * @returns This `FeedDict`.\r\n     * @throws ValueError: If the key `SymbolicTensor` already exists in the\r\n     *   `FeedDict`.\r\n     */_createClass(executor_FeedDict,[{key:\"add\",value:function add(key,value,mask){if(this.id2Value[key.id]==null){this.id2Value[key.id]=assertFeedCompatibility(key,value);this.name2Id[key.name]=key.id;if(mask!=null){this.id2Mask[key.id]=mask;}}else{throw new ValueError(\"Duplicate key: name=\".concat(key.name,\", id=\").concat(key.id));}return this;}/**\r\n     * Add a Feed to the FeedDict.\r\n     * @param feed The new `Feed` to add.\r\n     * @returns This `FeedDict`.\r\n     */},{key:\"addFeed\",value:function addFeed(feed){this.add(feed.key,feed.value);}/**\r\n     * Probe whether a key already exists in the FeedDict.\r\n     * @param key\r\n     */},{key:\"hasKey\",value:function hasKey(key){return this.id2Value[key.id]!=null;}/**\r\n     * Get all the SymbolicTensor available in this FeedDict.\r\n     */},{key:\"names\",value:function names(){return Object.keys(this.name2Id);}/**\r\n     * Get the feed value for given key.\r\n     * @param key The SymbolicTensor, or its name (as a string), of which the\r\n     *     value is sought.\r\n     * @returns If `key` exists, the corresponding feed value.\r\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\r\n     */},{key:\"getValue\",value:function getValue(key){if(key instanceof topology_SymbolicTensor){if(this.id2Value[key.id]==null){throw new ValueError(\"Nonexistent key: \".concat(key.name));}else{return this.id2Value[key.id];}}else{var id=this.name2Id[key];if(id==null){throw new ValueError(\"Feed dict has no SymbolicTensor name: \".concat(key));}return this.id2Value[id];}}/**\r\n     * Get the feed mask for given key.\r\n     * @param key The SymbolicTensor, or its name (as a string), of which the\r\n     *     value is sought.\r\n     * @returns If `key` exists, the corresponding feed mask.\r\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\r\n     */},{key:\"getMask\",value:function getMask(key){if(key instanceof topology_SymbolicTensor){if(this.id2Value[key.id]==null){throw new ValueError(\"Nonexistent key: \".concat(key.name));}else{return this.id2Mask[key.id];}}else{var id=this.name2Id[key];if(id==null){throw new ValueError(\"Feed dict has no SymbolicTensor name: \".concat(key));}return this.id2Mask[id];}}/** Dispose all mask Tensors held by this object. */},{key:\"disposeMasks\",value:function disposeMasks(){if(this.id2Mask!=null){Object(dist[\"dispose\"])(this.id2Mask);}}}]);return executor_FeedDict;}();// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nvar cachedSorted={};// Cache for recipient count maps for given execution targets (i.e., fetches).\nvar cachedRecipientCounts={};/**\r\n * Execute a SymbolicTensor by using concrete feed values.\r\n *\r\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\r\n * Layers. The object is backed by a source layer and input\r\n * `SymbolicTensor`s to the source layer. This method evaluates\r\n * the `call()` method of the source layer, using concrete values of the\r\n * inputs obtained from either\r\n * * `feedDict`, if the input key exists in `feedDict`, or else,\r\n * * a recursive call to `execute()` itself.\r\n *\r\n * @param x: The `SymbolicTensor` to execute.\r\n * @param feedDict: The feed values, as base condition of the recursion.\r\n *   execution.\r\n * @param kwargs: Optional keyword arguments.\r\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\r\n *   testing memory footprint of `execute` calls.\r\n * @returns Result of the execution.\r\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\r\n *   encountered during the execution lacks a feed value in `feedDict`.\r\n */function _execute(fetches,feedDict,kwargs,probe){var training=kwargs==null?false:kwargs['training'];var arrayFetches=Array.isArray(fetches);var fetchArray=arrayFetches?fetches:[fetches];var outputNames=fetchArray.map(function(t){return t.name;});var finalOutputs=[];var feedNames=feedDict.names();var _iterator40=_createForOfIteratorHelper(outputNames),_step40;try{for(_iterator40.s();!(_step40=_iterator40.n()).done;){var outputName=_step40.value;if(feedNames.indexOf(outputName)!==-1){finalOutputs.push(feedDict.getValue(outputName));}else{finalOutputs.push(null);}}}catch(err){_iterator40.e(err);}finally{_iterator40.f();}if(probe!=null){// For optional probing of memory footprint during execution.\nprobe.maxNumTensors=-Infinity;probe.minNumTensors=Infinity;}// Check cache.\nvar fetchAndFeedKey=outputNames.join(',')+'|'+feedDict.names().join(',');var sorted;var recipientCounts;if(cachedSorted[fetchAndFeedKey]==null){// Cache doesn't contain the desired combination of fetches. Compute\n// topological sort for the combination for the first time.\nvar out=getTopologicalSortAndRecipientCounts(fetchArray,feedDict);sorted=out.sorted;recipientCounts=out.recipientCounts;// Store results in cache for future use.\ncachedSorted[fetchAndFeedKey]=sorted;cachedRecipientCounts[fetchAndFeedKey]=recipientCounts;}sorted=cachedSorted[fetchAndFeedKey];recipientCounts={};if(!training){Object.assign(recipientCounts,cachedRecipientCounts[fetchAndFeedKey]);}var internalFeedDict=new executor_FeedDict(feedDict);// Start iterative execution on the topologically-sorted SymbolicTensors.\nfor(var i=0;i<sorted.length;++i){if(probe!=null){// For optional probing of memory usage during execution.\nvar numTensors=Object(dist[\"memory\"])().numTensors;if(numTensors>probe.maxNumTensors){probe.maxNumTensors=numTensors;}if(numTensors<probe.minNumTensors){probe.minNumTensors=numTensors;}}var symbolic=sorted[i];var srcLayer=symbolic.sourceLayer;if(srcLayer instanceof input_layer_InputLayer){continue;}var inputValues=[];var inputMasks=[];var tensorsToDispose=[];var maskExists=false;var _iterator41=_createForOfIteratorHelper(symbolic.inputs),_step41;try{for(_iterator41.s();!(_step41=_iterator41.n()).done;){var input=_step41.value;var value=internalFeedDict.getValue(input);var mask=internalFeedDict.getMask(input);inputValues.push(value);inputMasks.push(mask);if(mask!=null){maskExists=true;}if(!training){recipientCounts[input.name]--;if(recipientCounts[input.name]===0&&!feedDict.hasKey(input)&&outputNames.indexOf(input.name)===-1&&!value.isDisposed&&input.sourceLayer.stateful!==true){tensorsToDispose.push(value);}}}}catch(err){_iterator41.e(err);}finally{_iterator41.f();}if(maskExists){kwargs=kwargs||{};kwargs['mask']=inputMasks[0];}var outputTensors=toList(srcLayer.apply(inputValues,kwargs));var outputMask=null;if(srcLayer.supportsMasking){outputMask=srcLayer.computeMask(inputValues,inputMasks);}var layerOutputs=getNodeOutputs(symbolic);var outputSymbolicTensors=Array.isArray(layerOutputs)?layerOutputs:[layerOutputs];for(var _i63=0;_i63<outputSymbolicTensors.length;++_i63){if(!internalFeedDict.hasKey(outputSymbolicTensors[_i63])){internalFeedDict.add(outputSymbolicTensors[_i63],outputTensors[_i63],Array.isArray(outputMask)?outputMask[0]:outputMask);}var index=outputNames.indexOf(outputSymbolicTensors[_i63].name);if(index!==-1){finalOutputs[index]=outputTensors[_i63];}}if(!training){// Clean up Tensors that are no longer needed.\nObject(dist[\"dispose\"])(tensorsToDispose);}}// NOTE(cais): Unlike intermediate tensors, we don't discard mask\n// tensors as we go, because these tensors are sometimes passed over a\n// series of mutliple layers, i.e., not obeying the immediate input\n// relations in the graph. If this becomes a memory-usage concern,\n// we can improve this in the future.\ninternalFeedDict.disposeMasks();return arrayFetches?finalOutputs:finalOutputs[0];}/**\r\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\r\n *\r\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\r\n * merges their results.\r\n *\r\n * @param fetch The array of fetches requested. Must be a non-empty array.\r\n * @param feedDict The dictionary of fed values.\r\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\r\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\r\n */function getTopologicalSortAndRecipientCounts(fetches,feedDict){dist[\"util\"].assert(fetches!=null&&fetches.length>0,function(){return\"Expected at least one fetch, got none\";});var finalSorted=[];var finalRecipientMap={};if(fetches.length===1){// Special-casing 1 fetch for efficiency.\nvar out=getTopologicalSortAndRecipientCountsForOneFetch(fetches[0],feedDict);finalSorted=out.sorted;finalRecipientMap=out.recipientMap;}else{var visited=new Set();var _iterator42=_createForOfIteratorHelper(fetches),_step42;try{for(_iterator42.s();!(_step42=_iterator42.n()).done;){var _fetch2=_step42.value;var _getTopologicalSortAn=getTopologicalSortAndRecipientCountsForOneFetch(_fetch2,feedDict),sorted=_getTopologicalSortAn.sorted,recipientMap=_getTopologicalSortAn.recipientMap;// Merge sorted SymbolicTensor Arrays.\nvar _iterator43=_createForOfIteratorHelper(sorted),_step43;try{for(_iterator43.s();!(_step43=_iterator43.n()).done;){var symbolicTensor=_step43.value;if(!visited.has(symbolicTensor.name)){finalSorted.push(symbolicTensor);visited.add(symbolicTensor.name);}}// Merge recipient maps.\n}catch(err){_iterator43.e(err);}finally{_iterator43.f();}var _loop16=function _loop16(name){if(finalRecipientMap[name]==null){finalRecipientMap[name]=new Set();}recipientMap[name].forEach(function(recipient){return finalRecipientMap[name].add(recipient);});};for(var name in recipientMap){_loop16(name);}}}catch(err){_iterator42.e(err);}finally{_iterator42.f();}}return{sorted:finalSorted,recipientCounts:recipientMap2Counts(finalRecipientMap)};}function recipientMap2Counts(recipientMap){var recipientCounts={};for(var name in recipientMap){recipientCounts[name]=recipientMap[name].size;}return recipientCounts;}/**\r\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\r\n *\r\n * This helper function processes the upstream SymbolicTensors of a single\r\n * fetch.\r\n *\r\n * @param fetch The single fetch requested.\r\n * @param feedDict The dictionary of fed values.\r\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\r\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\r\n */function getTopologicalSortAndRecipientCountsForOneFetch(fetch,feedDict){var visited=new Set();var sorted=[];var recipientMap={};// Put keys of the feedDict into visited first, so they don't have to be\n// walked. This is needed in case where there are feeds for intermediate\n// SymbolicTensors of the graph.\nvar _iterator44=_createForOfIteratorHelper(feedDict.names()),_step44;try{for(_iterator44.s();!(_step44=_iterator44.n()).done;){var key=_step44.value;visited.add(key);}}catch(err){_iterator44.e(err);}finally{_iterator44.f();}var stack=[];var marks=[];// Initial population of stack and marks.\nstack.push(fetch);while(stack.length>0){var top=stack[stack.length-1];if(visited.has(top.name)){stack.pop();continue;}var topIsMarked=marks[marks.length-1]===stack.length-1;if(top.inputs.length===0||topIsMarked){// Input SymbolicTensor or all children have been visited.\nstack.pop();sorted.push(top);visited.add(top.name);if(topIsMarked){marks.pop();}}else{// A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n// been visited yet. Push them onto the stack.\nmarks.push(stack.length-1);var _iterator45=_createForOfIteratorHelper(top.inputs),_step45;try{for(_iterator45.s();!(_step45=_iterator45.n()).done;){var input=_step45.value;// Increment the recipient count. Note that this needs to happen\n// regardless of whether the SymbolicTensor has been visited before.\nif(recipientMap[input.name]==null){recipientMap[input.name]=new Set();}recipientMap[input.name].add(top.name);if(visited.has(input.name)){continue;// Avoid repeated visits to the same SymbolicTensor.\n}stack.push(input);}}catch(err){_iterator45.e(err);}finally{_iterator45.f();}}}return{sorted:sorted,recipientMap:recipientMap};}/**\r\n * Get the symbolic output tensors of the node to which a given fetch belongs.\r\n * @param fetch The fetched symbolic tensor.\r\n * @returns The Array of symbolic tensors output by the node to which `fetch`\r\n *   belongs.\r\n */function getNodeOutputs(fetch){var layerOutputs;if(fetch.sourceLayer.inboundNodes.length===1){layerOutputs=fetch.sourceLayer.output;}else{var nodeIndex=null;for(var i=0;i<fetch.sourceLayer.inboundNodes.length;++i){var _iterator46=_createForOfIteratorHelper(fetch.sourceLayer.inboundNodes[i].outputTensors),_step46;try{for(_iterator46.s();!(_step46=_iterator46.n()).done;){var outputTensor=_step46.value;if(outputTensor.id===fetch.id){nodeIndex=i;break;}}}catch(err){_iterator46.e(err);}finally{_iterator46.f();}}layerOutputs=fetch.sourceLayer.getOutputAt(nodeIndex);}return layerOutputs;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/container.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: keras/engine/topology.py */ /**\r\n * A Container is a directed acyclic graph of layers.\r\n *\r\n * It is the topological form of a \"model\". A LayersModel\r\n * is simply a Container with added training routines.\r\n *\r\n */var container_Container=/*#__PURE__*/function(_topology_Layer2){_inherits(container_Container,_topology_Layer2);var _super67=_createSuper(container_Container);function container_Container(args){var _this145;_classCallCheck2(this,container_Container);// No args passed to super's constructor.\n_this145=_super67.call(this,{});_this145.containerNodes=new Set();_this145.name=args.name;if(_this145.name==null){var prefix=_this145.getClassName().toLowerCase();_this145.name=getUid(prefix);}_this145.supportsMasking=false;_this145.trainable_=true;// TODO(michaelterry): Initialize perInputLosses/Updates here.\n// Container-specific properties.\nif(Array.isArray(args.inputs)){_this145.inputs=args.inputs.slice();}else{_this145.inputs=[args.inputs];}if(Array.isArray(args.outputs)){_this145.outputs=args.outputs.slice();}else{_this145.outputs=[args.outputs];}// Check for redundancy in inputs.\nif(unique(_this145.inputs).length!==_this145.inputs.length){throw new ValueError('The list of inputs passed to the model is '+'redundant. All inputs should only appear once. Found: '+\"\".concat(_this145.inputs.map(function(x){return x.name;})));}// Check for redundancy in outputs.\nif(unique(_this145.outputs).length!==_this145.outputs.length){console.warn('The list of outputs passed to the model is redundant. '+'All outputs should only appear once. Found: '+\"\".concat(_this145.outputs.map(function(x){return x.name;})));}/*\r\n          List of initial layers (1 to 1 mapping with this.inputs, hence the same\r\n          layer might appear twice)\r\n        */_this145.inputLayers=[];_this145.inputLayersNodeIndices=[];_this145.inputLayersTensorIndices=[];/*\r\n          List of layers (1 to 1 mapping with this.outputs, hence the same layer\r\n          might appear twice)\r\n        */_this145.outputLayers=[];_this145.outputLayersNodeIndices=[];_this145.outputLayersTensorIndices=[];/*\r\n          All layers in order of horizontal graph traversal. Entries are unique.\r\n          Includes input and output layers.\r\n        */_this145.layers=[];/*\r\n          References to container layers that were constructed internally. We need\r\n          these to properly dispose of tensors from nested containers.\r\n        */_this145.internalContainerRefs=[];// TODO(michaelterry): Determine if caching still needed with eager\n// backend.\n/*\r\n          This is for performance optimization when calling the Container on new\r\n          inputs. Every time the Container is called on a set on input tensors,\r\n          we compute the output tensors, output masks and output shapes in one pass,\r\n          then cache them here. When one of these outputs is queried later,\r\n          we retrieve it from there instead of recomputing it.\r\n        */ // this.outputTensorCache = {};\n// this.outputShapeCache = {};\n// Build this.outputLayers:\nvar _iterator47=_createForOfIteratorHelper(_this145.outputs),_step47;try{for(_iterator47.s();!(_step47=_iterator47.n()).done;){var x=_step47.value;var _layer3=x.sourceLayer;var nodeIndex=x.nodeIndex;var tensorIndex=x.tensorIndex;_this145.outputLayers.push(_layer3);_this145.outputLayersNodeIndices.push(nodeIndex);_this145.outputLayersTensorIndices.push(tensorIndex);}// TODO(michaelterry): Add output mask cache code.\n// Build this.inputLayers:\n}catch(err){_iterator47.e(err);}finally{_iterator47.f();}var _iterator48=_createForOfIteratorHelper(_this145.inputs),_step48;try{for(_iterator48.s();!(_step48=_iterator48.n()).done;){var _x155=_step48.value;var _layer4=_x155.sourceLayer;var _nodeIndex3=_x155.nodeIndex;var _tensorIndex2=_x155.tensorIndex;/*\r\n              It's supposed to be an input layer, so only one node\r\n              and one tensor output.\r\n            */assert(_nodeIndex3===0,'input layer has >1 nodes');assert(_tensorIndex2===0,'input layer has >1 tensors');_this145.inputLayers.push(_layer4);_this145.inputLayersNodeIndices.push(_nodeIndex3);_this145.inputLayersTensorIndices.push(_tensorIndex2);}// Build this.inputNames and this.outputNames.\n}catch(err){_iterator48.e(err);}finally{_iterator48.f();}_this145.inputNames=[];_this145.outputNames=[];_this145.feedInputShapes=[];_this145.feedInputNames=[];_this145.feedOutputNames=[];for(var i=0;i<_this145.inputLayers.length;i++){var layer=_this145.inputLayers[i];// Check that layer is an InputLayer.\nif(!(layer instanceof input_layer_InputLayer)){throw new TypeError('Input layers to a LayersModel must be InputLayer objects. '+\"Received inputs: \".concat(args.inputs,\". \")+\"Input \".concat(i,\" (0-based) originates \")+\"from layer type \".concat(layer.getClassName(),\".\"));}_this145.inputNames.push(layer.name);_this145.feedInputShapes.push(layer.batchInputShape);_this145.feedInputNames.push(layer.name);}var _iterator49=_createForOfIteratorHelper(_this145.outputLayers),_step49;try{for(_iterator49.s();!(_step49=_iterator49.n()).done;){var _layer5=_step49.value;_this145.outputNames.push(_layer5.name);}}catch(err){_iterator49.e(err);}finally{_iterator49.f();}_this145.internalInputShapes=_this145.inputs.map(function(x){return x.shape;});_this145.internalOutputShapes=_this145.outputs.map(function(x){return x.shape;});/*\r\n          Container_nodes: set of nodes included in the graph (not all nodes\r\n          included in the layers are relevant to the current graph).\r\n        */ // ids of all nodes relevant to the Container:\nvar nodesDepths={};// To recover nodes from their ID.\nvar nodeIDToNode={};var layersDepths={};// To layers from their ID.\nvar layerIDToLayer={};var layerIndices={};var nodesInDecreasingDepth=[];/**\r\n         * Builds a map of the graph of layers.\r\n         *\r\n         * This recursively updates the map `layerIndices`,\r\n         * the list `nodesInDecreasingDepth` and the set `containerNodes`.\r\n         *\r\n         * @param tensor Some tensor in a graph.\r\n         * @param finishedNodes Set of nodes whose subgraphs have been traversed\r\n         *         completely. Useful to prevent duplicated work.\r\n         * @param nodesInProgress Set of nodes that are currently active on the\r\n         *         recursion stack. Useful to detect cycles.\r\n         * @param layer Layer from which `tensor` comes from. If not provided,\r\n         *   will be obtained from tensor.sourceLayer.\r\n         * @param nodeIndex Node index from which `tensor` comes from.\r\n         * @param tensorIndex TensorIndex from which `tensor` comes from.\r\n         *\r\n         * @exception RuntimeError if a cycle is detected.\r\n         */var buildMapOfGraph=function buildMapOfGraph(tensor,finishedNodes,nodesInProgress,layer,nodeIndex,tensorIndex){if(layer==null||nodeIndex==null||tensorIndex==null){layer=tensor.sourceLayer;nodeIndex=tensor.nodeIndex;tensorIndex=tensor.tensorIndex;}var node=layer.inboundNodes[nodeIndex];// Prevent cycles.\nif(nodesInProgress.indexOf(node)!==-1){throw new RuntimeError(\"The tensor \".concat(tensor.name,\" at layer \\\"\").concat(layer.name,\"\\\" \")+'is part of a cycle.');}// Don't repeat work for shared subgraphs\nif(finishedNodes.indexOf(node)!==-1){return;}// Update containerNodes.\n_this145.containerNodes.add(container_Container.nodeKey(layer,nodeIndex));// Store the traversal order for layer sorting.\nif(!(layer.id in layerIndices)){layerIndices[layer.id]=Object.keys(layerIndices).length;}if(nodesInProgress.indexOf(node)===-1){nodesInProgress.push(node);}// Propagate to all previous tensors connected to this node.\nvar numInboundLayers=node.inboundLayers.length;for(var _i64=0;_i64<numInboundLayers;_i64++){var x=node.inputTensors[_i64];var _layer2=node.inboundLayers[_i64];var _nodeIndex2=node.nodeIndices[_i64];var _tensorIndex=node.tensorIndices[_i64];buildMapOfGraph(x,finishedNodes,nodesInProgress,_layer2,_nodeIndex2,_tensorIndex);}finishedNodes.push(node);while(nodesInProgress.indexOf(node)>=0){nodesInProgress.splice(nodesInProgress.indexOf(node),1);}nodesInDecreasingDepth.push(node);};var finishedNodes=[];var nodesInProgress=[];var _iterator50=_createForOfIteratorHelper(_this145.outputs),_step50;try{for(_iterator50.s();!(_step50=_iterator50.n()).done;){var _x156=_step50.value;buildMapOfGraph(_x156,finishedNodes,nodesInProgress);}}catch(err){_iterator50.e(err);}finally{_iterator50.f();}var reversedNodesInDecreasingDepth=nodesInDecreasingDepth.slice().reverse();var _iterator51=_createForOfIteratorHelper(reversedNodesInDecreasingDepth),_step51;try{for(_iterator51.s();!(_step51=_iterator51.n()).done;){var node=_step51.value;nodeIDToNode[node.id]=node;// If the depth is not set, the node has no outbound nodes (depth 0).\nif(!(node.id in nodesDepths)){nodesDepths[node.id]=0;}var _depth2=nodesDepths[node.id];// Update the depth of the corresponding layer\nvar previousDepth=layersDepths[node.outboundLayer.id]==null?0:layersDepths[node.outboundLayer.id];/*\r\n              If we've seen this layer before at a higher depth, we should use that\r\n              depth instead of the node depth.  This is necessary for shared layers\r\n              that have inputs at different depth levels in the graph.\r\n            */_depth2=Math.max(_depth2,previousDepth);layersDepths[node.outboundLayer.id]=_depth2;layerIDToLayer[node.outboundLayer.id]=node.outboundLayer;nodesDepths[node.id]=_depth2;// Update the depth of inbound nodes.\nfor(var _i65=0;_i65<node.inboundLayers.length;_i65++){var inboundLayer=node.inboundLayers[_i65];var _nodeIndex4=node.nodeIndices[_i65];var inboundNode=inboundLayer.inboundNodes[_nodeIndex4];var _previousDepth=nodesDepths[inboundNode.id]==null?0:nodesDepths[inboundNode.id];nodesDepths[inboundNode.id]=Math.max(_depth2+1,_previousDepth);nodeIDToNode[inboundNode.id]=inboundNode;}}// Build a dict {depth: list of nodes with this depth}\n}catch(err){_iterator51.e(err);}finally{_iterator51.f();}var nodesByDepth={};for(var nodeID in nodesDepths){var depth=nodesDepths[nodeID];if(!(depth in nodesByDepth)){nodesByDepth[depth]=[];}nodesByDepth[depth].push(nodeIDToNode[nodeID]);}// Build a dict {depth: list of layers with this depth}\nvar layersByDepth={};for(var layerID in layersDepths){var _depth=layersDepths[layerID];if(!(_depth in layersByDepth)){layersByDepth[_depth]=[];}layersByDepth[_depth].push(layerIDToLayer[layerID]);}// Get sorted list of layer depths.\nvar depthKeys=Object.keys(layersByDepth).map(function(x){return parseInt(x,10);}).sort(reverseNumberCompare);// Set this.layers and this.layersByDepth.\n_this145.layers=[];var _iterator52=_createForOfIteratorHelper(depthKeys),_step52;try{for(_iterator52.s();!(_step52=_iterator52.n()).done;){var _depth3=_step52.value;var layersForDepth=layersByDepth[_depth3];// Container.layers needs to have a deterministic order:\n// here we order them by traversal order.\nlayersForDepth.sort(function(a,b){var aIndex=layerIndices[a.id];var bIndex=layerIndices[b.id];if(aIndex<bIndex){return-1;}if(aIndex>bIndex){return 1;}return 0;});var _iterator55=_createForOfIteratorHelper(layersForDepth),_step55;try{for(_iterator55.s();!(_step55=_iterator55.n()).done;){var _layer6=_step55.value;if(_layer6 instanceof container_Container){_this145.internalContainerRefs.push(_layer6);}_this145.layers.push(_layer6);}}catch(err){_iterator55.e(err);}finally{_iterator55.f();}}}catch(err){_iterator52.e(err);}finally{_iterator52.f();}_this145.layersByDepth=layersByDepth;// Get sorted list of node depths;\ndepthKeys=Object.keys(nodesByDepth).map(function(x){return parseInt(x,10);}).sort(reverseNumberCompare);// Check that all tensors required are computable.\n// computable_tensors: all tensors in the graph\n// that can be computed from the inputs provided.\nvar computableTensors=_this145.inputs.slice();// To provide a better error msg.\nvar layersWithCompleteInput=[];var _iterator53=_createForOfIteratorHelper(depthKeys),_step53;try{for(_iterator53.s();!(_step53=_iterator53.n()).done;){var _depth4=_step53.value;var _iterator56=_createForOfIteratorHelper(nodesByDepth[_depth4]),_step56;try{for(_iterator56.s();!(_step56=_iterator56.n()).done;){var _node3=_step56.value;var _layer7=_node3.outboundLayer;if(_layer7!=null){var _iterator57=_createForOfIteratorHelper(_node3.inputTensors),_step57;try{for(_iterator57.s();!(_step57=_iterator57.n()).done;){var _x157=_step57.value;if(computableTensors.indexOf(_x157)===-1){throw new RuntimeError(\"Graph disconnected: cannot obtain value for tensor \".concat(_x157)+\" at layer \\\"\".concat(_layer7.name,\"\\\". \")+'The following previous layers were accessed without '+\"issue: \".concat(layersWithCompleteInput));}}}catch(err){_iterator57.e(err);}finally{_iterator57.f();}var _iterator58=_createForOfIteratorHelper(_node3.outputTensors),_step58;try{for(_iterator58.s();!(_step58=_iterator58.n()).done;){var _x158=_step58.value;computableTensors.push(_x158);}}catch(err){_iterator58.e(err);}finally{_iterator58.f();}layersWithCompleteInput.push(_layer7.name);}}}catch(err){_iterator56.e(err);}finally{_iterator56.f();}}// Set this.containerNodes and this.nodesByDepth.\n}catch(err){_iterator53.e(err);}finally{_iterator53.f();}_this145.nodesByDepth=nodesByDepth;// Ensure name unicity, which will be crucial for serialization\n// (since serialized nodes refer to layers by their name).\nvar allNames=_this145.layers.map(function(x){return x.name;});var _iterator54=_createForOfIteratorHelper(allNames),_step54;try{var _loop17=function _loop17(){var name=_step54.value;var numOccurrences=allNames.filter(function(x){return x===name;}).length;if(numOccurrences!==1){throw new RuntimeError(\"The name \\\"\".concat(name,\"\\\" is used \").concat(numOccurrences,\" times \")+'in the model. All layer names should be unique. Layer names: '+JSON.stringify(allNames));}};for(_iterator54.s();!(_step54=_iterator54.n()).done;){_loop17();}// Layer parameters.\n// The new container starts with a single inbound node\n// for its inputs, and no outbound nodes.\n// Will be appended to by future calls to apply().\n}catch(err){_iterator54.e(err);}finally{_iterator54.f();}_this145.outboundNodes=[];// Will be appended to below, and by future calls to apply().\n_this145.inboundNodes=[];// Create the node linking internal inputs to internal outputs.\n// (This call has side effects.)\n// tslint:disable-next-line:no-unused-expression\nnew Node({outboundLayer:_assertThisInitialized(_this145),inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:_this145.inputs,outputTensors:_this145.outputs,inputMasks:_this145.inputs.map(function(x){return null;}),outputMasks:_this145.outputs.map(function(x){return null;}),inputShapes:_this145.inputs.map(function(x){return x.shape;}),outputShapes:_this145.outputs.map(function(x){return x.shape;})});_this145.built=true;_this145._refCount=1;// The ref count of a container always start at 1.\nreturn _this145;}_createClass(container_Container,[{key:\"assertNotDisposed\",value:function assertNotDisposed(){if(this._refCount===0){throw new Error(\"Container '\".concat(this.name,\"' is already disposed.\"));}}/**\r\n     * Attempt to dispose a LayersModel's weights.\r\n     *\r\n     * This method decrease the reference count of the LayersModel object by 1.\r\n     *\r\n     * A LayersModel is reference-counted. Its reference count is incremented by 1\r\n     * when it is first constructed and when it is used as a Layer of another\r\n     * LayersModel.\r\n     *\r\n     * If the reference count of a LayersModel becomes 0, the `dispose` method of\r\n     * all its constituent `Layer`s will be called.\r\n     *\r\n     * Note: If the reference count is greater than 0 after the decrement, the\r\n     * `dispose` method of its constituent `Layer`s will *not* be called.\r\n     *\r\n     * After a LayersModel is disposed, it cannot be used in calls such as\r\n     * 'predict`, `evaluate` or `fit` anymore.\r\n     *\r\n     * @returns A DisposeResult Object with the following fields:\r\n     *   - refCountAfterDispose: The reference count of the LayersModel after this\r\n     *     `dispose()` call.\r\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\r\n     *     during this `dispose()` call.\r\n     * @throws {Error} If the layer is not built yet, or if the LayersModel has\r\n     *   already been disposed.\r\n     */},{key:\"dispose\",value:function dispose(){this.assertNotDisposed();var result={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){var _iterator59=_createForOfIteratorHelper(this.layers),_step59;try{for(_iterator59.s();!(_step59=_iterator59.n()).done;){var layer=_step59.value;result.numDisposedVariables+=layer.dispose().numDisposedVariables;}// Call dispose on each internally created container layer again to ensure\n// their refCounts hit zero and their tensors are subsequently deleted.\n}catch(err){_iterator59.e(err);}finally{_iterator59.f();}var _iterator60=_createForOfIteratorHelper(this.internalContainerRefs),_step60;try{for(_iterator60.s();!(_step60=_iterator60.n()).done;){var container=_step60.value;result.numDisposedVariables+=container.dispose().numDisposedVariables;}}catch(err){_iterator60.e(err);}finally{_iterator60.f();}}result.refCountAfterDispose=this._refCount;return result;}},{key:\"trainable\",get:function get(){return this.trainable_;},set:function set(trainable){this.layers.forEach(function(layer){// tslint:disable-next-line:no-any\nlayer._trainableWeights.forEach(function(w){return w.trainable=trainable;});});this.trainable_=trainable;}},{key:\"trainableWeights\",get:function get(){// Porting Note: This check below is to prevent errors where the\n//   _trainableWeights inherited from the parent class (Layer) gets\n//   inadvertently used.\nif(this._trainableWeights.length>0){throw new ValueError('Container instance unexpectedly contains _trainableWeights.'+'The trainable weights of a Container are a union of the '+'trainable weights of its consituent Layers. Its own '+'_trainableWeights must remain an empty Array.');}if(!this.trainable){return[];}var weights=[];var _iterator61=_createForOfIteratorHelper(this.layers),_step61;try{for(_iterator61.s();!(_step61=_iterator61.n()).done;){var layer=_step61.value;weights=weights.concat(layer.trainableWeights);}}catch(err){_iterator61.e(err);}finally{_iterator61.f();}return weights;}},{key:\"nonTrainableWeights\",get:function get(){var weights=[];var _iterator62=_createForOfIteratorHelper(this.layers),_step62;try{for(_iterator62.s();!(_step62=_iterator62.n()).done;){var _layer8=_step62.value;weights.push.apply(weights,_toConsumableArray2(_layer8.nonTrainableWeights));}}catch(err){_iterator62.e(err);}finally{_iterator62.f();}if(!this.trainable){var trainableWeights=[];var _iterator63=_createForOfIteratorHelper(this.layers),_step63;try{for(_iterator63.s();!(_step63=_iterator63.n()).done;){var layer=_step63.value;trainableWeights.push.apply(trainableWeights,_toConsumableArray2(layer.trainableWeights));}}catch(err){_iterator63.e(err);}finally{_iterator63.f();}return trainableWeights.concat(weights);}return weights;}},{key:\"weights\",get:function get(){return this.trainableWeights.concat(this.nonTrainableWeights);}/**\r\n     * Loads all layer weights from a JSON object.\r\n     *\r\n     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\r\n     *   TypeScript. The utility script at `scripts/pykeras.py` offers means\r\n     *   to convert them into JSON strings compatible with this method.\r\n     * Porting Note: TensorFlow.js Layers supports only loading by name currently.\r\n     *\r\n     * @param weights A JSON mapping weight names to weight values as nested\r\n     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\r\n     *   names to `tf.Tensor` objects.\r\n     * @param strict Require that the provided weights exactly match those\r\n     *   required by the container.  Default: `true`.  Passing `false` means that\r\n     *   extra weights and missing weights will be silently ignored.\r\n     */},{key:\"loadWeights\",value:function loadWeights(weights){var strict=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var nameToWeight={};var totalWeightsCount=0;var _iterator64=_createForOfIteratorHelper(this.layers),_step64;try{for(_iterator64.s();!(_step64=_iterator64.n()).done;){var layer=_step64.value;var _iterator65=_createForOfIteratorHelper(layer.weights),_step65;try{for(_iterator65.s();!(_step65=_iterator65.n()).done;){var weight=_step65.value;if(nameToWeight[weight.originalName]!=null){throw new ValueError(\"Duplicate weight name: \".concat(weight.originalName));}nameToWeight[weight.originalName]=weight;totalWeightsCount++;}}catch(err){_iterator65.e(err);}finally{_iterator65.f();}}}catch(err){_iterator64.e(err);}finally{_iterator64.f();}var weightValueTuples=[];for(var name in weights){// TF 2.2.0 added cell name to the weight name in the format of\n// layer_name/cell_name/weight_name, we need to remove\n// the inner cell name.\nvar validatedName=name;if(nameToWeight[name]==null){var tokens=name.split('/');var shortenNameArray=tokens.slice(0,-2).concat([tokens[tokens.length-1]]);validatedName=shortenNameArray.join('/');}if(nameToWeight[validatedName]!=null){weightValueTuples.push([nameToWeight[validatedName],weights[name]]);}else if(strict){throw new ValueError(\"Provided weight data has no target variable: \".concat(name));}delete nameToWeight[validatedName];}if(strict){// Check that all weights are set.\nvar unsetNames=[];for(var _name2 in nameToWeight){unsetNames.push(_name2);}if(unsetNames.length>0){throw new ValueError(\"\".concat(unsetNames.length,\" of \").concat(totalWeightsCount,\" weights are not set: \")+\"\".concat(unsetNames));}}batchSetValue(weightValueTuples);}/**\r\n     * Util shared between different serialization methods.\r\n     * @returns LayersModel config with Keras version information added.\r\n     */},{key:\"updatedConfig\",value:function updatedConfig(){var theConfig=this.getConfig();var modelConfig={};modelConfig['className']=this.getClassName();modelConfig['config']=theConfig;modelConfig['kerasVersion']=\"tfjs-layers \".concat(version);// TODO(nielsene): Replace something like K.backend() once\n// possible.\nmodelConfig['backend']='TensorFlow.js';return modelConfig;}/**\r\n     * Returns a JSON string containing the network configuration.\r\n     *\r\n     * To load a network from a JSON save file, use\r\n     * models.modelFromJSON(jsonString);\r\n     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\r\n     * @param returnString Whether the return value should be stringified\r\n     *    (default: `true`).\r\n     * @returns a JSON string if `returnString` (default), or a JSON object if\r\n     *   `!returnString`.\r\n     */ // tslint:disable-next-line:no-any\n},{key:\"toJSON\",value:function toJSON(unused){var returnString=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var modelConfig=convertTsToPythonic(this.updatedConfig());return returnString?JSON.stringify(modelConfig):modelConfig;}/**\r\n     * Call the model on new inputs.\r\n     *\r\n     * In this case `call` just reapplies all ops in the graph to the new inputs\r\n     * (e.g. build a new computational graph from the provided inputs).\r\n     *\r\n     * @param inputs A tensor or list of tensors.\r\n     * @param mask A mask or list of masks. A mask can be either a tensor or null\r\n     *   (no mask).\r\n     *\r\n     * @return A tensor if there is a single output, or a list of tensors if there\r\n     *   are more than one outputs.\r\n     */},{key:\"call\",value:function call(inputs,kwargs){var _this146=this;return Object(dist[\"tidy\"])(function(){inputs=toList(inputs);var feedDict=new executor_FeedDict();for(var i=0;i<_this146.inputs.length;++i){feedDict.add(_this146.inputs[i],inputs[i]);}return _execute(_this146.outputs,feedDict,kwargs);});}/**\r\n     * Computes an output mask tensor.\r\n     *\r\n     * @param inputs Tensor or list of tensors.\r\n     * @param mask Tensor or list of tensors.\r\n     *\r\n     * @return null or a tensor (or list of tensors, one per output tensor of the\r\n     * layer).\r\n     */},{key:\"computeMask\",value:function computeMask(inputs,mask){var _this147=this;return Object(dist[\"tidy\"])(function(){inputs=toList(inputs);var masks;if(mask==null){masks=pyListRepeat(null,inputs.length);}else{masks=toList(mask);}// TODO(michaelterry): Add support for mask caching.\nreturn _this147.runInternalGraph(inputs,masks)[1];});}/**\r\n     * Computes the output shape of the layer.\r\n     *\r\n     * Assumes that the layer will be built to match that input shape provided.\r\n     *\r\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\r\n     *   (one per output tensor of the layer). Shape tuples can include null for\r\n     *   free dimensions, instead of an integer.\r\n     */},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){var inputShapes=normalizeShapeList(inputShape);if(inputShapes.length!==this.inputLayers.length){throw new ValueError(\"Invalid inputShape argument \".concat(inputShape,\": \")+\"model has \".concat(this.inputLayers.length,\" tensor inputs.\"));}// TODO(michaelterry): Add caching\nvar layersToOutputShapes={};for(var i=0;i<inputShapes.length;i++){var layer=this.inputLayers[i];var _inputShape4=inputShapes[i];// It's an input layer: computeOutputShape is identity,\n// and there is only one node and one tensor output.\nvar shapeKey=layer.name+'_0_0';layersToOutputShapes[shapeKey]=_inputShape4;}var depthKeys=Object.keys(this.nodesByDepth).map(function(x){return parseInt(x,10);}).sort(reverseNumberCompare);// Iterate over nodes, by depth level.\nif(depthKeys.length>1){var _iterator66=_createForOfIteratorHelper(depthKeys),_step66;try{for(_iterator66.s();!(_step66=_iterator66.n()).done;){var depth=_step66.value;var nodes=this.nodesByDepth[depth];var _iterator67=_createForOfIteratorHelper(nodes),_step67;try{for(_iterator67.s();!(_step67=_iterator67.n()).done;){var node=_step67.value;// This is always a single layer, never a list.\nvar _layer9=node.outboundLayer;if(this.inputLayers.map(function(x){return x.id;}).indexOf(_layer9.id)!==-1){// We've already covered the input layers a few lines above.\ncontinue;}// Potentially redundant list, same size of node.inputTensors.\nvar _inputShapes=[];for(var j=0;j<node.inboundLayers.length;j++){var inboundLayer=node.inboundLayers[j];var _nodeIndex5=node.nodeIndices[j];var tensorIndex=node.tensorIndices[j];var _shapeKey=\"\".concat(inboundLayer.name,\"_\").concat(_nodeIndex5,\"_\").concat(tensorIndex);var _inputShape5=layersToOutputShapes[_shapeKey];_inputShapes.push(_inputShape5);}var outputShape=_layer9.computeOutputShape(singletonOrArray(_inputShapes));var _outputShapes=normalizeShapeList(outputShape);var nodeIndex=_layer9.inboundNodes.indexOf(node);for(var _j6=0;_j6<_outputShapes.length;_j6++){var _shapeKey2=\"\".concat(_layer9.name,\"_\").concat(nodeIndex,\"_\").concat(_j6);layersToOutputShapes[_shapeKey2]=_outputShapes[_j6];}}}catch(err){_iterator67.e(err);}finally{_iterator67.f();}}}catch(err){_iterator66.e(err);}finally{_iterator66.f();}}// Read final output shapes from layersToOutputShapes.\nvar outputShapes=[];var outputShapeKeys=[];for(var _i66=0;_i66<this.outputLayers.length;_i66++){var _layer10=this.outputLayers[_i66];var _nodeIndex6=this.outputLayersNodeIndices[_i66];var _tensorIndex3=this.outputLayersTensorIndices[_i66];var _shapeKey3=\"\".concat(_layer10.name,\"_\").concat(_nodeIndex6,\"_\").concat(_tensorIndex3);outputShapeKeys.push(_shapeKey3);}for(var _i67=0;_i67<outputShapeKeys.length;_i67++){var key=outputShapeKeys[_i67];assert(key in layersToOutputShapes);outputShapes.push(layersToOutputShapes[key]);}// TODO(michaelterry): Update cache\nreturn singletonOrArray(outputShapes);}/**\r\n     * Computes output tensors for new inputs.\r\n     *\r\n     * Note:\r\n     *   - Expects `inputs` to be a list (potentially with 1 element).\r\n     *\r\n     * @param inputs List of tensors\r\n     * @param masks List of masks (tensors or null).\r\n     * @return Three lists: outputTensors, outputMasks, outputShapes\r\n     */},{key:\"runInternalGraph\",value:function runInternalGraph(inputs,masks){if(masks==null){masks=pyListRepeat(null,inputs.length);}// Dictionary mapping reference tensors to tuples\n// (computed tensor, compute mask)\n// we assume a 1:1 mapping from tensor to mask\n// TODO: raise exception when a `.computeMask()` call\n// does not return a list the same size as `call`\nvar tensorMap={};for(var i=0;i<this.inputs.length;++i){var x=this.inputs[i];var y=inputs[i];var mask=masks[i];tensorMap[x.id]=[y,mask];}var depthKeys=Object.keys(this.nodesByDepth).map(function(x){return parseInt(x,10);}).sort(reverseNumberCompare);var _iterator68=_createForOfIteratorHelper(depthKeys),_step68;try{for(_iterator68.s();!(_step68=_iterator68.n()).done;){var depth=_step68.value;var nodes=this.nodesByDepth[depth];var _iterator70=_createForOfIteratorHelper(nodes),_step70;try{for(_iterator70.s();!(_step70=_iterator70.n()).done;){var node=_step70.value;// This is always a single layer, never a list.\nvar layer=node.outboundLayer;var referenceInputTensors=node.inputTensors;var referenceOutputTensors=node.outputTensors;// If all previous input tensors are available in tensorMap,\n// then call node.inboundLayer on them.\n// List of tuples [input, mask]:\nvar computedData=new Array();var _iterator71=_createForOfIteratorHelper(referenceInputTensors),_step71;try{for(_iterator71.s();!(_step71=_iterator71.n()).done;){var _x160=_step71.value;if(_x160.id in tensorMap){computedData.push(tensorMap[_x160.id]);}}}catch(err){_iterator71.e(err);}finally{_iterator71.f();}if(computedData.length===referenceInputTensors.length){// TODO(michaelterry): Add K.name_scope here, if we need it.\nvar kwargs={};var computedTensors=void 0;var computedMasks=void 0;var _outputTensors=void 0;var _outputMasks=void 0;// call layer\nif(node.callArgs!=null){kwargs=node.callArgs;}if(computedData.length===1){var _computedData$=_slicedToArray(computedData[0],2),computedTensor=_computedData$[0],computedMask=_computedData$[1];if(kwargs['mask']==null){kwargs['mask']=computedMask;}_outputTensors=toList(layer.call(computedTensor,kwargs));_outputMasks=toList(layer.computeMask(computedTensor,computedMask));computedTensors=[computedTensor];computedMasks=[computedMask];}else{computedTensors=computedData.map(function(x){return x[0];});computedMasks=computedData.map(function(x){return x[1];});if(kwargs['mask']==null){kwargs['mask']=computedMasks;}_outputTensors=toList(layer.call(computedTensors,kwargs));_outputMasks=toList(layer.computeMask(computedTensors,computedMasks));}if(layer.activityRegularizer){throw new NotImplementedError('LayersModel invocation with concrete Tensor value(s) in the '+'presence of activity regularizer(s) is not supported yet.');}// TODO(michaelterry): Add model updates and losses\n// Update tensor map.\nfor(var _i68=0;_i68<referenceOutputTensors.length;++_i68){var _x159=referenceOutputTensors[_i68];var _y=_outputTensors[_i68];var _mask=_outputMasks[_i68];tensorMap[_x159.id]=[_y,_mask];}}}}catch(err){_iterator70.e(err);}finally{_iterator70.f();}}}catch(err){_iterator68.e(err);}finally{_iterator68.f();}var outputTensors=[];var outputMasks=[];var outputShapes=[];var _iterator69=_createForOfIteratorHelper(this.outputs),_step69;try{for(_iterator69.s();!(_step69=_iterator69.n()).done;){var _x161=_step69.value;assert(_x161.id in tensorMap,\"Could not compute output \".concat(_x161.name,\" : \").concat(_x161.id));var _tensorMap$_x161$id=_slicedToArray(tensorMap[_x161.id],2),tensor=_tensorMap$_x161$id[0],_mask2=_tensorMap$_x161$id[1];outputShapes.push(tensor.shape);outputTensors.push(tensor);outputMasks.push(_mask2);}// TODO(michaelterry): Add support for caches.\n}catch(err){_iterator69.e(err);}finally{_iterator69.f();}return[outputTensors,outputMasks,outputShapes];}/**\r\n     * Builds a map of internal node keys to node ordering.\r\n     * Used in serializaion a node orderings may change as unused nodes are\r\n     * dropped. Porting Note:  This helper method was pulled out of getConfig to\r\n     * improve readability.\r\n     * @param layers An array of Layers in the model.\r\n     * @returns Map of Node Keys to index order within the layer.\r\n     */},{key:\"buildNodeConversionMap\",value:function buildNodeConversionMap(layers){var nodeConversionMap={};var keptNodes;var _iterator72=_createForOfIteratorHelper(this.layers),_step72;try{for(_iterator72.s();!(_step72=_iterator72.n()).done;){var layer=_step72.value;keptNodes=layer instanceof container_Container?1:0;for(var originalNodeIndex=0;originalNodeIndex<layer.inboundNodes.length;originalNodeIndex++){var nodeKey=container_Container.nodeKey(layer,originalNodeIndex);if(this.containerNodes.has(nodeKey)){// i.e. we mark it to be saved\nnodeConversionMap[nodeKey]=keptNodes;keptNodes+=1;}}}}catch(err){_iterator72.e(err);}finally{_iterator72.f();}return nodeConversionMap;}/**\r\n     * Retrieves a layer based on either its name (unique) or index.\r\n     *\r\n     * Indices are based on order of horizontal graph traversal (bottom-up).\r\n     *\r\n     * If both `name` and `index` are specified, `index` takes precedence.\r\n     *\r\n     * @param name Name of layer.\r\n     * @param index Index of layer.\r\n     * @returns A Layer instance.\r\n     * @throws ValueError: In case of invalid layer name or index.\r\n     */ /**\r\n     * @doc {\r\n     *    heading: 'Layers',\r\n     *    subheading: 'Classes',\r\n     *    namespace: 'layers',\r\n     *    subclasses: ['LayersModel']\r\n     * }\r\n     */},{key:\"getLayer\",value:function getLayer(name,index){if(index!=null){if(this.layers.length<=index){throw new ValueError(\"Was asked to retrieve layer at index \".concat(index,\", but model only \")+\"has \".concat(this.layers.length,\" layer(s).\"));}else{return this.layers[index];}}else{if(name==null){throw new ValueError('Provide either a layer name or layer index');}}var _iterator73=_createForOfIteratorHelper(this.layers),_step73;try{for(_iterator73.s();!(_step73=_iterator73.n()).done;){var layer=_step73.value;if(layer.name===name){return layer;}}}catch(err){_iterator73.e(err);}finally{_iterator73.f();}throw new ValueError(\"No such layer: \".concat(name));}/**\r\n     * Retrieves the Container's current loss values.\r\n     *\r\n     * Used for regularizers during training.\r\n     */},{key:\"calculateLosses\",value:function calculateLosses(){var _this148=this;// Porting Node: This is an augmentation to Container.loss in PyKeras.\n//   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n//   Tensor (specifically Scalar) values are returned. This is due to the\n//   imperative backend.\nreturn Object(dist[\"tidy\"])(function(){var losses=[];var _iterator74=_createForOfIteratorHelper(_this148.layers),_step74;try{for(_iterator74.s();!(_step74=_iterator74.n()).done;){var layer=_step74.value;for(var nodeIndex=0;nodeIndex<layer.inboundNodes.length;++nodeIndex){var nodeKey=container_Container.nodeKey(layer,nodeIndex);if(_this148.containerNodes.has(nodeKey)){losses.push.apply(losses,_toConsumableArray2(layer.calculateLosses()));}}}// TODO(cais): Add any unconditional model-level losses?\n}catch(err){_iterator74.e(err);}finally{_iterator74.f();}return losses;});}},{key:\"getConfig\",value:function getConfig(){var config={name:this.name};// Build a map from layer unique name (self._node_key)\n// to the index of the nodes that are saved in the config.\n// Only nodes in container_nodes are saved.\nvar nodeConversionMap=this.buildNodeConversionMap(this.layers);// Serialize and save the layers in layerConfigs\nvar layerConfigs=[];var _iterator75=_createForOfIteratorHelper(this.layers),_step75;try{for(_iterator75.s();!(_step75=_iterator75.n()).done;){var _layer12=_step75.value;var layerClassName=_layer12.getClassName();var layerConfig=_layer12.getConfig();var filteredInboundNodes=[];for(var originalNodeIndex=0;originalNodeIndex<_layer12.inboundNodes.length;originalNodeIndex++){var node=_layer12.inboundNodes[originalNodeIndex];var _nodeKey2=container_Container.nodeKey(_layer12,originalNodeIndex);var kwargs={};if(this.containerNodes.has(_nodeKey2)){// The node is relevant to the model:\n// add to filteredInboundNodes.\nif(node.callArgs){try{JSON.stringify(node.callArgs);kwargs=node.callArgs;}catch(err){console.warn(\"Layer \".concat(_layer12.name,\" was passed \")+\"non-serializable keyword arguments: \"+\"\".concat(node.callArgs,\". They will not be included \")+\"in the serialized model (and thus will be \"+\"missing at deserialization time).\");kwargs={};}}if(node.inboundLayers.length>0){var nodeData=[];for(var _i70=0;_i70<node.inboundLayers.length;_i70++){var inboundLayer=node.inboundLayers[_i70];var _nodeIndex8=node.nodeIndices[_i70];var _tensorIndex5=node.tensorIndices[_i70];var _nodeKey3=container_Container.nodeKey(inboundLayer,_nodeIndex8);var _newNodeIndex2=nodeConversionMap[_nodeKey3];if(_newNodeIndex2==null){_newNodeIndex2=0;}nodeData.push([inboundLayer.name,_newNodeIndex2,_tensorIndex5,kwargs]);}filteredInboundNodes.push(nodeData);}}}var dict={};dict['name']=_layer12.name;dict['className']=layerClassName;dict['config']=layerConfig;dict['inboundNodes']=filteredInboundNodes;layerConfigs.push(dict);}}catch(err){_iterator75.e(err);}finally{_iterator75.f();}config['layers']=layerConfigs;// Gather info about inputs and outputs\nvar modelInputs=[];for(var i=0;i<this.inputLayers.length;i++){var layer=this.inputLayers[i];var nodeIndex=this.inputLayersNodeIndices[i];var nodeKey=container_Container.nodeKey(layer,nodeIndex);if(!this.containerNodes.has(nodeKey)){continue;}var newNodeIndex=nodeConversionMap[nodeKey];if(newNodeIndex===null||newNodeIndex===undefined){newNodeIndex=0;}var tensorIndex=this.inputLayersTensorIndices[i];modelInputs.push([layer.name,newNodeIndex,tensorIndex]);}config['inputLayers']=modelInputs;var modelOutputs=[];for(var _i69=0;_i69<this.outputLayers.length;_i69++){var _layer11=this.outputLayers[_i69];var _nodeIndex7=this.outputLayersNodeIndices[_i69];var _nodeKey=container_Container.nodeKey(_layer11,_nodeIndex7);if(!this.containerNodes.has(_nodeKey)){continue;}var _newNodeIndex=nodeConversionMap[_nodeKey];if(_newNodeIndex===null||_newNodeIndex===undefined){_newNodeIndex=0;}var _tensorIndex4=this.outputLayersTensorIndices[_i69];modelOutputs.push([_layer11.name,_newNodeIndex,_tensorIndex4]);}config['outputLayers']=modelOutputs;return config;}/**\r\n     * Instantiates a LayersModel from its config (output of `get_config()`).\r\n     * @param cls the class to create\r\n     * @param config LayersModel config dictionary.\r\n     * @param customObjects An optional dictionary of custom objects.\r\n     * @param fastWeightInit Optional flag to use fast weight initialization\r\n     *   during deserialization. This is applicable to cases in which\r\n     *   the initialization will be immediately overwritten by loaded weight\r\n     *   values. Default: `false`.\r\n     * @returns A LayersModel instance.\r\n     * @throws ValueError: In case of improperly formatted config dict.\r\n     */ /** @nocollapse */},{key:\"stateful\",get:/**\r\n     * Determine whether the container is stateful.\r\n     *\r\n     * Porting Note: this is the equivalent of the stateful @property of\r\n     *   the Container class in PyKeras.\r\n     */function get(){// Porting Note: This check is to prevent inadvertent setting of the\n//   _stateful property of the Container instance.\nif(this._stateful){throw new ValueError('Container instance unexpectedly has _stateful = true. The '+'statefulness of a Container is determined by the Layers it '+'contains. Its _stateful property must remain the default false.');}var _iterator76=_createForOfIteratorHelper(this.layers),_step76;try{for(_iterator76.s();!(_step76=_iterator76.n()).done;){var layer=_step76.value;if(layer.stateful){return true;}}}catch(err){_iterator76.e(err);}finally{_iterator76.f();}return false;}/**\r\n     * Reset the state of all stateful constituent layers (if any).\r\n     *\r\n     * Examples of stateful layers include RNN layers whose `stateful` property\r\n     * is set as `true`.\r\n     */},{key:\"resetStates\",value:function resetStates(){var _this149=this;Object(dist[\"tidy\"])(function(){_this149.layers.forEach(function(layer){// tslint:disable:no-any\nif(layer.stateful){layer.resetStates();}// tslint:enable:no-any\n});});}}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var fastWeightInit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;// Layer instances created during\n// the graph reconstruction process\nvar createdLayers={};// Dictionary mapping layer instances to\n// node data that specifies a layer call.\n// It acts as a queue that maintains any unprocessed\n// layer call until it becomes possible to process it\n// (i.e. until the input tensors to the call all exist).\nvar unprocessedNodes={};function addUnprocessedNode(layer,nodeData){if(!(layer.name in unprocessedNodes)){unprocessedNodes[layer.name]=[nodeData];}else{unprocessedNodes[layer.name].push(nodeData);}}function processNode(layer,nodeData){var inputTensors=[];var kwargs;var _iterator77=_createForOfIteratorHelper(nodeData),_step77;try{for(_iterator77.s();!(_step77=_iterator77.n()).done;){var inputData=_step77.value;var inboundLayerName=inputData[0];var inboundNodeIndex=inputData[1];var inboundTensorIndex=inputData[2];kwargs=inputData[3]==null?{}:inputData[3];if(!(inboundLayerName in createdLayers)){addUnprocessedNode(layer,nodeData);return;}var inboundLayer=createdLayers[inboundLayerName];if(inboundLayer.inboundNodes.length<=inboundNodeIndex){addUnprocessedNode(layer,nodeData);return;}var inboundNode=inboundLayer.inboundNodes[inboundNodeIndex];inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);}// Call layer on its inputs, thus creating the node\n// and building the layer if needed.\n// Note: This has Eager vs Graph Implications.\n}catch(err){_iterator77.e(err);}finally{_iterator77.f();}if(inputTensors.length>0){layer.apply(singletonOrArray(inputTensors),kwargs);// was ** kwargs\n}}/**\r\n         * Deserialize a layer, then call it on appropriate inputs.\r\n         * @param layerData: layer config dict.\r\n         * @throws ValueError: In case of improperly formatted `layer_data`\r\n         * dict.\r\n         */function processLayer(layerData){var layerName=layerData['name'];// Instantiate layer.\nvar layer=deserialize(layerData,config['customObjects']!=null?config['customObjects']:{});layer.setFastWeightInitDuringBuild(fastWeightInit);createdLayers[layerName]=layer;// Gather layer inputs.\nvar inboundNodesData=layerData['inboundNodes'];inboundNodesData.forEach(function(nodeData){if(!(nodeData instanceof Array)){throw new ValueError(\"Corrupted configuration, expected array for nodeData: \".concat(nodeData));}// We don't process nodes (i.e. make layer calls)\n// on the fly because the inbound node may not yet exist,\n// in case of layer shared at different topological depths\n// (e.g.a model such as A(B(A(B(x)))))\naddUnprocessedNode(layer,nodeData);});}// First, we create all layers and enqueue nodes to be processed.\nvar name=config['name'];var layersFromConfig=config['layers'];var _iterator78=_createForOfIteratorHelper(layersFromConfig),_step78;try{for(_iterator78.s();!(_step78=_iterator78.n()).done;){var _layerData=_step78.value;processLayer(_layerData);}// Then we process nodes in order of layer depth.\n// Nodes that cannot yet be processed(if the inbound node\n// does not yet exist) are re - enqueued, and the process\n// is repeated until all nodes are processed.\n}catch(err){_iterator78.e(err);}finally{_iterator78.f();}while(!isObjectEmpty(unprocessedNodes)){var _iterator79=_createForOfIteratorHelper(layersFromConfig),_step79;try{for(_iterator79.s();!(_step79=_iterator79.n()).done;){var layerData=_step79.value;var layer=createdLayers[layerData['name']];if(layer.name in unprocessedNodes){var currentUnprocessedNodesForLayer=unprocessedNodes[layer.name];delete unprocessedNodes[layer.name];var _iterator80=_createForOfIteratorHelper(currentUnprocessedNodesForLayer),_step80;try{for(_iterator80.s();!(_step80=_iterator80.n()).done;){var nodeData=_step80.value;processNode(layer,nodeData);}}catch(err){_iterator80.e(err);}finally{_iterator80.f();}}}}catch(err){_iterator79.e(err);}finally{_iterator79.f();}}var inputTensors=[];var outputTensors=[];var inputLayersFromConfig=config['inputLayers'];var _iterator81=_createForOfIteratorHelper(inputLayersFromConfig),_step81;try{for(_iterator81.s();!(_step81=_iterator81.n()).done;){var _layerData2=_step81.value;var layerName=_layerData2[0];var nodeIndex=_layerData2[1];var tensorIndex=_layerData2[2];assert(layerName in createdLayers);var _layer13=createdLayers[layerName];var layerOutputTensors=_layer13.inboundNodes[nodeIndex].outputTensors;inputTensors.push(layerOutputTensors[tensorIndex]);}}catch(err){_iterator81.e(err);}finally{_iterator81.f();}var outputLayersFromConfig=config['outputLayers'];var _iterator82=_createForOfIteratorHelper(outputLayersFromConfig),_step82;try{for(_iterator82.s();!(_step82=_iterator82.n()).done;){var _layerData3=_step82.value;var _layerName=_layerData3[0];var _nodeIndex9=_layerData3[1];var _tensorIndex6=_layerData3[2];assert(_layerName in createdLayers);var _layer14=createdLayers[_layerName];var _layerOutputTensors=_layer14.inboundNodes[_nodeIndex9].outputTensors;outputTensors.push(_layerOutputTensors[_tensorIndex6]);}}catch(err){_iterator82.e(err);}finally{_iterator82.f();}return new cls({inputs:inputTensors,outputs:outputTensors,name:name});}}]);return container_Container;}(topology_Layer);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */function standardizeSampleOrClassWeights(xWeight,outputNames,weightType){var numOutputs=outputNames.length;if(xWeight==null||Array.isArray(xWeight)&&xWeight.length===0){return outputNames.map(function(name){return null;});}if(numOutputs===1){if(Array.isArray(xWeight)&&xWeight.length===1){return xWeight;}else if(_typeof2(xWeight)==='object'&&outputNames[0]in xWeight){return[xWeight[outputNames[0]]];}else{return[xWeight];}}if(Array.isArray(xWeight)){if(xWeight.length!==numOutputs){throw new Error(\"Provided \".concat(weightType,\" is an array of \").concat(xWeight.length,\" \")+\"element(s), but the model has \".concat(numOutputs,\" outputs. \")+\"Make sure a set of weights is provided for each model output.\");}return xWeight;}else if(_typeof2(xWeight)==='object'&&Object.keys(xWeight).length>0&&_typeof2(xWeight[Object.keys(xWeight)[0]])==='object'){var output=[];outputNames.forEach(function(outputName){if(outputName in xWeight){output.push(xWeight[outputName]);}else{output.push(null);}});return output;}else{throw new Error(\"The model has multiple (\".concat(numOutputs,\") outputs, \")+\"so \".concat(weightType,\" must be either an array with \")+\"\".concat(numOutputs,\" elements or an object with \").concat(outputNames,\" keys. \")+\"Provided \".concat(weightType,\" not understood: \").concat(JSON.stringify(xWeight)));}}/**\r\n * Standardize class weighting objects.\r\n *\r\n * This function takes a single class-weighting object, an array of them,\r\n * or a map from output name to class-weighting object. It compares it to the\r\n * output name(s) of the model, base on which it outputs an array of\r\n * class-weighting objects of which the length matches the number of outputs.\r\n *\r\n * @param classWeight Input class-weighting object(s).\r\n * @param outputNames All output name(s) of the model.\r\n * @return An array of class-weighting objects. The length of the array matches\r\n *   the model's number of outputs.\r\n */function standardizeClassWeights(classWeight,outputNames){return standardizeSampleOrClassWeights(classWeight,outputNames,'classWeight');}function standardizeSampleWeights(classWeight,outputNames){return standardizeSampleOrClassWeights(classWeight,outputNames,'sampleWeight');}/**\r\n * Standardize by-sample and/or by-class weights for training.\r\n *\r\n * Note that this function operates on one model output at a time. For a model\r\n * with multiple outputs, you must call this function multiple times.\r\n *\r\n * @param y The target tensor that the by-sample and/or by-class weight is for.\r\n *     The values of y are assumed to encode the classes, either directly\r\n *     as an integer index, or as one-hot encoding.\r\n * @param sampleWeight By-sample weights.\r\n * @param classWeight By-class weights: an object mapping class indices\r\n *     (integers) to a weight (float) to apply to the model's loss for the\r\n *     samples from this class during training. This can be useful to tell the\r\n *     model to \"pay more attention\" to samples from an under-represented class.\r\n * @param sampleWeightMode The mode for the sample weights.\r\n * @return A Promise of weight tensor, of which the size of the first dimension\r\n *     matches that of `y`.\r\n */function standardizeWeights(_x162,_x163,_x164,_x165){return _standardizeWeights.apply(this,arguments);}/**\r\n * Apply per-sample weights on the loss values from a number of samples.\r\n *\r\n * @param losses Loss tensor of shape `[batchSize]`.\r\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\r\n * @returns Tensor of the same shape as`losses`.\r\n */function _standardizeWeights(){_standardizeWeights=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee163(y,sampleWeight,classWeight,sampleWeightMode){var yClasses,yClassIndices,classSampleWeight;return regeneratorRuntime.wrap(function _callee163$(_context163){while(1){switch(_context163.prev=_context163.next){case 0:if(!(sampleWeight!=null||sampleWeightMode!=null)){_context163.next=2;break;}throw new Error('Support sampleWeight is not implemented yet');case 2:if(!(classWeight!=null)){_context163.next=15;break;}// Apply class weights per sample.\nyClasses=Object(dist[\"tidy\"])(function(){if(y.shape.length===1){// Assume class indices.\nreturn y.clone();}else if(y.shape.length===2){if(y.shape[1]>1){// Assume one-hot encoding of classes.\nvar axis=1;return y.argMax(axis);}else if(y.shape[1]===1){// Class index.\nreturn y.reshape([y.shape[0]]);}else{throw new Error(\"Encountered unexpected last-dimension size (\".concat(y.shape[1],\") \")+\"during handling of class weights. The size is expected to be \"+\">= 1.\");}}else{throw new Error(\"Unexpected rank of target (y) tensor (\".concat(y.rank,\") during \")+\"handling of class weights. The rank is expected to be 1 or 2.\");}});_context163.t0=Array;_context163.next=7;return yClasses.data();case 7:_context163.t1=_context163.sent;yClassIndices=_context163.t0.from.call(_context163.t0,_context163.t1);Object(dist[\"dispose\"])(yClasses);classSampleWeight=[];yClassIndices.forEach(function(classIndex){if(classWeight[classIndex]==null){throw new Error(\"classWeight must contain all classes in the training data. \"+\"The class \".concat(classIndex,\" exists in the data but not in \")+\"classWeight\");}else{classSampleWeight.push(classWeight[classIndex]);}});return _context163.abrupt(\"return\",Object(dist[\"tensor1d\"])(classSampleWeight,'float32'));case 15:return _context163.abrupt(\"return\",null);case 16:case\"end\":return _context163.stop();}}},_callee163);}));return _standardizeWeights.apply(this,arguments);}function computeWeightedLoss(losses,sampleWeights){return Object(dist[\"mul\"])(losses,sampleWeights);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Interfaces and methods for training models using TensorFlow.js datasets.\r\n */ // Default batch size used during tensor-based validation.\nvar DEFAULT_VALIDATION_BATCH_SIZE=32;/**\r\n * Standardize the output of a dataset iterator for use by\r\n * LayersModel.fitDataset().\r\n *\r\n * @param model: A `tf.LayersModel` object.\r\n * @param iteratorOut The output of a dataset iterator. It is required to be\r\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\r\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\r\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\r\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\r\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\r\n *   as a map, the order in the resulting array is taken from the `inputNames`\r\n *   and `outputNames` of the model.\r\n */function standardizeDataIteratorOutput(// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel,iteratorOut){var xs;var ys;var iteratorOutObj=iteratorOut;xs=iteratorOutObj['xs'];ys=iteratorOutObj['ys'];dist[\"util\"].assert(xs!=null&&ys!=null,function(){return'A Dataset iterator for fitDataset() is expected to generate '+'objects of the form `{xs: xVal, ys: yVal}`, where the two '+'values may be `tf.Tensor`, an array of Tensors, or a map of '+'string to Tensor.  The provided Dataset instead generates '+\"\".concat(iteratorOut);});var flattenedXs=flattenTensorOrArrayOrMap('input',model.inputNames,xs);var flattenedYs=flattenTensorOrArrayOrMap('output',model.outputNames,ys);var batchSize=flattenedXs[0].shape[0];dist[\"util\"].assert(flattenedXs.length===model.inputs.length,function(){return\"LayersModel has \".concat(model.inputs.length,\" inputs, but the dataset \")+\"provides \".concat(flattenedXs.length,\" inputs.  (Expected input keys: \")+\"\".concat(JSON.stringify(model.inputNames),\")\");});dist[\"util\"].assert(flattenedYs.length===model.outputs.length,function(){return\"LayersModel has \".concat(model.outputs.length,\" outputs, but the dataset \")+\"provides \".concat(flattenedYs.length,\" outputs.  (Expected output keys: \")+\"\".concat(JSON.stringify(model.outputNames),\")\");});var _loop18=function _loop18(xIndex){dist[\"util\"].assert(flattenedXs[xIndex].shape[0]===batchSize,function(){return\"Batch size mismatch: input \"+\"\".concat(model.inputNames[xIndex],\" has \").concat(flattenedXs[xIndex].shape[0],\"; \")+\"expected  \".concat(batchSize,\" based on input \").concat(model.inputNames[0],\".\");});};for(var xIndex=0;xIndex<flattenedXs.length;xIndex++){_loop18(xIndex);}var _loop19=function _loop19(yIndex){dist[\"util\"].assert(flattenedYs[yIndex].shape[0]===batchSize,function(){return\"Batch size mismatch: output \"+\"\".concat(model.outputNames[yIndex],\" has \").concat(flattenedYs[yIndex].shape[0],\"; \")+\"expected  \".concat(batchSize,\" based on input \").concat(model.inputNames[0],\".\");});};for(var yIndex=0;yIndex<flattenedYs.length;yIndex++){_loop19(yIndex);}return{xs:flattenedXs,ys:flattenedYs};}function flattenTensorOrArrayOrMap(inputOrOutput,names,values){if(values instanceof dist[\"Tensor\"]){return[values];}else if(Array.isArray(values)){dist[\"util\"].assert(values.length===names.length,function(){return\"Received an array of \".concat(values.length,\" Tensors, but expected \").concat(names.length,\" to match the \").concat(inputOrOutput,\" keys \").concat(names,\".\");});return values;}else{var result=[];// Check that all the required keys are available.\nvar _iterator83=_createForOfIteratorHelper(names),_step83;try{for(_iterator83.s();!(_step83=_iterator83.n()).done;){var name=_step83.value;if(values[name]==null){throw new ValueError(\"The feature data generated by the dataset lacks the required \"+\"\".concat(inputOrOutput,\" key '\").concat(name,\"'.\"));}result.push(values[name]);}}catch(err){_iterator83.e(err);}finally{_iterator83.f();}return result;}}function standardizeTensorValidationData(data){if(data.length===3){throw new NotImplementedError('Validation with sample weights is not implemented yet.');}return{xs:data[0],ys:data[1]};}function _fitDataset2(_x166,_x167,_x168){return _fitDataset.apply(this,arguments);}/** Helper function that determines number of steps (batches) per epoch. */function _fitDataset(){_fitDataset=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee164(// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel,dataset,args){var hasBatchesPerEpoch,doValidation,valXs,valYs,validationData,trainFunction,outLabels,callbackMetrics,callbacks,verbose,_configureCallbacks,callbackList,history,epoch,dataIterator,epochLogs,stepsDone,batchIndex,iteratorOut,_standardizeDataItera,xs,ys,batchLogs,sampleWeights,standardClassWeights,i,ins,outs,_i84,label,out,valOuts,_i85;return regeneratorRuntime.wrap(function _callee164$(_context164){while(1){switch(_context164.prev=_context164.next){case 0:hasBatchesPerEpoch=args.batchesPerEpoch!=null;dist[\"util\"].assert(model.optimizer!=null,function(){return'You must compile a model before training/testing. Use '+'LayersModel.compile(modelCompileConfig).';});dist[\"util\"].assert(args!=null,function(){return\"For fitDataset(), the 2nd argument (config) is required, \"+\"but it is not provided in this call.\";});dist[\"util\"].assert(args.epochs!=null&&args.epochs>0&&Number.isInteger(args.epochs),function(){return\"For fitDataset(), config.epochs is expected to be a positive \"+\"integer, but got \".concat(args.epochs);});dist[\"util\"].assert(!hasBatchesPerEpoch||args.batchesPerEpoch>0&&Number.isInteger(args.batchesPerEpoch),function(){return\"For fitDataset(), config.batchesPerEpoch is expected to be a \"+\"positive integer if specified, but got \".concat(args.batchesPerEpoch);});dist[\"util\"].assert(// tslint:disable-next-line:no-any\nargs['validationSplit']==null,function(){return'`validationSplit` is not supported by `fitDataset()`. '+'Use validationData instead.';});if(!model.isTraining){_context164.next=8;break;}throw new Error('Cannot start training because another fit() call is ongoing.');case 8:model.isTraining=true;_context164.prev=9;doValidation=args.validationData!=null;if(doValidation){if(isDatasetObject(args.validationData)){dist[\"util\"].assert(args.validationBatches==null||args.validationBatches>0&&Number.isInteger(args.validationBatches),function(){return\"For fitDataset() with dataset-based validation, \"+\"config.validationBatches is expected not to be provided, \"+\"or to be a positive integer, \"+\"but got \".concat(args.validationBatches);});}else{validationData=standardizeTensorValidationData(args.validationData);valXs=validationData.xs;valYs=validationData.ys;}}trainFunction=model.makeTrainFunction();outLabels=model.getDedupedMetricsNames();if(doValidation){callbackMetrics=outLabels.slice().concat(outLabels.map(function(n){return'val_'+n;}));}else{callbackMetrics=outLabels.slice();}callbacks=standardizeCallbacks(args.callbacks,args.yieldEvery);verbose=args.verbose==null?1:args.verbose;_configureCallbacks=configureCallbacks(callbacks,verbose,args.epochs,null,null,getStepsPerEpoch(dataset,args),null,// Batch size determined by the dataset itself.\ndoValidation,callbackMetrics),callbackList=_configureCallbacks.callbackList,history=_configureCallbacks.history;callbackList.setModel(model);model.history=history;_context164.next=22;return callbackList.onTrainBegin();case 22:model.stopTraining_=false;epoch=args.initialEpoch==null?0:args.initialEpoch;_context164.next=26;return dataset.iterator();case 26:dataIterator=_context164.sent;case 27:if(!(epoch<args.epochs)){_context164.next=98;break;}epochLogs={};_context164.next=31;return callbackList.onEpochBegin(epoch);case 31:stepsDone=0;batchIndex=0;if(hasBatchesPerEpoch){_context164.next=37;break;}_context164.next=36;return dataset.iterator();case 36:dataIterator=_context164.sent;case 37:if(!(hasBatchesPerEpoch?stepsDone<args.batchesPerEpoch:true)){_context164.next=91;break;}_context164.next=40;return dataIterator.next();case 40:iteratorOut=_context164.sent;if(!(hasBatchesPerEpoch&&iteratorOut.done)){_context164.next=44;break;}console.warn('You provided `batchesPerEpoch` as '+\"\".concat(args.batchesPerEpoch,\", \")+'but your dataset iterator ran out of data after '+\"\".concat(stepsDone,\" batches; \")+'interrupting training. Make sure that your '+'dataset can generate at least `batchesPerEpoch * epochs` '+'batches (in this case, '+\"\".concat(args.batchesPerEpoch*args.epochs,\" batches). \")+'You may need to use the repeat() function when building '+'your dataset.');return _context164.abrupt(\"break\",91);case 44:if(!(iteratorOut.value!=null)){_context164.next=73;break;}_standardizeDataItera=standardizeDataIteratorOutput(model,iteratorOut.value),xs=_standardizeDataItera.xs,ys=_standardizeDataItera.ys;batchLogs={};batchLogs['batch']=batchIndex;batchLogs['size']=xs[0].shape[0];_context164.next=51;return callbackList.onBatchBegin(batchIndex,batchLogs);case 51:sampleWeights=[];if(!(args.classWeight!=null)){_context164.next=64;break;}standardClassWeights=standardizeClassWeights(args.classWeight,model.outputNames);i=0;case 55:if(!(i<standardClassWeights.length)){_context164.next=64;break;}_context164.t0=sampleWeights;_context164.next=59;return standardizeWeights(ys[i],null,standardClassWeights[i]);case 59:_context164.t1=_context164.sent;_context164.t0.push.call(_context164.t0,_context164.t1);case 61:++i;_context164.next=55;break;case 64:// Train on batch.\nins=xs.concat(ys).concat(sampleWeights);outs=trainFunction(ins);dist[\"dispose\"](ins);for(_i84=0;_i84<outLabels.length;++_i84){label=outLabels[_i84];out=outs[_i84];batchLogs[label]=out;dist[\"keep\"](out);}_context164.next=70;return callbackList.onBatchEnd(batchIndex,batchLogs);case 70:disposeTensorsInLogs(batchLogs);batchIndex++;stepsDone++;case 73:if(!(hasBatchesPerEpoch?stepsDone>=args.batchesPerEpoch:iteratorOut.done)){_context164.next=87;break;}if(!doValidation){_context164.next=86;break;}valOuts=void 0;if(!isDatasetObject(args.validationData)){_context164.next=84;break;}_context164.t2=toList;_context164.next=80;return model.evaluateDataset(args.validationData,{batches:args.validationBatches});case 80:_context164.t3=_context164.sent;valOuts=(0,_context164.t2)(_context164.t3);_context164.next=85;break;case 84:valOuts=toList(model.evaluate(valXs,valYs,{batchSize:args.validationBatchSize==null?DEFAULT_VALIDATION_BATCH_SIZE:args.validationBatchSize,verbose:0}));case 85:for(_i85=0;_i85<model.metricsNames.length;++_i85){epochLogs[\"val_\".concat(model.metricsNames[_i85])]=valOuts[_i85];}case 86:return _context164.abrupt(\"break\",91);case 87:if(!model.stopTraining_){_context164.next=89;break;}return _context164.abrupt(\"break\",91);case 89:_context164.next=37;break;case 91:_context164.next=93;return callbackList.onEpochEnd(epoch,epochLogs);case 93:epoch++;if(!model.stopTraining_){_context164.next=96;break;}return _context164.abrupt(\"break\",98);case 96:_context164.next=27;break;case 98:_context164.next=100;return callbackList.onTrainEnd();case 100:_context164.next=102;return model.history.syncData();case 102:return _context164.abrupt(\"return\",model.history);case 103:_context164.prev=103;model.isTraining=false;return _context164.finish(103);case 106:case\"end\":return _context164.stop();}}},_callee164,null,[[9,,103,106]]);}));return _fitDataset.apply(this,arguments);}function getStepsPerEpoch(dataset,args){// Attempt to determine # of batches in an epoch.\nvar stepsPerEpoch=null;if(args.batchesPerEpoch!=null){stepsPerEpoch=args.batchesPerEpoch;}else if(Number.isFinite(dataset.size)){stepsPerEpoch=dataset.size;}return stepsPerEpoch;}// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject(dataset){return typeof dataset.iterator==='function';}// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject(iterator){return typeof iterator.next==='function';}function _evaluateDataset2(_x169,_x170,_x171){return _evaluateDataset.apply(this,arguments);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Interfaces and methods for training models using tf.Tensor objects.\r\n */function _evaluateDataset(){_evaluateDataset=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee165(// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel,dataset,args){var hasBatches,f,outs,dataIterator,numExamples,batch,_loop23,_ret4,i,oldScalar;return regeneratorRuntime.wrap(function _callee165$(_context166){while(1){switch(_context166.prev=_context166.next){case 0:args=args||{};hasBatches=args.batches!=null;f=model.testFunction;outs=[];if(!(args.verbose>0)){_context166.next=6;break;}throw new NotImplementedError('Verbose mode is not implemented yet.');case 6:dist[\"util\"].assert(!hasBatches||args.batches>0&&Number.isInteger(args.batches),function(){return'Test loop expects `batches` to be a positive integer, but '+\"received \".concat(JSON.stringify(args.batches));});if(!isLazyIteratorObject(dataset)){_context166.next=11;break;}_context166.t0=dataset;_context166.next=14;break;case 11:_context166.next=13;return dataset.iterator();case 13:_context166.t0=_context166.sent;case 14:dataIterator=_context166.t0;// Keeps track of number of examples used in this evaluation.\nnumExamples=0;batch=0;_loop23=/*#__PURE__*/regeneratorRuntime.mark(function _loop23(){var iteratorOut;return regeneratorRuntime.wrap(function _loop23$(_context165){while(1){switch(_context165.prev=_context165.next){case 0:_context165.next=2;return dataIterator.next();case 2:iteratorOut=_context165.sent;outs=dist[\"tidy\"](function(){if(iteratorOut.value){(function(){// TODO(cais): Once real dataset is available, use\n//   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\nvar _standardizeDataItera2=standardizeDataIteratorOutput(model,iteratorOut.value),xs=_standardizeDataItera2.xs,ys=_standardizeDataItera2.ys;var xsAndYs=xs.concat(ys);var batchOuts=dist[\"tidy\"](function(){return f(xsAndYs);});dist[\"dispose\"](xsAndYs);if(batch===0){for(var _i86=0;_i86<batchOuts.length;++_i86){outs.push(Object(dist[\"scalar\"])(0));}}var batchSize=xsAndYs[0].shape[0];var _loop24=function _loop24(_i87){var batchOut=batchOuts[_i87];var oldScalar=outs[_i87];outs[_i87]=dist[\"tidy\"](function(){return dist[\"add\"](outs[_i87],dist[\"mul\"](batchSize,batchOut));});if(batch>0){dist[\"dispose\"](oldScalar);}};for(var _i87=0;_i87<batchOuts.length;++_i87){_loop24(_i87);}dist[\"dispose\"](batchOuts);numExamples+=batchSize;++batch;})();}return outs;});if(!iteratorOut.done){_context165.next=7;break;}if(hasBatches){console.warn('Your dataset iterator ran out of data during evaluateDataset(). '+'Interrupting evalution. Make sure that your '+'dataset can generate at least `batches` '+\"batches (in this case, \".concat(args.batches,\" batches). \")+'You may need to use the repeat() function when building '+'your dataset.');}return _context165.abrupt(\"return\",\"break\");case 7:case\"end\":return _context165.stop();}}},_loop23);});case 18:if(!(hasBatches?batch<args.batches:true)){_context166.next=25;break;}return _context166.delegateYield(_loop23(),\"t1\",20);case 20:_ret4=_context166.t1;if(!(_ret4===\"break\")){_context166.next=23;break;}return _context166.abrupt(\"break\",25);case 23:_context166.next=18;break;case 25:for(i=0;i<outs.length;++i){oldScalar=outs[i];outs[i]=dist[\"div\"](outs[i],numExamples);dist[\"dispose\"](oldScalar);}return _context166.abrupt(\"return\",singletonOrArray(outs));case 27:case\"end\":return _context166.stop();}}},_callee165);}));return _evaluateDataset.apply(this,arguments);}function checkBatchSize(batchSize){dist[\"util\"].assert(batchSize>0&&Number.isInteger(batchSize),function(){return\"batchSize is required to be a positive integer, but got \".concat(batchSize);});}/**\r\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\r\n *\r\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\r\n *   function and `sliceArraysByIndices()` together.\r\n *\r\n * @param arrays: the input.\r\n * @param start: the starting index (inclusive).\r\n * @param stop: the stopping index (exclusive).\r\n * @returns The result of the slicing. If `arrays` is an `Array` of\r\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\r\n *   in the same way.\r\n */function sliceArrays(arrays,start,stop){if(arrays==null){return[null];}else if(Array.isArray(arrays)){return arrays.map(function(array){return sliceAlongFirstAxis(array,start,stop-start);});}else{// Tensor.\nreturn sliceAlongFirstAxis(arrays,start,stop-start);}}/**\r\n * Slice a Tensor or an Array of Tensors, by random-order indices.\r\n *\r\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\r\n *   function and `sliceArrays()` together.\r\n *\r\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\r\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\r\n *   same fashion.\r\n * @param indices The indices to use for slicing along the first (batch)\r\n *   dimension.\r\n * @returns Result(s) of the slicing.\r\n */function sliceArraysByIndices(arrays,indices){return dist[\"tidy\"](function(){if(arrays==null){return null;}else if(Array.isArray(arrays)){return arrays.map(function(array){return sliceArraysByIndices(array,indices);});}else{// TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n//   tensor1d() calls.\nreturn gather(arrays,indices.dtype==='int32'?indices:indices.toInt());}});}/**\r\n * Returns a list of batch indices (tuples of indices).\r\n * @param size: Integer, total size of the data to slice into batches.\r\n * @param batchSize: Integer, batch size.\r\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\r\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\r\n *   that satisfy batchStart <= x < batchEnd.\r\n */function makeBatches(size,batchSize){var output=[];var batchStart=0;var batchEnd=null;while(batchStart<size){batchEnd=batchStart+batchSize;if(batchEnd>=size){batchEnd=size;}output.push([batchStart,batchEnd]);batchStart=batchEnd;}return output;}/**\r\n * Abstract fit function for `f(ins)`.\r\n * @param f A Function returning a list of tensors. For training, this\r\n *   function is expected to perform the updates to the variables.\r\n * @param ins List of tensors to be fed to `f`.\r\n * @param outLabels List of strings, display names of the outputs of `f`.\r\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\r\n * @param epochs Number of times to iterate over the data. Default : 1.\r\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\r\n * @param callbacks List of callbacks to be called during training.\r\n * @param valF Function to call for validation.\r\n * @param valIns List of tensors to be fed to `valF`.\r\n * @param shuffle Whether to shuffle the data at the beginning of every\r\n * epoch. Default : true.\r\n * @param callbackMetrics List of strings, the display names of the metrics\r\n *   passed to the callbacks. They should be the concatenation of the\r\n *   display names of the outputs of `f` and the list of display names\r\n *   of the outputs of `valF`.\r\n * @param initialEpoch Epoch at which to start training (useful for\r\n *   resuming a previous training run). Default : 0.\r\n * @param stepsPerEpoch Total number of steps (batches on samples) before\r\n *   declaring one epoch finished and starting the next epoch. Ignored with\r\n *   the default value of `undefined` or `null`.\r\n * @param validationSteps Number of steps to run validation for (only if\r\n *   doing validation from data tensors). Not applicable for tfjs-layers.\r\n * @returns A `History` object.\r\n */function fitLoop(_x172,_x173,_x174,_x175,_x176,_x177,_x178,_x179,_x180,_x181,_x182,_x183,_x184,_x185,_x186){return _fitLoop.apply(this,arguments);}function _fitLoop(){_fitLoop=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee167(// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel,f,ins,outLabels,batchSize,epochs,verbose,callbacks,valF,valIns,shuffle,callbackMetrics,initialEpoch,stepsPerEpoch,validationSteps){var doValidation,numTrainSamples,indexArray,_configureCallbacks2,callbackList,history,_loop25,epoch,_ret5;return regeneratorRuntime.wrap(function _callee167$(_context170){while(1){switch(_context170.prev=_context170.next){case 0:if(batchSize==null){batchSize=32;}if(epochs==null){epochs=1;}if(shuffle==null){shuffle=true;}if(initialEpoch==null){initialEpoch=0;}// TODO(cais): Change const to let below when implementing validation.\ndoValidation=false;if(valF!=null&&valIns!=null){doValidation=true;// TODO(cais): verbose message.\n}if(!(validationSteps!=null)){_context170.next=10;break;}doValidation=true;if(!(stepsPerEpoch==null)){_context170.next=10;break;}throw new ValueError('Can only use `validationSteps` when doing step-wise training, '+'i.e., `stepsPerEpoch` must be set.');case 10:numTrainSamples=model.checkNumSamples(ins,batchSize,stepsPerEpoch,'steps_per_epoch');if(numTrainSamples!=null){indexArray=range(0,numTrainSamples);}if(verbose==null){verbose=1;}_configureCallbacks2=configureCallbacks(callbacks,verbose,epochs,initialEpoch,numTrainSamples,stepsPerEpoch,batchSize,doValidation,callbackMetrics),callbackList=_configureCallbacks2.callbackList,history=_configureCallbacks2.history;callbackList.setModel(model);model.history=history;_context170.next=18;return callbackList.onTrainBegin();case 18:model.stopTraining_=false;// TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n// TODO(cais): Pre-convert feeds for performance as in PyKeras.\n_loop25=/*#__PURE__*/regeneratorRuntime.mark(function _loop25(epoch){var epochLogs;return regeneratorRuntime.wrap(function _loop25$(_context169){while(1){switch(_context169.prev=_context169.next){case 0:_context169.next=2;return callbackList.onEpochBegin(epoch);case 2:epochLogs={};if(!(stepsPerEpoch!=null)){_context169.next=7;break;}throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');case 7:return _context169.delegateYield(/*#__PURE__*/regeneratorRuntime.mark(function _callee166(){var epochIndexArray1D,batches,_loop26,batchIndex,_ret6;return regeneratorRuntime.wrap(function _callee166$(_context168){while(1){switch(_context168.prev=_context168.next){case 0:if(!(shuffle==='batch')){_context168.next=4;break;}throw new NotImplementedError('batch shuffling is not implemneted yet');case 4:if(shuffle){dist[\"util\"].shuffle(indexArray);}case 5:// Convert the potentially shuffled indices to Tensor1D, to avoid the\n// cost of repeated creation of Array1Ds later on.\nepochIndexArray1D=Object(dist[\"tensor1d\"])(indexArray);batches=makeBatches(numTrainSamples,batchSize);_loop26=/*#__PURE__*/regeneratorRuntime.mark(function _loop26(batchIndex){var batchLogs;return regeneratorRuntime.wrap(function _loop26$(_context167){while(1){switch(_context167.prev=_context167.next){case 0:batchLogs={};_context167.next=3;return callbackList.onBatchBegin(batchIndex,batchLogs);case 3:dist[\"tidy\"](function(){var batchStart=batches[batchIndex][0];var batchEnd=batches[batchIndex][1];var batchIds=sliceAlongFirstAxis(epochIndexArray1D,batchStart,batchEnd-batchStart);batchLogs['batch']=batchIndex;batchLogs['size']=batchEnd-batchStart;// TODO(cais): In ins, train flag can be a number, instead of an\n//   Tensor? Do we need to handle this in tfjs-layers?\nvar insBatch=sliceArraysByIndices(ins,batchIds);var outs=f(insBatch);for(var i=0;i<outLabels.length;++i){var label=outLabels[i];var out=outs[i];batchLogs[label]=out;dist[\"keep\"](out);// TODO(cais): Use scope() to avoid ownership.\n}if(batchIndex===batches.length-1){// Last batch.\nif(doValidation){var valOuts=model.testLoop(valF,valIns,batchSize);// Porting Notes: In tfjs-layers, valOuts is always an Array.\nfor(var _i88=0;_i88<outLabels.length;++_i88){var _label=outLabels[_i88];var _out=valOuts[_i88];dist[\"keep\"](_out);// TODO(cais): Use scope() to avoid ownership.\nepochLogs['val_'+_label]=_out;}}}});_context167.next=6;return callbackList.onBatchEnd(batchIndex,batchLogs);case 6:disposeTensorsInLogs(batchLogs);if(!model.stopTraining_){_context167.next=9;break;}return _context167.abrupt(\"return\",\"break\");case 9:case\"end\":return _context167.stop();}}},_loop26);});batchIndex=0;case 9:if(!(batchIndex<batches.length)){_context168.next=17;break;}return _context168.delegateYield(_loop26(batchIndex),\"t0\",11);case 11:_ret6=_context168.t0;if(!(_ret6===\"break\")){_context168.next=14;break;}return _context168.abrupt(\"break\",17);case 14:++batchIndex;_context168.next=9;break;case 17:epochIndexArray1D.dispose();case 18:case\"end\":return _context168.stop();}}},_callee166);})(),\"t0\",8);case 8:_context169.next=10;return callbackList.onEpochEnd(epoch,epochLogs);case 10:if(!model.stopTraining_){_context169.next=12;break;}return _context169.abrupt(\"return\",\"break\");case 12:case\"end\":return _context169.stop();}}},_loop25);});epoch=initialEpoch;case 21:if(!(epoch<epochs)){_context170.next=29;break;}return _context170.delegateYield(_loop25(epoch),\"t0\",23);case 23:_ret5=_context170.t0;if(!(_ret5===\"break\")){_context170.next=26;break;}return _context170.abrupt(\"break\",29);case 26:++epoch;_context170.next=21;break;case 29:_context170.next=31;return callbackList.onTrainEnd();case 31:_context170.next=33;return model.history.syncData();case 33:return _context170.abrupt(\"return\",model.history);case 34:case\"end\":return _context170.stop();}}},_callee167);}));return _fitLoop.apply(this,arguments);}function fitTensors(_x187,_x188,_x189){return _fitTensors.apply(this,arguments);}/**\r\n * Ensure tensors all have a rank of at least 2.\r\n *\r\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\r\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\r\n */function _fitTensors(){_fitTensors=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee168(// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel,x,y){var args,inputs,targets,inputValX,inputValY,valX,valY,sampleWeights,_batchSize6,checkBatchAxis,standardizedOuts,doValidation,valIns,_checkBatchAxis,valStandardized,splitAt,originalBatchSize,ins,trainFunction,outLabels,valFunction,callbackMetrics,callbacks,out,_args173=arguments;return regeneratorRuntime.wrap(function _callee168$(_context171){while(1){switch(_context171.prev=_context171.next){case 0:args=_args173.length>3&&_args173[3]!==undefined?_args173[3]:{};if(!model.isTraining){_context171.next=3;break;}throw new Error('Cannot start training because another fit() call is ongoing.');case 3:model.isTraining=true;_context171.prev=4;_batchSize6=args.batchSize==null?32:args.batchSize;checkBatchSize(_batchSize6);// Validate user data.\n// TODO(cais): Support sampleWeight.\ncheckBatchAxis=false;_context171.next=10;return model.standardizeUserData(x,y,args.sampleWeight,args.classWeight,checkBatchAxis,_batchSize6);case 10:standardizedOuts=_context171.sent;inputs=standardizedOuts[0];targets=standardizedOuts[1];sampleWeights=standardizedOuts[2];// Prepare validation data.\ndoValidation=false;if(!(args.validationData!=null&&args.validationData.length>0)){_context171.next=36;break;}doValidation=true;if(!(args.validationData.length===2)){_context171.next=22;break;}// config.validationData consists of valX and valY.\ninputValX=args.validationData[0];inputValY=args.validationData[1];_context171.next=27;break;case 22:if(!(args.validationData.length===3)){_context171.next=26;break;}throw new NotImplementedError('validationData including sample weights is not supported yet.');case 26:throw new ValueError(\"When passing validation data, it must contain 2 (valX, valY) \"+\"or 3 (valX, valY, valSampleWeight) items; \"+\"\".concat(args.validationData,\" is invalid.\"));case 27:_checkBatchAxis=true;_context171.next=30;return model.standardizeUserData(inputValX,inputValY,null,/** Unused sample weights. */null,/** Unused class weights. */_checkBatchAxis,_batchSize6);case 30:valStandardized=_context171.sent;valX=valStandardized[0];valY=valStandardized[1];valIns=valX.concat(valY);// TODO(cais): Add useLearningPhase data properly.\n_context171.next=37;break;case 36:if(args.validationSplit!=null&&args.validationSplit>0&&args.validationSplit<1){doValidation=true;// Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\nsplitAt=Math.floor(inputs[0].shape[0]*(1-args.validationSplit));originalBatchSize=inputs[0].shape[0];valX=sliceArrays(inputs,splitAt,originalBatchSize);inputs=sliceArrays(inputs,0,splitAt);valY=sliceArrays(targets,splitAt,originalBatchSize);targets=sliceArrays(targets,0,splitAt);// TODO(cais): Once sampleWeights becomes available, slice it to get\n//   valSampleWeights.\nvalIns=valX.concat(valY);// TODO(cais): Add useLearningPhase data properly.\n}else if(args.validationSteps!=null){doValidation=true;// TODO(cais): Add useLearningPhase.\n}case 37:ins=inputs.concat(targets).concat(sampleWeights);model.checkTrainableWeightsConsistency();// TODO(cais): Handle use_learning_phase and learning_phase?\n// Porting Note: Here we see a key deviation of tfjs-layers from\n// Keras.\n//  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n//  we do not construct symbolic computation graphs to embody the\n//  training process. Instead, we define a function that performs the\n//  training action. In PyKeras, the data (inputs and targets) are fed\n//  through graph placeholders. In tfjs-layers, the data are fed as\n//  function arguments. Since the function are defined below in the\n//  scope, we don't have equivalents of PyKeras's\n//  `_make_train_funciton`.\ntrainFunction=model.makeTrainFunction();outLabels=model.getDedupedMetricsNames();if(doValidation){model.makeTestFunction();valFunction=model.testFunction;callbackMetrics=outLabels.slice().concat(outLabels.map(function(n){return'val_'+n;}));}else{valFunction=null;valIns=[];callbackMetrics=outLabels.slice();}callbacks=standardizeCallbacks(args.callbacks,args.yieldEvery);_context171.next=45;return fitLoop(model,trainFunction,ins,outLabels,_batchSize6,args.epochs,args.verbose,callbacks,valFunction,valIns,args.shuffle,callbackMetrics,args.initialEpoch,null,null);case 45:out=_context171.sent;return _context171.abrupt(\"return\",out);case 47:_context171.prev=47;model.isTraining=false;// Memory clean up.\ndisposeNewTensors(inputs,x);disposeNewTensors(targets,y);disposeNewTensors(valX,inputValX);disposeNewTensors(valY,inputValY);if(sampleWeights!=null){dist[\"dispose\"](sampleWeights);}return _context171.finish(47);case 55:case\"end\":return _context171.stop();}}},_callee168,null,[[4,,47,55]]);}));return _fitTensors.apply(this,arguments);}function ensureTensorsRank2OrHigher(tensors){var outs=[];if(tensors instanceof dist[\"Tensor\"]){tensors=[tensors];}// Make Tensors at least 2D.\nfor(var i=0;i<tensors.length;++i){var tensor=tensors[i];if(tensor.rank===1){outs.push(expandDims(tensor,1));}else if(tensor.rank===0){throw new Error('Expected tensor to be at least 1D, but received a 0D tensor '+'(scalar).');}else{outs.push(tensor);}}return outs;}/**\r\n * Compare a set of tensors with a reference (old) set, discard the ones\r\n * in the new set that are not present in the reference set.\r\n *\r\n * This method is used for memory clenaup during calls such as\r\n * LayersModel.fit().\r\n *\r\n * @param tensors New set which may contain Tensors not present in\r\n *   `refTensors`.\r\n * @param refTensors Reference Tensor set.\r\n */ // TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nfunction disposeNewTensors(tensors,refTensors){if(tensors==null){return;}var oldTensorIds=[];if(refTensors instanceof dist[\"Tensor\"]){oldTensorIds.push(refTensors.id);}else if(Array.isArray(refTensors)){refTensors.forEach(function(t){return oldTensorIds.push(t.id);});}else if(refTensors!=null){// `oldTensors` is a map from string name to Tensor.\nfor(var name in refTensors){var oldTensor=refTensors[name];oldTensorIds.push(oldTensor.id);}}var tensorsToDispose=[];if(tensors instanceof dist[\"Tensor\"]){if(oldTensorIds.indexOf(tensors.id)===-1){tensorsToDispose.push(tensors);}}else if(Array.isArray(tensors)){tensors.forEach(function(t){if(oldTensorIds.indexOf(t.id)===-1){tensorsToDispose.push(t);}});}else if(tensors!=null){// `oldTensors` is a map from string name to Tensor.\nfor(var _name3 in tensors){var tensor=tensors[_name3];if(oldTensorIds.indexOf(tensor.id)===-1){tensorsToDispose.push(tensor);}}}tensorsToDispose.forEach(function(t){if(!t.isDisposed){t.dispose();}});}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original Source: engine/training.py */ /**\r\n * Helper function for polymorphic input data: 1. singleton Tensor.\r\n */function isDataTensor(x){return x instanceof dist[\"Tensor\"];}/**\r\n * Helper function for polymorphic input data: 2. Array of Tensor.\r\n */function isDataArray(x){return Array.isArray(x);}/**\r\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\r\n */function isDataDict(x){return!isDataTensor(x)&&!isDataArray(x);}/**\r\n * Normalizes inputs and targets provided by users.\r\n * @param data User-provided input data (polymorphic).\r\n * @param names An Array of expected Tensor names.\r\n * @param shapes Optional Array of expected Tensor shapes.\r\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\r\n *   match  the expected value found in `shapes`.\r\n * @param exceptionPrefix String prefix used for exception formatting.\r\n * @returns List of standardized input Tensors (one Tensor per model input).\r\n * @throws ValueError: in case of improperly formatted user data.\r\n */function standardizeInputData(data,names,shapes){var checkBatchAxis=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var exceptionPrefix=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';if(names==null||names.length===0){// Check for the case where the model expected no data, but some data got\n// sent.\nif(data!=null){var gotUnexpectedData=false;if(isDataArray(data)&&data.length>0){gotUnexpectedData=true;}else if(isDataDict(data)){for(var key in data){if(data.hasOwnProperty(key)){gotUnexpectedData=true;break;}}}else{// `data` is a singleton Tensor in this case.\ngotUnexpectedData=true;}if(gotUnexpectedData){throw new ValueError(\"Error when checking model \".concat(exceptionPrefix,\" expected no data, \")+\"but got \".concat(data));}}return[];}if(data==null){return names.map(function(name){return null;});}var arrays;if(isDataDict(data)){data=data;arrays=[];var _iterator84=_createForOfIteratorHelper(names),_step84;try{for(_iterator84.s();!(_step84=_iterator84.n()).done;){var name=_step84.value;if(data[name]==null){throw new ValueError(\"No data provided for \\\"\".concat(name,\"\\\". Need data for each key in: \")+\"\".concat(names));}arrays.push(data[name]);}}catch(err){_iterator84.e(err);}finally{_iterator84.f();}}else if(isDataArray(data)){data=data;if(data.length!==names.length){throw new ValueError(\"Error when checking model \".concat(exceptionPrefix,\": the Array of \")+\"Tensors that you are passing to your model is not the size the \"+\"model expected. Expected to see \".concat(names.length,\" Tensor(s), but \")+\"instead got the following list of Tensor(s): \".concat(data));}arrays=data;}else{data=data;if(names.length>1){throw new ValueError(\"The model \".concat(exceptionPrefix,\" expects \").concat(names.length,\" Tensor(s), \")+\"but only received one Tensor. Found: Tensor with shape \".concat(data.shape));}arrays=[data];}arrays=ensureTensorsRank2OrHigher(arrays);// Check shape compatibility.\nif(shapes!=null){for(var i=0;i<names.length;++i){if(shapes[i]==null){continue;}var array=arrays[i];if(array.shape.length!==shapes[i].length){throw new ValueError(\"Error when checking \".concat(exceptionPrefix,\": expected \").concat(names[i],\" \")+\"to have \".concat(shapes[i].length,\" dimension(s). but got array with \")+\"shape \".concat(array.shape));}for(var j=0;j<shapes[i].length;++j){if(j===0&&!checkBatchAxis){// Skip the first (batch) axis.\ncontinue;}var dim=array.shape[j];var refDim=shapes[i][j];if(refDim!=null&&refDim>=0&&dim!==refDim){throw new ValueError(\"Error when checking \".concat(exceptionPrefix,\": expected \").concat(names[i],\" \")+\"to have shape [\".concat(shapes[i],\"], but got array with shape \")+\"[\".concat(array.shape,\"].\"));}}}}return arrays;}/**\r\n * User input validation for Tensors.\r\n * @param inputs `Array` of `tf.Tensor`s for inputs.\r\n * @param targets `Array` of `tf.Tensor`s for targets.\r\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\r\n * @throws ValueError: in case of incorrectly formatted data.\r\n */function checkArrayLengths(inputs,targets,weights){var setX=unique(inputs.map(function(input){return input.shape[0];}));setX.sort();var setY=unique(targets.map(function(target){return target.shape[0];}));setY.sort();// TODO(cais): Check `weights` as well.\nif(setX.length>1){throw new ValueError(\"All input Tensors (x) should have the same number of samples. \"+\"Got array shapes: \"+\"\".concat(JSON.stringify(inputs.map(function(input){return input.shape;}))));}if(setY.length>1){throw new ValueError(\"All target Tensors (y) should have the same number of samples. \"+\"Got array shapes: \"+\"\".concat(JSON.stringify(targets.map(function(target){return target.shape;}))));}if(setX.length>0&&setY.length>0&&!dist[\"util\"].arraysEqual(setX,setY)){throw new ValueError(\"Input Tensors should have the same number of samples as target \"+\"Tensors. Found \".concat(setX[0],\" input sample(s) and \").concat(setY[0],\" target \")+\"sample(s).\");}}/**\r\n * Validation on the compatibility of targes and loss functions.\r\n *\r\n * This helps prevent users from using loss functions incorrectly.\r\n *\r\n * @param targets `Array` of `tf.Tensor`s of targets.\r\n * @param lossFns `Array` of loss functions.\r\n * @param outputShapes `Array` of shapes of model outputs.\r\n */function checkLossAndTargetCompatibility(targets,lossFns,outputShapes){// TODO(cais): Dedicated test coverage?\nvar keyLosses=[meanSquaredError,binaryCrossentropy,categoricalCrossentropy];for(var i=0;i<targets.length;++i){var y=targets[i];var loss=lossFns[i];var shape=outputShapes[i];if(loss==null){continue;}if(loss===categoricalCrossentropy){if(y.shape[y.shape.length-1]===1){throw new ValueError(\"You are passing a target array of shape \".concat(y.shape,\" while using \")+\"a loss 'categorical_crossentropy'. 'categorical_crossentropy'\"+\"expects targets to be binary matrices (1s and 0s) of shape \"+\"[samples, classes].\");// TODO(cais): Example code in error message.\n}}if(keyLosses.indexOf(loss)!==-1){var slicedYShape=y.shape.slice(1);var slicedShape=shape.slice(1);for(var j=0;j<slicedYShape.length;++j){var targetDim=slicedYShape[j];var outDim=slicedShape[j];if(outDim!=null&&targetDim!==outDim){throw new ValueError(\"A target Tensor with shape \".concat(y.shape,\" was passed for an \")+\"output of shape \".concat(shape,\", while using a loss function that \")+\"expects targets to have the same shape as the output.\");}}}}}/**\r\n * Check inputs provided by the user.\r\n *\r\n * Porting Note: This corresponds to _standardize_input_data() in Python\r\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\r\n *   the data. Specifically:\r\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\r\n *      example. We don't need to worry about that here because there is no\r\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\r\n *      If one becomes available in the future, we can add support.\r\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\r\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\r\n * may add support for `Object` data inputs in the future when the need\r\n * arises.\r\n *\r\n * Instead, we perform basic checks for number of parameters and shapes.\r\n *\r\n * @param data: The input data.\r\n * @param names: Name for the inputs, from the model.\r\n * @param shapes: Expected shapes for the input data, from the model.\r\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\r\n *   first dimension) will be checked for matching.\r\n * @param exceptionPrefix: Execption prefix message, used in generating error\r\n *   messages.\r\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\r\n */function checkInputData(data,names,shapes){var checkBatchAxis=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var exceptionPrefix=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';var arrays;if(Array.isArray(data)){if(data.length!==names.length){throw new ValueError(\"Error when checking model \".concat(exceptionPrefix,\": the Array of \")+\"Tensors that you are passing to your model is not the size the \"+\"the model expected. Expected to see \".concat(names.length,\" Tensor(s),\")+\" but instead got \".concat(data.length,\" Tensors(s).\"));}arrays=data;}else{if(names.length>1){throw new ValueError(\"The model expects \".concat(names.length,\" \").concat(exceptionPrefix,\" Tensors, \")+\"but only received one Tensor. Found: array with shape \"+\"\".concat(JSON.stringify(data.shape),\".\"));}arrays=[data];}if(shapes!=null){for(var i=0;i<names.length;++i){if(shapes[i]==null){continue;}var array=arrays[i];if(array.shape.length!==shapes[i].length){throw new ValueError(\"Error when checking \".concat(exceptionPrefix,\": expected \").concat(names[i],\" \")+\"to have \".concat(shapes[i].length,\" dimension(s), but got array with \")+\"shape \".concat(JSON.stringify(array.shape)));}for(var j=0;j<shapes[i].length;++j){if(j===0&&!checkBatchAxis){continue;}var dim=array.shape[j];var refDim=shapes[i][j];if(refDim!=null){if(refDim!==dim){throw new ValueError(\"Error when checking \".concat(exceptionPrefix,\": expected \")+\"\".concat(names[i],\" to have shape \").concat(JSON.stringify(shapes[i]),\" but \")+\"got array with shape \".concat(JSON.stringify(array.shape),\".\"));}}}}}}/**\r\n * Maps metric functions to model outputs.\r\n * @param metrics An shortcut strings name, metric function, `Array` or dict\r\n *   (`Object`) of metric functions.\r\n * @param outputNames An `Array` of the names of model outputs.\r\n * @returns An `Array` (one entry per model output) of `Array` of metric\r\n *   functions. For instance, if the model has 2 outputs, and for the first\r\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\r\n *   and just `binaryAccuracy` for the second output, the `Array` would look\r\n *   like:\r\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\r\n * @throws TypeError: incompatible metrics format.\r\n */function collectMetrics(metrics,outputNames){if(metrics==null||Array.isArray(metrics)&&metrics.length===0){return outputNames.map(function(name){return[];});}var wrappedMetrics;if(typeof metrics==='string'||typeof metrics==='function'){wrappedMetrics=[metrics];}else if(Array.isArray(metrics)||_typeof2(metrics)==='object'){wrappedMetrics=metrics;}else{throw new TypeError('Type of metrics argument not understood. Expected an string,'+\"function, Array, or Object, found: \".concat(metrics));}if(Array.isArray(wrappedMetrics)){// We then apply all metrics to all outputs.\nreturn outputNames.map(function(name){return wrappedMetrics;});}else{// In this case, metrics is a dict.\nvar nestedMetrics=[];var _iterator85=_createForOfIteratorHelper(outputNames),_step85;try{for(_iterator85.s();!(_step85=_iterator85.n()).done;){var name=_step85.value;var outputMetrics=wrappedMetrics.hasOwnProperty(name)?wrappedMetrics[name]:[];if(!Array.isArray(outputMetrics)){outputMetrics=[outputMetrics];}nestedMetrics.push(outputMetrics);}}catch(err){_iterator85.e(err);}finally{_iterator85.f();}return nestedMetrics;}}var LAYERS_MODEL_FORMAT_NAME='layers-model';/**\r\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\r\n * for training, evaluation, prediction and saving.\r\n *\r\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\r\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\r\n *\r\n * See also:\r\n *   `tf.Sequential`, `tf.loadLayersModel`.\r\n */ /** @doc {heading: 'Models', subheading: 'Classes'} */var training_LayersModel=/*#__PURE__*/function(_container_Container){_inherits(training_LayersModel,_container_Container);var _super68=_createSuper(training_LayersModel);function training_LayersModel(args){var _this150;_classCallCheck2(this,training_LayersModel);_this150=_super68.call(this,args);_this150.isTraining=false;return _this150;}/**\r\n     * Print a text summary of the model's layers.\r\n     *\r\n     * The summary includes\r\n     * - Name and type of all layers that comprise the model.\r\n     * - Output shape(s) of the layers\r\n     * - Number of weight parameters of each layer\r\n     * - If the model has non-sequential-like topology, the inputs each layer\r\n     *   receives\r\n     * - The total number of trainable and non-trainable parameters of the model.\r\n     *\r\n     * ```js\r\n     * const input1 = tf.input({shape: [10]});\r\n     * const input2 = tf.input({shape: [20]});\r\n     * const dense1 = tf.layers.dense({units: 4}).apply(input1);\r\n     * const dense2 = tf.layers.dense({units: 8}).apply(input2);\r\n     * const concat = tf.layers.concatenate().apply([dense1, dense2]);\r\n     * const output =\r\n     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\r\n     *\r\n     * const model = tf.model({inputs: [input1, input2], outputs: output});\r\n     * model.summary();\r\n     * ```\r\n     *\r\n     * @param lineLength Custom line length, in number of characters.\r\n     * @param positions Custom widths of each of the columns, as either\r\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\r\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\r\n     *   right-most (i.e., ending) position of a column.\r\n     * @param printFn Custom print function. Can be used to replace the default\r\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\r\n     *   messages in the console.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */_createClass(training_LayersModel,[{key:\"summary\",value:function summary(lineLength,positions){var printFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:console.log;if(!this.built){throw new ValueError(\"This model has never been called, thus its weights have not been \"+\"created yet. So no summary can be displayed. Build the model \"+\"first (e.g., by calling it on some test data).\");}printSummary(this,lineLength,positions,printFn);}/**\r\n     * Configures and prepares the model for training and evaluation.  Compiling\r\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\r\n     * or `evaluate` on an un-compiled model will throw an error.\r\n     *\r\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\r\n     * metrics to be used for fitting and evaluating this model.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"compile\",value:function compile(args){var _this151=this;if(args.loss==null){args.loss=[];}this.loss=args.loss;if(typeof args.optimizer==='string'){this.optimizer_=getOptimizer(args.optimizer);this.isOptimizerOwned=true;}else{if(!(args.optimizer instanceof dist[\"Optimizer\"])){throw new ValueError(\"User-defined optimizer must be an instance of tf.Optimizer.\");}this.optimizer_=args.optimizer;this.isOptimizerOwned=false;}// TODO(cais): Add lossWeights.\n// TODO(cais): Add sampleWeightMode.\n// Prepare loss functions.\nvar lossFunctions=[];if(!Array.isArray(args.loss)&&typeof args.loss!=='string'&&typeof args.loss!=='function'){args.loss=args.loss;for(var name in args.loss){if(this.outputNames.indexOf(name)===-1){throw new ValueError(\"Unknown entry in loss dictionary: \\\"\".concat(name,\"\\\". \")+\"Only expected the following keys: \".concat(this.outputNames));}}var _iterator86=_createForOfIteratorHelper(this.outputNames),_step86;try{for(_iterator86.s();!(_step86=_iterator86.n()).done;){var _name4=_step86.value;if(args.loss[_name4]==null){console.warn(\"Output \\\"\".concat(_name4,\"\\\" is missing from loss dictionary. We assume \")+\"this was done on purpose, and we will not be expecting data \"+\"to be passed to \".concat(_name4,\" during training\"));}lossFunctions.push(get(args.loss[_name4]));}}catch(err){_iterator86.e(err);}finally{_iterator86.f();}}else if(Array.isArray(args.loss)){if(args.loss.length!==this.outputs.length){throw new ValueError(\"When passing an Array as loss, it should have one entry per \"+\"model output. The model has \".concat(this.outputs.length,\" output(s), \")+\"but you passed loss=\".concat(args.loss,\".\"));}var theLosses=args.loss;lossFunctions=theLosses.map(function(l){return get(l);});}else{var lossFunction=get(args.loss);this.outputs.forEach(function(_){lossFunctions.push(lossFunction);});}this.lossFunctions=lossFunctions;this.feedOutputNames=[];this.feedOutputShapes=[];this.feedLossFns=[];for(var i=0;i<this.outputs.length;++i){// TODO(cais): Logic for skipping target(s).\nvar shape=this.internalOutputShapes[i];var _name5=this.outputNames[i];this.feedOutputNames.push(_name5);this.feedOutputShapes.push(shape);this.feedLossFns.push(this.lossFunctions[i]);}// TODO(cais): Add logic for output masks.\n// TODO(cais): Add logic for sample weights.\nvar skipTargetIndices=[];// Prepare metrics.\nthis.metrics=args.metrics;// TODO(cais): Add weightedMetrics.\nthis.metricsNames=['loss'];this.metricsTensors=[];// Compute total loss.\n// Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n//   Here, metricsTensors are TypeScript functions. This difference is due\n//   to the difference in symbolic/imperative property of the backends.\nnameScope('loss',function(){for(var _i71=0;_i71<_this151.outputs.length;++_i71){if(skipTargetIndices.indexOf(_i71)!==-1){continue;}// TODO(cais): Add weightedLoss, sampleWeight and mask.\n//   The following line should be weightedLoss\nvar weightedLoss=_this151.lossFunctions[_i71];if(_this151.outputs.length>1){_this151.metricsTensors.push([weightedLoss,_i71]);_this151.metricsNames.push(_this151.outputNames[_i71]+'_loss');}}// Porting Note: Due to the imperative nature of the backend, we calculate\n//   the regularizer penalties in the totalLossFunction, instead of here.\n});var nestedMetrics=collectMetrics(args.metrics,this.outputNames);// TODO(cais): Add nestedWeightedMetrics.\n/**\r\n         * Helper function used in loop below.\r\n         */var appendMetric=function appendMetric(outputIndex,metricName,metricTensor){if(_this151.outputNames.length>1){metricName=_this151.outputNames[outputIndex]+'_'+metricName;}_this151.metricsNames.push(metricName);_this151.metricsTensors.push([metricTensor,outputIndex]);};nameScope('metric',function(){var _loop20=function _loop20(_i72){if(skipTargetIndices.indexOf(_i72)!==-1){return\"continue\";}var outputMetrics=nestedMetrics[_i72];// TODO(cais): Add weights and outputWeightedMetrics.\n// TODO(cais): Add optional arg `weights` to the following function.\nvar handleMetrics=function handleMetrics(metrics){var metricNamePrefix='';var metricName;var accFn;var weightedMetricFn;//  TODO(cais): Use 'weights_' for weighted metrics.\nvar _iterator87=_createForOfIteratorHelper(metrics),_step87;try{for(_iterator87.s();!(_step87=_iterator87.n()).done;){var metric=_step87.value;if(typeof metric==='string'&&['accuracy','acc','crossentropy','ce'].indexOf(metric)!==-1){var outputShape=_this151.internalOutputShapes[_i72];if(outputShape[outputShape.length-1]===1||_this151.lossFunctions[_i72]===binaryCrossentropy){// case: binary accuracy/crossentropy.\nif(['accuracy','acc'].indexOf(metric)!==-1){accFn=binaryAccuracy;}else if(['crossentropy','ce'].indexOf(metric)!==-1){accFn=metrics_binaryCrossentropy;}}else if(_this151.lossFunctions[_i72]===sparseCategoricalCrossentropy){// case: categorical accuracy / crossentropy with sparse\n// targets.\nif(['accuracy','acc'].indexOf(metric)!==-1){accFn=sparseCategoricalAccuracy;}else if(['crossentropy','ce'].indexOf(metric)!==-1){accFn=metrics_sparseCategoricalCrossentropy;}}else{// case: categorical accuracy / crossentropy.\nif(['accuracy','acc'].indexOf(metric)!==-1){accFn=categoricalAccuracy;}else if(['crossentropy','ce'].indexOf(metric)!==-1){accFn=metrics_categoricalCrossentropy;}}var suffix=void 0;if(['accuracy','acc'].indexOf(metric)!==-1){suffix='acc';}else if(['crossentropy','ce'].indexOf(metric)!==-1){suffix='ce';}// TODO(cais): Add weighting actually.\nweightedMetricFn=accFn;metricName=metricNamePrefix+suffix;}else{var metricFn=metrics_get(metric);// TODO(cais): Add weighting actually.\nweightedMetricFn=metricFn;metricName=metricNamePrefix+getLossOrMetricName(metric);}// TODO(cais): Add weighting and masking to metricResult.\nvar metricResult=void 0;nameScope(metricName,function(){metricResult=weightedMetricFn;});appendMetric(_i72,metricName,metricResult);}}catch(err){_iterator87.e(err);}finally{_iterator87.f();}};handleMetrics(outputMetrics);// TODO(cais): Call handleMetrics with weights.\n};for(var _i72=0;_i72<_this151.outputs.length;++_i72){var _ret3=_loop20(_i72);if(_ret3===\"continue\")continue;}});// Porting Notes: Given the imperative backend of tfjs-core,\n//   there is no need for constructing the symbolic graph and placeholders.\nthis.collectedTrainableWeights=this.trainableWeights;}/**\r\n     * Check trainable weights count consistency.\r\n     *\r\n     * This will raise a warning if `this.trainableWeights` and\r\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\r\n     * numbers of parameters).\r\n     * Inconsistency will typically arise when one modifies `model.trainable`\r\n     * without calling `model.compile()` again.\r\n     */},{key:\"checkTrainableWeightsConsistency\",value:function checkTrainableWeightsConsistency(){if(this.collectedTrainableWeights==null){return;}if(this.trainableWeights.length!==this.collectedTrainableWeights.length){console.warn('Discrepancy between trainableweights and collected trainable '+'weights. Did you set `model.trainable` without calling '+'`model.compile()` afterwards?');}}/**\r\n     * Returns the loss value & metrics values for the model in test mode.\r\n     *\r\n     * Loss and metrics are specified during `compile()`, which needs to happen\r\n     * before calls to `evaluate()`.\r\n     *\r\n     * Computation is done in batches.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n     * const result = model.evaluate(\r\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\r\n     * result.print();\r\n     * ```\r\n     *\r\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\r\n     * model has multiple inputs.\r\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\r\n     * model has multiple outputs.\r\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\r\n     *\r\n     * @return `Scalar` test loss (if the model has a single output and no\r\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\r\n     *   and/or metrics). The attribute `model.metricsNames`\r\n     *   will give you the display labels for the scalar outputs.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"evaluate\",value:function evaluate(x,y){var args=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var batchSize=args.batchSize==null?32:args.batchSize;checkBatchSize(batchSize);// TODO(cais): Standardize `config.sampleWeights` as well.\n// Validate user data.\nvar checkBatchAxis=true;var standardizedOuts=this.standardizeUserDataXY(x,y,checkBatchAxis,batchSize);try{// TODO(cais): If uses `useLearningPhase`, set the corresponding element\n// of the input to 0.\nvar ins=standardizedOuts[0].concat(standardizedOuts[1]);this.makeTestFunction();var f=this.testFunction;var testOuts=this.testLoop(f,ins,batchSize,args.verbose,args.steps);return singletonOrArray(testOuts);}finally{disposeNewTensors(standardizedOuts[0],x);disposeNewTensors(standardizedOuts[1],y);}}// TODO(cais): Add code snippet below once real dataset objects are\n//   available.\n/**\r\n     * Evaluate model using a dataset object.\r\n     *\r\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\r\n     *\r\n     * @param dataset A dataset object. Its `iterator()` method is expected\r\n     *   to generate a dataset iterator object, the `next()` method of which\r\n     *   is expected to produce data batches for evaluation. The return value\r\n     *   of the `next()` call ought to contain a boolean `done` field and a\r\n     *   `value` field. The `value` field is expected to be an array of two\r\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\r\n     *   case is for models with exactly one input and one output (e.g..\r\n     *   a sequential model). The latter case is for models with multiple\r\n     *   inputs and/or multiple outputs. Of the two items in the array, the\r\n     *   first is the input feature(s) and the second is the output target(s).\r\n     * @param args A configuration object for the dataset-based evaluation.\r\n     * @returns Loss and metric values as an Array of `Scalar` objects.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"evaluateDataset\",value:function(){var _evaluateDataset3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee149(dataset,args){return regeneratorRuntime.wrap(function _callee149$(_context149){while(1){switch(_context149.prev=_context149.next){case 0:this.makeTestFunction();return _context149.abrupt(\"return\",_evaluateDataset2(this,dataset,args));case 2:case\"end\":return _context149.stop();}}},_callee149,this);}));function evaluateDataset(_x190,_x191){return _evaluateDataset3.apply(this,arguments);}return evaluateDataset;}()/**\r\n     * Get number of samples provided for training, evaluation or prediction.\r\n     *\r\n     * @param ins Input `tf.Tensor`.\r\n     * @param batchSize Integer batch size, optional.\r\n     * @param steps Total number of steps (batches of samples) before\r\n     * declaring loop finished. Optional.\r\n     * @param stepsName The public API's parameter name for `steps`.\r\n     * @returns Number of samples provided.\r\n     */},{key:\"checkNumSamples\",value:function checkNumSamples(ins,batchSize,steps){var stepsName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'steps';var numSamples;if(steps!=null){numSamples=null;if(batchSize!=null){throw new ValueError(\"If \".concat(stepsName,\" is set, batchSize must be null or undefined.\")+\"Got batchSize = \".concat(batchSize));}}else if(ins!=null){if(Array.isArray(ins)){numSamples=ins[0].shape[0];}else{numSamples=ins.shape[0];}}else{throw new ValueError(\"Either the input data should have a defined shape, or \"+\"\".concat(stepsName,\" shoud be specified.\"));}return numSamples;}/**\r\n     * Execute internal tensors of the model with input data feed.\r\n     * @param inputs Input data feed. Must match the inputs of the model.\r\n     * @param outputs Names of the output tensors to be fetched. Must match\r\n     *   names of the SymbolicTensors that belong to the graph.\r\n     * @returns Fetched values for `outputs`.\r\n     */},{key:\"execute\",value:function execute(inputs,outputs){if(Array.isArray(outputs)&&outputs.length===0){throw new ValueError('`outputs` is an empty Array, which is not allowed.');}var outputsIsArray=Array.isArray(outputs);var outputNames=outputsIsArray?outputs:[outputs];var outputSymbolicTensors=this.retrieveSymbolicTensors(outputNames);// Format the input into a FeedDict.\nvar feedDict=new executor_FeedDict();if(inputs instanceof dist[\"Tensor\"]){inputs=[inputs];}if(Array.isArray(inputs)){if(inputs.length!==this.inputs.length){throw new ValueError(\"The number of inputs provided (\".concat(inputs.length,\") \")+\"does not match the number of inputs of this model \"+\"(\".concat(this.inputs.length,\").\"));}for(var i=0;i<this.inputs.length;++i){feedDict.add(this.inputs[i],inputs[i]);}}else{var _iterator88=_createForOfIteratorHelper(this.inputs),_step88;try{for(_iterator88.s();!(_step88=_iterator88.n()).done;){var input=_step88.value;var tensorValue=inputs[input.name];if(tensorValue==null){throw new ValueError(\"No value is provided for the model's input \".concat(input.name));}feedDict.add(input,tensorValue);}}catch(err){_iterator88.e(err);}finally{_iterator88.f();}}// Run execution.\nvar executeOutputs=_execute(outputSymbolicTensors,feedDict);return outputsIsArray?executeOutputs:executeOutputs[0];}/**\r\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\r\n     */},{key:\"retrieveSymbolicTensors\",value:function retrieveSymbolicTensors(symbolicTensorNames){var outputSymbolicTensors=pyListRepeat(null,symbolicTensorNames.length);var outputsRemaining=symbolicTensorNames.length;var _iterator89=_createForOfIteratorHelper(this.layers),_step89;try{for(_iterator89.s();!(_step89=_iterator89.n()).done;){var layer=_step89.value;var layerOutputs=Array.isArray(layer.output)?layer.output:[layer.output];var layerOutputNames=layerOutputs.map(function(output){return output.name;});for(var i=0;i<symbolicTensorNames.length;++i){var index=layerOutputNames.indexOf(symbolicTensorNames[i]);if(index!==-1){outputSymbolicTensors[i]=layerOutputs[index];outputsRemaining--;}if(outputsRemaining===0){break;}}if(outputsRemaining===0){break;}}}catch(err){_iterator89.e(err);}finally{_iterator89.f();}if(outputsRemaining>0){var remainingNames=[];outputSymbolicTensors.forEach(function(tensor,i){if(tensor==null){remainingNames.push(symbolicTensorNames[i]);}});throw new ValueError(\"Cannot find SymbolicTensors for output name(s): \"+\"\".concat(JSON.stringify(remainingNames)));}return outputSymbolicTensors;}/**\r\n     * Helper method to loop over some data in batches.\r\n     *\r\n     * Porting Note: Not using the functional approach in the Python equivalent\r\n     *   due to the imperative backend.\r\n     * Porting Note: Does not support step mode currently.\r\n     *\r\n     * @param ins: input data\r\n     * @param batchSize: integer batch size.\r\n     * @param verbose: verbosity model\r\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\r\n     *   `tf.Tensor` (if multipe outputs).\r\n     */},{key:\"predictLoop\",value:function predictLoop(ins){var _this152=this;var batchSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:32;var verbose=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return dist[\"tidy\"](function(){var numSamples=_this152.checkNumSamples(ins);if(verbose){throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');}// Sample-based predictions.\n// Porting Note: Tensor currently does not support sliced assignments as\n//   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n//   iterating over the batches.\nvar batches=makeBatches(numSamples,batchSize);var outsBatches=_this152.outputs.map(function(output){return[];});// TODO(cais): Can the scope() be pushed down inside the for loop?\nvar _loop21=function _loop21(batchIndex){var batchOuts=dist[\"tidy\"](function(){var batchStart=batches[batchIndex][0];var batchEnd=batches[batchIndex][1];// TODO(cais): Take care of the case of the last element is a flag for\n//   training/test.\nvar insBatch=sliceArrays(ins,batchStart,batchEnd);// Construct the feeds for execute();\nvar feeds=[];if(Array.isArray(insBatch)){for(var i=0;i<insBatch.length;++i){feeds.push({key:_this152.inputs[i],value:insBatch[i]});}}else{feeds.push({key:_this152.inputs[0],value:insBatch});}var feedDict=new executor_FeedDict(feeds);return _execute(_this152.outputs,feedDict);});batchOuts.forEach(function(batchOut,i){return outsBatches[i].push(batchOut);});};for(var batchIndex=0;batchIndex<batches.length;++batchIndex){_loop21(batchIndex);}return singletonOrArray(outsBatches.map(function(batches){return dist[\"concat\"](batches,0);}));});}/**\r\n     * Generates output predictions for the input samples.\r\n     *\r\n     * Computation is done in batches.\r\n     *\r\n     * Note: the \"step\" mode of predict() is currently not supported.\r\n     *   This is because the TensorFlow.js core backend is imperative only.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\r\n     * ```\r\n     *\r\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\r\n     *   the model has multiple inputs.\r\n     * @param args A `ModelPredictArgs` object containing optional fields.\r\n     *\r\n     * @return Prediction results as a `tf.Tensor`(s).\r\n     *\r\n     * @exception ValueError In case of mismatch between the provided input data\r\n     *   and the model's expectations, or in case a stateful model receives a\r\n     *   number of samples that is not a multiple of the batch size.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"predict\",value:function predict(x){var args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var xsRank2OrHigher=ensureTensorsRank2OrHigher(x);checkInputData(xsRank2OrHigher,this.inputNames,this.feedInputShapes,false);try{// TODO(cais): Take care of stateful models.\n//   if (this.stateful) ...\n// TODO(cais): Take care of the learning_phase boolean flag.\n//   if (this.useLearningPhase) ...\nvar _batchSize=args.batchSize==null?32:args.batchSize;checkBatchSize(_batchSize);return this.predictLoop(xsRank2OrHigher,_batchSize);}finally{disposeNewTensors(xsRank2OrHigher,x);}}/**\r\n     * Returns predictions for a single batch of samples.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.predictOnBatch(tf.ones([8, 10])).print();\r\n     * ```\r\n     * @param x: Input samples, as a Tensor (for models with exactly one\r\n     *   input) or an array of Tensors (for models with more than one input).\r\n     * @return Tensor(s) of predictions\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"predictOnBatch\",value:function predictOnBatch(x){checkInputData(x,this.inputNames,this.feedInputShapes,true);// TODO(cais): Take care of the learning_phase boolean flag.\n//   if (this.useLearningPhase) ...\nvar batchSize=(Array.isArray(x)?x[0]:x).shape[0];return this.predictLoop(x,batchSize);}},{key:\"standardizeUserDataXY\",value:function standardizeUserDataXY(x,y){var checkBatchAxis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var batchSize=arguments.length>3?arguments[3]:undefined;// TODO(cais): Add sampleWeight, classWeight\nif(this.optimizer_==null){throw new RuntimeError('You must compile a model before training/testing. Use '+'LayersModel.compile(modelCompileArgs).');}var outputShapes=[];for(var i=0;i<this.feedOutputShapes.length;++i){var outputShape=this.feedOutputShapes[i];var lossFn=this.feedLossFns[i];if(lossFn===sparseCategoricalCrossentropy){outputShapes.push(outputShape.slice(0,outputShape.length-1).concat([1]));}else{// Porting Note: Because of strong typing `lossFn` must be a function.\noutputShapes.push(outputShape);}}x=standardizeInputData(x,this.feedInputNames,this.feedInputShapes,false,'input');y=standardizeInputData(y,this.feedOutputNames,outputShapes,false,'target');// TODO(cais): Standardize sampleWeights & classWeights.\ncheckArrayLengths(x,y,null);// TODO(cais): Check sampleWeights as well.\ncheckLossAndTargetCompatibility(y,this.feedLossFns,this.feedOutputShapes);if(this.stateful&&batchSize!=null&&batchSize>0){if(x[0].shape[0]%batchSize!==0){throw new ValueError(\"In a stateful network, you should only pass inputs with a \"+\"number of samples that is divisible by the batch size \"+\"\".concat(batchSize,\". Found: \").concat(x[0].shape[0],\" sample(s).\"));}}return[x,y];}},{key:\"standardizeUserData\",value:function(){var _standardizeUserData=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee150(x,y,sampleWeight,classWeight){var checkBatchAxis,batchSize,_this$standardizeUser,_this$standardizeUser2,standardXs,standardYs,standardSampleWeights,classWeights,i,_args152=arguments;return regeneratorRuntime.wrap(function _callee150$(_context150){while(1){switch(_context150.prev=_context150.next){case 0:checkBatchAxis=_args152.length>4&&_args152[4]!==undefined?_args152[4]:true;batchSize=_args152.length>5?_args152[5]:undefined;_this$standardizeUser=this.standardizeUserDataXY(x,y,checkBatchAxis,batchSize),_this$standardizeUser2=_slicedToArray(_this$standardizeUser,2),standardXs=_this$standardizeUser2[0],standardYs=_this$standardizeUser2[1];// TODO(cais): Handle sampleWeights.\nif(!(sampleWeight!=null)){_context150.next=5;break;}throw new Error('sample weight is not supported yet.');case 5:standardSampleWeights=null;if(!(classWeight!=null)){_context150.next=19;break;}classWeights=standardizeClassWeights(classWeight,this.outputNames);standardSampleWeights=[];i=0;case 10:if(!(i<classWeights.length)){_context150.next=19;break;}_context150.t0=standardSampleWeights;_context150.next=14;return standardizeWeights(standardYs[i],null,classWeights[i]);case 14:_context150.t1=_context150.sent;_context150.t0.push.call(_context150.t0,_context150.t1);case 16:++i;_context150.next=10;break;case 19:return _context150.abrupt(\"return\",[standardXs,standardYs,standardSampleWeights]);case 20:case\"end\":return _context150.stop();}}},_callee150,this);}));function standardizeUserData(_x192,_x193,_x194,_x195){return _standardizeUserData.apply(this,arguments);}return standardizeUserData;}()/**\r\n     * Loop over some test data in batches.\r\n     * @param f A Function returning a list of tensors.\r\n     * @param ins Array of tensors to be fed to `f`.\r\n     * @param batchSize Integer batch size or `null` / `undefined`.\r\n     * @param verbose verbosity mode.\r\n     * @param steps Total number of steps (batches of samples) before\r\n     * declaring test finished. Ignored with the default value of `null` /\r\n     * `undefined`.\r\n     * @returns Array of Scalars.\r\n     */},{key:\"testLoop\",value:function testLoop(f,ins,batchSize){var _this153=this;var verbose=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var steps=arguments.length>4?arguments[4]:undefined;return dist[\"tidy\"](function(){var numSamples=_this153.checkNumSamples(ins,batchSize,steps,'steps');var outs=[];if(verbose>0){throw new NotImplementedError('Verbose mode is not implemented yet.');}// TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\nif(steps!=null){throw new NotImplementedError('steps mode in testLoop() is not implemented yet');}else{var batches=makeBatches(numSamples,batchSize);var indexArray=Object(dist[\"tensor1d\"])(range(0,numSamples));for(var batchIndex=0;batchIndex<batches.length;++batchIndex){var batchStart=batches[batchIndex][0];var batchEnd=batches[batchIndex][1];var batchIds=sliceAlongFirstAxis(indexArray,batchStart,batchEnd-batchStart);// TODO(cais): In ins, train flag can be a number, instead of an\n//   Tensor? Do we need to handle this in tfjs-layers?\nvar insBatch=sliceArraysByIndices(ins,batchIds);var batchOuts=f(insBatch);if(batchIndex===0){for(var i=0;i<batchOuts.length;++i){outs.push(Object(dist[\"scalar\"])(0));}}for(var _i73=0;_i73<batchOuts.length;++_i73){var batchOut=batchOuts[_i73];outs[_i73]=dist[\"add\"](outs[_i73],dist[\"mul\"](batchEnd-batchStart,batchOut));}}for(var _i74=0;_i74<outs.length;++_i74){outs[_i74]=dist[\"div\"](outs[_i74],numSamples);}}return outs;});}},{key:\"getDedupedMetricsNames\",value:function getDedupedMetricsNames(){var outLabels=this.metricsNames;// Rename duplicated metrics names (can happen with an output layer\n// shared among multiple dataflows).\nvar dedupedOutLabels=[];for(var i=0;i<outLabels.length;++i){var label=outLabels[i];var newLabel=label;if(generic_utils_count(outLabels,label)>1){var dupIndex=generic_utils_count(outLabels.slice(0,i),label);newLabel+=\"_\".concat(dupIndex);}dedupedOutLabels.push(newLabel);}return dedupedOutLabels;}/**\r\n     * Creates a function that performs the following actions:\r\n     *\r\n     * 1. computes the losses\r\n     * 2. sums them to get the total loss\r\n     * 3. call the optimizer computes the gradients of the LayersModel's\r\n     *    trainable weights w.r.t. the total loss and update the variables\r\n     * 4. calculates the metrics\r\n     * 5. returns the values of the losses and metrics.\r\n     */},{key:\"makeTrainFunction\",value:function makeTrainFunction(){var _this154=this;return function(data){var lossValues=[];var inputs=data.slice(0,_this154.inputs.length);var targets=data.slice(_this154.inputs.length,_this154.inputs.length+_this154.outputs.length);var sampleWeights=data.slice(_this154.inputs.length+_this154.outputs.length,_this154.inputs.length+_this154.outputs.length*2);var metricsValues=[];// Create a function that computes the total loss based on the\n// inputs. This function is used for obtaining gradients through\n// backprop.\nvar totalLossFunction=function totalLossFunction(){var feeds=[];for(var i=0;i<_this154.inputs.length;++i){feeds.push({key:_this154.inputs[i],value:inputs[i]});}var feedDict=new executor_FeedDict(feeds);var outputs=_execute(_this154.outputs,feedDict,{'training':true});// TODO(cais): Take care of the case of multiple outputs from a\n//   single layer?\nvar totalLoss;for(var _i75=0;_i75<_this154.lossFunctions.length;++_i75){var lossFunction=_this154.lossFunctions[_i75];var loss=lossFunction(targets[_i75],outputs[_i75]);if(sampleWeights[_i75]!=null){loss=computeWeightedLoss(loss,sampleWeights[_i75]);}// TODO(cais): push Scalar instead.\nvar meanLoss=dist[\"mean\"](loss);// TODO(cais): Use a scope() instead, to avoid ownership.\nlossValues.push(meanLoss);if(_i75===0){totalLoss=loss;}else{totalLoss=dist[\"add\"](totalLoss,loss);}}// Compute the metrics.\n// TODO(cais): These should probably be calculated outside\n//   totalLossFunction to benefit speed?\nfor(var _i76=0;_i76<_this154.metricsTensors.length;++_i76){var weightedMetric=void 0;if(_this154.outputs.length>1&&_i76<_this154.outputs.length){weightedMetric=lossValues[_i76];}else{var metric=_this154.metricsTensors[_i76][0];var outputIndex=_this154.metricsTensors[_i76][1];weightedMetric=dist[\"mean\"](metric(targets[outputIndex],outputs[outputIndex]));}dist[\"keep\"](weightedMetric);// TODO(cais): Use a scope() instead, to avoid ownership.\nmetricsValues.push(weightedMetric);}totalLoss=dist[\"mean\"](totalLoss);// Add regularizer penalties.\n_this154.calculateLosses().forEach(function(regularizerLoss){totalLoss=dist[\"add\"](totalLoss,regularizerLoss);});return totalLoss;};var variables=_this154.collectedTrainableWeights.map(function(param){return param.read();});var returnCost=true;var totalLossValue=_this154.optimizer_.minimize(totalLossFunction,returnCost,variables);return[totalLossValue].concat(metricsValues);};}/**\r\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\r\n     * batch of inputs, returns the prespecified loss and metrics of the model\r\n     * under the batch of input data.\r\n     */},{key:\"makeTestFunction\",value:function makeTestFunction(){var _this155=this;this.testFunction=function(data){return dist[\"tidy\"](function(){var valOutputs=[];var totalLoss;var inputs=data.slice(0,_this155.inputs.length);var targets=data.slice(_this155.inputs.length,_this155.inputs.length+_this155.outputs.length);var feeds=[];for(var i=0;i<_this155.inputs.length;++i){feeds.push({key:_this155.inputs[i],value:inputs[i]});}var feedDict=new executor_FeedDict(feeds);var outputs=_execute(_this155.outputs,feedDict);// Compute total loss.\nfor(var _i77=0;_i77<_this155.lossFunctions.length;++_i77){var lossFunction=_this155.lossFunctions[_i77];// TODO(cais): Add sample weighting and replace the simple\n// averaging.\nvar loss=dist[\"mean\"](lossFunction(targets[_i77],outputs[_i77]));if(_i77===0){totalLoss=loss;}else{totalLoss=dist[\"add\"](totalLoss,loss);}valOutputs.push(totalLoss);}// Compute the metrics.\nfor(var _i78=0;_i78<_this155.metricsTensors.length;++_i78){var metric=_this155.metricsTensors[_i78][0];var outputIndex=_this155.metricsTensors[_i78][1];// TODO(cais): Replace K.mean() with a proper weighting function.\nvar meanMetric=dist[\"mean\"](metric(targets[outputIndex],outputs[outputIndex]));valOutputs.push(meanMetric);}return valOutputs;});};}/**\r\n     * Trains the model for a fixed number of epochs (iterations on a\r\n     * dataset).\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n     * for (let i = 1; i < 5 ; ++i) {\r\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\r\n     *       batchSize: 4,\r\n     *       epochs: 3\r\n     *   });\r\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\r\n     * }\r\n     * ```\r\n     *\r\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\r\n     * model has multiple inputs. If all inputs in the model are named, you\r\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\r\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\r\n     * the model has multiple outputs. If all outputs in the model are named,\r\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\r\n     * @param args A `ModelFitArgs`, containing optional fields.\r\n     *\r\n     * @return A `History` instance. Its `history` attribute contains all\r\n     *   information collected during training.\r\n     *\r\n     * @exception ValueError In case of mismatch between the provided input\r\n     * data and what the model expects.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"fit\",value:function(){var _fit=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee151(x,y){var args,_args153=arguments;return regeneratorRuntime.wrap(function _callee151$(_context151){while(1){switch(_context151.prev=_context151.next){case 0:args=_args153.length>2&&_args153[2]!==undefined?_args153[2]:{};return _context151.abrupt(\"return\",fitTensors(this,x,y,args));case 2:case\"end\":return _context151.stop();}}},_callee151,this);}));function fit(_x196,_x197){return _fit.apply(this,arguments);}return fit;}()// TODO(cais): Add code snippet below when it's possible to instantiate\n//   actual dataset objects.\n/**\r\n     * Trains the model using a dataset object.\r\n     *\r\n     * @param dataset A dataset object. Its `iterator()` method is expected\r\n     *   to generate a dataset iterator object, the `next()` method of which\r\n     *   is expected to produce data batches for training. The return value\r\n     *   of the `next()` call ought to contain a boolean `done` field and a\r\n     *   `value` field. The `value` field is expected to be an array of two\r\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\r\n     *   case is for models with exactly one input and one output (e.g..\r\n     *   a sequential model). The latter case is for models with multiple\r\n     *   inputs and/or multiple outputs.\r\n     *   Of the two items in the array, the first is the input feature(s) and\r\n     *   the second is the output target(s).\r\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\r\n     *\r\n     * @return A `History` instance. Its `history` attribute contains all\r\n     *   information collected during training.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"fitDataset\",value:function(){var _fitDataset3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee152(dataset,args){return regeneratorRuntime.wrap(function _callee152$(_context152){while(1){switch(_context152.prev=_context152.next){case 0:return _context152.abrupt(\"return\",_fitDataset2(this,dataset,args));case 1:case\"end\":return _context152.stop();}}},_callee152,this);}));function fitDataset(_x198,_x199){return _fitDataset3.apply(this,arguments);}return fitDataset;}()/**\r\n     * Runs a single gradient update on a single batch of data.\r\n     *\r\n     * This method differs from `fit()` and `fitDataset()` in the following\r\n     * regards:\r\n     *   - It operates on exactly one batch of data.\r\n     *   - It returns only the loss and matric values, instead of\r\n     *     returning the batch-by-batch loss and metric values.\r\n     *   - It doesn't support fine-grained options such as verbosity and\r\n     *     callbacks.\r\n     *\r\n     * @param x Input data. It could be one of the following:\r\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\r\n     *     multiple inputs).\r\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\r\n     *     model has named inputs).\r\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\r\n     *   `tf.Tensor`s. It should be consistent with `x`.\r\n     * @returns Training loss or losses (in case the model has\r\n     *   multiple outputs), along with metrics (if any), as numbers.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"trainOnBatch\",value:function(){var _trainOnBatch=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee153(x,y){var standardizeOut,inputs,targets,trainFunction,losses,lossValues,_iterator90,_step90,loss,v;return regeneratorRuntime.wrap(function _callee153$(_context153){while(1){switch(_context153.prev=_context153.next){case 0:_context153.next=2;return this.standardizeUserData(x,y);case 2:standardizeOut=_context153.sent;inputs=standardizeOut[0];targets=standardizeOut[1];trainFunction=this.makeTrainFunction();losses=trainFunction(inputs.concat(targets));lossValues=[];_iterator90=_createForOfIteratorHelper(losses);_context153.prev=9;_iterator90.s();case 11:if((_step90=_iterator90.n()).done){_context153.next=19;break;}loss=_step90.value;_context153.next=15;return loss.data();case 15:v=_context153.sent;lossValues.push(v[0]);case 17:_context153.next=11;break;case 19:_context153.next=24;break;case 21:_context153.prev=21;_context153.t0=_context153[\"catch\"](9);_iterator90.e(_context153.t0);case 24:_context153.prev=24;_iterator90.f();return _context153.finish(24);case 27:dist[\"dispose\"](losses);return _context153.abrupt(\"return\",singletonOrArray(lossValues));case 29:case\"end\":return _context153.stop();}}},_callee153,this,[[9,21,24,27]]);}));function trainOnBatch(_x200,_x201){return _trainOnBatch.apply(this,arguments);}return trainOnBatch;}()/**\r\n     * Extract weight values of the model.\r\n     *\r\n     * @param config: An instance of `io.SaveConfig`, which specifies\r\n     * model-saving options such as whether only trainable weights are to be\r\n     * saved.\r\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\r\n     *   non-uniqueified weight names) to their values.\r\n     */},{key:\"getNamedWeights\",value:function getNamedWeights(config){var namedWeights=[];var trainableOnly=config!=null&&config.trainableOnly;var weights=trainableOnly?this.trainableWeights:this.weights;var weightValues=this.getWeights(trainableOnly);for(var i=0;i<weights.length;++i){if(trainableOnly&&!weights[i].trainable){// Optionally skip non-trainable weights.\ncontinue;}namedWeights.push({name:weights[i].originalName,tensor:weightValues[i]});}return namedWeights;}/**\r\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * const input = tf.input({shape: [10]});\r\n     * const output = tf.layers.dense({units: 1}).apply(input);\r\n     * const model = tf.model({inputs: [input], outputs: [output]});\r\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n     * const xs = tf.ones([8, 10]);\r\n     * const ys = tf.zeros([8, 1]);\r\n     *\r\n     * const history = await model.fit(xs, ys, {\r\n     *   epochs: 10,\r\n     *   callbacks: {\r\n     *     onEpochEnd: async (epoch, logs) => {\r\n     *       if (epoch === 2) {\r\n     *         model.stopTraining = true;\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * });\r\n     *\r\n     * // There should be only 3 values in the loss array, instead of 10\r\n     * values,\r\n     * // due to the stopping after 3 epochs.\r\n     * console.log(history.history.loss);\r\n     * ```\r\n     */},{key:\"stopTraining\",get:function get(){return this.stopTraining_;},set:function set(stop){this.stopTraining_=stop;}},{key:\"optimizer\",get:function get(){return this.optimizer_;},set:function set(optimizer){if(this.optimizer_!==optimizer){this.optimizer_=optimizer;this.isOptimizerOwned=false;}}},{key:\"dispose\",value:function dispose(){var result=_get(_getPrototypeOf(training_LayersModel.prototype),\"dispose\",this).call(this);if(result.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){var numTensorsBeforeOptmizerDisposal=dist[\"memory\"]().numTensors;this.optimizer_.dispose();result.numDisposedVariables+=numTensorsBeforeOptmizerDisposal-dist[\"memory\"]().numTensors;}return result;}},{key:\"getLossIdentifiers\",value:function getLossIdentifiers(){var lossNames;if(typeof this.loss==='string'){lossNames=toSnakeCase(this.loss);}else if(Array.isArray(this.loss)){var _iterator91=_createForOfIteratorHelper(this.loss),_step91;try{for(_iterator91.s();!(_step91=_iterator91.n()).done;){var loss=_step91.value;if(typeof loss!=='string'){throw new Error('Serialization of non-string loss is not supported.');}}}catch(err){_iterator91.e(err);}finally{_iterator91.f();}lossNames=this.loss.map(function(name){return toSnakeCase(name);});}else{var outputNames=Object.keys(this.loss);lossNames={};var losses=this.loss;for(var _i79=0,_outputNames=outputNames;_i79<_outputNames.length;_i79++){var outputName=_outputNames[_i79];if(typeof losses[outputName]==='string'){lossNames[outputName]=toSnakeCase(losses[outputName]);}else{throw new Error('Serialization of non-string loss is not supported.');}}}return lossNames;}},{key:\"getMetricIdentifiers\",value:function getMetricIdentifiers(){if(typeof this.metrics==='string'||typeof this.metrics==='function'){return[toSnakeCase(getLossOrMetricName(this.metrics))];}else if(Array.isArray(this.metrics)){return this.metrics.map(function(metric){return toSnakeCase(getLossOrMetricName(metric));});}else{var metricsIdentifiers={};for(var key in this.metrics){metricsIdentifiers[key]=toSnakeCase(getLossOrMetricName(this.metrics[key]));}return metricsIdentifiers;}}},{key:\"getTrainingConfig\",value:function getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}};// TODO(cais): Add weight_metrics when they are supported.\n// TODO(cais): Add sample_weight_mode when it's supported.\n// TODO(cais): Add loss_weights when it's supported.\n}},{key:\"loadTrainingConfig\",value:function loadTrainingConfig(trainingConfig){if(trainingConfig.weighted_metrics!=null){throw new Error('Loading weight_metrics is not supported yet.');}if(trainingConfig.loss_weights!=null){throw new Error('Loading loss_weights is not supported yet.');}if(trainingConfig.sample_weight_mode!=null){throw new Error('Loading sample_weight_mode is not supported yet.');}var tsConfig=convertPythonicToTs(trainingConfig.optimizer_config);var optimizer=deserialize(tsConfig);var loss;if(typeof trainingConfig.loss==='string'){loss=toCamelCase(trainingConfig.loss);}else if(Array.isArray(trainingConfig.loss)){loss=trainingConfig.loss.map(function(lossEntry){return toCamelCase(lossEntry);});}else if(trainingConfig.loss!=null){loss={};for(var key in trainingConfig.loss){loss[key]=toCamelCase(trainingConfig.loss[key]);}}var metrics;if(Array.isArray(trainingConfig.metrics)){metrics=trainingConfig.metrics.map(function(metric){return toCamelCase(metric);});}else if(trainingConfig.metrics!=null){metrics={};for(var _key10 in trainingConfig.metrics){metrics[_key10]=toCamelCase(trainingConfig.metrics[_key10]);}}this.compile({loss:loss,metrics:metrics,optimizer:optimizer});}/**\r\n     * Save the configuration and/or weights of the LayersModel.\r\n     *\r\n     * An `IOHandler` is an object that has a `save` method of the proper\r\n     * signature defined. The `save` method manages the storing or\r\n     * transmission of serialized data (\"artifacts\") that represent the\r\n     * model's topology and weights onto or via a specific medium, such as\r\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\r\n     * requests to a server. TensorFlow.js provides `IOHandler`\r\n     * implementations for a number of frequently used saving mediums, such as\r\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\r\n     * for more details.\r\n     *\r\n     * This method also allows you to refer to certain types of `IOHandler`s\r\n     * as URL-like string shortcuts, such as 'localstorage://' and\r\n     * 'indexeddb://'.\r\n     *\r\n     * Example 1: Save `model`'s topology and weights to browser [local\r\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n     * then load it back.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential(\r\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n     * console.log('Prediction from original model:');\r\n     * model.predict(tf.ones([1, 3])).print();\r\n     *\r\n     * const saveResults = await model.save('localstorage://my-model-1');\r\n     *\r\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n     * console.log('Prediction from loaded model:');\r\n     * loadedModel.predict(tf.ones([1, 3])).print();\r\n     * ```\r\n     *\r\n     * Example 2. Saving `model`'s topology and weights to browser\r\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n     * then load it back.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential(\r\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n     * console.log('Prediction from original model:');\r\n     * model.predict(tf.ones([1, 3])).print();\r\n     *\r\n     * const saveResults = await model.save('indexeddb://my-model-1');\r\n     *\r\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n     * console.log('Prediction from loaded model:');\r\n     * loadedModel.predict(tf.ones([1, 3])).print();\r\n     * ```\r\n     *\r\n     * Example 3. Saving `model`'s topology and weights as two files\r\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\r\n     * browser.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential(\r\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n     * const saveResults = await model.save('downloads://my-model-1');\r\n     * ```\r\n     *\r\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\r\n     * See the documentation of `tf.io.http` for more details\r\n     * including specifying request parameters and implementation of the\r\n     * server.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential(\r\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n     * const saveResults = await model.save('http://my-server/model/upload');\r\n     * ```\r\n     *\r\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\r\n     * scheme-based string shortcut for `IOHandler`.\r\n     * @param config Options for saving the model.\r\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\r\n     * the saving, such as byte sizes of the saved artifacts for the model's\r\n     *   topology and weight values.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n     */},{key:\"save\",value:function(){var _save7=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee154(handlerOrURL,config){var handlers,weightDataAndSpecs,returnString,unusedArg,modelConfig,modelArtifacts,includeOptimizer,_weightDataAndSpecs$s,weightType,_yield$dist$io$encode,optimizerWeightData,optimizerWeightSpecs,checkSize;return regeneratorRuntime.wrap(function _callee154$(_context154){while(1){switch(_context154.prev=_context154.next){case 0:if(!(typeof handlerOrURL==='string')){_context154.next=9;break;}handlers=dist[\"io\"].getSaveHandlers(handlerOrURL);if(!(handlers.length===0)){_context154.next=6;break;}throw new ValueError(\"Cannot find any save handlers for URL '\".concat(handlerOrURL,\"'\"));case 6:if(!(handlers.length>1)){_context154.next=8;break;}throw new ValueError(\"Found more than one (\".concat(handlers.length,\") save handlers for \")+\"URL '\".concat(handlerOrURL,\"'\"));case 8:handlerOrURL=handlers[0];case 9:if(!(handlerOrURL.save==null)){_context154.next=11;break;}throw new ValueError('LayersModel.save() cannot proceed because the IOHandler '+'provided does not have the `save` attribute defined.');case 11:_context154.next=13;return dist[\"io\"].encodeWeights(this.getNamedWeights(config));case 13:weightDataAndSpecs=_context154.sent;returnString=false;unusedArg=null;modelConfig=this.toJSON(unusedArg,returnString);modelArtifacts={modelTopology:modelConfig,format:LAYERS_MODEL_FORMAT_NAME,generatedBy:\"TensorFlow.js tfjs-layers v\".concat(version),convertedBy:null};includeOptimizer=config==null?false:config.includeOptimizer;if(!(includeOptimizer&&this.optimizer!=null)){_context154.next=34;break;}modelArtifacts.trainingConfig=this.getTrainingConfig();weightType='optimizer';_context154.t0=dist[\"io\"];_context154.next=25;return this.optimizer.getWeights();case 25:_context154.t1=_context154.sent;_context154.t2=weightType;_context154.next=29;return _context154.t0.encodeWeights.call(_context154.t0,_context154.t1,_context154.t2);case 29:_yield$dist$io$encode=_context154.sent;optimizerWeightData=_yield$dist$io$encode.data;optimizerWeightSpecs=_yield$dist$io$encode.specs;(_weightDataAndSpecs$s=weightDataAndSpecs.specs).push.apply(_weightDataAndSpecs$s,_toConsumableArray2(optimizerWeightSpecs));weightDataAndSpecs.data=dist[\"io\"].concatenateArrayBuffers([weightDataAndSpecs.data,optimizerWeightData]);case 34:if(this.userDefinedMetadata!=null){// Check serialized size of user-defined metadata.\ncheckSize=true;checkUserDefinedMetadata(this.userDefinedMetadata,this.name,checkSize);modelArtifacts.userDefinedMetadata=this.userDefinedMetadata;}modelArtifacts.weightData=weightDataAndSpecs.data;modelArtifacts.weightSpecs=weightDataAndSpecs.specs;return _context154.abrupt(\"return\",handlerOrURL.save(modelArtifacts));case 38:case\"end\":return _context154.stop();}}},_callee154,this);}));function save(_x202,_x203){return _save7.apply(this,arguments);}return save;}()/**\r\n     * Set user-defined metadata.\r\n     *\r\n     * The set metadata will be serialized together with the topology\r\n     * and weights of the model during `save()` calls.\r\n     *\r\n     * @param setUserDefinedMetadata\r\n     */},{key:\"setUserDefinedMetadata\",value:function setUserDefinedMetadata(userDefinedMetadata){checkUserDefinedMetadata(userDefinedMetadata,this.name);this.userDefinedMetadata=userDefinedMetadata;}/**\r\n     * Get user-defined metadata.\r\n     *\r\n     * The metadata is supplied via one of the two routes:\r\n     *   1. By calling `setUserDefinedMetadata()`.\r\n     *   2. Loaded during model loading (if the model is constructed\r\n     *      via `tf.loadLayersModel()`.)\r\n     *\r\n     * If no user-defined metadata is available from either of the\r\n     * two routes, this function will return `undefined`.\r\n     */},{key:\"getUserDefinedMetadata\",value:function getUserDefinedMetadata(){return this.userDefinedMetadata;}}]);return training_LayersModel;}(container_Container);// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */training_LayersModel.className='Model';dist[\"serialization\"].registerClass(training_LayersModel);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/models.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source keras/models.py */ /**\r\n * Parses a JSON model configuration file and returns a model instance.\r\n *\r\n * ```js\r\n * // This example shows how to serialize a model using `toJSON()` and\r\n * // deserialize it as another model using `tf.models.modelFromJSON()`.\r\n * // Note: this example serializes and deserializes only the topology\r\n * // of the model; the weights of the loaded model will be different\r\n * // from those of the the original model, due to random weight\r\n * // initialization.\r\n * // To load the topology and weights of a model, use `tf.loadLayersModel()`.\r\n * const model1 = tf.sequential();\r\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\r\n * // Serialize `model1` as a JSON object.\r\n * const model1JSON = model1.toJSON(null, false);\r\n * model1.summary();\r\n *\r\n * const model2 = await tf.models.modelFromJSON(model1JSON);\r\n * model2.summary();\r\n * ```\r\n *\r\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\r\n *       weights configuration. It can also be only the topology JSON of the\r\n *       model, in which case the weights will not be loaded.\r\n *  @param custom_objects Optional dictionary mapping names\r\n *       (strings) to custom classes or functions to be\r\n *       considered during deserialization.\r\n * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).\r\n */function modelFromJSON(_x204,_x205){return _modelFromJSON.apply(this,arguments);}/**\r\n * Load a model, including its topology and optionally weights.  See the\r\n * Tutorial named \"How to import a Keras Model\" for usage examples.\r\n *\r\n * Example 1: Save `model`'s topology and weights to browser [local\r\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('localstorage://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 2. Saving `model`'s topology and weights to browser\r\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('indexeddb://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 3. Load a model from user-selected files from HTML\r\n * [file input\r\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n *\r\n * ```js\r\n * // Note: this code snippet will not work without the HTML elements in the\r\n * //   page\r\n * const jsonUpload = document.getElementById('json-upload');\r\n * const weightsUpload = document.getElementById('weights-upload');\r\n *\r\n * const model = await tf.loadLayersModel(\r\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\r\n * ```\r\n *\r\n * Example 4. Load a model from an HTTP server.\r\n *\r\n * ```js\r\n * const model = await\r\n *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\r\n * model.summary();\r\n * ```\r\n *\r\n * @param pathOrIOHandler Can be either of the two formats\r\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\r\n *      the model in the canonical TensorFlow.js format. This path will be\r\n *      interpreted as a relative HTTP path, to which `fetch` will be used to\r\n *      request the model topology and weight manifest JSON.\r\n *      The content of the JSON file is assumed to be a JSON object with the\r\n *      following fields and values:\r\n *      - 'modelTopology': A JSON object that can be either of:\r\n *        1. a model architecture JSON consistent with the format of the return\r\n *            value of `keras.Model.to_json()`\r\n *        2. a full model JSON in the format of `keras.models.save_model()`.\r\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\r\n *      See the Python converter function `save_model()` for more details.\r\n *      It is also assumed that model weights can be accessed from relative\r\n *      paths described by the `paths` fields in weights manifest.\r\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\r\n *      method.\r\n * @param options Optional configuration arguments for the model loading,\r\n *   including:\r\n *   - `strict`: Require that the provided weights exactly match those required\r\n *     by the layers.  Default true.  Passing false means that both extra\r\n *     weights and missing weights will be silently ignored.\r\n *   - `onProgress`: A progress callback of the form:\r\n *     `(fraction: number) => void`. This callback can be used to monitor the\r\n *     model-loading process.\r\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\r\n *     loaded.\r\n */function _modelFromJSON(){_modelFromJSON=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee169(modelAndWeightsConfig,customObjects){var modelTopology,tsConfig,model,weightValues,uniqueWeightValues,_iterator120,_step120,weight;return regeneratorRuntime.wrap(function _callee169$(_context172){while(1){switch(_context172.prev=_context172.next){case 0:if(!('modelTopology'in modelAndWeightsConfig)){modelAndWeightsConfig={modelTopology:modelAndWeightsConfig};}modelAndWeightsConfig=modelAndWeightsConfig;modelTopology=modelAndWeightsConfig.modelTopology;if(modelTopology['model_config']!=null){// If the model-topology JSON contains a 'model_config' field, then it is\n// a full model JSON (e.g., from `keras.Model.save()`), which contains\n// not only the model's architecture in its 'model_config' field, but\n// additional information such as the model's optimizer. We use only the\n// 'model_config' field currently.\nmodelTopology=modelTopology['model_config'];}tsConfig=convertPythonicToTs(modelTopology);model=deserialize(tsConfig,customObjects);if(!(modelAndWeightsConfig.weightsManifest!=null)){_context172.next=15;break;}_context172.next=9;return dist[\"io\"].loadWeights(modelAndWeightsConfig.weightsManifest,modelAndWeightsConfig.pathPrefix,model.weights.map(function(weight){return weight.originalName;}));case 9:weightValues=_context172.sent;// Map the weights to the unique tensor names generated during model loading\nuniqueWeightValues={};_iterator120=_createForOfIteratorHelper(model.weights);try{for(_iterator120.s();!(_step120=_iterator120.n()).done;){weight=_step120.value;uniqueWeightValues[weight.originalName]=weightValues[weight.originalName];}}catch(err){_iterator120.e(err);}finally{_iterator120.f();}model.loadWeights(uniqueWeightValues);// Dispose temporary weight values.\nObject(dist[\"dispose\"])(weightValues);case 15:return _context172.abrupt(\"return\",model);case 16:case\"end\":return _context172.stop();}}},_callee169);}));return _modelFromJSON.apply(this,arguments);}function loadLayersModelInternal(_x206,_x207){return _loadLayersModelInternal.apply(this,arguments);}/**\r\n * Load a model and optionally its weights, using an IOHandler object.\r\n *\r\n * @param handler The instance of `IOHandler` to be used during the model\r\n *   loading.\r\n * @param customObjects Any optional custom objects to be used during model\r\n *   loading.\r\n * @param strict Whether the weight loading will be done in strict mode.\r\n *   Default: `true`.\r\n */function _loadLayersModelInternal(){_loadLayersModelInternal=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee170(pathOrIOHandler,options){var handlers;return regeneratorRuntime.wrap(function _callee170$(_context173){while(1){switch(_context173.prev=_context173.next){case 0:if(options==null){options={};}if(!(typeof pathOrIOHandler==='string')){_context173.next=10;break;}handlers=dist[\"io\"].getLoadHandlers(pathOrIOHandler,options);if(!(handlers.length===0)){_context173.next=7;break;}// For backward compatibility: if no load handler can be found,\n// assume it is a relative http path.\n// TODO(cais): Reformat the args into a single `LoadOptions` once the core\n// is refactored.\nhandlers.push(dist[\"io\"].browserHTTPRequest(pathOrIOHandler,options));_context173.next=9;break;case 7:if(!(handlers.length>1)){_context173.next=9;break;}throw new ValueError(\"Found more than one (\".concat(handlers.length,\") load handlers for \")+\"URL '\".concat(pathOrIOHandler,\"'\"));case 9:pathOrIOHandler=handlers[0];case 10:return _context173.abrupt(\"return\",loadLayersModelFromIOHandler(pathOrIOHandler,undefined,options));case 11:case\"end\":return _context173.stop();}}},_callee170);}));return _loadLayersModelInternal.apply(this,arguments);}function loadLayersModelFromIOHandler(_x208,_x209,_x210){return _loadLayersModelFromIOHandler.apply(this,arguments);}function _loadLayersModelFromIOHandler(){_loadLayersModelFromIOHandler=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee171(handler,customObjects,options){var artifacts,modelTopology,strict,fastWeightInit,model,trainingConfig,_decodeModelAndOptimi,modelWeights,optimizerWeights;return regeneratorRuntime.wrap(function _callee171$(_context174){while(1){switch(_context174.prev=_context174.next){case 0:if(options==null){options={};}if(!(handler.load==null)){_context174.next=3;break;}throw new ValueError('Cannot proceed with model loading because the IOHandler provided '+'does not have the `load` method implemented.');case 3:_context174.next=5;return handler.load();case 5:artifacts=_context174.sent;modelTopology=artifacts.modelTopology;if(modelTopology['model_config']!=null){modelTopology=modelTopology['model_config'];}strict=options.strict==null?true:options.strict;// If weights are provided and the weight-loading mode is strict, use\n// fast weight initialization. This skips costly initializers such as\n// 'orthogonal' and saves unnecessary computation in cases where\n// the initialized weight values will immediately be overwritten by\n// loaded weight values.\nfastWeightInit=artifacts.weightData!=null&&artifacts.weightSpecs!=null&&strict;model=deserialize(convertPythonicToTs(modelTopology),customObjects,fastWeightInit);trainingConfig=artifacts.trainingConfig;if(trainingConfig!=null){model.loadTrainingConfig(trainingConfig);}if(artifacts.userDefinedMetadata!=null){model.setUserDefinedMetadata(artifacts.userDefinedMetadata);}// If weightData is present, load the weights into the model.\nif(!(artifacts.weightData!=null)){_context174.next=24;break;}if(!(artifacts.weightSpecs==null)){_context174.next=17;break;}throw new ValueError('LayersModel artifacts contains weight data, but not weight specs. '+'Therefore loading of weights cannot proceed.');case 17:_decodeModelAndOptimi=decodeModelAndOptimizerWeights(artifacts.weightData,artifacts.weightSpecs),modelWeights=_decodeModelAndOptimi.modelWeights,optimizerWeights=_decodeModelAndOptimi.optimizerWeights;model.loadWeights(modelWeights,strict);if(!(model.optimizer!=null&&optimizerWeights.length>0)){_context174.next=22;break;}_context174.next=22;return model.optimizer.setWeights(optimizerWeights);case 22:// Dispose temporary weight values.\nObject(dist[\"dispose\"])(modelWeights);Object(dist[\"dispose\"])(optimizerWeights.map(function(w){return w.tensor;}));case 24:return _context174.abrupt(\"return\",model);case 25:case\"end\":return _context174.stop();}}},_callee171);}));return _loadLayersModelFromIOHandler.apply(this,arguments);}function decodeModelAndOptimizerWeights(buffer,specs){var name2Tensor=dist[\"io\"].decodeWeights(buffer,specs);var modelWeights={};var optimizerWeights=[];specs.forEach(function(spec){if(spec.group==='optimizer'){optimizerWeights.push({name:spec.name,tensor:name2Tensor[spec.name]});}else{modelWeights[spec.name]=name2Tensor[spec.name];}});return{modelWeights:modelWeights,optimizerWeights:optimizerWeights};}/**\r\n * A model with a stack of layers, feeding linearly from one to the next.\r\n *\r\n * `tf.sequential` is a factory function that creates an instance of\r\n * `tf.Sequential`.\r\n *\r\n * ```js\r\n *  // Define a model for linear regression.\r\n *  const model = tf.sequential();\r\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n *\r\n *  // Prepare the model for training: Specify the loss and the optimizer.\r\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n *\r\n *  // Generate some synthetic data for training.\r\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\r\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\r\n *\r\n *  // Train the model using the data then do inference on a data point the\r\n *  // model hasn't seen:\r\n *  await model.fit(xs, ys);\r\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\r\n * ```\r\n */ /** @doc {heading: 'Models', subheading: 'Classes'} */var models_Sequential=/*#__PURE__*/function(_training_LayersModel){_inherits(models_Sequential,_training_LayersModel);var _super69=_createSuper(models_Sequential);function models_Sequential(args){var _this156;_classCallCheck2(this,models_Sequential);_this156=_super69.call(this,{inputs:[],outputs:[]});args=args||{};_this156.trainable=true;_this156.built=false;// Set model name.\n_this156.name=args.name!=null?args.name:getUid('sequential_');// Add to the model any layers passed to the constructor.\nif(args.layers!=null){var _iterator92=_createForOfIteratorHelper(args.layers),_step92;try{for(_iterator92.s();!(_step92=_iterator92.n()).done;){var layer=_step92.value;_this156.add(layer);}}catch(err){_iterator92.e(err);}finally{_iterator92.f();}}return _this156;}// Helper function to Sequential.add  Throws if the new output shape will be\n// invalid.\n_createClass(models_Sequential,[{key:\"checkShape\",value:function checkShape(layer){var shape=layer.inboundNodes[0].outputTensors[0].shape;if(shape.some(function(x){return x<0;})){throw new ValueError('Negative dimension size caused by adding layer '+\"\".concat(layer.name,\" with input shape [\")+\"\".concat(layer.inboundNodes[0].inputTensors[0].shape,\"]\"));}}/**\r\n     * Adds a layer instance on top of the layer stack.\r\n     *\r\n     * ```js\r\n     *  const model = tf.sequential();\r\n     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\r\n     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\r\n     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\r\n     *  // Note that the untrained model is random at this point.\r\n     *  model.predict(tf.randomNormal([10, 1])).print();\r\n     * ```\r\n     * @param layer Layer instance.\r\n     *\r\n     * @exception ValueError In case the `layer` argument does not know its\r\n     * input shape.\r\n     * @exception ValueError In case the `layer` argument has multiple output\r\n     *   tensors, or is already connected somewhere else (forbidden in\r\n     *   `Sequential` models).\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"add\",value:function add(layer){var isLayerModelInstance=layer instanceof models_Sequential||layer instanceof training_LayersModel;var modelLayer;if(isLayerModelInstance){modelLayer=layer;if(modelLayer.outputs.length!==1){throw new ValueError('All layers in a Sequential model '+'should have a single output tensor. '+'For multi-output layers, '+'use the functional API.');}if(modelLayer.inputs.length!==1){throw new ValueError('All layers in a Sequential model '+'should have a single input tensor. '+'For multi-input layers, '+'use the functional API.');}}if(this.outputs.length===0){// first layer in model: check that it is an input layer\nif(layer.inboundNodes.length===0){// create an input layer\nif(layer.batchInputShape==null){throw new ValueError('The first layer in a Sequential model must '+'get an `inputShape` or `batchInputShape` argument.');}// Instantiate the input layer.\nvar x=Input({batchShape:layer.batchInputShape,dtype:layer.dtype,name:layer.name+'_input'});// This will build the current layer and create the node connecting\n// the current layer to the input layer we just created.\nlayer.apply(x);}if(isLayerModelInstance){this.outputs=modelLayer.outputs;this.inputs=modelLayer.inputs;}else{if(layer.inboundNodes.length!==1){throw new ValueError('A layer added to a Sequential model must not already be '+\"connected somewhere else. LayersModel received layer \".concat(layer.name,\" \")+\"which has \".concat(layer.inboundNodes.length,\" pre-existing inbound \")+'connections.');}if(layer.inboundNodes[0].outputTensors.length!==1){throw new ValueError('All layers in a Sequential model '+'should have a single output tensor. '+'For multi-output layers, '+'use the functional API.');}this.checkShape(layer);this.outputs=[layer.inboundNodes[0].outputTensors[0]];this.inputs=getSourceInputs(this.outputs[0]);}this.inboundNodes=[];// We create an input node, which we will keep updated\n// as we add more layers.\n// (This call has side effects.)\n// tslint:disable-next-line:no-unused-expression\nnew Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,// no model-level masking for now\ninputMasks:pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(function(x){return x.shape;}),outputShapes:this.outputs[0].shape});}else{var outputTensor=layer.apply(this.outputs[0]);if(Array.isArray(outputTensor)){throw new TypeError('All layers in a Sequential model '+'should have a single output tensor. '+'For multi-output layers, '+'use the functional API.');}this.checkShape(layer);this.outputs=[outputTensor];// update self.inbound_nodes\nthis.inboundNodes[0].outputTensors=this.outputs;this.inboundNodes[0].outputShapes=[this.outputs[0].shape];}this.layers.push(layer);this.built=false;}/**\r\n     * Removes the last layer in the model.\r\n     *\r\n     * @exception TypeError if there are no layers in the model.\r\n     */},{key:\"pop\",value:function pop(){if(this.layers.length===0){throw new TypeError('There are no layers in the model.');}this.layers.pop();if(this.layers.length===0){this.outputs=[];this.inboundNodes=[];this.outboundNodes=[];}else{var lastLayerIndex=this.layers.length-1;this.layers[lastLayerIndex].outboundNodes=[];this.outputs=[this.layers[lastLayerIndex].output];// update self.inbound_nodes\nthis.inboundNodes[0].outputTensors=this.outputs;this.inboundNodes[0].outputShapes=[this.outputs[0].shape];}}},{key:\"call\",value:function call(inputs,kwargs){if(this.model==null){this.build();}return this.model.call(inputs,kwargs);}},{key:\"build\",value:function build(inputShape){// Call `getExactlyOneShape` without using its return value,\n// to verify that exactly one input shape is provided.\ngetExactlyOneShape(inputShape);if(this.inputs.length===0||this.outputs.length===0){throw new TypeError('Sequential model cannot be built: model is empty.'+' Add some layers first.');}// actually create the model\nthis.model=new training_LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+'_model'});this.model.trainable=this.trainable;// mirror model attributes\nthis.supportsMasking=this.model.supportsMasking;// TODO(michaelterry): Add caches\nthis.inputLayers=this.model.inputLayers;this.inputLayersNodeIndices=this.model.inputLayersNodeIndices;this.inputLayersTensorIndices=this.model.inputLayersTensorIndices;this.outputLayers=this.model.outputLayers;this.outputLayersNodeIndices=this.model.outputLayersNodeIndices;this.outputLayersTensorIndices=this.model.outputLayersTensorIndices;this.nodesByDepth=this.model.nodesByDepth;this.containerNodes=this.model.containerNodes;this.outputNames=this.model.outputNames;this.inputNames=this.model.inputNames;// TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n// TODO(michaelterry): Add callbackModel if needed.\nthis.built=true;}},{key:\"countParams\",value:function countParams(){if(!this.built){this.build();}return _get(_getPrototypeOf(models_Sequential.prototype),\"countParams\",this).call(this);}/**\r\n     * Print a text summary of the Sequential model's layers.\r\n     *\r\n     * The summary includes\r\n     * - Name and type of all layers that comprise the model.\r\n     * - Output shape(s) of the layers\r\n     * - Number of weight parameters of each layer\r\n     * - The total number of trainable and non-trainable parameters of the\r\n     * model.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential();\r\n     * model.add(\r\n     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\r\n     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\r\n     *\r\n     * model.summary();\r\n     * ```\r\n     *\r\n     * @param lineLength Custom line length, in number of characters.\r\n     * @param positions Custom widths of each of the columns, as either\r\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\r\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\r\n     *   right-most (i.e., ending) position of a column.\r\n     * @param printFn Custom print function. Can be used to replace the default\r\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\r\n     *   messages in the console.\r\n     */ /** @doc {heading: 'Models', subheading: 'Classes'} */},{key:\"summary\",value:function summary(lineLength,positions){var printFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:console.log;if(!this.built){this.build();}_get(_getPrototypeOf(models_Sequential.prototype),\"summary\",this).call(this,lineLength,positions,printFn);}/**\r\n     * Sets the weights of the model.\r\n     *\r\n     * @param weights Should be a list of Tensors with shapes and types matching\r\n     *   the output of `model.getWeights()`.\r\n     */},{key:\"setWeights\",value:function setWeights(weights){if(this.model==null){this.build();}this.model.setWeights(weights);}/**\r\n     * Returns the loss value & metrics values for the model in test mode.\r\n     *\r\n     * Loss and metrics are specified during `compile()`, which needs to happen\r\n     * before calls to `evaluate()`.\r\n     *\r\n     * Computation is done in batches.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\r\n     *   batchSize: 4,\r\n     * });\r\n     * result.print();\r\n     * ```\r\n     *\r\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\r\n     * model has multiple inputs.\r\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\r\n     * model has multiple outputs.\r\n     * @param args A `ModelEvaluateConfig`, containing optional fields.\r\n     *\r\n     * @return `Scalar` test loss (if the model has a single output and no\r\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\r\n     *   and/or metrics). The attribute `model.metricsNames`\r\n     *   will give you the display labels for the scalar outputs.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"evaluate\",value:function evaluate(x,y){var args=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!this.built){throw new RuntimeError('The model needs to be compiled before being used.');}return this.model.evaluate(x,y,args);}// TODO(cais): Add code snippet below once real dataset objects are\n//   available.\n/**\r\n     * Evaluate model using a dataset object.\r\n     *\r\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\r\n     *\r\n     * @param dataset A dataset object. Its `iterator()` method is expected\r\n     *   to generate a dataset iterator object, the `next()` method of which\r\n     *   is expected to produce data batches for evaluation. The return value\r\n     *   of the `next()` call ought to contain a boolean `done` field and a\r\n     *   `value` field. The `value` field is expected to be an array of two\r\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\r\n     *   case is for models with exactly one input and one output (e.g..\r\n     *   a sequential model). The latter case is for models with multiple\r\n     *   inputs and/or multiple outputs. Of the two items in the array, the\r\n     *   first is the input feature(s) and the second is the output target(s).\r\n     * @param args A configuration object for the dataset-based evaluation.\r\n     * @returns Loss and metric values as an Array of `Scalar` objects.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"evaluateDataset\",value:function(){var _evaluateDataset4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee155(dataset,args){return regeneratorRuntime.wrap(function _callee155$(_context155){while(1){switch(_context155.prev=_context155.next){case 0:if(this.built){_context155.next=2;break;}throw new RuntimeError('The model needs to be compiled before being used.');case 2:return _context155.abrupt(\"return\",this.model.evaluateDataset(dataset,args));case 3:case\"end\":return _context155.stop();}}},_callee155,this);}));function evaluateDataset(_x211,_x212){return _evaluateDataset4.apply(this,arguments);}return evaluateDataset;}()/**\r\n     * Generates output predictions for the input samples.\r\n     *\r\n     * Computation is done in batches.\r\n     *\r\n     * Note: the \"step\" mode of predict() is currently not supported.\r\n     *   This is because the TensorFow.js core backend is imperative only.\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.predict(tf.ones([2, 10])).print();\r\n     * ```\r\n     *\r\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\r\n     *   the model has multiple inputs.\r\n     * @param conifg A `ModelPredictConfig` object containing optional fields.\r\n     *\r\n     * @return `tf.Tensor`(s) of predictions.\r\n     *\r\n     * @exception ValueError In case of mismatch between the provided input data\r\n     *   and the model's expectations, or in case a stateful model receives a\r\n     *   number of samples that is not a multiple of the batch size.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"predict\",value:function predict(x){var args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(this.model==null){this.build();}return this.model.predict(x,args);}/**\r\n     * Returns predictions for a single batch of samples.\r\n     *\r\n     * @param x: Input samples, as a Tensor, or list of Tensors (if the model\r\n     *   has multiple inputs).\r\n     * @return Tensor(s) of predictions\r\n     */},{key:\"predictOnBatch\",value:function predictOnBatch(x){if(this.model==null){this.build();}return this.model.predictOnBatch(x);}/**\r\n     * See `LayersModel.compile`.\r\n     *\r\n     * @param args\r\n     */},{key:\"compile\",value:function compile(args){this.build();this.model.compile(args);this.optimizer_=this.model.optimizer;// tslint:disable-next-line:no-any\nthis.isOptimizerOwned=this.model.isOptimizerOwned;this.loss=this.model.loss;this.metrics=this.model.metrics;// TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n//   this.weightedMetrics, this.targets.\nthis.metricsTensors=this.model.metricsTensors;this.metricsNames=this.model.metricsNames;// TODO(cais): Add sampleWeights.\n}},{key:\"optimizer\",get:function get(){return this.model==null?undefined:this.model.optimizer;},set:function set(optimizer){this.model.optimizer=optimizer;}/**\r\n     * Trains the model for a fixed number of epochs (iterations on a dataset).\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n     * });\r\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\r\n     *   batchSize: 4,\r\n     *   epochs: 3\r\n     * });\r\n     * console.log(history.history.loss[0]);\r\n     * ```\r\n     *\r\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\r\n     * model has multiple inputs. If all inputs in the model are named, you can\r\n     * also pass a dictionary mapping input names to `tf.Tensor`s.\r\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\r\n     * the model has multiple outputs. If all outputs in the model are named, you\r\n     *  can also pass a dictionary mapping output names to `tf.Tensor`s.\r\n     * @param args  A `ModelFitConfig`, containing optional fields.\r\n     *\r\n     * @return A `History` instance. Its `history` attribute contains all\r\n     *   information collected during training.\r\n     *\r\n     * @exception ValueError In case of mismatch between the provided input data\r\n     *   and what the model expects.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"fit\",value:function(){var _fit2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee156(x,y){var args,_args158=arguments;return regeneratorRuntime.wrap(function _callee156$(_context156){while(1){switch(_context156.prev=_context156.next){case 0:args=_args158.length>2&&_args158[2]!==undefined?_args158[2]:{};if(this.built){_context156.next=3;break;}throw new RuntimeError('The model needs to be compiled before '+'being used.');case 3:return _context156.abrupt(\"return\",this.model.fit(x,y,args));case 4:case\"end\":return _context156.stop();}}},_callee156,this);}));function fit(_x213,_x214){return _fit2.apply(this,arguments);}return fit;}()/**\r\n     * Trains the model using a dataset object.\r\n     *\r\n     * ```js\r\n     * const xArray = [\r\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n     * ];\r\n     * const yArray = [1, 1, 1, 1];\r\n     * // Create a dataset from the JavaScript array.\r\n     * const xDataset = tf.data.array(xArray);\r\n     * const yDataset = tf.data.array(yArray);\r\n     * // Zip combines the `x` and `y` Datasets into a single Dataset, the\r\n     * // iterator of which will return an object containing of two tensors,\r\n     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle\r\n     * // four such samples into a single object, with the same keys now pointing\r\n     * // to tensors that hold 4 examples, organized along the batch dimension.\r\n     * // The call to `shuffle(4)` causes each iteration through the dataset to\r\n     * // happen in a different order.  The size of the shuffle window is 4.\r\n     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})\r\n     *     .batch(4)\r\n     *     .shuffle(4);\r\n     * const model = tf.sequential({\r\n     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]\r\n     * });\r\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n     * const history = await model.fitDataset(xyDataset, {\r\n     *   epochs: 4,\r\n     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}\r\n     * });\r\n     * ```\r\n     *\r\n     * @param dataset A dataset object. Its `iterator()` method is expected to\r\n     *   generate a dataset iterator object, the `next()` method of which is\r\n     *   expected to produce data batches for evaluation. The return value of the\r\n     *   `next()` call ought to contain a boolean `done` field and a `value`\r\n     *   field.\r\n     *\r\n     *   The `value` field is expected to be an object of with fields\r\n     *   `xs` and `ys`, which point to the feature tensor and the target tensor,\r\n     *   respectively. This case is for models with exactly one input and one\r\n     *   output (e.g.. a sequential model). For example:\r\n     *   ```js\r\n     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}\r\n     *   ```\r\n     *\r\n     *   If the model has multiple inputs, the `xs` field of `value` should\r\n     *   be an object mapping input names to their respective feature tensors.\r\n     *   For example:\r\n     *   ```js\r\n     *   {\r\n     *     value: {\r\n     *       xs: {\r\n     *         input_1: xsTensor1,\r\n     *         input_2: xsTensor2\r\n     *       },\r\n     *       ys: ysTensor\r\n     *     },\r\n     *     done: false\r\n     *   }\r\n     *   ```\r\n     *   If the model has multiple outputs, the `ys` field of `value` should\r\n     *   be an object mapping output names to their respective target tensors.\r\n     *   For example:\r\n     *   ```js\r\n     *   {\r\n     *     value: {\r\n     *       xs: xsTensor,\r\n     *       ys: {\r\n     *         output_1: ysTensor1,\r\n     *         output_2: ysTensor2\r\n     *       },\r\n     *     },\r\n     *     done: false\r\n     *   }\r\n     *   ```\r\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\r\n     *\r\n     * @return A `History` instance. Its `history` attribute contains all\r\n     *   information collected during training.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n     */},{key:\"fitDataset\",value:function(){var _fitDataset4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee157(dataset,args){return regeneratorRuntime.wrap(function _callee157$(_context157){while(1){switch(_context157.prev=_context157.next){case 0:if(this.built){_context157.next=2;break;}throw new RuntimeError('The model needs to be compiled before '+'being used.');case 2:return _context157.abrupt(\"return\",this.model.fitDataset(dataset,args));case 3:case\"end\":return _context157.stop();}}},_callee157,this);}));function fitDataset(_x215,_x216){return _fitDataset4.apply(this,arguments);}return fitDataset;}()/**\r\n     * Runs a single gradient update on a single batch of data.\r\n     *\r\n     * This method differs from `fit()` and `fitDataset()` in the following\r\n     * regards:\r\n     *   - It operates on exactly one batch of data.\r\n     *   - It returns only the loss and matric values, instead of\r\n     *     returning the batch-by-batch loss and metric values.\r\n     *   - It doesn't support fine-grained options such as verbosity and\r\n     *     callbacks.\r\n     *\r\n     * @param x Input data. It could be one of the following:\r\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\r\n     *     multiple inputs).\r\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\r\n     *     model has named inputs).\r\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\r\n     *   `tf.Tensor`s. It should be consistent with `x`.\r\n     * @returns Training loss or losses (in case the model has\r\n     *   multiple outputs), along with metrics (if any), as numbers.\r\n     */ /**\r\n     * @doc {heading: 'Models', subheading: 'Classes'}\r\n     */},{key:\"trainOnBatch\",value:function(){var _trainOnBatch2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee158(x,y){return regeneratorRuntime.wrap(function _callee158$(_context158){while(1){switch(_context158.prev=_context158.next){case 0:return _context158.abrupt(\"return\",this.model.trainOnBatch(x,y));case 1:case\"end\":return _context158.stop();}}},_callee158,this);}));function trainOnBatch(_x217,_x218){return _trainOnBatch2.apply(this,arguments);}return trainOnBatch;}()/* See parent class for JsDoc */ /** @nocollapse */},{key:\"stopTraining\",get:function get(){if(this.model==null){throw new ValueError('Cannot get the stopTraining property of a sequential model before '+'it is compiled.');}return this.model.stopTraining;}// TODO(cais): Override get trainableWeights() here\n// tslint:disable-next-line:no-any\n,set:/**\r\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * const model = tf.sequential();\r\n     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\r\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n     * const xs = tf.ones([8, 10]);\r\n     * const ys = tf.zeros([8, 1]);\r\n     *\r\n     * const history = await model.fit(xs, ys, {\r\n     *   epochs: 10,\r\n     *   callbacks: {\r\n     *     onEpochEnd: async (epoch, logs) => {\r\n     *       if (epoch === 2) {\r\n     *         model.stopTraining = true;\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * });\r\n     *\r\n     * // There should be only 3 values in the loss array, instead of 10 values,\r\n     * // due to the stopping after 3 epochs.\r\n     * console.log(history.history.loss);\r\n     * ```\r\n     */function set(stop){// TODO(cais): When refactoring to remove the composition pattern happens,\n// remove this method overriding.\nif(this.model==null){throw new ValueError('Cannot set the stopTraining property of a sequential model before '+'it is compiled.');}this.model.stopTraining=stop;}},{key:\"getConfig\",value:function getConfig(){// NOTE(cais): We override the return type of getConfig() to `any` here,\n//   because the `Sequential` class is a special case among `Container`\n//   subtypes in that its getConfig() method returns an Array (not a\n//   dict).\nvar layers=[];var _iterator93=_createForOfIteratorHelper(this.layers),_step93;try{for(_iterator93.s();!(_step93=_iterator93.n()).done;){var layer=_step93.value;var dict={};dict['className']=layer.getClassName();dict['config']=layer.getConfig();layers.push(dict);}}catch(err){_iterator93.e(err);}finally{_iterator93.f();}return{name:this.name,layers:layers};}}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var fastWeightInit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var configArray;var extraModelConfig={};if(config instanceof Array){if(!(config[0].className!=null)||config[0]['className']==='Merge'){throw new ValueError('Legacy serialization format not supported yet.');}configArray=config;}else{dist[\"util\"].assert(config['layers']!=null,function(){return\"When the config data for a Sequential model is not an Array, \"+\"it must be an Object that contains the 'layers' field.\";});configArray=config['layers'];delete config['layers'];extraModelConfig=config;}var model=new cls(extraModelConfig);if(!(model instanceof models_Sequential)){throw new NotImplementedError(\"Sequential.fromConfig called on non-Sequential input: \".concat(model));}var _iterator94=_createForOfIteratorHelper(configArray),_step94;try{for(_iterator94.s();!(_step94=_iterator94.n()).done;){var conf=_step94.value;var _customObjects=undefined;var layer=deserialize(conf,_customObjects,fastWeightInit);if(fastWeightInit){layer.setFastWeightInitDuringBuild(true);}model.add(layer);}}catch(err){_iterator94.e(err);}finally{_iterator94.f();}return model;}}]);return models_Sequential;}(training_LayersModel);/** @nocollapse */models_Sequential.className='Sequential';dist[\"serialization\"].registerClass(models_Sequential);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// LayersModel and related factory methods.\n/**\r\n * A model is a data structure that consists of `Layers` and defines inputs\r\n * and outputs.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.model` is more generic, supporting an arbitrary graph (without\r\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\r\n * stack of layers.\r\n *\r\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\r\n * are used to wire input(s) to output(s).\r\n *\r\n * For example, the following code snippet defines a model consisting of\r\n * two `dense` layers, with 10 and 4 units, respectively.\r\n *\r\n * ```js\r\n * // Define input, which has a size of 5 (not including batch dimension).\r\n * const input = tf.input({shape: [5]});\r\n *\r\n * // First dense layer uses relu activation.\r\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\r\n * // Second dense layer uses softmax activation.\r\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\r\n *\r\n * // Obtain the output symbolic tensor by applying the layers on the input.\r\n * const output = denseLayer2.apply(denseLayer1.apply(input));\r\n *\r\n * // Create the model based on the inputs.\r\n * const model = tf.model({inputs: input, outputs: output});\r\n *\r\n * // The model can be used for training, evaluation and prediction.\r\n * // For example, the following line runs prediction with the model on\r\n * // some fake data.\r\n * model.predict(tf.ones([2, 5])).print();\r\n * ```\r\n * See also:\r\n *   `tf.sequential`, `tf.loadLayersModel`.\r\n */ /**\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */function exports_model(args){return new training_LayersModel(args);}/**\r\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\r\n * outputs of one layer are the inputs to the next layer, i.e. the model\r\n * topology is a simple 'stack' of layers, with no branching or skipping.\r\n *\r\n * This means that the first layer passed to a `tf.Sequential` model should have\r\n * a defined input shape. What that means is that it should have received an\r\n * `inputShape` or `batchInputShape` argument, or for some type of layers\r\n * (recurrent, Dense...) an `inputDim` argument.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\r\n * `tf.model` is more generic and supports an arbitrary graph (without\r\n * cycles) of layers.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have an input shape defined.\r\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output, which equals\r\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\r\n * // 2nd is the output size of the model's last layer.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * It is also possible to specify a batch size (with potentially undetermined\r\n * batch dimension, denoted by \"null\") for the first layer using the\r\n * `batchInputShape` key. The following example is equivalent to the above:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have a defined input shape\r\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * You can also use an `Array` of already-constructed `Layer`s to create\r\n * a `tf.Sequential` model:\r\n *\r\n * ```js\r\n * const model = tf.sequential({\r\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\r\n *            tf.layers.dense({units: 4})]\r\n * });\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n */ /**\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */function sequential(config){return new models_Sequential(config);}/**\r\n * Load a model composed of Layer objects, including its topology and optionally\r\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\r\n * examples.\r\n *\r\n * This method is applicable to:\r\n *\r\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\r\n * `tf.model` APIs of TensorFlow.js and later saved with the\r\n * `tf.LayersModel.save` method.\r\n * 2. Models converted from Keras or TensorFlow tf.keras using the\r\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\r\n *\r\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\r\n * forms. For those models, use `tf.loadGraphModel`.\r\n *\r\n * Example 1. Load a model from an HTTP server.\r\n *\r\n * ```js\r\n * const model = await tf.loadLayersModel(\r\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\r\n * model.summary();\r\n * ```\r\n *\r\n * Example 2: Save `model`'s topology and weights to browser [local\r\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('localstorage://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 3. Saving `model`'s topology and weights to browser\r\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('indexeddb://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 4. Load a model from user-selected files from HTML\r\n * [file input\r\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n *\r\n * ```js\r\n * // Note: this code snippet will not work without the HTML elements in the\r\n * //   page\r\n * const jsonUpload = document.getElementById('json-upload');\r\n * const weightsUpload = document.getElementById('weights-upload');\r\n *\r\n * const model = await tf.loadLayersModel(\r\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\r\n * ```\r\n *\r\n * @param pathOrIOHandler Can be either of the two formats\r\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\r\n *      the model in the canonical TensorFlow.js format. For file://\r\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\r\n *      either absolute or relative.\r\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\r\n *      method.\r\n * @param options Optional configuration arguments for the model loading,\r\n *   including:\r\n *   - `strict`: Require that the provided weights exactly match those required\r\n *     by the layers.  Default true.  Passing false means that both extra\r\n *     weights and missing weights will be silently ignored.\r\n *   - `onProgress`: A function of the signature `(fraction: number) => void',\r\n *     that can be used as the progress callback for the model loading.\r\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\r\n *     loaded.\r\n */ /** @doc {heading: 'Models', subheading: 'Loading'} */function loadLayersModel(pathOrIOHandler,options){if(options==null){options={};}return loadLayersModelInternal(pathOrIOHandler,options);}/**\r\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\r\n *\r\n * Users should call the `input` factory function for\r\n * consistency with other generator functions.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * // Defines a simple logistic regression model with 32 dimensional input\r\n * // and 3 dimensional output.\r\n * const x = tf.input({shape: [32]});\r\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\r\n * const model = tf.model({inputs: x, outputs: y});\r\n * model.predict(tf.ones([2, 32])).print();\r\n * ```\r\n *\r\n * Note: `input` is only necessary when using `model`. When using\r\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\r\n * as the first layer.\r\n */ /** @doc {heading: 'Models', subheading: 'Inputs'} */function exports_input(config){return Input(config);}function registerCallbackConstructor(verbosityLevel,callbackConstructor){base_callbacks_CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel,callbackConstructor);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/activations.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // Layer activation functions\n/**\r\n * Base class for Activations.\r\n *\r\n * Special note: due to cross-language compatibility reasons, the\r\n * static readonly className field in this family of classes must be set to\r\n * the initialLowerCamelCase name of the activation.\r\n */var activations_Activation=/*#__PURE__*/function(_dist$serialization$S4){_inherits(activations_Activation,_dist$serialization$S4);var _super70=_createSuper(activations_Activation);function activations_Activation(){_classCallCheck2(this,activations_Activation);return _super70.apply(this,arguments);}_createClass(activations_Activation,[{key:\"getConfig\",value:function getConfig(){return{};}}]);return activations_Activation;}(dist[\"serialization\"].Serializable);/**\r\n * Exponential linear unit (ELU).\r\n * Reference: https://arxiv.org/abs/1511.07289\r\n */var activations_Elu=/*#__PURE__*/function(_activations_Activati){_inherits(activations_Elu,_activations_Activati);var _super71=_createSuper(activations_Elu);function activations_Elu(){_classCallCheck2(this,activations_Elu);return _super71.apply(this,arguments);}_createClass(activations_Elu,[{key:\"apply\",value:/**\r\n     * Calculate the activation function.\r\n     *\r\n     * @param x: Input.\r\n     * @param alpha: Scaling factor the negative section.\r\n     * @return Output of the ELU activation.\r\n     */function apply(x){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;return elu(x,alpha);}}]);return activations_Elu;}(activations_Activation);/** @nocollapse */activations_Elu.className='elu';dist[\"serialization\"].registerClass(activations_Elu);/**\r\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\r\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\r\n * Notes:\r\n *   - To be used together with the initialization \"lecunNormal\".\r\n *   - To be used together with the dropout variant \"AlphaDropout\".\r\n */var activations_Selu=/*#__PURE__*/function(_activations_Activati2){_inherits(activations_Selu,_activations_Activati2);var _super72=_createSuper(activations_Selu);function activations_Selu(){_classCallCheck2(this,activations_Selu);return _super72.apply(this,arguments);}_createClass(activations_Selu,[{key:\"apply\",value:function apply(x){return dist[\"selu\"](x);}}]);return activations_Selu;}(activations_Activation);/** @nocollapse */activations_Selu.className='selu';dist[\"serialization\"].registerClass(activations_Selu);/**\r\n *  Rectified linear unit\r\n */var activations_Relu=/*#__PURE__*/function(_activations_Activati3){_inherits(activations_Relu,_activations_Activati3);var _super73=_createSuper(activations_Relu);function activations_Relu(){_classCallCheck2(this,activations_Relu);return _super73.apply(this,arguments);}_createClass(activations_Relu,[{key:\"apply\",value:function apply(x){return dist[\"relu\"](x);}}]);return activations_Relu;}(activations_Activation);/** @nocollapse */activations_Relu.className='relu';dist[\"serialization\"].registerClass(activations_Relu);/**\r\n * Rectified linear unit activation maxing out at 6.0.\r\n */var activations_Relu6=/*#__PURE__*/function(_activations_Activati4){_inherits(activations_Relu6,_activations_Activati4);var _super74=_createSuper(activations_Relu6);function activations_Relu6(){_classCallCheck2(this,activations_Relu6);return _super74.apply(this,arguments);}_createClass(activations_Relu6,[{key:\"apply\",value:function apply(x){return Object(dist[\"tidy\"])(function(){return dist[\"minimum\"](6.0,dist[\"relu\"](x));});}}]);return activations_Relu6;}(activations_Activation);/** @nocollapse */activations_Relu6.className='relu6';dist[\"serialization\"].registerClass(activations_Relu6);//* Linear activation (no-op) */\nvar Linear=/*#__PURE__*/function(_activations_Activati5){_inherits(Linear,_activations_Activati5);var _super75=_createSuper(Linear);function Linear(){_classCallCheck2(this,Linear);return _super75.apply(this,arguments);}_createClass(Linear,[{key:\"apply\",value:function apply(x){return x;}}]);return Linear;}(activations_Activation);/** @nocollapse */Linear.className='linear';dist[\"serialization\"].registerClass(Linear);/**\r\n * Sigmoid activation function.\r\n */var activations_Sigmoid=/*#__PURE__*/function(_activations_Activati6){_inherits(activations_Sigmoid,_activations_Activati6);var _super76=_createSuper(activations_Sigmoid);function activations_Sigmoid(){_classCallCheck2(this,activations_Sigmoid);return _super76.apply(this,arguments);}_createClass(activations_Sigmoid,[{key:\"apply\",value:function apply(x){return dist[\"sigmoid\"](x);}}]);return activations_Sigmoid;}(activations_Activation);/** @nocollapse */activations_Sigmoid.className='sigmoid';dist[\"serialization\"].registerClass(activations_Sigmoid);/**\r\n * Segment-wise linear approximation of sigmoid.\r\n */var activations_HardSigmoid=/*#__PURE__*/function(_activations_Activati7){_inherits(activations_HardSigmoid,_activations_Activati7);var _super77=_createSuper(activations_HardSigmoid);function activations_HardSigmoid(){_classCallCheck2(this,activations_HardSigmoid);return _super77.apply(this,arguments);}_createClass(activations_HardSigmoid,[{key:\"apply\",value:function apply(x){return hardSigmoid(x);}}]);return activations_HardSigmoid;}(activations_Activation);/** @nocollapse */activations_HardSigmoid.className='hardSigmoid';dist[\"serialization\"].registerClass(activations_HardSigmoid);/**\r\n * Softplus activation function.\r\n */var activations_Softplus=/*#__PURE__*/function(_activations_Activati8){_inherits(activations_Softplus,_activations_Activati8);var _super78=_createSuper(activations_Softplus);function activations_Softplus(){_classCallCheck2(this,activations_Softplus);return _super78.apply(this,arguments);}_createClass(activations_Softplus,[{key:\"apply\",value:function apply(x){return dist[\"softplus\"](x);}}]);return activations_Softplus;}(activations_Activation);/** @nocollapse */activations_Softplus.className='softplus';dist[\"serialization\"].registerClass(activations_Softplus);/**\r\n * Softsign activation function.\r\n */var activations_Softsign=/*#__PURE__*/function(_activations_Activati9){_inherits(activations_Softsign,_activations_Activati9);var _super79=_createSuper(activations_Softsign);function activations_Softsign(){_classCallCheck2(this,activations_Softsign);return _super79.apply(this,arguments);}_createClass(activations_Softsign,[{key:\"apply\",value:function apply(x){return softsign(x);}}]);return activations_Softsign;}(activations_Activation);/** @nocollapse */activations_Softsign.className='softsign';dist[\"serialization\"].registerClass(activations_Softsign);/**\r\n * Hyperbolic tangent function.\r\n */var activations_Tanh=/*#__PURE__*/function(_activations_Activati10){_inherits(activations_Tanh,_activations_Activati10);var _super80=_createSuper(activations_Tanh);function activations_Tanh(){_classCallCheck2(this,activations_Tanh);return _super80.apply(this,arguments);}_createClass(activations_Tanh,[{key:\"apply\",value:function apply(x){return dist[\"tanh\"](x);}}]);return activations_Tanh;}(activations_Activation);/** @nocollapse */activations_Tanh.className='tanh';dist[\"serialization\"].registerClass(activations_Tanh);/**\r\n * Softmax activation function\r\n */var activations_Softmax=/*#__PURE__*/function(_activations_Activati11){_inherits(activations_Softmax,_activations_Activati11);var _super81=_createSuper(activations_Softmax);function activations_Softmax(){_classCallCheck2(this,activations_Softmax);return _super81.apply(this,arguments);}_createClass(activations_Softmax,[{key:\"apply\",value:/**\r\n     * Calculate the activation function.\r\n     *\r\n     * @param x Tensor.\r\n     * @param axis Integer, axis along which the softmax normalization is applied.\r\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\r\n     * an error.\r\n     *\r\n     * @returns a Tensor of the same shape as x\r\n     *\r\n     * @throws ValueError: In case `dim(x) < 2`.\r\n     */function apply(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;return dist[\"softmax\"](x,axis);}}]);return activations_Softmax;}(activations_Activation);/** @nocollapse */activations_Softmax.className='softmax';dist[\"serialization\"].registerClass(activations_Softmax);/**\r\n * Log softmax activation function\r\n */var activations_LogSoftmax=/*#__PURE__*/function(_activations_Activati12){_inherits(activations_LogSoftmax,_activations_Activati12);var _super82=_createSuper(activations_LogSoftmax);function activations_LogSoftmax(){_classCallCheck2(this,activations_LogSoftmax);return _super82.apply(this,arguments);}_createClass(activations_LogSoftmax,[{key:\"apply\",value:/**\r\n     * Calculate the activation function of log softmax:\r\n     * log( exp(x_i) / sum(exp(x)) )\r\n     *\r\n     * @param x Tensor.\r\n     * @param axis Integer, axis along which the softmax normalization is applied.\r\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\r\n     * an error.\r\n     *\r\n     * @returns a Tensor of the same shape as x\r\n     *\r\n     * @throws ValueError: In case `dim(x) < 2`.\r\n     */function apply(x){var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;return dist[\"logSoftmax\"](x,axis);}}]);return activations_LogSoftmax;}(activations_Activation);/** @nocollapse */activations_LogSoftmax.className='logSoftmax';dist[\"serialization\"].registerClass(activations_LogSoftmax);function serializeActivation(activation){return activation.getClassName();}function deserializeActivation(config){var customObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return deserializeKerasObject(config,dist[\"serialization\"].SerializationMap.getMap().classNameMap,customObjects,'activation');}function getActivation(identifier){if(identifier==null){var config={};config['className']='linear';config['config']={};return deserializeActivation(config);}if(typeof identifier==='string'){var _config={};_config['className']=identifier;_config['config']={};return deserializeActivation(_config);}else if(identifier instanceof activations_Activation){return identifier;}else{return deserializeActivation(identifier);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* original source: keras/regularizers.py */function assertObjectArgs(args){if(args!=null&&_typeof2(args)!=='object'){throw new Error(\"Argument to L1L2 regularizer's constructor is expected to be an \"+\"object, but received: \".concat(args));}}/**\r\n * Regularizer base class.\r\n */var regularizers_Regularizer=/*#__PURE__*/function(_dist$serialization$S5){_inherits(regularizers_Regularizer,_dist$serialization$S5);var _super83=_createSuper(regularizers_Regularizer);function regularizers_Regularizer(){_classCallCheck2(this,regularizers_Regularizer);return _super83.apply(this,arguments);}return regularizers_Regularizer;}(dist[\"serialization\"].Serializable);var regularizers_L1L2=/*#__PURE__*/function(_regularizers_Regular){_inherits(regularizers_L1L2,_regularizers_Regular);var _super84=_createSuper(regularizers_L1L2);function regularizers_L1L2(args){var _this157;_classCallCheck2(this,regularizers_L1L2);_this157=_super84.call(this);assertObjectArgs(args);_this157.l1=args==null||args.l1==null?0.01:args.l1;_this157.l2=args==null||args.l2==null?0.01:args.l2;_this157.hasL1=_this157.l1!==0;_this157.hasL2=_this157.l2!==0;return _this157;}/**\r\n     * Porting note: Renamed from __call__.\r\n     * @param x Variable of which to calculate the regularization score.\r\n     */_createClass(regularizers_L1L2,[{key:\"apply\",value:function apply(x){var _this158=this;return Object(dist[\"tidy\"])(function(){var regularization=Object(dist[\"zeros\"])([1]);if(_this158.hasL1){regularization=Object(dist[\"add\"])(regularization,Object(dist[\"sum\"])(dist[\"mul\"](_this158.l1,Object(dist[\"abs\"])(x))));}if(_this158.hasL2){regularization=Object(dist[\"add\"])(regularization,Object(dist[\"sum\"])(dist[\"mul\"](_this158.l2,square(x))));}return regularization.asScalar();});}},{key:\"getConfig\",value:function getConfig(){return{'l1':this.l1,'l2':this.l2};}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls({l1:config['l1'],l2:config['l2']});}}]);return regularizers_L1L2;}(regularizers_Regularizer);/** @nocollapse */regularizers_L1L2.className='L1L2';dist[\"serialization\"].registerClass(regularizers_L1L2);function l1(args){assertObjectArgs(args);return new regularizers_L1L2({l1:args!=null?args.l1:null,l2:0});}function l2(args){assertObjectArgs(args);return new regularizers_L1L2({l2:args!=null?args.l2:null,l1:0});}// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nvar REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={'l1l2':'L1L2'};function serializeRegularizer(constraint){return serializeKerasObject(constraint);}function deserializeRegularizer(config){var customObjects=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return deserializeKerasObject(config,dist[\"serialization\"].SerializationMap.getMap().classNameMap,customObjects,'regularizer');}function getRegularizer(identifier){if(identifier==null){return null;}if(typeof identifier==='string'){var className=identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier]:identifier;var config={className:className,config:{}};return deserializeRegularizer(config);}else if(identifier instanceof regularizers_Regularizer){return identifier;}else{return deserializeRegularizer(identifier);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n *  Advanced activation layers.\r\n */var advanced_activations_ReLU=/*#__PURE__*/function(_topology_Layer3){_inherits(advanced_activations_ReLU,_topology_Layer3);var _super85=_createSuper(advanced_activations_ReLU);function advanced_activations_ReLU(args){var _this159;_classCallCheck2(this,advanced_activations_ReLU);_this159=_super85.call(this,args==null?{}:args);_this159.supportsMasking=true;if(args!=null){_this159.maxValue=args.maxValue;}return _this159;}_createClass(advanced_activations_ReLU,[{key:\"call\",value:function call(inputs,kwargs){inputs=getExactlyOneTensor(inputs);var output=Object(dist[\"relu\"])(inputs);if(this.maxValue!=null){output=Object(dist[\"clipByValue\"])(output,0,this.maxValue);}return output;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var config={maxValue:this.maxValue};var baseConfig=_get(_getPrototypeOf(advanced_activations_ReLU.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_ReLU;}(topology_Layer);/** @nocollapse */advanced_activations_ReLU.className='ReLU';dist[\"serialization\"].registerClass(advanced_activations_ReLU);var advanced_activations_LeakyReLU=/*#__PURE__*/function(_topology_Layer4){_inherits(advanced_activations_LeakyReLU,_topology_Layer4);var _super86=_createSuper(advanced_activations_LeakyReLU);function advanced_activations_LeakyReLU(args){var _this160;_classCallCheck2(this,advanced_activations_LeakyReLU);_this160=_super86.call(this,args==null?{}:args);_this160.DEFAULT_ALPHA=0.3;if(args==null){args={};}_this160.alpha=args.alpha==null?_this160.DEFAULT_ALPHA:args.alpha;return _this160;}_createClass(advanced_activations_LeakyReLU,[{key:\"call\",value:function call(inputs,kwargs){var x=getExactlyOneTensor(inputs);return Object(dist[\"leakyRelu\"])(x,this.alpha);}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var config={alpha:this.alpha};var baseConfig=_get(_getPrototypeOf(advanced_activations_LeakyReLU.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_LeakyReLU;}(topology_Layer);/** @nocollapse */advanced_activations_LeakyReLU.className='LeakyReLU';dist[\"serialization\"].registerClass(advanced_activations_LeakyReLU);var advanced_activations_PReLU=/*#__PURE__*/function(_topology_Layer5){_inherits(advanced_activations_PReLU,_topology_Layer5);var _super87=_createSuper(advanced_activations_PReLU);function advanced_activations_PReLU(args){var _this161;_classCallCheck2(this,advanced_activations_PReLU);_this161=_super87.call(this,args==null?{}:args);_this161.DEFAULT_ALPHA_INITIALIZER='zeros';if(args==null){args={};}_this161.supportsMasking=true;_this161.alphaInitializer=getInitializer(args.alphaInitializer||_this161.DEFAULT_ALPHA_INITIALIZER);_this161.alphaRegularizer=getRegularizer(args.alphaRegularizer);_this161.alphaConstraint=getConstraint(args.alphaConstraint);if(args.sharedAxes==null){_this161.sharedAxes=null;}else if(Array.isArray(args.sharedAxes)){_this161.sharedAxes=args.sharedAxes;}else if(typeof args.sharedAxes==='number'){_this161.sharedAxes=[args.sharedAxes];}else{throw new ValueError(\"Expected sharedAxes to be a number or an array of numbers, \"+\"but got \".concat(args.sharedAxes));}return _this161;}_createClass(advanced_activations_PReLU,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var paramShape=inputShape.slice(1);if(this.sharedAxes!=null){var _iterator95=_createForOfIteratorHelper(this.sharedAxes),_step95;try{for(_iterator95.s();!(_step95=_iterator95.n()).done;){var i=_step95.value;paramShape[i-1]=1;}}catch(err){_iterator95.e(err);}finally{_iterator95.f();}}this.alpha=this.addWeight('alpha',paramShape,'float32',this.alphaInitializer,this.alphaRegularizer,true,this.alphaConstraint);// Set input spec.\nvar axes={};if(this.sharedAxes!=null){for(var _i80=1;_i80<inputShape.length;++_i80){axes[_i80]=inputShape[_i80];}}this.inputSpec=[new InputSpec({ndim:inputShape.length,axes:axes})];this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){inputs=getExactlyOneTensor(inputs);return Object(dist[\"prelu\"])(inputs,this.alpha.read());}},{key:\"getConfig\",value:function getConfig(){var config={alphaInitializer:serializeInitializer(this.alphaInitializer),alphaRegularizer:serializeRegularizer(this.alphaRegularizer),alphaConstraint:serializeConstraint(this.alphaConstraint),sharedAxes:this.sharedAxes};var baseConfig=_get(_getPrototypeOf(advanced_activations_PReLU.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_PReLU;}(topology_Layer);/** @nocollapse */advanced_activations_PReLU.className='PReLU';dist[\"serialization\"].registerClass(advanced_activations_PReLU);var advanced_activations_ELU=/*#__PURE__*/function(_topology_Layer6){_inherits(advanced_activations_ELU,_topology_Layer6);var _super88=_createSuper(advanced_activations_ELU);function advanced_activations_ELU(args){var _this162;_classCallCheck2(this,advanced_activations_ELU);_this162=_super88.call(this,args==null?{}:args);_this162.DEFAULT_ALPHA=1.0;if(args==null){args={};}if(args.alpha!=null&&args.alpha!==_this162.DEFAULT_ALPHA){throw new NotImplementedError(\"Non-default alpha value (\".concat(args.alpha,\") is not supported by the \")+\"ELU layer yet.\");}_this162.alpha=args.alpha==null?_this162.DEFAULT_ALPHA:args.alpha;return _this162;}_createClass(advanced_activations_ELU,[{key:\"call\",value:function call(inputs,kwargs){var x=getExactlyOneTensor(inputs);return Object(dist[\"elu\"])(x);}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var config={alpha:this.alpha};var baseConfig=_get(_getPrototypeOf(advanced_activations_ELU.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_ELU;}(topology_Layer);/** @nocollapse */advanced_activations_ELU.className='ELU';dist[\"serialization\"].registerClass(advanced_activations_ELU);var advanced_activations_ThresholdedReLU=/*#__PURE__*/function(_topology_Layer7){_inherits(advanced_activations_ThresholdedReLU,_topology_Layer7);var _super89=_createSuper(advanced_activations_ThresholdedReLU);function advanced_activations_ThresholdedReLU(args){var _this163;_classCallCheck2(this,advanced_activations_ThresholdedReLU);_this163=_super89.call(this,args==null?{}:args);_this163.DEFAULT_THETA=1.0;if(args==null){args={};}_this163.theta=args.theta==null?_this163.DEFAULT_THETA:args.theta;return _this163;}_createClass(advanced_activations_ThresholdedReLU,[{key:\"call\",value:function call(inputs,kwargs){var x=getExactlyOneTensor(inputs);return x.mul(cast(x.greater(this.theta),'float32'));}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var config={theta:this.theta};var baseConfig=_get(_getPrototypeOf(advanced_activations_ThresholdedReLU.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_ThresholdedReLU;}(topology_Layer);/** @nocollapse */advanced_activations_ThresholdedReLU.className='ThresholdedReLU';dist[\"serialization\"].registerClass(advanced_activations_ThresholdedReLU);var advanced_activations_Softmax=/*#__PURE__*/function(_topology_Layer8){_inherits(advanced_activations_Softmax,_topology_Layer8);var _super90=_createSuper(advanced_activations_Softmax);function advanced_activations_Softmax(args){var _this164;_classCallCheck2(this,advanced_activations_Softmax);_this164=_super90.call(this,args==null?{}:args);_this164.DEFAULT_AXIS=1.0;if(args==null){args={};}_this164.softmax=new activations_Softmax().apply;_this164.axis=args.axis==null?_this164.DEFAULT_AXIS:args.axis;return _this164;}_createClass(advanced_activations_Softmax,[{key:\"call\",value:function call(inputs,kwargs){var x=getExactlyOneTensor(inputs);return this.softmax(x,this.axis);}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var config={axis:this.axis};var baseConfig=_get(_getPrototypeOf(advanced_activations_Softmax.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return advanced_activations_Softmax;}(topology_Layer);/** @nocollapse */advanced_activations_Softmax.className='Softmax';dist[\"serialization\"].registerClass(advanced_activations_Softmax);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Transforms a single number of array of numbers into an array of numbers.\r\n * @param value\r\n * @param n: The size of the tuple to be returned.\r\n * @param name: Name of the parameter, used for generating error messages.\r\n * @returns An array of numbers.\r\n */function normalizeArray(value,n,name){if(typeof value==='number'){return pyListRepeat(value,n);}else{if(value.length!==n){throw new ValueError(\"The \".concat(name,\" argument must be an integer or tuple of \").concat(n,\" integers.\")+\" Received: \".concat(value.length,\" elements.\"));}for(var i=0;i<n;++i){var singleValue=value[i];if(!isInteger(singleValue)){throw new ValueError(\"The \".concat(name,\" argument must be an integer or tuple of \").concat(n)+\" integers. Received: \".concat(JSON.stringify(value),\" including a\")+\" non-integer number \".concat(singleValue));}}return value;}}/**\r\n * Determines output length of a convolution given input length.\r\n * @param inputLength\r\n * @param filterSize\r\n * @param padding\r\n * @param stride\r\n * @param dilation: dilation rate.\r\n */function convOutputLength(inputLength,filterSize,padding,stride){var dilation=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;if(inputLength==null){return inputLength;}var dilatedFilterSize=filterSize+(filterSize-1)*(dilation-1);var outputLength;if(padding==='same'){outputLength=inputLength;}else{// VALID\noutputLength=inputLength-dilatedFilterSize+1;}return Math.floor((outputLength+stride-1)/stride);}function deconvLength(dimSize,strideSize,kernelSize,padding){if(dimSize==null){return null;}if(padding==='valid'){dimSize=dimSize*strideSize+max([kernelSize-strideSize,0]);}else if(padding==='same'){dimSize=dimSize*strideSize;}else{throw new ValueError(\"Unsupport padding mode: \".concat(padding,\".\"));}return dimSize;}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Convolutional Layers\r\n */ /**\r\n * Transpose and cast the input before the conv2d.\r\n * @param x Input image tensor.\r\n * @param dataFormat\r\n */function preprocessConv2DInput(x,dataFormat){// TODO(cais): Cast type to float32 if not.\nreturn Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);if(dataFormat==='channelsFirst'){return dist[\"transpose\"](x,[0,2,3,1]);// NCHW -> NHWC.\n}else{return x;}});}/**\r\n * Transpose and cast the input before the conv3d.\r\n * @param x Input image tensor.\r\n * @param dataFormat\r\n */function preprocessConv3DInput(x,dataFormat){return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);if(dataFormat==='channelsFirst'){return dist[\"transpose\"](x,[0,2,3,4,1]);// NCDHW -> NDHWC.\n}else{return x;}});}/**\r\n * 1D-convolution with bias added.\r\n *\r\n * Porting Note: This function does not exist in the Python Keras backend.\r\n *   It is exactly the same as `conv2d`, except the added `bias`.\r\n *\r\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\r\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\r\n * @param bias Bias, rank-3, of shape `[outDepth]`.\r\n * @param strides\r\n * @param padding Padding mode.\r\n * @param dataFormat Data format.\r\n * @param dilationRate\r\n * @returns The result of the 1D convolution.\r\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\r\n */function conv1dWithBias(x,kernel,bias){var strides=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var padding=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'valid';var dataFormat=arguments.length>5?arguments[5]:undefined;var dilationRate=arguments.length>6&&arguments[6]!==undefined?arguments[6]:1;return Object(dist[\"tidy\"])(function(){if(dataFormat==null){dataFormat=imageDataFormat();}checkDataFormat(dataFormat);// Check the ranks of x, kernel and bias.\nif(x.shape.length!==3){throw new ValueError(\"The input of a conv1dWithBias operation should be 3, but is \"+\"\".concat(x.shape.length,\" instead.\"));}if(kernel.shape.length!==3){throw new ValueError(\"The kernel for a conv1dWithBias operation should be 3, but is \"+\"\".concat(kernel.shape.length,\" instead\"));}if(bias!=null&&bias.shape.length!==1){throw new ValueError(\"The bias for a conv1dWithBias operation should be 1, but is \"+\"\".concat(kernel.shape.length,\" instead\"));}// TODO(cais): Support CAUSAL padding mode.\nif(dataFormat==='channelsFirst'){x=dist[\"transpose\"](x,[0,2,1]);// NCW -> NWC.\n}if(padding==='causal'){throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not '+'implemented yet.');}var y=dist[\"conv1d\"](x,kernel,strides,padding==='same'?'same':'valid','NWC',dilationRate);if(bias!=null){y=biasAdd(y,bias);}return y;});}/**\r\n * 1D-convolution.\r\n *\r\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\r\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\r\n * @param strides\r\n * @param padding Padding mode.\r\n * @param dataFormat Data format.\r\n * @param dilationRate\r\n * @returns The result of the 1D convolution.\r\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\r\n */function conv1d(x,kernel){var strides=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var padding=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'valid';var dataFormat=arguments.length>4?arguments[4]:undefined;var dilationRate=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1;return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);return conv1dWithBias(x,kernel,null,strides,padding,dataFormat,dilationRate);});}/**\r\n * 2D Convolution\r\n * @param x\r\n * @param kernel kernel of the convolution.\r\n * @param strides strides array.\r\n * @param padding padding mode. Default to 'valid'.\r\n * @param dataFormat data format. Defaults to 'channelsLast'.\r\n * @param dilationRate dilation rate array.\r\n * @returns Result of the 2D pooling.\r\n */function conv2d(x,kernel){var strides=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[1,1];var padding=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'valid';var dataFormat=arguments.length>4?arguments[4]:undefined;var dilationRate=arguments.length>5?arguments[5]:undefined;return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);return conv2dWithBiasActivation(x,kernel,null,strides,padding,dataFormat,dilationRate);});}/**\r\n * 2D Convolution with an added bias and optional activation.\r\n * Note: This function does not exist in the Python Keras Backend. This function\r\n * is exactly the same as `conv2d`, except the added `bias`.\r\n */function conv2dWithBiasActivation(x,kernel,bias){var strides=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[1,1];var padding=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'valid';var dataFormat=arguments.length>5?arguments[5]:undefined;var dilationRate=arguments.length>6?arguments[6]:undefined;var activation=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;return Object(dist[\"tidy\"])(function(){if(dataFormat==null){dataFormat=imageDataFormat();}checkDataFormat(dataFormat);if(x.rank!==3&&x.rank!==4){throw new ValueError(\"conv2dWithBiasActivation expects input to be of rank 3 or 4, \"+\"but received \".concat(x.rank,\".\"));}if(kernel.rank!==3&&kernel.rank!==4){throw new ValueError(\"conv2dWithBiasActivation expects kernel to be of rank 3 or 4, \"+\"but received \".concat(x.rank,\".\"));}var y=preprocessConv2DInput(x,dataFormat);if(padding==='causal'){throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not '+'implemented yet.');}y=dist[\"fused\"].conv2d({x:y,filter:kernel,strides:strides,pad:padding==='same'?'same':'valid',dilations:dilationRate,dataFormat:'NHWC',bias:bias,activation:activation});if(dataFormat==='channelsFirst'){y=dist[\"transpose\"](y,[0,3,1,2]);}return y;});}/**\r\n * 3D Convolution.\r\n * @param x\r\n * @param kernel kernel of the convolution.\r\n * @param strides strides array.\r\n * @param padding padding mode. Default to 'valid'.\r\n * @param dataFormat data format. Defaults to 'channelsLast'.\r\n * @param dilationRate dilation rate array.\r\n * @returns Result of the 3D convolution.\r\n */function conv3d(x,kernel){var strides=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[1,1,1];var padding=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'valid';var dataFormat=arguments.length>4?arguments[4]:undefined;var dilationRate=arguments.length>5?arguments[5]:undefined;return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);return conv3dWithBias(x,kernel,null,strides,padding,dataFormat,dilationRate);});}/**\r\n * 3D Convolution with an added bias.\r\n * Note: This function does not exist in the Python Keras Backend. This function\r\n * is exactly the same as `conv3d`, except the added `bias`.\r\n */function conv3dWithBias(x,kernel,bias){var strides=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[1,1,1];var padding=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'valid';var dataFormat=arguments.length>5?arguments[5]:undefined;var dilationRate=arguments.length>6?arguments[6]:undefined;return Object(dist[\"tidy\"])(function(){if(dataFormat==null){dataFormat=imageDataFormat();}checkDataFormat(dataFormat);if(x.rank!==4&&x.rank!==5){throw new ValueError(\"conv3dWithBias expects input to be of rank 4 or 5, but received \"+\"\".concat(x.rank,\".\"));}if(kernel.rank!==4&&kernel.rank!==5){throw new ValueError(\"conv3dWithBias expects kernel to be of rank 4 or 5, but received \"+\"\".concat(x.rank,\".\"));}var y=preprocessConv3DInput(x,dataFormat);if(padding==='causal'){throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not '+'implemented yet.');}y=dist[\"conv3d\"](y,kernel,strides,padding==='same'?'same':'valid','NDHWC',dilationRate);if(bias!=null){y=biasAdd(y,bias);}if(dataFormat==='channelsFirst'){y=dist[\"transpose\"](y,[0,4,1,2,3]);}return y;});}/**\r\n * Abstract convolution layer.\r\n */var convolutional_BaseConv=/*#__PURE__*/function(_topology_Layer9){_inherits(convolutional_BaseConv,_topology_Layer9);var _super91=_createSuper(convolutional_BaseConv);function convolutional_BaseConv(rank,args){var _this165;_classCallCheck2(this,convolutional_BaseConv);_this165=_super91.call(this,args);_this165.bias=null;_this165.DEFAULT_KERNEL_INITIALIZER='glorotNormal';_this165.DEFAULT_BIAS_INITIALIZER='zeros';convolutional_BaseConv.verifyArgs(args);_this165.rank=rank;assertPositiveInteger(_this165.rank,'rank');if(_this165.rank!==1&&_this165.rank!==2&&_this165.rank!==3){throw new NotImplementedError(\"Convolution layer for rank other than 1, 2, or 3 (\".concat(_this165.rank,\") is \")+\"not implemented yet.\");}_this165.kernelSize=normalizeArray(args.kernelSize,rank,'kernelSize');_this165.strides=normalizeArray(args.strides==null?1:args.strides,rank,'strides');_this165.padding=args.padding==null?'valid':args.padding;checkPaddingMode(_this165.padding);_this165.dataFormat=args.dataFormat==null?'channelsLast':args.dataFormat;checkDataFormat(_this165.dataFormat);_this165.activation=getActivation(args.activation);_this165.useBias=args.useBias==null?true:args.useBias;_this165.biasInitializer=getInitializer(args.biasInitializer||_this165.DEFAULT_BIAS_INITIALIZER);_this165.biasConstraint=getConstraint(args.biasConstraint);_this165.biasRegularizer=getRegularizer(args.biasRegularizer);_this165.activityRegularizer=getRegularizer(args.activityRegularizer);_this165.dilationRate=normalizeArray(args.dilationRate==null?1:args.dilationRate,rank,'dilationRate');if(_this165.rank===1&&Array.isArray(_this165.dilationRate)&&_this165.dilationRate.length!==1){throw new ValueError(\"dilationRate must be a number or an array of a single number \"+\"for 1D convolution, but received \"+\"\".concat(JSON.stringify(_this165.dilationRate)));}else if(_this165.rank===2){if(typeof _this165.dilationRate==='number'){_this165.dilationRate=[_this165.dilationRate,_this165.dilationRate];}else if(_this165.dilationRate.length!==2){throw new ValueError(\"dilationRate must be a number or array of two numbers for 2D \"+\"convolution, but received \".concat(JSON.stringify(_this165.dilationRate)));}}else if(_this165.rank===3){if(typeof _this165.dilationRate==='number'){_this165.dilationRate=[_this165.dilationRate,_this165.dilationRate,_this165.dilationRate];}else if(_this165.dilationRate.length!==3){throw new ValueError(\"dilationRate must be a number or array of three numbers for 3D \"+\"convolution, but received \".concat(JSON.stringify(_this165.dilationRate)));}}return _this165;}_createClass(convolutional_BaseConv,[{key:\"getConfig\",value:function getConfig(){var config={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:serializeActivation(this.activation),useBias:this.useBias,biasInitializer:serializeInitializer(this.biasInitializer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),biasConstraint:serializeConstraint(this.biasConstraint)};var baseConfig=_get(_getPrototypeOf(convolutional_BaseConv.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}],[{key:\"verifyArgs\",value:function verifyArgs(args){// Check config.kernelSize type and shape.\nassert('kernelSize'in args,\"required key 'kernelSize' not in config\");if(typeof args.kernelSize!=='number'&&!checkArrayTypeAndLength(args.kernelSize,'number',1,3)){throw new ValueError(\"BaseConv expects config.kernelSize to be number or number[] with \"+\"length 1, 2, or 3, but received \".concat(JSON.stringify(args.kernelSize),\".\"));}}}]);return convolutional_BaseConv;}(topology_Layer);/**\r\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\r\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\r\n */var convolutional_Conv=/*#__PURE__*/function(_convolutional_BaseCo){_inherits(convolutional_Conv,_convolutional_BaseCo);var _super92=_createSuper(convolutional_Conv);function convolutional_Conv(rank,args){var _this166;_classCallCheck2(this,convolutional_Conv);_this166=_super92.call(this,rank,args);_this166.kernel=null;convolutional_Conv.verifyArgs(args);_this166.filters=args.filters;assertPositiveInteger(_this166.filters,'filters');_this166.kernelInitializer=getInitializer(args.kernelInitializer||_this166.DEFAULT_KERNEL_INITIALIZER);_this166.kernelConstraint=getConstraint(args.kernelConstraint);_this166.kernelRegularizer=getRegularizer(args.kernelRegularizer);return _this166;}_createClass(convolutional_Conv,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var channelAxis=this.dataFormat==='channelsFirst'?1:inputShape.length-1;if(inputShape[channelAxis]==null){throw new ValueError(\"The channel dimension of the input should be defined. \"+\"Found \".concat(inputShape[channelAxis]));}var inputDim=inputShape[channelAxis];var kernelShape=this.kernelSize.concat([inputDim,this.filters]);this.kernel=this.addWeight('kernel',kernelShape,null,this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.filters],null,this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}this.inputSpec=[{ndim:this.rank+2,axes:_defineProperty2({},channelAxis,inputDim)}];this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this167=this;return Object(dist[\"tidy\"])(function(){inputs=getExactlyOneTensor(inputs);var outputs;var biasValue=_this167.bias==null?null:_this167.bias.read();var fusedActivationName=mapActivationToFusedKernel(_this167.activation.getClassName());if(fusedActivationName!=null&&_this167.rank===2){outputs=conv2dWithBiasActivation(inputs,_this167.kernel.read(),biasValue,_this167.strides,_this167.padding,_this167.dataFormat,_this167.dilationRate,fusedActivationName);}else{if(_this167.rank===1){outputs=conv1dWithBias(inputs,_this167.kernel.read(),biasValue,_this167.strides[0],_this167.padding,_this167.dataFormat,_this167.dilationRate[0]);}else if(_this167.rank===2){// TODO(cais): Move up to constructor.\noutputs=conv2dWithBiasActivation(inputs,_this167.kernel.read(),biasValue,_this167.strides,_this167.padding,_this167.dataFormat,_this167.dilationRate);}else if(_this167.rank===3){outputs=conv3dWithBias(inputs,_this167.kernel.read(),biasValue,_this167.strides,_this167.padding,_this167.dataFormat,_this167.dilationRate);}else{throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');}if(_this167.activation!=null){outputs=_this167.activation.apply(outputs);}}return outputs;});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var newSpace=[];var space=this.dataFormat==='channelsLast'?inputShape.slice(1,inputShape.length-1):inputShape.slice(2);for(var i=0;i<space.length;++i){var newDim=convOutputLength(space[i],this.kernelSize[i],this.padding,this.strides[i],typeof this.dilationRate==='number'?this.dilationRate:this.dilationRate[i]);newSpace.push(newDim);}var outputShape=[inputShape[0]];if(this.dataFormat==='channelsLast'){outputShape=outputShape.concat(newSpace);outputShape.push(this.filters);}else{outputShape.push(this.filters);outputShape=outputShape.concat(newSpace);}return outputShape;}},{key:\"getConfig\",value:function getConfig(){var config={filters:this.filters,kernelInitializer:serializeInitializer(this.kernelInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint)};var baseConfig=_get(_getPrototypeOf(convolutional_Conv.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}],[{key:\"verifyArgs\",value:function verifyArgs(args){// Check config.filters type, shape, and value.\nif(!('filters'in args)||typeof args.filters!=='number'||args.filters<1){throw new ValueError(\"Convolution layer expected config.filters to be a 'number' > 0 \"+\"but got \".concat(JSON.stringify(args.filters)));}}}]);return convolutional_Conv;}(convolutional_BaseConv);var convolutional_Conv2D=/*#__PURE__*/function(_convolutional_Conv){_inherits(convolutional_Conv2D,_convolutional_Conv);var _super93=_createSuper(convolutional_Conv2D);function convolutional_Conv2D(args){var _this168;_classCallCheck2(this,convolutional_Conv2D);_this168=_super93.call(this,2,args);convolutional_Conv2D.verifyArgs(args);return _this168;}_createClass(convolutional_Conv2D,[{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_Conv2D.prototype),\"getConfig\",this).call(this);delete config['rank'];return config;}}],[{key:\"verifyArgs\",value:function verifyArgs(args){// config.kernelSize must be a number or array of numbers.\nif(typeof args.kernelSize!=='number'&&!checkArrayTypeAndLength(args.kernelSize,'number',1,2)){throw new ValueError(\"Conv2D expects config.kernelSize to be number or number[] with \"+\"length 1 or 2, but received \".concat(JSON.stringify(args.kernelSize),\".\"));}}}]);return convolutional_Conv2D;}(convolutional_Conv);/** @nocollapse */convolutional_Conv2D.className='Conv2D';dist[\"serialization\"].registerClass(convolutional_Conv2D);var convolutional_Conv3D=/*#__PURE__*/function(_convolutional_Conv2){_inherits(convolutional_Conv3D,_convolutional_Conv2);var _super94=_createSuper(convolutional_Conv3D);function convolutional_Conv3D(args){var _this169;_classCallCheck2(this,convolutional_Conv3D);_this169=_super94.call(this,3,args);convolutional_Conv3D.verifyArgs(args);return _this169;}_createClass(convolutional_Conv3D,[{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_Conv3D.prototype),\"getConfig\",this).call(this);delete config['rank'];return config;}}],[{key:\"verifyArgs\",value:function verifyArgs(args){// config.kernelSize must be a number or array of numbers.\nif(typeof args.kernelSize!=='number'){if(!(Array.isArray(args.kernelSize)&&(args.kernelSize.length===1||args.kernelSize.length===3))){throw new ValueError(\"Conv3D expects config.kernelSize to be number or\"+\" [number, number, number], but received \".concat(JSON.stringify(args.kernelSize),\".\"));}}}}]);return convolutional_Conv3D;}(convolutional_Conv);/** @nocollapse */convolutional_Conv3D.className='Conv3D';dist[\"serialization\"].registerClass(convolutional_Conv3D);var convolutional_Conv2DTranspose=/*#__PURE__*/function(_convolutional_Conv2D){_inherits(convolutional_Conv2DTranspose,_convolutional_Conv2D);var _super95=_createSuper(convolutional_Conv2DTranspose);function convolutional_Conv2DTranspose(args){var _this170;_classCallCheck2(this,convolutional_Conv2DTranspose);_this170=_super95.call(this,args);_this170.inputSpec=[new InputSpec({ndim:4})];if(_this170.padding!=='same'&&_this170.padding!=='valid'){throw new ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \"+\"and 'valid', but received padding mode \".concat(_this170.padding));}return _this170;}_createClass(convolutional_Conv2DTranspose,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);if(inputShape.length!==4){throw new ValueError('Input should have rank 4; Received input shape: '+JSON.stringify(inputShape));}var channelAxis=this.dataFormat==='channelsFirst'?1:inputShape.length-1;if(inputShape[channelAxis]==null){throw new ValueError('The channel dimension of the inputs should be defined. '+'Found `None`.');}var inputDim=inputShape[channelAxis];var kernelShape=this.kernelSize.concat([this.filters,inputDim]);this.kernel=this.addWeight('kernel',kernelShape,'float32',this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.filters],'float32',this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}// Set input spec.\nthis.inputSpec=[new InputSpec({ndim:4,axes:_defineProperty2({},channelAxis,inputDim)})];this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this171=this;return dist[\"tidy\"](function(){var input=getExactlyOneTensor(inputs);if(input.shape.length!==4){throw new ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \"+\"received a tensor of rank-\".concat(input.shape.length));}var inputShape=input.shape;var batchSize=inputShape[0];var hAxis;var wAxis;if(_this171.dataFormat==='channelsFirst'){hAxis=2;wAxis=3;}else{hAxis=1;wAxis=2;}var height=inputShape[hAxis];var width=inputShape[wAxis];var kernelH=_this171.kernelSize[0];var kernelW=_this171.kernelSize[1];var strideH=_this171.strides[0];var strideW=_this171.strides[1];// Infer the dynamic output shape.\nvar outHeight=deconvLength(height,strideH,kernelH,_this171.padding);var outWidth=deconvLength(width,strideW,kernelW,_this171.padding);// Porting Note: We don't branch based on `this.dataFormat` here,\n// because\n//   the tjfs-core function `conv2dTranspose` called below always\n//   assumes channelsLast.\nvar outputShape=[batchSize,outHeight,outWidth,_this171.filters];if(_this171.dataFormat!=='channelsLast'){input=dist[\"transpose\"](input,[0,2,3,1]);}var outputs=dist[\"conv2dTranspose\"](input,_this171.kernel.read(),outputShape,_this171.strides,_this171.padding);if(_this171.dataFormat!=='channelsLast'){outputs=dist[\"transpose\"](outputs,[0,3,1,2]);}if(_this171.bias!=null){outputs=biasAdd(outputs,_this171.bias.read(),_this171.dataFormat);}if(_this171.activation!=null){outputs=_this171.activation.apply(outputs);}return outputs;});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var outputShape=inputShape.slice();var channelAxis;var heightAxis;var widthAxis;if(this.dataFormat==='channelsFirst'){channelAxis=1;heightAxis=2;widthAxis=3;}else{channelAxis=3;heightAxis=1;widthAxis=2;}var kernelH=this.kernelSize[0];var kernelW=this.kernelSize[1];var strideH=this.strides[0];var strideW=this.strides[1];outputShape[channelAxis]=this.filters;outputShape[heightAxis]=deconvLength(outputShape[heightAxis],strideH,kernelH,this.padding);outputShape[widthAxis]=deconvLength(outputShape[widthAxis],strideW,kernelW,this.padding);return outputShape;}},{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_Conv2DTranspose.prototype),\"getConfig\",this).call(this);delete config['dilationRate'];return config;}}]);return convolutional_Conv2DTranspose;}(convolutional_Conv2D);/** @nocollapse */convolutional_Conv2DTranspose.className='Conv2DTranspose';dist[\"serialization\"].registerClass(convolutional_Conv2DTranspose);var convolutional_SeparableConv=/*#__PURE__*/function(_convolutional_Conv3){_inherits(convolutional_SeparableConv,_convolutional_Conv3);var _super96=_createSuper(convolutional_SeparableConv);function convolutional_SeparableConv(rank,config){var _this172;_classCallCheck2(this,convolutional_SeparableConv);_this172=_super96.call(this,rank,config);_this172.DEFAULT_DEPTHWISE_INITIALIZER='glorotUniform';_this172.DEFAULT_POINTWISE_INITIALIZER='glorotUniform';_this172.depthwiseKernel=null;_this172.pointwiseKernel=null;if(config.filters==null){throw new ValueError('The `filters` configuration field is required by SeparableConv, '+'but is unspecified.');}if(config.kernelInitializer!=null||config.kernelRegularizer!=null||config.kernelConstraint!=null){throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint '+'are invalid for SeparableConv2D. Use depthwiseInitializer, '+'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, '+'pointwiseRegularizer and pointwiseConstraint instead.');}if(config.padding!=null&&config.padding!=='same'&&config.padding!=='valid'){throw new ValueError(\"SeparableConv\".concat(_this172.rank,\"D supports only padding modes: \")+\"'same' and 'valid', but received \".concat(JSON.stringify(config.padding)));}_this172.depthMultiplier=config.depthMultiplier==null?1:config.depthMultiplier;_this172.depthwiseInitializer=getInitializer(config.depthwiseInitializer||_this172.DEFAULT_DEPTHWISE_INITIALIZER);_this172.depthwiseRegularizer=getRegularizer(config.depthwiseRegularizer);_this172.depthwiseConstraint=getConstraint(config.depthwiseConstraint);_this172.pointwiseInitializer=getInitializer(config.depthwiseInitializer||_this172.DEFAULT_POINTWISE_INITIALIZER);_this172.pointwiseRegularizer=getRegularizer(config.pointwiseRegularizer);_this172.pointwiseConstraint=getConstraint(config.pointwiseConstraint);return _this172;}_createClass(convolutional_SeparableConv,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);if(inputShape.length<this.rank+2){throw new ValueError(\"Inputs to SeparableConv\".concat(this.rank,\"D should have rank \")+\"\".concat(this.rank+2,\", but received input shape: \")+\"\".concat(JSON.stringify(inputShape)));}var channelAxis=this.dataFormat==='channelsFirst'?1:inputShape.length-1;if(inputShape[channelAxis]==null||inputShape[channelAxis]<0){throw new ValueError(\"The channel dimension of the inputs should be defined, \"+\"but found \".concat(JSON.stringify(inputShape[channelAxis])));}var inputDim=inputShape[channelAxis];var depthwiseKernelShape=this.kernelSize.concat([inputDim,this.depthMultiplier]);var pointwiseKernelShape=[];for(var i=0;i<this.rank;++i){pointwiseKernelShape.push(1);}pointwiseKernelShape.push(inputDim*this.depthMultiplier,this.filters);var trainable=true;this.depthwiseKernel=this.addWeight('depthwise_kernel',depthwiseKernelShape,'float32',this.depthwiseInitializer,this.depthwiseRegularizer,trainable,this.depthwiseConstraint);this.pointwiseKernel=this.addWeight('pointwise_kernel',pointwiseKernelShape,'float32',this.pointwiseInitializer,this.pointwiseRegularizer,trainable,this.pointwiseConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.filters],'float32',this.biasInitializer,this.biasRegularizer,trainable,this.biasConstraint);}else{this.bias=null;}this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:_defineProperty2({},channelAxis,inputDim)})];this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this173=this;return Object(dist[\"tidy\"])(function(){inputs=getExactlyOneTensor(inputs);var output;if(_this173.rank===1){throw new NotImplementedError('1D separable convolution is not implemented yet.');}else if(_this173.rank===2){if(_this173.dataFormat==='channelsFirst'){inputs=dist[\"transpose\"](inputs,[0,2,3,1]);// NCHW -> NHWC.\n}output=dist[\"separableConv2d\"](inputs,_this173.depthwiseKernel.read(),_this173.pointwiseKernel.read(),_this173.strides,_this173.padding,_this173.dilationRate,'NHWC');}if(_this173.useBias){output=biasAdd(output,_this173.bias.read(),_this173.dataFormat);}if(_this173.activation!=null){output=_this173.activation.apply(output);}if(_this173.dataFormat==='channelsFirst'){output=dist[\"transpose\"](output,[0,3,1,2]);// NHWC -> NCHW.\n}return output;});}},{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_SeparableConv.prototype),\"getConfig\",this).call(this);delete config['rank'];delete config['kernelInitializer'];delete config['kernelRegularizer'];delete config['kernelConstraint'];config['depthwiseInitializer']=serializeInitializer(this.depthwiseInitializer);config['pointwiseInitializer']=serializeInitializer(this.pointwiseInitializer);config['depthwiseRegularizer']=serializeRegularizer(this.depthwiseRegularizer);config['pointwiseRegularizer']=serializeRegularizer(this.pointwiseRegularizer);config['depthwiseConstraint']=serializeConstraint(this.depthwiseConstraint);config['pointwiseConstraint']=serializeConstraint(this.pointwiseConstraint);return config;}}]);return convolutional_SeparableConv;}(convolutional_Conv);/** @nocollapse */convolutional_SeparableConv.className='SeparableConv';var SeparableConv2D=/*#__PURE__*/function(_convolutional_Separa){_inherits(SeparableConv2D,_convolutional_Separa);var _super97=_createSuper(SeparableConv2D);function SeparableConv2D(args){_classCallCheck2(this,SeparableConv2D);return _super97.call(this,2,args);}return SeparableConv2D;}(convolutional_SeparableConv);/** @nocollapse */SeparableConv2D.className='SeparableConv2D';dist[\"serialization\"].registerClass(SeparableConv2D);var convolutional_Conv1D=/*#__PURE__*/function(_convolutional_Conv4){_inherits(convolutional_Conv1D,_convolutional_Conv4);var _super98=_createSuper(convolutional_Conv1D);function convolutional_Conv1D(args){var _this174;_classCallCheck2(this,convolutional_Conv1D);_this174=_super98.call(this,1,args);convolutional_Conv1D.verifyArgs(args);_this174.inputSpec=[{ndim:3}];return _this174;}_createClass(convolutional_Conv1D,[{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_Conv1D.prototype),\"getConfig\",this).call(this);delete config['rank'];delete config['dataFormat'];return config;}}],[{key:\"verifyArgs\",value:function verifyArgs(args){// config.kernelSize must be a number or array of numbers.\nif(typeof args.kernelSize!=='number'&&!checkArrayTypeAndLength(args.kernelSize,'number',1,1)){throw new ValueError(\"Conv1D expects config.kernelSize to be number or number[] with \"+\"length 1, but received \".concat(JSON.stringify(args.kernelSize),\".\"));}}}]);return convolutional_Conv1D;}(convolutional_Conv);/** @nocollapse */convolutional_Conv1D.className='Conv1D';dist[\"serialization\"].registerClass(convolutional_Conv1D);var convolutional_Cropping2D=/*#__PURE__*/function(_topology_Layer10){_inherits(convolutional_Cropping2D,_topology_Layer10);var _super99=_createSuper(convolutional_Cropping2D);function convolutional_Cropping2D(args){var _this175;_classCallCheck2(this,convolutional_Cropping2D);_this175=_super99.call(this,args);if(typeof args.cropping==='number'){_this175.cropping=[[args.cropping,args.cropping],[args.cropping,args.cropping]];}else if(typeof args.cropping[0]==='number'){_this175.cropping=[[args.cropping[0],args.cropping[0]],[args.cropping[1],args.cropping[1]]];}else{_this175.cropping=args.cropping;}_this175.dataFormat=args.dataFormat===undefined?'channelsLast':args.dataFormat;_this175.inputSpec=[{ndim:4}];return _this175;}_createClass(convolutional_Cropping2D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){if(this.dataFormat==='channelsFirst'){return[inputShape[0],inputShape[1],inputShape[2]-this.cropping[0][0]-this.cropping[0][1],inputShape[3]-this.cropping[1][0]-this.cropping[1][1]];}else{return[inputShape[0],inputShape[1]-this.cropping[0][0]-this.cropping[0][1],inputShape[2]-this.cropping[1][0]-this.cropping[1][1],inputShape[3]];}}},{key:\"call\",value:function call(inputs,kwargs){var _this176=this;return Object(dist[\"tidy\"])(function(){inputs=getExactlyOneTensor(inputs);if(_this176.dataFormat==='channelsLast'){var hSliced=sliceAlongAxis(inputs,_this176.cropping[0][0],inputs.shape[1]-_this176.cropping[0][0]-_this176.cropping[0][1],2);return sliceAlongAxis(hSliced,_this176.cropping[1][0],inputs.shape[2]-_this176.cropping[1][1]-_this176.cropping[1][0],3);}else{var _hSliced=sliceAlongAxis(inputs,_this176.cropping[0][0],inputs.shape[2]-_this176.cropping[0][0]-_this176.cropping[0][1],3);return sliceAlongAxis(_hSliced,_this176.cropping[1][0],inputs.shape[3]-_this176.cropping[1][1]-_this176.cropping[1][0],4);}});}},{key:\"getConfig\",value:function getConfig(){var config={cropping:this.cropping,dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(convolutional_Cropping2D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return convolutional_Cropping2D;}(topology_Layer);/** @nocollapse */convolutional_Cropping2D.className='Cropping2D';dist[\"serialization\"].registerClass(convolutional_Cropping2D);var convolutional_UpSampling2D=/*#__PURE__*/function(_topology_Layer11){_inherits(convolutional_UpSampling2D,_topology_Layer11);var _super100=_createSuper(convolutional_UpSampling2D);function convolutional_UpSampling2D(args){var _this177;_classCallCheck2(this,convolutional_UpSampling2D);_this177=_super100.call(this,args);_this177.DEFAULT_SIZE=[2,2];_this177.inputSpec=[{ndim:4}];_this177.size=args.size==null?_this177.DEFAULT_SIZE:args.size;_this177.dataFormat=args.dataFormat==null?'channelsLast':args.dataFormat;return _this177;}_createClass(convolutional_UpSampling2D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){if(this.dataFormat==='channelsFirst'){var height=inputShape[2]==null?null:this.size[0]*inputShape[2];var width=inputShape[3]==null?null:this.size[1]*inputShape[3];return[inputShape[0],inputShape[1],height,width];}else{var _height=inputShape[1]==null?null:this.size[0]*inputShape[1];var _width=inputShape[2]==null?null:this.size[1]*inputShape[2];return[inputShape[0],_height,_width,inputShape[3]];}}},{key:\"call\",value:function call(inputs,kwargs){var _this178=this;return dist[\"tidy\"](function(){var input=getExactlyOneTensor(inputs);var inputShape=input.shape;if(_this178.dataFormat==='channelsFirst'){input=dist[\"transpose\"](input,[0,2,3,1]);var height=_this178.size[0]*inputShape[2];var width=_this178.size[1]*inputShape[3];var resized=input.resizeNearestNeighbor([height,width]);return dist[\"transpose\"](resized,[0,3,1,2]);}else{var _height2=_this178.size[0]*inputShape[1];var _width2=_this178.size[1]*inputShape[2];return input.resizeNearestNeighbor([_height2,_width2]);}});}},{key:\"getConfig\",value:function getConfig(){var config={size:this.size,dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(convolutional_UpSampling2D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return convolutional_UpSampling2D;}(topology_Layer);/** @nocollapse */convolutional_UpSampling2D.className='UpSampling2D';dist[\"serialization\"].registerClass(convolutional_UpSampling2D);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Depthwise Convolutional Layers\r\n */ /**\r\n * 2D convolution with separable filters.\r\n * @param x Input tensor.\r\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\r\n * @param strides Strides (Array of two integers).\r\n * @param padding Padding model.\r\n * @param dataFormat Data format.\r\n * @param dilationRate Array of two integers, dilation rates for the separable\r\n *   convolution.\r\n * @returns Output tensor.\r\n * @throws ValueError If depthwiseKernel is not a 4D array.\r\n */function depthwiseConv2d(x,depthwiseKernel){var strides=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[1,1];var padding=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'valid';var dataFormat=arguments.length>4?arguments[4]:undefined;var dilationRate=arguments.length>5?arguments[5]:undefined;return Object(dist[\"tidy\"])(function(){if(dataFormat==null){dataFormat=imageDataFormat();}checkDataFormat(dataFormat);var y=preprocessConv2DInput(x,dataFormat);if(x.rank!==4){throw new ValueError(\"Input for depthwiseConv2d is required to be 4-D, but is instead \"+\"\".concat(x.rank,\"-D\"));}if(depthwiseKernel.rank!==4){throw new ValueError(\"depthwiseKernel is required to be 4-D, but is instead \"+\"\".concat(depthwiseKernel.rank,\"-D\"));}y=dist[\"depthwiseConv2d\"](y,depthwiseKernel,strides,padding==='same'?'same':'valid','NHWC',dilationRate);if(dataFormat==='channelsFirst'){y=dist[\"transpose\"](y,[0,3,1,2]);}return y;});}var convolutional_depthwise_DepthwiseConv2D=/*#__PURE__*/function(_convolutional_BaseCo2){_inherits(convolutional_depthwise_DepthwiseConv2D,_convolutional_BaseCo2);var _super101=_createSuper(convolutional_depthwise_DepthwiseConv2D);function convolutional_depthwise_DepthwiseConv2D(args){var _this179;_classCallCheck2(this,convolutional_depthwise_DepthwiseConv2D);_this179=_super101.call(this,2,args);_this179.depthwiseKernel=null;_this179.depthMultiplier=args.depthMultiplier==null?1:args.depthMultiplier;_this179.depthwiseInitializer=getInitializer(args.depthwiseInitializer||_this179.DEFAULT_KERNEL_INITIALIZER);_this179.depthwiseConstraint=getConstraint(args.depthwiseConstraint);_this179.depthwiseRegularizer=getRegularizer(args.depthwiseRegularizer);return _this179;}_createClass(convolutional_depthwise_DepthwiseConv2D,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);if(inputShape.length<4){throw new ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \"+\"Received input shape: \".concat(JSON.stringify(inputShape),\".\"));}var channelAxis=this.dataFormat==='channelsFirst'?1:3;if(inputShape[channelAxis]==null||inputShape[channelAxis]<0){throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should '+\"be defined, but is not (\".concat(inputShape[channelAxis],\").\"));}var inputDim=inputShape[channelAxis];var depthwiseKernelShape=[this.kernelSize[0],this.kernelSize[1],inputDim,this.depthMultiplier];this.depthwiseKernel=this.addWeight('depthwise_kernel',depthwiseKernelShape,null,this.depthwiseInitializer,this.depthwiseRegularizer,true,this.depthwiseConstraint);if(this.useBias){this.bias=this.addWeight('bias',[inputDim*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}else{this.bias=null;}this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this180=this;return Object(dist[\"tidy\"])(function(){inputs=getExactlyOneTensor(inputs);var outputs=depthwiseConv2d(inputs,_this180.depthwiseKernel.read(),_this180.strides,_this180.padding,_this180.dataFormat,null);// TODO(cais): Add support for dilation.\nif(_this180.useBias){outputs=biasAdd(outputs,_this180.bias.read(),_this180.dataFormat);}if(_this180.activation!=null){outputs=_this180.activation.apply(outputs);}return outputs;});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var rows=this.dataFormat==='channelsFirst'?inputShape[2]:inputShape[1];var cols=this.dataFormat==='channelsFirst'?inputShape[3]:inputShape[2];var outFilters=this.dataFormat==='channelsFirst'?inputShape[1]*this.depthMultiplier:inputShape[3]*this.depthMultiplier;var outRows=convOutputLength(rows,this.kernelSize[0],this.padding,this.strides[0]);var outCols=convOutputLength(cols,this.kernelSize[1],this.padding,this.strides[1]);if(this.dataFormat==='channelsFirst'){return[inputShape[0],outFilters,outRows,outCols];}else{// In this case, assume 'channelsLast'.\nreturn[inputShape[0],outRows,outCols,outFilters];}}},{key:\"getConfig\",value:function getConfig(){var config=_get(_getPrototypeOf(convolutional_depthwise_DepthwiseConv2D.prototype),\"getConfig\",this).call(this);config['depthMultiplier']=this.depthMultiplier;config['depthwiseInitializer']=serializeInitializer(this.depthwiseInitializer);config['depthwiseRegularizer']=serializeRegularizer(this.depthwiseRegularizer);config['depthwiseConstraint']=serializeConstraint(this.depthwiseRegularizer);return config;}}]);return convolutional_depthwise_DepthwiseConv2D;}(convolutional_BaseConv);/** @nocollapse */convolutional_depthwise_DepthwiseConv2D.className='DepthwiseConv2D';dist[\"serialization\"].registerClass(convolutional_depthwise_DepthwiseConv2D);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Basic Layers.\r\n */var core_Dropout=/*#__PURE__*/function(_topology_Layer12){_inherits(core_Dropout,_topology_Layer12);var _super102=_createSuper(core_Dropout);function core_Dropout(args){var _this181;_classCallCheck2(this,core_Dropout);_this181=_super102.call(this,args);_this181.rate=Math.max(Math.min(args.rate,1),0);// So that the scalar doesn't get tidied up between executions.\n_this181.noiseShape=args.noiseShape;_this181.seed=args.seed;_this181.supportsMasking=true;return _this181;}_createClass(core_Dropout,[{key:\"getNoiseShape\",value:function getNoiseShape(input){if(this.noiseShape==null){return this.noiseShape;}var inputShape=input.shape;var noiseShape=[];for(var i=0;i<this.noiseShape.length;++i){noiseShape.push(this.noiseShape[i]==null?inputShape[i]:this.noiseShape[i]);}return noiseShape;}},{key:\"call\",value:function call(inputs,kwargs){var _this182=this;return Object(dist[\"tidy\"])(function(){_this182.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);if(0<_this182.rate&&_this182.rate<1){var training=kwargs['training']==null?false:kwargs['training'];var noiseShape=_this182.getNoiseShape(input);var output=inTrainPhase(function(){return dropout(input,_this182.rate,noiseShape,_this182.seed);},function(){return input;},training);return output;}return inputs;});}},{key:\"getConfig\",value:function getConfig(){var config={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed};var baseConfig=_get(_getPrototypeOf(core_Dropout.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}},{key:\"dispose\",value:function dispose(){return _get(_getPrototypeOf(core_Dropout.prototype),\"dispose\",this).call(this);}}]);return core_Dropout;}(topology_Layer);/** @nocollapse */core_Dropout.className='Dropout';dist[\"serialization\"].registerClass(core_Dropout);var SpatialDropout1D=/*#__PURE__*/function(_core_Dropout){_inherits(SpatialDropout1D,_core_Dropout);var _super103=_createSuper(SpatialDropout1D);function SpatialDropout1D(args){var _this183;_classCallCheck2(this,SpatialDropout1D);_this183=_super103.call(this,args);_this183.inputSpec=[{ndim:3}];return _this183;}_createClass(SpatialDropout1D,[{key:\"getNoiseShape\",value:function getNoiseShape(input){var inputShape=input.shape;return[inputShape[0],1,inputShape[2]];}}]);return SpatialDropout1D;}(core_Dropout);/** @nocollapse */SpatialDropout1D.className='SpatialDropout1D';dist[\"serialization\"].registerClass(SpatialDropout1D);var core_Dense=/*#__PURE__*/function(_topology_Layer13){_inherits(core_Dense,_topology_Layer13);var _super104=_createSuper(core_Dense);function core_Dense(args){var _this184;_classCallCheck2(this,core_Dense);_this184=_super104.call(this,args);// Default activation: Linear (none).\n_this184.activation=null;_this184.useBias=true;_this184.kernel=null;_this184.bias=null;_this184.DEFAULT_KERNEL_INITIALIZER='glorotNormal';_this184.DEFAULT_BIAS_INITIALIZER='zeros';if(args.batchInputShape==null&&args.inputShape==null&&args.inputDim!=null){// This logic is copied from Layer's constructor, since we can't\n// do exactly what the Python constructor does for Dense().\nvar _batchSize2=null;if(args.batchSize!=null){_batchSize2=args.batchSize;}_this184.batchInputShape=[_batchSize2,args.inputDim];}_this184.units=args.units;assertPositiveInteger(_this184.units,'units');_this184.activation=getActivation(args.activation);if(args.useBias!=null){_this184.useBias=args.useBias;}_this184.kernelInitializer=getInitializer(args.kernelInitializer||_this184.DEFAULT_KERNEL_INITIALIZER);_this184.biasInitializer=getInitializer(args.biasInitializer||_this184.DEFAULT_BIAS_INITIALIZER);_this184.kernelConstraint=getConstraint(args.kernelConstraint);_this184.biasConstraint=getConstraint(args.biasConstraint);_this184.kernelRegularizer=getRegularizer(args.kernelRegularizer);_this184.biasRegularizer=getRegularizer(args.biasRegularizer);_this184.activityRegularizer=getRegularizer(args.activityRegularizer);_this184.supportsMasking=true;_this184.inputSpec=[{minNDim:2}];return _this184;}_createClass(core_Dense,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var inputLastDim=inputShape[inputShape.length-1];if(this.kernel==null){this.kernel=this.addWeight('kernel',[inputLastDim,this.units],null,this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.units],null,this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}}this.inputSpec=[{minNDim:2,axes:_defineProperty2({},-1,inputLastDim)}];this.built=true;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var outputShape=inputShape.slice();outputShape[outputShape.length-1]=this.units;return outputShape;}},{key:\"call\",value:function call(inputs,kwargs){var _this185=this;return Object(dist[\"tidy\"])(function(){_this185.invokeCallHook(inputs,kwargs);// Dense layer accepts only a single input.\nvar input=getExactlyOneTensor(inputs);var fusedActivationName=mapActivationToFusedKernel(_this185.activation.getClassName());var output;if(fusedActivationName!=null){output=dot(input,_this185.kernel.read(),fusedActivationName,_this185.bias?_this185.bias.read():null);}else{output=dot(input,_this185.kernel.read());if(_this185.bias!=null){output=biasAdd(output,_this185.bias.read());}if(_this185.activation!=null){output=_this185.activation.apply(output);}}return output;});}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),biasConstraint:serializeConstraint(this.biasConstraint)};var baseConfig=_get(_getPrototypeOf(core_Dense.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_Dense;}(topology_Layer);/** @nocollapse */core_Dense.className='Dense';dist[\"serialization\"].registerClass(core_Dense);var core_Flatten=/*#__PURE__*/function(_topology_Layer14){_inherits(core_Flatten,_topology_Layer14);var _super105=_createSuper(core_Flatten);function core_Flatten(args){var _this186;_classCallCheck2(this,core_Flatten);args=args||{};_this186=_super105.call(this,args);_this186.inputSpec=[{minNDim:3}];_this186.dataFormat=args.dataFormat;return _this186;}_createClass(core_Flatten,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var _iterator96=_createForOfIteratorHelper(inputShape.slice(1)),_step96;try{for(_iterator96.s();!(_step96=_iterator96.n()).done;){var dim=_step96.value;if(dim==null){throw new ValueError(\"The shape of the input to \\\"Flatten\\\" is not fully defined \"+\"(got \".concat(inputShape.slice(1),\"). Make sure to pass a complete \")+\"\\\"input_shape\\\" or \\\"batch_input_shape\\\" argument to the first \"+\"layer in your model.\");}}}catch(err){_iterator96.e(err);}finally{_iterator96.f();}return[inputShape[0],arrayProd(inputShape,1)];}},{key:\"call\",value:function call(inputs,kwargs){var _this187=this;return Object(dist[\"tidy\"])(function(){_this187.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);if(_this187.dataFormat==='channelsFirst'&&input.rank>1){var permutation=[0];for(var i=2;i<input.rank;++i){permutation.push(i);}permutation.push(1);input=input.transpose(permutation);}return batchFlatten(input);});}},{key:\"getConfig\",value:function getConfig(){var config={};if(this.dataFormat!=null){config['dataFormat']=this.dataFormat;}var baseConfig=_get(_getPrototypeOf(core_Flatten.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_Flatten;}(topology_Layer);/** @nocollapse */core_Flatten.className='Flatten';dist[\"serialization\"].registerClass(core_Flatten);var core_Activation=/*#__PURE__*/function(_topology_Layer15){_inherits(core_Activation,_topology_Layer15);var _super106=_createSuper(core_Activation);function core_Activation(args){var _this188;_classCallCheck2(this,core_Activation);_this188=_super106.call(this,args);_this188.supportsMasking=true;_this188.activation=getActivation(args.activation);return _this188;}_createClass(core_Activation,[{key:\"call\",value:function call(inputs,kwargs){var _this189=this;return Object(dist[\"tidy\"])(function(){_this189.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);return _this189.activation.apply(input);});}},{key:\"getConfig\",value:function getConfig(){var config={activation:serializeActivation(this.activation)};var baseConfig=_get(_getPrototypeOf(core_Activation.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_Activation;}(topology_Layer);/** @nocollapse */core_Activation.className='Activation';dist[\"serialization\"].registerClass(core_Activation);var core_RepeatVector=/*#__PURE__*/function(_topology_Layer16){_inherits(core_RepeatVector,_topology_Layer16);var _super107=_createSuper(core_RepeatVector);function core_RepeatVector(args){var _this190;_classCallCheck2(this,core_RepeatVector);_this190=_super107.call(this,args);_this190.n=args.n;_this190.inputSpec=[{ndim:2}];return _this190;}_createClass(core_RepeatVector,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return[inputShape[0],this.n,inputShape[1]];}},{key:\"call\",value:function call(inputs,kwargs){var _this191=this;return Object(dist[\"tidy\"])(function(){inputs=getExactlyOneTensor(inputs);return repeat(inputs,_this191.n);});}},{key:\"getConfig\",value:function getConfig(){var config={n:this.n};var baseConfig=_get(_getPrototypeOf(core_RepeatVector.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_RepeatVector;}(topology_Layer);/** @nocollapse */core_RepeatVector.className='RepeatVector';dist[\"serialization\"].registerClass(core_RepeatVector);var core_Reshape=/*#__PURE__*/function(_topology_Layer17){_inherits(core_Reshape,_topology_Layer17);var _super108=_createSuper(core_Reshape);function core_Reshape(args){var _this192;_classCallCheck2(this,core_Reshape);_this192=_super108.call(this,args);_this192.targetShape=args.targetShape;// Make sure that all unknown dimensions are represented as `null`.\nfor(var i=0;i<_this192.targetShape.length;++i){if(_this192.isUnknown(_this192.targetShape[i])){_this192.targetShape[i]=null;}}return _this192;}_createClass(core_Reshape,[{key:\"isUnknown\",value:function isUnknown(dim){return dim<0||dim==null;}/**\r\n     * Finds and replaces a missing dimension in output shape.\r\n     *\r\n     * This is a near direct port of the internal Numpy function\r\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\r\n     *\r\n     * @param inputShape: Original shape of array begin reshape.\r\n     * @param outputShape: Target shape of the array, with at most a single\r\n     * `null` or negative number, which indicates an underdetermined dimension\r\n     * that should be derived from `inputShape` and the known dimensions of\r\n     *   `outputShape`.\r\n     * @returns: The output shape with `null` replaced with its computed value.\r\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\r\n     */},{key:\"fixUnknownDimension\",value:function fixUnknownDimension(inputShape,outputShape){var errorMsg='Total size of new array must be unchanged.';var finalShape=outputShape.slice();var known=1;var unknown=null;for(var i=0;i<finalShape.length;++i){var dim=finalShape[i];if(this.isUnknown(dim)){if(unknown===null){unknown=i;}else{throw new ValueError('Can only specifiy one unknown dimension.');}}else{known*=dim;}}var originalSize=arrayProd(inputShape);if(unknown!==null){if(known===0||originalSize%known!==0){throw new ValueError(errorMsg);}finalShape[unknown]=originalSize/known;}else if(originalSize!==known){throw new ValueError(errorMsg);}return finalShape;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){var anyUnknownDims=false;for(var i=0;i<inputShape.length;++i){if(this.isUnknown(inputShape[i])){anyUnknownDims=true;break;}}if(anyUnknownDims){return inputShape.slice(0,1).concat(this.targetShape);}else{return inputShape.slice(0,1).concat(this.fixUnknownDimension(inputShape.slice(1),this.targetShape));}}},{key:\"call\",value:function call(inputs,kwargs){var _this193=this;return Object(dist[\"tidy\"])(function(){_this193.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);var inputShape=input.shape;var outputShape=inputShape.slice(0,1).concat(_this193.fixUnknownDimension(inputShape.slice(1),_this193.targetShape));return input.reshape(outputShape);});}},{key:\"getConfig\",value:function getConfig(){var config={targetShape:this.targetShape};var baseConfig=_get(_getPrototypeOf(core_Reshape.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_Reshape;}(topology_Layer);/** @nocollapse */core_Reshape.className='Reshape';dist[\"serialization\"].registerClass(core_Reshape);var core_Permute=/*#__PURE__*/function(_topology_Layer18){_inherits(core_Permute,_topology_Layer18);var _super109=_createSuper(core_Permute);function core_Permute(args){var _this194;_classCallCheck2(this,core_Permute);_this194=_super109.call(this,args);if(args.dims==null){throw new Error('Required configuration field `dims` is missing during Permute '+'constructor call.');}if(!Array.isArray(args.dims)){throw new Error('Permute constructor requires `dims` to be an Array, but received '+\"\".concat(args.dims,\" instead.\"));}// Check the validity of the permutation indices.\nvar expectedSortedIndices=range(1,args.dims.length+1);if(!dist[\"util\"].arraysEqual(args.dims.slice().sort(),expectedSortedIndices)){throw new Error('Invalid permutation `dims`: '+JSON.stringify(args.dims)+' `dims` must contain consecutive integers starting from 1.');}_this194.dims=args.dims;_this194.dimsIncludingBatch=[0].concat(_this194.dims);_this194.inputSpec=[new InputSpec({ndim:_this194.dims.length+1})];return _this194;}_createClass(core_Permute,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var outputShape=inputShape.slice();this.dims.forEach(function(dim,i){outputShape[i+1]=inputShape[dim];});return outputShape;}},{key:\"call\",value:function call(inputs,kwargs){return Object(dist[\"transpose\"])(getExactlyOneTensor(inputs),this.dimsIncludingBatch);}},{key:\"getConfig\",value:function getConfig(){var config={dims:this.dims};var baseConfig=_get(_getPrototypeOf(core_Permute.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return core_Permute;}(topology_Layer);/** @nocollapse */core_Permute.className='Permute';dist[\"serialization\"].registerClass(core_Permute);var core_Masking=/*#__PURE__*/function(_topology_Layer19){_inherits(core_Masking,_topology_Layer19);var _super110=_createSuper(core_Masking);function core_Masking(args){var _this195;_classCallCheck2(this,core_Masking);_this195=_super110.call(this,args==null?{}:args);_this195.supportsMasking=true;if(args!=null){_this195.maskValue=args.maskValue==null?0:args.maskValue;}else{_this195.maskValue=0;}return _this195;}_createClass(core_Masking,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var baseConfig=_get(_getPrototypeOf(core_Masking.prototype),\"getConfig\",this).call(this);var config={maskValue:this.maskValue};Object.assign(config,baseConfig);return config;}},{key:\"computeMask\",value:function computeMask(inputs,mask){var input=getExactlyOneTensor(inputs);var axis=-1;return Object(dist[\"any\"])(Object(dist[\"notEqual\"])(input,this.maskValue),axis);}},{key:\"call\",value:function call(inputs,kwargs){var _this196=this;return Object(dist[\"tidy\"])(function(){_this196.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);var axis=-1;var keepDims=true;var booleanMask=Object(dist[\"any\"])(Object(dist[\"notEqual\"])(input,_this196.maskValue),axis,keepDims);var output=input.mul(booleanMask.asType(input.dtype));return output;});}}]);return core_Masking;}(topology_Layer);/** @nocollapse */core_Masking.className='Masking';dist[\"serialization\"].registerClass(core_Masking);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Embedding Layer.\r\n *\r\n * Original source: keras/constraints.py\r\n */var embeddings_Embedding=/*#__PURE__*/function(_topology_Layer20){_inherits(embeddings_Embedding,_topology_Layer20);var _super111=_createSuper(embeddings_Embedding);function embeddings_Embedding(args){var _this197;_classCallCheck2(this,embeddings_Embedding);_this197=_super111.call(this,args);_this197.embeddings=null;_this197.DEFAULT_EMBEDDINGS_INITIALIZER='randomUniform';if(args.batchInputShape==null&&args.inputShape==null){// Porting Note: This logic is copied from Layer's constructor, since we\n// can't do exactly what the Python constructor does for Embedding().\n// Specifically, the super constructor can not be called after the\n// mutation of the `config` argument.\nvar _batchSize3=null;if(args.batchSize!=null){_batchSize3=args.batchSize;}if(args.inputLength==null){// Fix super-constructor to what it would have done if\n// 'config.inputShape' were (None, )\n_this197.batchInputShape=[_batchSize3,null];}else{// Fix super-constructor to what it would have done if\n// 'config.inputShape' were (config.inputLength, )\n_this197.batchInputShape=[_batchSize3].concat(toList(args.inputLength));}}_this197.inputDim=args.inputDim;assertPositiveInteger(_this197.inputDim,'inputDim');_this197.outputDim=args.outputDim;assertPositiveInteger(_this197.outputDim,'outputDim');_this197.embeddingsInitializer=getInitializer(args.embeddingsInitializer||_this197.DEFAULT_EMBEDDINGS_INITIALIZER);_this197.embeddingsRegularizer=getRegularizer(args.embeddingsRegularizer);_this197.activityRegularizer=getRegularizer(args.activityRegularizer);_this197.embeddingsConstraint=getConstraint(args.embeddingsConstraint);_this197.maskZero=args.maskZero;_this197.supportsMasking=args.maskZero;_this197.inputLength=args.inputLength;return _this197;}_createClass(embeddings_Embedding,[{key:\"build\",value:function build(inputShape){this.embeddings=this.addWeight('embeddings',[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,true,this.embeddingsConstraint);this.built=true;}// Override warnOnIncompatibleInputShape because an embedding layer allows\n// the input to have varying ranks.\n},{key:\"warnOnIncompatibleInputShape\",value:function warnOnIncompatibleInputShape(inputShape){}},{key:\"computeMask\",value:function computeMask(inputs,mask){var _this198=this;return Object(dist[\"tidy\"])(function(){if(!_this198.maskZero){return null;}else{inputs=getExactlyOneTensor(inputs);return Object(dist[\"notEqual\"])(inputs,Object(dist[\"zerosLike\"])(inputs));}});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);if(this.inputLength==null){return[].concat(_toConsumableArray2(inputShape),[this.outputDim]);}// inputLength can be an array if input is 3D or higher.\nvar inLens=toList(this.inputLength);if(inLens.length!==inputShape.length-1){throw new ValueError(\"\\\"inputLength\\\" is \".concat(this.inputLength,\", but received \")+\"input shape has shape \".concat(inputShape));}else{var i=0;for(var k=0;k<inLens.length;++k){var s1=inLens[k];var s2=inputShape[k+1];if(s1!=null&&s2!=null&&s1!==s2){throw new ValueError(\"\\\"inputLength\\\" is \".concat(this.inputLength,\", but received \")+\"input shape has shape \".concat(inputShape));}else if(s1==null){inLens[i]=s2;}i++;}}return[inputShape[0]].concat(_toConsumableArray2(inLens),[this.outputDim]);}},{key:\"call\",value:function call(inputs,kwargs){var _this199=this;return Object(dist[\"tidy\"])(function(){_this199.invokeCallHook(inputs,kwargs);// Embedding layer accepts only a single input.\nvar input=getExactlyOneTensor(inputs);if(input.dtype!=='int32'){input=cast(input,'int32');}var output=gather(_this199.embeddings.read(),input.as1D());return output.reshape(getExactlyOneShape(_this199.computeOutputShape(input.shape)));});}},{key:\"getConfig\",value:function getConfig(){var config={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:serializeInitializer(this.embeddingsInitializer),embeddingsRegularizer:serializeRegularizer(this.embeddingsRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),embeddingsConstraint:serializeConstraint(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength};var baseConfig=_get(_getPrototypeOf(embeddings_Embedding.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return embeddings_Embedding;}(topology_Layer);/** @nocollapse */embeddings_Embedding.className='Embedding';dist[\"serialization\"].registerClass(embeddings_Embedding);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Merge Layers.\r\n */ /**\r\n * Generic Merge layer for element-wise merge functions.\r\n *\r\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\r\n */var merge_Merge=/*#__PURE__*/function(_topology_Layer21){_inherits(merge_Merge,_topology_Layer21);var _super112=_createSuper(merge_Merge);function merge_Merge(args){var _this200;_classCallCheck2(this,merge_Merge);_this200=_super112.call(this,args||{});_this200.supportsMasking=true;return _this200;}/**\r\n     * Logic for merging multiple tensors, to be overridden by subclasses.\r\n     * @param inputs\r\n     */_createClass(merge_Merge,[{key:\"mergeFunction\",value:function mergeFunction(inputs){throw new NotImplementedError();}/**\r\n     * Computes the shape of the result of an elementwise operation.\r\n     *\r\n     * @param shape1: Shape of the first tensor.\r\n     * @param shape2: Shape of the second tensor.\r\n     * @returns Expected output shape when an elementwise operation is carried\r\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\r\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\r\n     *   element-wise operations.\r\n     */},{key:\"computeElementwiseOpOutputShape\",value:function computeElementwiseOpOutputShape(shape1,shape2){if(shape1==null||shape2==null){return null;}else if(shape1.length<shape2.length){return this.computeElementwiseOpOutputShape(shape2,shape1);}else if(shape2.length===0){return shape1;}var outputShape=shape1.slice(0,shape1.length-shape2.length);for(var k=0;k<shape2.length;++k){var i=shape1[shape1.length-shape2.length+k];var j=shape2[k];if(i==null||j==null||i<0||j<0){outputShape.push(null);}else if(i===1){outputShape.push(j);}else if(j===1){outputShape.push(i);}else{if(i!==j){throw new ValueError('Operands could not be broadcast together with shapes '+JSON.stringify(shape1)+' '+JSON.stringify(shape2));}outputShape.push(i);}}return outputShape;}},{key:\"build\",value:function build(inputShape){// Used purely for shape validation.\nif(Array.isArray(inputShape)&&!Array.isArray(inputShape[0])){// Make sure that inputShape is an Array of shape.\ninputShape=[getExactlyOneShape(inputShape)];}inputShape=inputShape;if(inputShape.length<2){throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.'+\" Got \".concat(inputShape.length,\" input(s).\"));}// Make sure that there is at most one unique batch size among the input\n// shapes.\nvar batchSizes=[];var _iterator97=_createForOfIteratorHelper(inputShape),_step97;try{for(_iterator97.s();!(_step97=_iterator97.n()).done;){var _shape3=_step97.value;if(_shape3!=null&&_shape3[0]!==null){batchSizes.push(_shape3[0]);}}}catch(err){_iterator97.e(err);}finally{_iterator97.f();}batchSizes=unique(batchSizes);if(batchSizes.length>1){throw new ValueError(\"Can not merge tensors with different batch sizes. \"+\"Got tensors with shapes: \".concat(JSON.stringify(inputShape),\".\"));}var outputShape=inputShape[0]==null?null:inputShape[0].slice(1);for(var i=1;i<inputShape.length;++i){var shape=inputShape[i]==null?null:inputShape[i].slice(1);outputShape=this.computeElementwiseOpOutputShape(outputShape,shape);}// If the inputs have different ranks, we have to reshape them to make them\n// broadcastable.\nvar allRanks=inputShape.map(function(shape){return shape.length;});if(inputShape.indexOf(null)===-1&&unique(allRanks).length===1){this.reshapeRequired=false;}else{this.reshapeRequired=true;}}},{key:\"call\",value:function call(inputs,kwargs){var _this201=this;return Object(dist[\"tidy\"])(function(){inputs=inputs;if(_this201.reshapeRequired){var reshapedInputs=[];var inputDims=inputs.map(function(input){return input.rank;});if(inputDims.indexOf(null)===-1){// If ranks of all inputs are available, we simply expand each of them\n// at axis=1 until all of them have the same rank.\nvar maxNDim=max(inputDims);var _iterator98=_createForOfIteratorHelper(inputs),_step98;try{for(_iterator98.s();!(_step98=_iterator98.n()).done;){var x=_step98.value;var xNDim=x.rank;for(var k=0;k<maxNDim-xNDim;++k){x=expandDims(x,1);}reshapedInputs.push(x);}}catch(err){_iterator98.e(err);}finally{_iterator98.f();}return _this201.mergeFunction(reshapedInputs);}else{// Transpose all inputs so that batch size is the last dimension.\n// [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\nvar transposed=false;var _iterator99=_createForOfIteratorHelper(inputs),_step99;try{for(_iterator99.s();!(_step99=_iterator99.n()).done;){var _x219=_step99.value;var _xNDim=_x219.rank;if(_xNDim==null){var xShape=_x219.shape;var _batchSize5=xShape[0];var _newShape=xShape.slice(1).concat([_batchSize5]);var xTransposed=_x219.reshape([_batchSize5].concat(arrayProd(xShape.slice(1))));xTransposed=dist[\"transpose\"](xTransposed,[1,0]);xTransposed=xTransposed.reshape(_newShape);reshapedInputs.push(xTransposed);transposed=true;}else if(_xNDim>1){var _dims=range(1,_xNDim).concat([0]);reshapedInputs.push(dist[\"transpose\"](_x219,_dims));transposed=true;}else{// We don't transpose inputs if they are 1D vectors or scalars.\nreshapedInputs.push(_x219);}}}catch(err){_iterator99.e(err);}finally{_iterator99.f();}var y=_this201.mergeFunction(reshapedInputs);var yNDim=y.rank;if(transposed){// If inputs have been transposed, we have to transpose the output\n// too.\nif(yNDim==null){var yShape=y.shape;var _yNDim=yShape.length;var _batchSize4=yShape[_yNDim-1];var newShape=[_batchSize4].concat(yShape.slice(0,yShape.length-1));y=dist[\"transpose\"](y.reshape([-1,_batchSize4]),[1,0]).reshape(newShape);}else if(yNDim>1){var dims=[yNDim-1].concat(range(0,yNDim-1));y=dist[\"transpose\"](y,dims);}}return y;}}else{return _this201.mergeFunction(inputs);}});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=inputShape;var outputShape;if(inputShape[0]==null){outputShape=null;}else{outputShape=inputShape[0].slice(1);}for(var i=1;i<inputShape.length;++i){var shape=inputShape[i]==null?null:inputShape[i].slice(1);outputShape=this.computeElementwiseOpOutputShape(outputShape,shape);}var batchSizes=[];var _iterator100=_createForOfIteratorHelper(inputShape),_step100;try{for(_iterator100.s();!(_step100=_iterator100.n()).done;){var _shape4=_step100.value;if(_shape4!=null&&_shape4[0]!==null){batchSizes.push(_shape4[0]);}}}catch(err){_iterator100.e(err);}finally{_iterator100.f();}batchSizes=unique(batchSizes);if(batchSizes.length===1){outputShape=batchSizes.concat(outputShape);}else{outputShape=[null].concat(outputShape);}return outputShape;}},{key:\"computeMask\",value:function computeMask(inputs,mask){return dist[\"tidy\"](function(){if(mask==null){return null;}if(!Array.isArray(mask)){throw new ValueError('`mask` should be an Array');}if(!Array.isArray(inputs)){throw new ValueError('`inputs` should be an Array');}if(mask.length!==inputs.length){throw new ValueError(\"The Array 'inputs' and 'mask' are expected to have the same \"+\"length, but have different lengths \"+\"(\".concat(inputs.length,\" vs \").concat(mask.length,\")\"));}if(mask.every(function(m){return m==null;})){return null;}mask=mask.map(function(m){return m==null?m:dist[\"expandDims\"](m,0);});var output=mask[0];for(var i=1;i<mask.length-1;++i){output=dist[\"logicalAnd\"](output,mask[i]);}return output;});}}]);return merge_Merge;}(topology_Layer);var merge_Add=/*#__PURE__*/function(_merge_Merge){_inherits(merge_Add,_merge_Merge);var _super113=_createSuper(merge_Add);function merge_Add(args){_classCallCheck2(this,merge_Add);return _super113.call(this,args);}_createClass(merge_Add,[{key:\"mergeFunction\",value:function mergeFunction(inputs){return Object(dist[\"tidy\"])(function(){var output=inputs[0].clone();for(var i=1;i<inputs.length;++i){output=dist[\"add\"](output,inputs[i]);}return output;});}}]);return merge_Add;}(merge_Merge);/** @nocollapse */merge_Add.className='Add';dist[\"serialization\"].registerClass(merge_Add);/**\r\n * Calculate the element-wise sum of inputs, which all have the same shape.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Add` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Add` layer can then\r\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const addLayer = tf.layers.add();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = addLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = tf.layers.add([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\r\n * tf.layers.add([input1, input2]).print();\r\n * // Gives [[11, 22], [33, 44]].\r\n *\r\n */function add(config){if(Array.isArray(config)){var layer=new merge_Add({});return layer.apply(config);}else{return new merge_Add(config);}}var merge_Multiply=/*#__PURE__*/function(_merge_Merge2){_inherits(merge_Multiply,_merge_Merge2);var _super114=_createSuper(merge_Multiply);function merge_Multiply(args){_classCallCheck2(this,merge_Multiply);return _super114.call(this,args);}_createClass(merge_Multiply,[{key:\"mergeFunction\",value:function mergeFunction(inputs){return Object(dist[\"tidy\"])(function(){var output=inputs[0].clone();for(var i=1;i<inputs.length;++i){output=dist[\"mul\"](output,inputs[i]);}return output;});}}]);return merge_Multiply;}(merge_Merge);/** @nocollapse */merge_Multiply.className='Multiply';dist[\"serialization\"].registerClass(merge_Multiply);/**\r\n * Calculate the element-wise product of inputs, which all have the same shape.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Multiply` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Multiply` layer can\r\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const multiplyLayer = tf.layers.multiply();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = multiplyLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = tf.layers.multiply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\r\n * tf.layers.multiply([input1, input2]).print();\r\n * // Gives [[10, 40], [90, 160]].\r\n *\r\n */function multiply(config){if(Array.isArray(config)){var layer=new merge_Multiply({});return layer.apply(config);}else{return new merge_Multiply(config);}}var merge_Average=/*#__PURE__*/function(_merge_Merge3){_inherits(merge_Average,_merge_Merge3);var _super115=_createSuper(merge_Average);function merge_Average(args){_classCallCheck2(this,merge_Average);return _super115.call(this,args);}_createClass(merge_Average,[{key:\"mergeFunction\",value:function mergeFunction(inputs){return Object(dist[\"tidy\"])(function(){var output=inputs[0].clone();for(var i=1;i<inputs.length;++i){output=dist[\"add\"](output,inputs[i]);}return dist[\"mul\"](1/inputs.length,output);});}}]);return merge_Average;}(merge_Merge);/** @nocollapse */merge_Average.className='Average';dist[\"serialization\"].registerClass(merge_Average);/**\r\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\r\n * shape.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Average` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Average` layer can then\r\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const averageLayer = tf.layers.average();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = averageLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = tf.layers.average([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\r\n * tf.layers.average([input1, input2]).print();\r\n * // Gives [[5.5, 11], [16.5, 22]].\r\n *\r\n */function average(config){if(Array.isArray(config)){var layer=new merge_Average({});return layer.apply(config);}else{return new merge_Average(config);}}var merge_Maximum=/*#__PURE__*/function(_merge_Merge4){_inherits(merge_Maximum,_merge_Merge4);var _super116=_createSuper(merge_Maximum);function merge_Maximum(args){_classCallCheck2(this,merge_Maximum);return _super116.call(this,args);}_createClass(merge_Maximum,[{key:\"mergeFunction\",value:function mergeFunction(inputs){return Object(dist[\"tidy\"])(function(){var output=inputs[0];for(var i=1;i<inputs.length;++i){output=dist[\"maximum\"](output,inputs[i]);}return output;});}}]);return merge_Maximum;}(merge_Merge);/** @nocollapse */merge_Maximum.className='Maximum';dist[\"serialization\"].registerClass(merge_Maximum);/**\r\n * Calculate the element-wise maximum of inputs, which all have the same shape.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Maximum` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Maximum` layer can then\r\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const maximumLayer = tf.layers.maximum();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = maximumLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = tf.layers.maximum([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\r\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\r\n * tf.layers.maximum([input1, input2]).print();\r\n * // Gives [[10, 20], [30, 40]].\r\n *\r\n */function maximum(config){if(Array.isArray(config)){var layer=new merge_Maximum({});return layer.apply(config);}else{return new merge_Maximum(config);}}var merge_Minimum=/*#__PURE__*/function(_merge_Merge5){_inherits(merge_Minimum,_merge_Merge5);var _super117=_createSuper(merge_Minimum);function merge_Minimum(args){_classCallCheck2(this,merge_Minimum);return _super117.call(this,args);}_createClass(merge_Minimum,[{key:\"mergeFunction\",value:function mergeFunction(inputs){return Object(dist[\"tidy\"])(function(){var output=inputs[0];for(var i=1;i<inputs.length;++i){output=dist[\"minimum\"](output,inputs[i]);}return output;});}}]);return merge_Minimum;}(merge_Merge);/** @nocollapse */merge_Minimum.className='Minimum';dist[\"serialization\"].registerClass(merge_Minimum);/**\r\n * Calculate the element-wise minimum of inputs, which all have the same shape.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Minimum` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Minimum` layer can then\r\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const minimumLayer = tf.layers.minimum();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = minimumLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const output = tf.layers.minimum([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\r\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\r\n * tf.layers.minimum([input1, input2]).print();\r\n * // Gives [[1, 2], [3, 4]].\r\n *\r\n */function minimum(config){if(Array.isArray(config)){var layer=new merge_Minimum({});return layer.apply(config);}else{return new merge_Minimum(config);}}var merge_Concatenate=/*#__PURE__*/function(_merge_Merge6){_inherits(merge_Concatenate,_merge_Merge6);var _super118=_createSuper(merge_Concatenate);function merge_Concatenate(args){var _this202;_classCallCheck2(this,merge_Concatenate);_this202=_super118.call(this,args);_this202.DEFAULT_AXIS=-1;if(args==null){args={};}_this202.axis=args.axis==null?_this202.DEFAULT_AXIS:args.axis;_this202.supportsMasking=true;_this202.reshapeRequired=false;return _this202;}_createClass(merge_Concatenate,[{key:\"build\",value:function build(inputShape){// Used purely for shape validation.]\nif(!(Array.isArray(inputShape)&&Array.isArray(inputShape[0]))||inputShape.length===1){throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 '+'inputs');}inputShape=inputShape;var allNoneShape=true;var _iterator101=_createForOfIteratorHelper(inputShape),_step101;try{for(_iterator101.s();!(_step101=_iterator101.n()).done;){var _shape5=_step101.value;if(_shape5!=null){allNoneShape=false;break;}}}catch(err){_iterator101.e(err);}finally{_iterator101.f();}if(allNoneShape){return;}var shapeSet=[];for(var i=0;i<inputShape.length;++i){var shapeWithoutConcatAxis=inputShape[i].slice();shapeWithoutConcatAxis.splice(this.axis,1);var exists=false;var _iterator102=_createForOfIteratorHelper(shapeSet),_step102;try{for(_iterator102.s();!(_step102=_iterator102.n()).done;){var shape=_step102.value;if(dist[\"util\"].arraysEqual(shape,shapeWithoutConcatAxis)){exists=true;break;}}}catch(err){_iterator102.e(err);}finally{_iterator102.f();}if(!exists){shapeSet.push(shapeWithoutConcatAxis);}}if(shapeSet.length>1){throw new ValueError('A `Concatenate` layer requires inputs with matching shapes '+'except for the concat axis. Got input shapes: '+JSON.stringify(inputShape));}}},{key:\"mergeFunction\",value:function mergeFunction(inputs){var _this203=this;return Object(dist[\"tidy\"])(function(){return concatenate(inputs,_this203.axis);});}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){if(!(Array.isArray(inputShape)&&Array.isArray(inputShape[0]))){throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');}var inputShapes=inputShape;var outputShape=inputShapes[0].slice();var axis=this.axis<0?outputShape.length+this.axis:this.axis;// Porting Note: the line above is because TypeScript doesn't support\n//   negative indices.\nvar _iterator103=_createForOfIteratorHelper(inputShapes.slice(1)),_step103;try{for(_iterator103.s();!(_step103=_iterator103.n()).done;){var shape=_step103.value;if(outputShape[axis]==null||shape[axis]==null){outputShape[axis]=null;break;}outputShape[axis]+=shape[axis];}}catch(err){_iterator103.e(err);}finally{_iterator103.f();}return outputShape;}},{key:\"computeMask\",value:function computeMask(inputs,mask){var _this204=this;if(mask==null){return null;}if(!Array.isArray(mask)){throw new ValueError('`mask` should be an array for Concatenate');}if(!Array.isArray(inputs)){throw new ValueError('`inputs` should be an array for Concatenate');}if(mask.length!==inputs.length){throw new ValueError(\"Mismatch in the length of mask (\".concat(mask.length,\") \")+\"and the legnth of inputs (\".concat(inputs.length,\")\"));}return dist[\"tidy\"](function(){var allNullMasks=true;mask.forEach(function(m){if(m!=null){allNullMasks=false;return;}});if(allNullMasks){return null;}var outputMasks=[];for(var i=0;i<inputs.length;++i){if(mask[i]==null){// Input is unmasked. Append all 1's to masks.\noutputMasks.push(dist[\"onesLike\"](inputs[i]).asType('bool'));}else if(mask[i].rank<inputs[i].rank){// Mask is smaller than the input, expand it.\noutputMasks.push(dist[\"expandDims\"](mask[i],-1));}else{outputMasks.push(mask[i]);}}var concatenatedMasks=dist[\"concat\"](outputMasks,_this204.axis);return dist[\"all\"](concatenatedMasks,-1,false);});}},{key:\"getConfig\",value:function getConfig(){var config={'axis':this.axis};var baseConfig=_get(_getPrototypeOf(merge_Concatenate.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return merge_Concatenate;}(merge_Merge);/** @nocollapse */merge_Concatenate.className='Concatenate';dist[\"serialization\"].registerClass(merge_Concatenate);/**\r\n * Concatenate an `Array` of inputs.\r\n *\r\n * This function can be invoked in three ways.\r\n *\r\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\r\n *    or a single configuration argument. The resultant `Concatenate` layer can\r\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\r\n *\r\n * ```js\r\n * const concatLayer = tf.layers.concatenate();\r\n *\r\n * // The layer can be applied to inputs.\r\n * const input1 = tf.input({shape: [2, 3]});\r\n * const input2 = tf.input({shape: [2, 4]});\r\n * const output = concatLayer.apply([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\r\n * // dimension and the last dimension as the result of concatenating the\r\n * // last dimensions of the two inputs.\r\n * ```\r\n *\r\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.SymbolicTensor`. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 3]});\r\n * const input2 = tf.input({shape: [2, 4]});\r\n * const output = tf.layers.concatenate([input1, input2]);\r\n * console.log(output.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension and the last dimension as the result of concatenating the\r\n * // last dimensions of the two inputs.\r\n * ```\r\n *\r\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\r\n *    an `Layer` object internally and calls its `apply` method on the inputs,\r\n *    generating a new `tf.Tensor` as the result of the computation. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\r\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\r\n * tf.layers.concatenate([input1, input2]).print();\r\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\r\n *\r\n */function merge_concatenate(config){if(Array.isArray(config)){var layer=new merge_Concatenate({});return layer.apply(config);}else{return new merge_Concatenate(config);}}/**\r\n * Interpretable potentially negative axis index.\r\n *\r\n * For example, given axis = -1, and dim = 3, this function will return 2.\r\n *\r\n * @param axis The axis index, may be a positive, zero or negative integer.\r\n * @param dim Total number of dimensions, a positive integer.\r\n * @returns A non-negative axis index equivalent to the input `axis`.\r\n */function interpretAxis(axis,dim){while(axis<0){axis+=dim;}return axis;}function batchDot(x,y,axes){if(x.shape.length>3||y.shape.length>3){throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');}dist[\"util\"].assert(x.shape.length>=2,function(){return\"batchDot requires the rank of x to be >= 2, \"+\"but got \".concat(x.shape.length);});dist[\"util\"].assert(x.shape.length>=2,function(){return\"batchDot requires the rank of y to be >= 2, \"+\"but got \".concat(y.shape.length);});if(typeof axes==='number'){axes=[axes,axes];}if(x.dtype==='complex64'||y.dtype==='complex64'){throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');}var xNDim=x.shape.length;var yNDim=y.shape.length;if(axes==null){// Behave like batchMatmul by default.\naxes=[xNDim-1,yNDim-2];}var axesArray=axes;return dist[\"tidy\"](function(){var diff;if(xNDim>yNDim){diff=xNDim-yNDim;var diffShape=[];for(var i=0;i<diff;++i){diffShape.push(1);}y=y.reshape(y.shape.concat(diffShape));}else if(yNDim>xNDim){diff=yNDim-xNDim;var _diffShape=[];for(var _i81=0;_i81<diff;++_i81){_diffShape.push(1);}x=x.reshape(x.shape.concat(_diffShape));}else{diff=0;}var out;if(x.shape.length===2&&y.shape.length===2){if(axesArray[0]===axesArray[1]){out=x.mul(y).sum(axesArray[0]);}else{out=x.transpose([1,0]).mul(y).sum(axesArray[1]);}}else{var adjX=axesArray[0]!==x.shape.length-1;var adjY=axesArray[1]===y.shape.length-1;out=x.matMul(y,adjX,adjY);}if(diff>0){var idx;if(xNDim>yNDim){idx=xNDim+yNDim-3;}else{idx=xNDim-1;}var squeezeAxes=[];for(var _i82=idx;_i82<idx+diff;++_i82){squeezeAxes.push(_i82);}out=out.squeeze(squeezeAxes);}if(out.shape.length===1){out=out.expandDims(1);}return out;});}var merge_Dot=/*#__PURE__*/function(_merge_Merge7){_inherits(merge_Dot,_merge_Merge7);var _super119=_createSuper(merge_Dot);function merge_Dot(args){var _this205;_classCallCheck2(this,merge_Dot);_this205=_super119.call(this,args);_this205.axes=args.axes;_this205.normalize=args.normalize==null?false:args.normalize;_this205.supportsMasking=true;_this205.reshapeRequired=false;return _this205;}_createClass(merge_Dot,[{key:\"build\",value:function build(inputShape){dist[\"util\"].assert(Array.isArray(inputShape)&&inputShape.length===2&&Array.isArray(inputShape[0])&&Array.isArray(inputShape[1]),function(){return'A `Dot` layer should be called on a list of exactly 2 inputs.';});var shape1=inputShape[0];var shape2=inputShape[1];if(shape1.length>3||shape2.length>3){throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');}var axes=this.interpretAxes(shape1,shape2);if(shape1[axes[0]]!==shape2[axes[1]]){throw new ValueError(\"Dimension incompatibility: \"+\"\".concat(shape1[axes[0]],\" !== \").concat(shape2[axes[1]]));}}},{key:\"mergeFunction\",value:function mergeFunction(inputs){if(inputs.length!==2){throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, '+\"but received \".concat(inputs.length,\" input(s).\"));}var x1=inputs[0];var x2=inputs[1];var axes;if(!Array.isArray(this.axes)){axes=[interpretAxis(this.axes,x1.shape.length),interpretAxis(this.axes,x2.shape.length)];}else{axes=this.axes.map(function(axis,i){return interpretAxis(axis,inputs[i].shape.length);});}if(this.normalize){x1=l2Normalize(x1,axes[0]);x2=l2Normalize(x2,axes[1]);}return batchDot(x1,x2,axes);}},{key:\"interpretAxes\",value:function interpretAxes(shape1,shape2){var axes;if(!Array.isArray(this.axes)){// `this.axes` is a single integer.\naxes=[interpretAxis(this.axes,shape1.length),interpretAxis(this.axes,shape2.length)];}else{// `this.axes` is an Array of integers.\naxes=this.axes;}return axes;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){dist[\"util\"].assert(Array.isArray(inputShape)&&inputShape.length===2&&Array.isArray(inputShape[0])&&Array.isArray(inputShape[1]),function(){return'A `Dot` layer should be called on a list of exactly 2 inputs.';});var shape1=inputShape[0].slice();var shape2=inputShape[1].slice();if(shape1.length>3||shape2.length>3){throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');}var axes=this.interpretAxes(shape1,shape2);shape1.splice(axes[0],1);shape2.splice(axes[1],1);shape2.splice(0,1);var outputShape=shape1.concat(shape2);if(outputShape.length===1){outputShape.push(1);}return outputShape;}},{key:\"computeMask\",value:function computeMask(inputs,mask){return null;}},{key:\"getConfig\",value:function getConfig(){var config={'axes':this.axes,'normalize':this.normalize};var baseConfig=_get(_getPrototypeOf(merge_Dot.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return merge_Dot;}(merge_Merge);/** @nocollapse */merge_Dot.className='Dot';dist[\"serialization\"].registerClass(merge_Dot);// TODO(cais): Add functional interfaces for the merge layers.\n// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Noise Layers.\r\n */var noise_GaussianNoise=/*#__PURE__*/function(_topology_Layer22){_inherits(noise_GaussianNoise,_topology_Layer22);var _super120=_createSuper(noise_GaussianNoise);function noise_GaussianNoise(args){var _this206;_classCallCheck2(this,noise_GaussianNoise);_this206=_super120.call(this,args);_this206.supportsMasking=true;_this206.stddev=args.stddev;return _this206;}_createClass(noise_GaussianNoise,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var baseConfig=_get(_getPrototypeOf(noise_GaussianNoise.prototype),\"getConfig\",this).call(this);var config={stddev:this.stddev};Object.assign(config,baseConfig);return config;}},{key:\"call\",value:function call(inputs,kwargs){var _this207=this;return Object(dist[\"tidy\"])(function(){_this207.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);var noised=function noised(){return randomNormal(input.shape,0,_this207.stddev).add(input);};var output=inTrainPhase(noised,function(){return input;},kwargs['training']||false);return output;});}}]);return noise_GaussianNoise;}(topology_Layer);/** @nocollapse */noise_GaussianNoise.className='GaussianNoise';dist[\"serialization\"].registerClass(noise_GaussianNoise);var noise_GaussianDropout=/*#__PURE__*/function(_topology_Layer23){_inherits(noise_GaussianDropout,_topology_Layer23);var _super121=_createSuper(noise_GaussianDropout);function noise_GaussianDropout(args){var _this208;_classCallCheck2(this,noise_GaussianDropout);_this208=_super121.call(this,args);_this208.supportsMasking=true;_this208.rate=args.rate;return _this208;}_createClass(noise_GaussianDropout,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var baseConfig=_get(_getPrototypeOf(noise_GaussianDropout.prototype),\"getConfig\",this).call(this);var config={rate:this.rate};Object.assign(config,baseConfig);return config;}},{key:\"call\",value:function call(inputs,kwargs){var _this209=this;return Object(dist[\"tidy\"])(function(){_this209.invokeCallHook(inputs,kwargs);var input=getExactlyOneTensor(inputs);if(_this209.rate>0&&_this209.rate<1){var noised=function noised(){var stddev=Math.sqrt(_this209.rate/(1-_this209.rate));return input.mul(randomNormal(input.shape,1,stddev));};return inTrainPhase(noised,function(){return input;},kwargs['training']||false);}return input;});}}]);return noise_GaussianDropout;}(topology_Layer);/** @nocollapse */noise_GaussianDropout.className='GaussianDropout';dist[\"serialization\"].registerClass(noise_GaussianDropout);/**\r\n * Applies Alpha Dropout to the input.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\r\n * to their original values, in order to ensure the self-normalizing property\r\n * even after this dropout.\r\n * Alpha Dropout fits well to Scaled Exponential Linear Units\r\n * by randomly setting activations to the negative saturation value.\r\n *\r\n * Arguments:\r\n *   - `rate`: float, drop probability (as with `Dropout`).\r\n *     The multiplicative noise will have\r\n *     standard deviation `sqrt(rate / (1 - rate))`.\r\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\r\n *     shape for randomly generated keep/drop flags.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\r\n */var noise_AlphaDropout=/*#__PURE__*/function(_topology_Layer24){_inherits(noise_AlphaDropout,_topology_Layer24);var _super122=_createSuper(noise_AlphaDropout);function noise_AlphaDropout(args){var _this210;_classCallCheck2(this,noise_AlphaDropout);_this210=_super122.call(this,args);_this210.supportsMasking=true;_this210.rate=args.rate;_this210.noiseShape=args.noiseShape;return _this210;}_createClass(noise_AlphaDropout,[{key:\"_getNoiseShape\",value:function _getNoiseShape(inputs){return this.noiseShape||getExactlyOneTensor(inputs).shape;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return inputShape;}},{key:\"getConfig\",value:function getConfig(){var baseConfig=_get(_getPrototypeOf(noise_AlphaDropout.prototype),\"getConfig\",this).call(this);var config={rate:this.rate};Object.assign(config,baseConfig);return config;}},{key:\"call\",value:function call(inputs,kwargs){var _this211=this;return Object(dist[\"tidy\"])(function(){if(_this211.rate<1&&_this211.rate>0){var noiseShape=_this211._getNoiseShape(inputs);var droppedInputs=function droppedInputs(){var input=getExactlyOneTensor(inputs);var alpha=1.6732632423543772848170429916717;var scale=1.0507009873554804934193349852946;var alphaP=-alpha*scale;var keptIdx=Object(dist[\"greaterEqual\"])(Object(dist[\"randomUniform\"])(noiseShape),_this211.rate);keptIdx=cast(keptIdx,'float32');// get default dtype.\n// Get affine transformation params.\nvar a=Math.pow((1-_this211.rate)*(1+_this211.rate*Math.pow(alphaP,2)),-0.5);var b=-a*alphaP*_this211.rate;// Apply mask.\nvar x=input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));return x.mul(a).add(b);};return inTrainPhase(droppedInputs,function(){return getExactlyOneTensor(inputs);},kwargs['training']||false);}return inputs;});}}]);return noise_AlphaDropout;}(topology_Layer);/** @nocollapse */noise_AlphaDropout.className='AlphaDropout';dist[\"serialization\"].registerClass(noise_AlphaDropout);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Normalization layers.\r\n */ /**\r\n * Applies batch normalization on x given mean, var, beta and gamma.\r\n *\r\n * I.e. returns:\r\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\r\n *\r\n * @param x Input tensor.\r\n * @param mean Mean of batch.\r\n * @param variance Variance of batch.\r\n * @param beta Tensor with which to center the input.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param epsilon Fuzz factor.\r\n * @returns The result of the batch normalization.\r\n */function batchNormalization(x,mean,variance,beta,gamma){var epsilon=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1e-3;var out;if(x.rank===2){out=dist[\"batchNorm2d\"](x,mean,variance,beta,gamma,epsilon);}else if(x.rank===3){// TODO(cais): Check rank; give proper error message.\nout=dist[\"batchNorm3d\"](x,mean,variance,beta,gamma,epsilon);}else if(x.rank===4){out=dist[\"batchNorm4d\"](x,mean,variance,beta,gamma,epsilon);}else{throw new NotImplementedError(\"batchNormalization is not implemented for array of rank \".concat(x.rank,\" \")+\"yet\");}return out;}/**\r\n * Non-broadcasting batch normalization for use in training (not inference).\r\n *\r\n * The input is normalized to zero mean and unit variance along the\r\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\r\n * The result of that is returned as the first element\r\n * of the returned `Array`. The other two elements are the mean and variance,\r\n * respectively.\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */function regularNormalizeBatchInTraining(x,gamma,beta,reductionAxes){var epsilon=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1e-3;return Object(dist[\"tidy\"])(function(){var meanAndVariance=dist[\"moments\"](x,reductionAxes);var mean=meanAndVariance.mean;var variance=meanAndVariance.variance;var normed=batchNormalization(x,mean,variance,beta,gamma,epsilon);return[normed,mean,variance];});}/**\r\n * Broadcasting batch normalization for use in training (not inference).\r\n *\r\n * The input is normalized to zero mean and unit variance along the\r\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\r\n * The result of that is returned as the first element\r\n * of the returned `Array`. The other two elements are the mean and variance,\r\n * respectively.\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */function broadcastNormalizeBatchInTraining(x,gamma,beta,reductionAxes){var epsilon=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1e-3;return Object(dist[\"tidy\"])(function(){var meanAndVariance=dist[\"moments\"](x,reductionAxes);var mean=meanAndVariance.mean;var variance=meanAndVariance.variance;var targetShape=[];var _iterator104=_createForOfIteratorHelper(range(0,x.rank)),_step104;try{for(_iterator104.s();!(_step104=_iterator104.n()).done;){var axis=_step104.value;if(reductionAxes.indexOf(axis)!==-1){targetShape.push(1);}else{targetShape.push(x.shape[axis]);}}}catch(err){_iterator104.e(err);}finally{_iterator104.f();}var broadcastMean=mean.reshape(targetShape);var broadcastVariance=variance.reshape(targetShape);var broadcastGamma=gamma==null?null:gamma.reshape(targetShape);var broadcastBeta=beta==null?null:beta.reshape(targetShape);var normed=batchNormalization(x,broadcastMean,broadcastVariance,broadcastBeta,broadcastGamma,epsilon);return[normed,mean,variance];});}/**\r\n * Batch normalization for use in training (not inference).\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */function normalizeBatchInTraining(x,gamma,beta,reductionAxes){var epsilon=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1e-3;if(dist[\"util\"].arraysEqual(reductionAxes.slice().sort(),range(0,x.rank-1))){return regularNormalizeBatchInTraining(x,gamma,beta,reductionAxes,epsilon);}else{return broadcastNormalizeBatchInTraining(x,gamma,beta,reductionAxes,epsilon);}}var normalization_BatchNormalization=/*#__PURE__*/function(_topology_Layer25){_inherits(normalization_BatchNormalization,_topology_Layer25);var _super123=_createSuper(normalization_BatchNormalization);function normalization_BatchNormalization(args){var _this212;_classCallCheck2(this,normalization_BatchNormalization);if(args==null){args={};}_this212=_super123.call(this,args);_this212.supportsMasking=true;_this212.axis=args.axis==null?-1:args.axis;_this212.momentum=args.momentum==null?0.99:args.momentum;_this212.epsilon=args.epsilon==null?1e-3:args.epsilon;_this212.center=args.center==null?true:args.center;_this212.scale=args.scale==null?true:args.scale;_this212.betaInitializer=getInitializer(args.betaInitializer||'zeros');_this212.gammaInitializer=getInitializer(args.gammaInitializer||'ones');_this212.movingMeanInitializer=getInitializer(args.movingMeanInitializer||'zeros');_this212.movingVarianceInitializer=getInitializer(args.movingVarianceInitializer||'ones');_this212.betaConstraint=getConstraint(args.betaConstraint);_this212.gammaConstraint=getConstraint(args.gammaConstraint);_this212.betaRegularizer=getRegularizer(args.betaRegularizer);_this212.gammaRegularizer=getRegularizer(args.gammaRegularizer);return _this212;}_createClass(normalization_BatchNormalization,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var axis=this.axis>=0?this.axis:this.axis+inputShape.length;var dim=inputShape[axis];if(dim==null){throw new ValueError(\"Axis \".concat(axis,\" of input tensor should have a defined dimension but \")+\"the layer received an input with shape \"+\"\".concat(JSON.stringify(inputShape),\".\"));}this.inputSpec=[new InputSpec({ndim:inputShape.length,axes:_defineProperty2({},axis,dim)})];var shape=[dim];if(this.scale){this.gamma=this.addWeight('gamma',shape,null,this.gammaInitializer,this.gammaRegularizer,true,this.gammaConstraint);}if(this.center){this.beta=this.addWeight('beta',shape,null,this.betaInitializer,this.betaRegularizer,true,this.betaConstraint);}this.movingMean=this.addWeight('moving_mean',shape,null,this.movingMeanInitializer,null,false);this.movingVariance=this.addWeight('moving_variance',shape,null,this.movingVarianceInitializer,null,false);this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this213=this;return Object(dist[\"tidy\"])(function(){var training=kwargs['training']==null?false:kwargs['training'];var input=getExactlyOneTensor(inputs);var inputShape=input.shape;var ndim=inputShape.length;var reductionAxes=range(0,ndim);var axis=_this213.axis>=0?_this213.axis:_this213.axis+ndim;reductionAxes.splice(axis,1);var broadcastShape=pyListRepeat(1,ndim);broadcastShape[axis]=inputShape[axis];var sortedReductionAxes=reductionAxes.slice();sortedReductionAxes.sort();var needsBroadcasting=!dist[\"util\"].arraysEqual(sortedReductionAxes,range(0,ndim).slice(0,ndim-1));var normalizeInference=function normalizeInference(){if(needsBroadcasting){var broadcastMovingMean=_this213.movingMean.read().reshape(broadcastShape);var broadcastMovingVariance=_this213.movingVariance.read().reshape(broadcastShape);var broadcastBeta=_this213.center?_this213.beta.read().reshape(broadcastShape):null;var broadcastGamma=_this213.scale?_this213.gamma.read().reshape(broadcastShape):null;return batchNormalization(input,broadcastMovingMean,broadcastMovingVariance,broadcastBeta,broadcastGamma,_this213.epsilon);}else{return batchNormalization(input,_this213.movingMean.read(),_this213.movingVariance.read(),_this213.beta==null?null:_this213.beta.read(),_this213.gamma==null?null:_this213.gamma.read(),_this213.epsilon);}};if(!training){return normalizeInference();}var _normalizeBatchInTrai=normalizeBatchInTraining(input,_this213.gamma.read(),_this213.beta.read(),reductionAxes,_this213.epsilon),_normalizeBatchInTrai2=_slicedToArray(_normalizeBatchInTrai,3),normedTraining=_normalizeBatchInTrai2[0],mean=_normalizeBatchInTrai2[1],variance=_normalizeBatchInTrai2[2];var doMovingAverage=function doMovingAverage(variable,value,momentum){dist[\"tidy\"](function(){var decay=1-momentum;var origValue=variable.read();var updateDelta=origValue.sub(value).mul(decay);variable.write(origValue.sub(updateDelta));});};// Perform updates to moving mean and moving variance for training.\n// Porting Note: In PyKeras, these updates to `movingMean` and\n//   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n//   `update`s using the `add_update()` method. Here we do it imperatively\n//   and encapsulate the updates in a function that is invoked\n//   immediately.\nvar updateMovingMeanAndVariance=function updateMovingMeanAndVariance(){doMovingAverage(_this213.movingMean,mean,_this213.momentum);doMovingAverage(_this213.movingVariance,variance,_this213.momentum);};updateMovingMeanAndVariance();return normedTraining;});}},{key:\"getConfig\",value:function getConfig(){var config={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),movingMeanInitializer:serializeInitializer(this.movingMeanInitializer),movingVarianceInitializer:serializeInitializer(this.movingVarianceInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer),betaConstraint:serializeConstraint(this.betaConstraint),gammaConstraint:serializeConstraint(this.gammaConstraint)};var baseConfig=_get(_getPrototypeOf(normalization_BatchNormalization.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return normalization_BatchNormalization;}(topology_Layer);/** @nocollapse */normalization_BatchNormalization.className='BatchNormalization';dist[\"serialization\"].registerClass(normalization_BatchNormalization);var normalization_LayerNormalization=/*#__PURE__*/function(_topology_Layer26){_inherits(normalization_LayerNormalization,_topology_Layer26);var _super124=_createSuper(normalization_LayerNormalization);function normalization_LayerNormalization(args){var _this214;_classCallCheck2(this,normalization_LayerNormalization);if(args==null){args={};}_this214=_super124.call(this,args);_this214.axis=args.axis==null?-1:args.axis;if(typeof _this214.axis==='number'){if(!Number.isInteger(_this214.axis)){throw new Error(\"Expected axis to be an integer, but received \".concat(_this214.axis));}}else if(Array.isArray(_this214.axis)){var _iterator105=_createForOfIteratorHelper(_this214.axis),_step105;try{for(_iterator105.s();!(_step105=_iterator105.n()).done;){var axis=_step105.value;if(!Number.isInteger(axis)){throw new Error(\"Expected axis to be an array of integers, \"+\"but received \".concat(JSON.stringify(_this214.axis)));}}}catch(err){_iterator105.e(err);}finally{_iterator105.f();}}else{throw new Error(\"Expected axis to be an integer or an array of integers, \"+\"but received \".concat(JSON.stringify(_this214.axis)));}_this214.epsilon=args.epsilon==null?1e-3:args.epsilon;_this214.center=args.center==null?true:args.center;_this214.scale=args.scale==null?true:args.scale;_this214.betaInitializer=getInitializer(args.betaInitializer||'zeros');_this214.gammaInitializer=getInitializer(args.gammaInitializer||'ones');_this214.betaRegularizer=getRegularizer(args.betaRegularizer);_this214.gammaRegularizer=getRegularizer(args.gammaRegularizer);_this214.supportsMasking=true;return _this214;}_createClass(normalization_LayerNormalization,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var nDims=inputShape.length;// Convert axis to array and resolve negatives.\nif(typeof this.axis==='number'){this.axis=[this.axis];}for(var i=0;i<this.axis.length;++i){if(this.axis[i]<0){this.axis[i]+=nDims;}}// Further validate axes.\nvar _iterator106=_createForOfIteratorHelper(this.axis),_step106;try{for(_iterator106.s();!(_step106=_iterator106.n()).done;){var axis=_step106.value;if(axis<0||axis>=nDims){throw new Error(\"Invalid axis: \".concat(axis));}}}catch(err){_iterator106.e(err);}finally{_iterator106.f();}if(this.axis.length!==unique(this.axis).length){throw new Error(\"Found duplicate axes in: \".concat(this.axis));}var paramShape=this.axis.map(function(axis){return inputShape[axis];});var trainable=true;if(this.scale){this.gamma=this.addWeight('gamma',paramShape,'float32',this.gammaInitializer,this.gammaRegularizer,trainable);}else{this.gamma=null;}if(this.center){this.beta=this.addWeight('beta',paramShape,'float32',this.betaInitializer,this.betaRegularizer,trainable);}else{this.beta=null;}this.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this215=this;var input=getExactlyOneTensor(inputs);var inputShape=input.shape;var nDims=inputShape.length;return Object(dist[\"tidy\"])(function(){var keepDims=true;var _Object87=Object(dist[\"moments\"])(input,_this215.axis,keepDims),mean=_Object87.mean,variance=_Object87.variance;var broadcastShape=pyListRepeat(1,nDims);var _iterator107=_createForOfIteratorHelper(_this215.axis),_step107;try{for(_iterator107.s();!(_step107=_iterator107.n()).done;){var dim=_step107.value;broadcastShape[dim]=inputShape[dim];}}catch(err){_iterator107.e(err);}finally{_iterator107.f();}var broadcast=function broadcast(v){if(v!=null&&v.shape.length!==nDims&&_this215.axis!==[nDims-1]){return v.reshape(broadcastShape);}else{return v;}};var scale=broadcast(_this215.gamma.read());var offset=broadcast(_this215.beta.read());// TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n// is a workaround for the limitation of core's batchNormalization?d don't\n// support broadcasting in their gradients. In addition, the tiling is\n// necessary to ensure correctness on the browser CPU backend regardless\n// of forward or backward computation. Remove this workaround once the\n// limitation is addressed. See .\nvar momentsTiling=[];var scaleOffsetTiling=[];for(var i=0;i<nDims;++i){if(_this215.axis.indexOf(i)!==-1){momentsTiling.push(inputShape[i]);scaleOffsetTiling.push(1);}else{momentsTiling.push(1);scaleOffsetTiling.push(inputShape[i]);}}mean=mean.tile(momentsTiling);variance=variance.tile(momentsTiling);scale=scale.tile(scaleOffsetTiling);offset=offset.tile(scaleOffsetTiling);return batchNormalization(input,mean,variance,offset,scale,_this215.epsilon);});}},{key:\"getConfig\",value:function getConfig(){var config={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer)};var baseConfig=_get(_getPrototypeOf(normalization_LayerNormalization.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return normalization_LayerNormalization;}(topology_Layer);/** @nocollapse */normalization_LayerNormalization.className='LayerNormalization';dist[\"serialization\"].registerClass(normalization_LayerNormalization);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Padding Layers.\r\n */ // Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\n/**\r\n * Pads the middle dimension of a 3D tensor.\r\n *\r\n * @param x Input `tf.Tensor` to be padded.\r\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\r\n *   end of the middle dimension (i.e., dimension 1).\r\n * @return A padded 3D `tf.Tensor`.\r\n */function temporalPadding(x,padding){return Object(dist[\"tidy\"])(function(){if(x.rank!==3){throw new ValueError(\"temporalPadding expects input tensor to be 3-D, but received a \"+\"\".concat(x.rank,\"-D tensor.\"));}if(padding==null){padding=[1,1];}if(padding.length!==2){throw new ValueError(\"temporalPadding expects input padding pattern to be a length-2 \"+\"array, but received a length-\".concat(padding.length,\" array.\"));}var pattern=[[0,0],padding,[0,0]];return dist[\"pad\"](x,pattern);});}/**\r\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\r\n *\r\n * @param x Input `tf.Tensor` to be padded.\r\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\r\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\r\n *   dimensions, respectively.\r\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\r\n * @return Padded 4D `tf.Tensor`.\r\n */function spatial2dPadding(x,padding,dataFormat){return Object(dist[\"tidy\"])(function(){if(x.rank!==4){throw new ValueError(\"temporalPadding expects input tensor to be 4-D, but received a \"+\"\".concat(x.rank,\"-D tensor.\"));}if(padding==null){padding=[[1,1],[1,1]];}if(padding.length!==2||padding[0].length!==2||padding[1].length!==2){throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, '+'each of which is an Array of two integers.');}if(dataFormat==null){dataFormat=imageDataFormat();}if(dataFormat!=='channelsLast'&&dataFormat!=='channelsFirst'){throw new ValueError(\"Unknown data format: \".concat(dataFormat,\". \")+\"Supported data formats are 'channelsLast' and 'channelsFirst.\");}var pattern;if(dataFormat==='channelsFirst'){pattern=[[0,0],[0,0],padding[0],padding[1]];}else{pattern=[[0,0],padding[0],padding[1],[0,0]];}return dist[\"pad\"](x,pattern);});}var padding_ZeroPadding2D=/*#__PURE__*/function(_topology_Layer27){_inherits(padding_ZeroPadding2D,_topology_Layer27);var _super125=_createSuper(padding_ZeroPadding2D);function padding_ZeroPadding2D(args){var _this216;_classCallCheck2(this,padding_ZeroPadding2D);if(args==null){args={};}_this216=_super125.call(this,args);_this216.dataFormat=args.dataFormat==null?imageDataFormat():args.dataFormat;// TODO(cais): Maybe refactor the following logic surrounding `padding`\n//   into a helper method.\nif(args.padding==null){_this216.padding=[[1,1],[1,1]];}else if(typeof args.padding==='number'){_this216.padding=[[args.padding,args.padding],[args.padding,args.padding]];}else{args.padding=args.padding;if(args.padding.length!==2){throw new ValueError(\"ZeroPadding2D expects padding to be a length-2 array, but \"+\"received a length-\".concat(args.padding.length,\" array.\"));}var heightPadding;var widthPadding;if(typeof args.padding[0]==='number'){heightPadding=[args.padding[0],args.padding[0]];widthPadding=[args.padding[1],args.padding[1]];}else{args.padding=args.padding;if(args.padding[0].length!==2){throw new ValueError(\"ZeroPadding2D expects height padding to be a length-2 array, \"+\"but received a length-\".concat(args.padding[0].length,\" array.\"));}heightPadding=args.padding[0];if(args.padding[1].length!==2){throw new ValueError(\"ZeroPadding2D expects width padding to be a length-2 array, \"+\"but received a length-\".concat(args.padding[1].length,\" array.\"));}widthPadding=args.padding[1];}_this216.padding=[heightPadding,widthPadding];}_this216.inputSpec=[new InputSpec({ndim:4})];return _this216;}_createClass(padding_ZeroPadding2D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var rows;var cols;if(this.dataFormat==='channelsFirst'){if(inputShape[2]!=null&&inputShape[2]>=0){rows=inputShape[2]+this.padding[0][0]+this.padding[0][1];}else{rows=null;}if(inputShape[3]!=null&&inputShape[3]>=0){cols=inputShape[3]+this.padding[1][0]+this.padding[1][1];}else{cols=null;}return[inputShape[0],inputShape[1],rows,cols];}else{if(inputShape[1]!=null&&inputShape[1]>=0){rows=inputShape[1]+this.padding[0][0]+this.padding[0][1];}else{rows=null;}if(inputShape[2]!=null&&inputShape[2]>=0){cols=inputShape[2]+this.padding[1][0]+this.padding[1][1];}else{cols=null;}return[inputShape[0],rows,cols,inputShape[3]];}}},{key:\"call\",value:function call(inputs,kwargs){var _this217=this;return Object(dist[\"tidy\"])(function(){return spatial2dPadding(getExactlyOneTensor(inputs),_this217.padding,_this217.dataFormat);});}},{key:\"getConfig\",value:function getConfig(){var config={padding:this.padding,dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(padding_ZeroPadding2D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return padding_ZeroPadding2D;}(topology_Layer);/** @nocollapse */padding_ZeroPadding2D.className='ZeroPadding2D';dist[\"serialization\"].registerClass(padding_ZeroPadding2D);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Pooling Layers.\r\n */ /**\r\n * 2D pooling.\r\n * @param x\r\n * @param poolSize\r\n * @param stridesdes strides. Defaults to [1, 1].\r\n * @param padding padding. Defaults to 'valid'.\r\n * @param dataFormat data format. Defaults to 'channelsLast'.\r\n * @param poolMode Mode of pooling. Defaults to 'max'.\r\n * @returns Result of the 2D pooling.\r\n */function pool2d(x,poolSize,strides,padding,dataFormat,poolMode){return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);checkPoolMode(poolMode);checkPaddingMode(padding);if(strides==null){strides=[1,1];}if(padding==null){padding='valid';}if(dataFormat==null){dataFormat=imageDataFormat();}if(poolMode==null){poolMode='max';}// TODO(cais): Remove the preprocessing step once deeplearn.js supports\n// dataFormat as an input argument.\nx=preprocessConv2DInput(x,dataFormat);// x is NHWC after preprocessing.\nvar y;var paddingString=padding==='same'?'same':'valid';if(poolMode==='max'){// TODO(cais): Rank check?\ny=dist[\"maxPool\"](x,poolSize,strides,paddingString);}else{// 'avg'\n// TODO(cais): Check the dtype and rank of x and give clear error message\n//   if those are incorrect.\ny=dist[\"avgPool\"](// TODO(cais): Rank check?\nx,poolSize,strides,paddingString);}if(dataFormat==='channelsFirst'){y=dist[\"transpose\"](y,[0,3,1,2]);// NHWC -> NCHW.\n}return y;});}/**\r\n * 3D pooling.\r\n * @param x\r\n * @param poolSize. Default to [1, 1, 1].\r\n * @param strides strides. Defaults to [1, 1, 1].\r\n * @param padding padding. Defaults to 'valid'.\r\n * @param dataFormat data format. Defaults to 'channelsLast'.\r\n * @param poolMode Mode of pooling. Defaults to 'max'.\r\n * @returns Result of the 3D pooling.\r\n */function pool3d(x,poolSize,strides,padding,dataFormat,poolMode){return Object(dist[\"tidy\"])(function(){checkDataFormat(dataFormat);checkPoolMode(poolMode);checkPaddingMode(padding);if(strides==null){strides=[1,1,1];}if(padding==null){padding='valid';}if(dataFormat==null){dataFormat=imageDataFormat();}if(poolMode==null){poolMode='max';}// x is NDHWC after preprocessing.\nx=preprocessConv3DInput(x,dataFormat);var y;var paddingString=padding==='same'?'same':'valid';if(poolMode==='max'){y=dist[\"maxPool3d\"](x,poolSize,strides,paddingString);}else{// 'avg'\ny=dist[\"avgPool3d\"](x,poolSize,strides,paddingString);}if(dataFormat==='channelsFirst'){y=dist[\"transpose\"](y,[0,4,1,2,3]);// NDHWC -> NCDHW.\n}return y;});}/**\r\n * Abstract class for different pooling 1D layers.\r\n */var pooling_Pooling1D=/*#__PURE__*/function(_topology_Layer28){_inherits(pooling_Pooling1D,_topology_Layer28);var _super126=_createSuper(pooling_Pooling1D);/**\r\n     *\r\n     * @param args Parameters for the Pooling layer.\r\n     *\r\n     * config.poolSize defaults to 2.\r\n     */function pooling_Pooling1D(args){var _this218;_classCallCheck2(this,pooling_Pooling1D);if(args.poolSize==null){args.poolSize=2;}_this218=_super126.call(this,args);if(typeof args.poolSize==='number'){_this218.poolSize=[args.poolSize];}else if(Array.isArray(args.poolSize)&&args.poolSize.length===1&&typeof args.poolSize[0]==='number'){_this218.poolSize=args.poolSize;}else{throw new ValueError(\"poolSize for 1D convolutional layer must be a number or an \"+\"Array of a single number, but received \"+\"\".concat(JSON.stringify(args.poolSize)));}assertPositiveInteger(_this218.poolSize,'poolSize');if(args.strides==null){_this218.strides=_this218.poolSize;}else{if(typeof args.strides==='number'){_this218.strides=[args.strides];}else if(Array.isArray(args.strides)&&args.strides.length===1&&typeof args.strides[0]==='number'){_this218.strides=args.strides;}else{throw new ValueError(\"strides for 1D convolutional layer must be a number or an \"+\"Array of a single number, but received \"+\"\".concat(JSON.stringify(args.strides)));}}assertPositiveInteger(_this218.strides,'strides');_this218.padding=args.padding==null?'valid':args.padding;checkPaddingMode(_this218.padding);_this218.inputSpec=[new InputSpec({ndim:3})];return _this218;}_createClass(pooling_Pooling1D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var length=convOutputLength(inputShape[1],this.poolSize[0],this.padding,this.strides[0]);return[inputShape[0],length,inputShape[2]];}},{key:\"call\",value:function call(inputs,kwargs){var _this219=this;return Object(dist[\"tidy\"])(function(){_this219.invokeCallHook(inputs,kwargs);// Add dummy last dimension.\ninputs=expandDims(getExactlyOneTensor(inputs),2);var output=_this219.poolingFunction(getExactlyOneTensor(inputs),[_this219.poolSize[0],1],[_this219.strides[0],1],_this219.padding,'channelsLast');// Remove dummy last dimension.\nreturn dist[\"squeeze\"](output,[2]);});}},{key:\"getConfig\",value:function getConfig(){var config={poolSize:this.poolSize,padding:this.padding,strides:this.strides};var baseConfig=_get(_getPrototypeOf(pooling_Pooling1D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return pooling_Pooling1D;}(topology_Layer);var pooling_MaxPooling1D=/*#__PURE__*/function(_pooling_Pooling1D){_inherits(pooling_MaxPooling1D,_pooling_Pooling1D);var _super127=_createSuper(pooling_MaxPooling1D);function pooling_MaxPooling1D(args){_classCallCheck2(this,pooling_MaxPooling1D);return _super127.call(this,args);}_createClass(pooling_MaxPooling1D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool2d(inputs,poolSize,strides,padding,dataFormat,'max');}}]);return pooling_MaxPooling1D;}(pooling_Pooling1D);/** @nocollapse */pooling_MaxPooling1D.className='MaxPooling1D';dist[\"serialization\"].registerClass(pooling_MaxPooling1D);var pooling_AveragePooling1D=/*#__PURE__*/function(_pooling_Pooling1D2){_inherits(pooling_AveragePooling1D,_pooling_Pooling1D2);var _super128=_createSuper(pooling_AveragePooling1D);function pooling_AveragePooling1D(args){_classCallCheck2(this,pooling_AveragePooling1D);return _super128.call(this,args);}_createClass(pooling_AveragePooling1D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool2d(inputs,poolSize,strides,padding,dataFormat,'avg');}}]);return pooling_AveragePooling1D;}(pooling_Pooling1D);/** @nocollapse */pooling_AveragePooling1D.className='AveragePooling1D';dist[\"serialization\"].registerClass(pooling_AveragePooling1D);/**\r\n * Abstract class for different pooling 2D layers.\r\n */var pooling_Pooling2D=/*#__PURE__*/function(_topology_Layer29){_inherits(pooling_Pooling2D,_topology_Layer29);var _super129=_createSuper(pooling_Pooling2D);function pooling_Pooling2D(args){var _this220;_classCallCheck2(this,pooling_Pooling2D);if(args.poolSize==null){args.poolSize=[2,2];}_this220=_super129.call(this,args);_this220.poolSize=Array.isArray(args.poolSize)?args.poolSize:[args.poolSize,args.poolSize];if(args.strides==null){_this220.strides=_this220.poolSize;}else if(Array.isArray(args.strides)){if(args.strides.length!==2){throw new ValueError(\"If the strides property of a 2D pooling layer is an Array, \"+\"it is expected to have a length of 2, but received length \"+\"\".concat(args.strides.length,\".\"));}_this220.strides=args.strides;}else{// `config.strides` is a number.\n_this220.strides=[args.strides,args.strides];}assertPositiveInteger(_this220.poolSize,'poolSize');assertPositiveInteger(_this220.strides,'strides');_this220.padding=args.padding==null?'valid':args.padding;_this220.dataFormat=args.dataFormat==null?'channelsLast':args.dataFormat;checkDataFormat(_this220.dataFormat);checkPaddingMode(_this220.padding);_this220.inputSpec=[new InputSpec({ndim:4})];return _this220;}_createClass(pooling_Pooling2D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var rows=this.dataFormat==='channelsFirst'?inputShape[2]:inputShape[1];var cols=this.dataFormat==='channelsFirst'?inputShape[3]:inputShape[2];rows=convOutputLength(rows,this.poolSize[0],this.padding,this.strides[0]);cols=convOutputLength(cols,this.poolSize[1],this.padding,this.strides[1]);if(this.dataFormat==='channelsFirst'){return[inputShape[0],inputShape[1],rows,cols];}else{return[inputShape[0],rows,cols,inputShape[3]];}}},{key:\"call\",value:function call(inputs,kwargs){var _this221=this;return Object(dist[\"tidy\"])(function(){_this221.invokeCallHook(inputs,kwargs);return _this221.poolingFunction(getExactlyOneTensor(inputs),_this221.poolSize,_this221.strides,_this221.padding,_this221.dataFormat);});}},{key:\"getConfig\",value:function getConfig(){var config={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(pooling_Pooling2D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return pooling_Pooling2D;}(topology_Layer);var pooling_MaxPooling2D=/*#__PURE__*/function(_pooling_Pooling2D){_inherits(pooling_MaxPooling2D,_pooling_Pooling2D);var _super130=_createSuper(pooling_MaxPooling2D);function pooling_MaxPooling2D(args){_classCallCheck2(this,pooling_MaxPooling2D);return _super130.call(this,args);}_createClass(pooling_MaxPooling2D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool2d(inputs,poolSize,strides,padding,dataFormat,'max');}}]);return pooling_MaxPooling2D;}(pooling_Pooling2D);/** @nocollapse */pooling_MaxPooling2D.className='MaxPooling2D';dist[\"serialization\"].registerClass(pooling_MaxPooling2D);var pooling_AveragePooling2D=/*#__PURE__*/function(_pooling_Pooling2D2){_inherits(pooling_AveragePooling2D,_pooling_Pooling2D2);var _super131=_createSuper(pooling_AveragePooling2D);function pooling_AveragePooling2D(args){_classCallCheck2(this,pooling_AveragePooling2D);return _super131.call(this,args);}_createClass(pooling_AveragePooling2D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool2d(inputs,poolSize,strides,padding,dataFormat,'avg');}}]);return pooling_AveragePooling2D;}(pooling_Pooling2D);/** @nocollapse */pooling_AveragePooling2D.className='AveragePooling2D';dist[\"serialization\"].registerClass(pooling_AveragePooling2D);/**\r\n * Abstract class for different pooling 3D layers.\r\n */var pooling_Pooling3D=/*#__PURE__*/function(_topology_Layer30){_inherits(pooling_Pooling3D,_topology_Layer30);var _super132=_createSuper(pooling_Pooling3D);function pooling_Pooling3D(args){var _this222;_classCallCheck2(this,pooling_Pooling3D);if(args.poolSize==null){args.poolSize=[2,2,2];}_this222=_super132.call(this,args);_this222.poolSize=Array.isArray(args.poolSize)?args.poolSize:[args.poolSize,args.poolSize,args.poolSize];if(args.strides==null){_this222.strides=_this222.poolSize;}else if(Array.isArray(args.strides)){if(args.strides.length!==3){throw new ValueError(\"If the strides property of a 3D pooling layer is an Array, \"+\"it is expected to have a length of 3, but received length \"+\"\".concat(args.strides.length,\".\"));}_this222.strides=args.strides;}else{// `config.strides` is a number.\n_this222.strides=[args.strides,args.strides,args.strides];}assertPositiveInteger(_this222.poolSize,'poolSize');assertPositiveInteger(_this222.strides,'strides');_this222.padding=args.padding==null?'valid':args.padding;_this222.dataFormat=args.dataFormat==null?'channelsLast':args.dataFormat;checkDataFormat(_this222.dataFormat);checkPaddingMode(_this222.padding);_this222.inputSpec=[new InputSpec({ndim:5})];return _this222;}_createClass(pooling_Pooling3D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var depths=this.dataFormat==='channelsFirst'?inputShape[2]:inputShape[1];var rows=this.dataFormat==='channelsFirst'?inputShape[3]:inputShape[2];var cols=this.dataFormat==='channelsFirst'?inputShape[4]:inputShape[3];depths=convOutputLength(depths,this.poolSize[0],this.padding,this.strides[0]);rows=convOutputLength(rows,this.poolSize[1],this.padding,this.strides[1]);cols=convOutputLength(cols,this.poolSize[2],this.padding,this.strides[2]);if(this.dataFormat==='channelsFirst'){return[inputShape[0],inputShape[1],depths,rows,cols];}else{return[inputShape[0],depths,rows,cols,inputShape[4]];}}},{key:\"call\",value:function call(inputs,kwargs){var _this223=this;return Object(dist[\"tidy\"])(function(){_this223.invokeCallHook(inputs,kwargs);return _this223.poolingFunction(getExactlyOneTensor(inputs),_this223.poolSize,_this223.strides,_this223.padding,_this223.dataFormat);});}},{key:\"getConfig\",value:function getConfig(){var config={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(pooling_Pooling3D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return pooling_Pooling3D;}(topology_Layer);var pooling_MaxPooling3D=/*#__PURE__*/function(_pooling_Pooling3D){_inherits(pooling_MaxPooling3D,_pooling_Pooling3D);var _super133=_createSuper(pooling_MaxPooling3D);function pooling_MaxPooling3D(args){_classCallCheck2(this,pooling_MaxPooling3D);return _super133.call(this,args);}_createClass(pooling_MaxPooling3D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool3d(inputs,poolSize,strides,padding,dataFormat,'max');}}]);return pooling_MaxPooling3D;}(pooling_Pooling3D);/** @nocollapse */pooling_MaxPooling3D.className='MaxPooling3D';dist[\"serialization\"].registerClass(pooling_MaxPooling3D);var pooling_AveragePooling3D=/*#__PURE__*/function(_pooling_Pooling3D2){_inherits(pooling_AveragePooling3D,_pooling_Pooling3D2);var _super134=_createSuper(pooling_AveragePooling3D);function pooling_AveragePooling3D(args){_classCallCheck2(this,pooling_AveragePooling3D);return _super134.call(this,args);}_createClass(pooling_AveragePooling3D,[{key:\"poolingFunction\",value:function poolingFunction(inputs,poolSize,strides,padding,dataFormat){checkDataFormat(dataFormat);checkPaddingMode(padding);return pool3d(inputs,poolSize,strides,padding,dataFormat,'avg');}}]);return pooling_AveragePooling3D;}(pooling_Pooling3D);/** @nocollapse */pooling_AveragePooling3D.className='AveragePooling3D';dist[\"serialization\"].registerClass(pooling_AveragePooling3D);/**\r\n * Abstract class for different global pooling 1D layers.\r\n */var pooling_GlobalPooling1D=/*#__PURE__*/function(_topology_Layer31){_inherits(pooling_GlobalPooling1D,_topology_Layer31);var _super135=_createSuper(pooling_GlobalPooling1D);function pooling_GlobalPooling1D(args){var _this224;_classCallCheck2(this,pooling_GlobalPooling1D);_this224=_super135.call(this,args);_this224.inputSpec=[new InputSpec({ndim:3})];return _this224;}_createClass(pooling_GlobalPooling1D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){return[inputShape[0],inputShape[2]];}},{key:\"call\",value:function call(inputs,kwargs){throw new NotImplementedError();}}]);return pooling_GlobalPooling1D;}(topology_Layer);var pooling_GlobalAveragePooling1D=/*#__PURE__*/function(_pooling_GlobalPoolin){_inherits(pooling_GlobalAveragePooling1D,_pooling_GlobalPoolin);var _super136=_createSuper(pooling_GlobalAveragePooling1D);function pooling_GlobalAveragePooling1D(args){_classCallCheck2(this,pooling_GlobalAveragePooling1D);return _super136.call(this,args||{});}_createClass(pooling_GlobalAveragePooling1D,[{key:\"call\",value:function call(inputs,kwargs){return Object(dist[\"tidy\"])(function(){var input=getExactlyOneTensor(inputs);return dist[\"mean\"](input,1);});}}]);return pooling_GlobalAveragePooling1D;}(pooling_GlobalPooling1D);/** @nocollapse */pooling_GlobalAveragePooling1D.className='GlobalAveragePooling1D';dist[\"serialization\"].registerClass(pooling_GlobalAveragePooling1D);var pooling_GlobalMaxPooling1D=/*#__PURE__*/function(_pooling_GlobalPoolin2){_inherits(pooling_GlobalMaxPooling1D,_pooling_GlobalPoolin2);var _super137=_createSuper(pooling_GlobalMaxPooling1D);function pooling_GlobalMaxPooling1D(args){_classCallCheck2(this,pooling_GlobalMaxPooling1D);return _super137.call(this,args||{});}_createClass(pooling_GlobalMaxPooling1D,[{key:\"call\",value:function call(inputs,kwargs){return Object(dist[\"tidy\"])(function(){var input=getExactlyOneTensor(inputs);return dist[\"max\"](input,1);});}}]);return pooling_GlobalMaxPooling1D;}(pooling_GlobalPooling1D);/** @nocollapse */pooling_GlobalMaxPooling1D.className='GlobalMaxPooling1D';dist[\"serialization\"].registerClass(pooling_GlobalMaxPooling1D);/**\r\n * Abstract class for different global pooling 2D layers.\r\n */var pooling_GlobalPooling2D=/*#__PURE__*/function(_topology_Layer32){_inherits(pooling_GlobalPooling2D,_topology_Layer32);var _super138=_createSuper(pooling_GlobalPooling2D);function pooling_GlobalPooling2D(args){var _this225;_classCallCheck2(this,pooling_GlobalPooling2D);_this225=_super138.call(this,args);_this225.dataFormat=args.dataFormat==null?'channelsLast':args.dataFormat;checkDataFormat(_this225.dataFormat);_this225.inputSpec=[new InputSpec({ndim:4})];return _this225;}_createClass(pooling_GlobalPooling2D,[{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=inputShape;if(this.dataFormat==='channelsLast'){return[inputShape[0],inputShape[3]];}else{return[inputShape[0],inputShape[1]];}}},{key:\"call\",value:function call(inputs,kwargs){throw new NotImplementedError();}},{key:\"getConfig\",value:function getConfig(){var config={dataFormat:this.dataFormat};var baseConfig=_get(_getPrototypeOf(pooling_GlobalPooling2D.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return pooling_GlobalPooling2D;}(topology_Layer);var pooling_GlobalAveragePooling2D=/*#__PURE__*/function(_pooling_GlobalPoolin3){_inherits(pooling_GlobalAveragePooling2D,_pooling_GlobalPoolin3);var _super139=_createSuper(pooling_GlobalAveragePooling2D);function pooling_GlobalAveragePooling2D(){_classCallCheck2(this,pooling_GlobalAveragePooling2D);return _super139.apply(this,arguments);}_createClass(pooling_GlobalAveragePooling2D,[{key:\"call\",value:function call(inputs,kwargs){var _this226=this;return Object(dist[\"tidy\"])(function(){var input=getExactlyOneTensor(inputs);if(_this226.dataFormat==='channelsLast'){return dist[\"mean\"](input,[1,2]);}else{return dist[\"mean\"](input,[2,3]);}});}}]);return pooling_GlobalAveragePooling2D;}(pooling_GlobalPooling2D);/** @nocollapse */pooling_GlobalAveragePooling2D.className='GlobalAveragePooling2D';dist[\"serialization\"].registerClass(pooling_GlobalAveragePooling2D);var pooling_GlobalMaxPooling2D=/*#__PURE__*/function(_pooling_GlobalPoolin4){_inherits(pooling_GlobalMaxPooling2D,_pooling_GlobalPoolin4);var _super140=_createSuper(pooling_GlobalMaxPooling2D);function pooling_GlobalMaxPooling2D(){_classCallCheck2(this,pooling_GlobalMaxPooling2D);return _super140.apply(this,arguments);}_createClass(pooling_GlobalMaxPooling2D,[{key:\"call\",value:function call(inputs,kwargs){var _this227=this;return Object(dist[\"tidy\"])(function(){var input=getExactlyOneTensor(inputs);if(_this227.dataFormat==='channelsLast'){return dist[\"max\"](input,[1,2]);}else{return dist[\"max\"](input,[2,3]);}});}}]);return pooling_GlobalMaxPooling2D;}(pooling_GlobalPooling2D);/** @nocollapse */pooling_GlobalMaxPooling2D.className='GlobalMaxPooling2D';dist[\"serialization\"].registerClass(pooling_GlobalMaxPooling2D);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\r\n */ /**\r\n * Standardize `apply()` args to a single list of tensor inputs.\r\n *\r\n * When running a model loaded from file, the input tensors `initialState` and\r\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\r\n * dedicated kwargs fields. `inputs` consists of\r\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\r\n * case.\r\n * This method makes sure that arguments are\r\n * separated and that `initialState` and `constants` are `Array`s of tensors\r\n * (or None).\r\n *\r\n * @param inputs Tensor or `Array` of  tensors.\r\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\r\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\r\n * @returns An object consisting of\r\n *   inputs: A tensor.\r\n *   initialState: `Array` of tensors or `null`.\r\n *   constants: `Array` of tensors or `null`.\r\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\r\n *   `constants` is provided.\r\n */function standardizeArgs(inputs,initialState,constants,numConstants){if(Array.isArray(inputs)){if(initialState!=null||constants!=null){throw new ValueError('When inputs is an array, neither initialState or constants '+'should be provided');}if(numConstants!=null){constants=inputs.slice(inputs.length-numConstants,inputs.length);inputs=inputs.slice(0,inputs.length-numConstants);}if(inputs.length>1){initialState=inputs.slice(1,inputs.length);}inputs=inputs[0];}function toListOrNull(x){if(x==null||Array.isArray(x)){return x;}else{return[x];}}initialState=toListOrNull(initialState);constants=toListOrNull(constants);return{inputs:inputs,initialState:initialState,constants:constants};}/**\r\n * Iterates over the time dimension of a tensor.\r\n *\r\n * @param stepFunction RNN step function.\r\n *   Parameters:\r\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\r\n *       representing input for the batch of samples at a certain time step.\r\n *     states: an Array of tensors.\r\n *   Returns:\r\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\r\n *     newStates: list of tensors, same length and shapes as `states`. The first\r\n *       state in the list must be the output tensor at the previous timestep.\r\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\r\n *   least 3D).\r\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\r\n *   dimension), containing the initial values of the states used in the step\r\n *   function.\r\n * @param goBackwards If `true`, do the iteration over the time dimension in\r\n *   reverse order and return the reversed sequence.\r\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\r\n *   every element that is masked.\r\n * @param constants An Array of constant values passed at each step.\r\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\r\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\r\n * @param needPerStepOutputs Whether the per-step outputs are to be\r\n *   concatenated into a single tensor and returned (as the second return\r\n *   value). Default: `false`. This arg is included so that the relatively\r\n *   expensive concatenation of the stepwise outputs can be omitted unless\r\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\r\n *   `returnSequence` is `true`.)\r\n * @returns An Array: `[lastOutput, outputs, newStates]`.\r\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\r\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\r\n *     `output[s, t]` is the output of the step function at time `t` for sample\r\n *     `s`. This return value is provided if and only if the\r\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\r\n *     return value will be `undefined`.\r\n *   newStates: Array of tensors, latest states returned by the step function,\r\n *      of shape `(samples, ...)`.\r\n * @throws ValueError If input dimension is less than 3.\r\n *\r\n * TODO(nielsene): This needs to be tidy-ed.\r\n */function rnn(stepFunction,inputs,initialStates){var goBackwards=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var mask=arguments.length>4?arguments[4]:undefined;var constants=arguments.length>5?arguments[5]:undefined;var unroll=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;var needPerStepOutputs=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;return dist[\"tidy\"](function(){var ndim=inputs.shape.length;if(ndim<3){throw new ValueError(\"Input should be at least 3D, but is \".concat(ndim,\"D.\"));}// Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n// ...].\nvar axes=[1,0].concat(range(2,ndim));inputs=dist[\"transpose\"](inputs,axes);if(constants!=null){throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support '+'constants yet.');}// Porting Note: the unroll option is ignored by the imperative backend.\nif(unroll){console.warn('Backend rnn(): the unroll = true option is not applicable to the '+'imperative deeplearn.js backend.');}if(mask!=null){mask=mask.asType('bool').asType('float32');if(mask.rank===ndim-1){mask=dist[\"expandDims\"](mask,-1);}mask=dist[\"transpose\"](mask,axes);}if(goBackwards){inputs=dist[\"reverse\"](inputs,0);if(mask!=null){mask=dist[\"reverse\"](mask,0);}}// Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n//   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n//   use the usual TypeScript control flow to iterate over the time steps in\n//   the inputs.\n// Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n// outputs.\n//   This is not idiomatic in TypeScript. The info regarding whether we are\n//   in a learning (i.e., training) phase for RNN is passed in a different\n//   way.\nvar perStepOutputs=[];var lastOutput;var states=initialStates;var timeSteps=inputs.shape[0];var perStepInputs=dist[\"unstack\"](inputs);var perStepMasks;if(mask!=null){perStepMasks=dist[\"unstack\"](mask);}var _loop22=function _loop22(t){var currentInput=perStepInputs[t];var stepOutputs=dist[\"tidy\"](function(){return stepFunction(currentInput,states);});if(mask==null){lastOutput=stepOutputs[0];states=stepOutputs[1];}else{var maskedOutputs=dist[\"tidy\"](function(){var stepMask=perStepMasks[t];var negStepMask=dist[\"onesLike\"](stepMask).sub(stepMask);// TODO(cais): Would tfc.where() be better for performance?\nvar output=stepOutputs[0].mul(stepMask).add(states[0].mul(negStepMask));var newStates=states.map(function(state,i){return stepOutputs[1][i].mul(stepMask).add(state.mul(negStepMask));});return{output:output,newStates:newStates};});lastOutput=maskedOutputs.output;states=maskedOutputs.newStates;}if(needPerStepOutputs){perStepOutputs.push(lastOutput);}};for(var t=0;t<timeSteps;++t){_loop22(t);}var outputs;if(needPerStepOutputs){var axis=1;outputs=dist[\"stack\"](perStepOutputs,axis);}return[lastOutput,outputs,states];});}var recurrent_RNN=/*#__PURE__*/function(_topology_Layer33){_inherits(recurrent_RNN,_topology_Layer33);var _super141=_createSuper(recurrent_RNN);function recurrent_RNN(args){var _this228;_classCallCheck2(this,recurrent_RNN);_this228=_super141.call(this,args);var cell;if(args.cell==null){throw new ValueError('cell property is missing for the constructor of RNN.');}else if(Array.isArray(args.cell)){cell=new recurrent_StackedRNNCells({cells:args.cell});}else{cell=args.cell;}if(cell.stateSize==null){throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of '+'integers, one integer per RNN state).');}_this228.cell=cell;_this228.returnSequences=args.returnSequences==null?false:args.returnSequences;_this228.returnState=args.returnState==null?false:args.returnState;_this228.goBackwards=args.goBackwards==null?false:args.goBackwards;_this228._stateful=args.stateful==null?false:args.stateful;_this228.unroll=args.unroll==null?false:args.unroll;_this228.supportsMasking=true;_this228.inputSpec=[new InputSpec({ndim:3})];_this228.stateSpec=null;_this228.states_=null;// TODO(cais): Add constantsSpec and numConstants.\n_this228.numConstants=null;// TODO(cais): Look into the use of initial_state in the kwargs of the\n//   constructor.\n_this228.keptStates=[];return _this228;}// Porting Note: This is the equivalent of `RNN.states` property getter in\n//   PyKeras.\n_createClass(recurrent_RNN,[{key:\"getStates\",value:function getStates(){if(this.states_==null){var numStates=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return range(0,numStates).map(function(x){return null;});}else{return this.states_;}}// Porting Note: This is the equivalent of the `RNN.states` property setter in\n//   PyKeras.\n},{key:\"setStates\",value:function setStates(states){this.states_=states;}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){if(isArrayOfShapes(inputShape)){inputShape=inputShape[0];}inputShape=inputShape;// TODO(cais): Remove the casting once stacked RNN cells become supported.\nvar stateSize=this.cell.stateSize;if(!Array.isArray(stateSize)){stateSize=[stateSize];}var outputDim=stateSize[0];var outputShape;if(this.returnSequences){outputShape=[inputShape[0],inputShape[1],outputDim];}else{outputShape=[inputShape[0],outputDim];}if(this.returnState){var stateShape=[];var _iterator108=_createForOfIteratorHelper(stateSize),_step108;try{for(_iterator108.s();!(_step108=_iterator108.n()).done;){var dim=_step108.value;stateShape.push([inputShape[0],dim]);}}catch(err){_iterator108.e(err);}finally{_iterator108.f();}return[outputShape].concat(stateShape);}else{return outputShape;}}},{key:\"computeMask\",value:function computeMask(inputs,mask){var _this229=this;return dist[\"tidy\"](function(){if(Array.isArray(mask)){mask=mask[0];}var outputMask=_this229.returnSequences?mask:null;if(_this229.returnState){var stateMask=_this229.states.map(function(s){return null;});return[outputMask].concat(stateMask);}else{return outputMask;}});}/**\r\n     * Get the current state tensors of the RNN.\r\n     *\r\n     * If the state hasn't been set, return an array of `null`s of the correct\r\n     * length.\r\n     */},{key:\"states\",get:function get(){if(this.states_==null){var numStates=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;var output=[];for(var i=0;i<numStates;++i){output.push(null);}return output;}else{return this.states_;}},set:function set(s){this.states_=s;}},{key:\"build\",value:function build(inputShape){// Note inputShape will be an Array of Shapes of initial states and\n// constants if these are passed in apply().\nvar constantShape=null;if(this.numConstants!=null){throw new NotImplementedError('Constants support is not implemented in RNN yet.');}if(isArrayOfShapes(inputShape)){inputShape=inputShape[0];}inputShape=inputShape;var batchSize=this.stateful?inputShape[0]:null;var inputDim=inputShape[inputShape.length-1];this.inputSpec[0]=new InputSpec({shape:[batchSize,null,inputDim]});// Allow cell (if RNNCell Layer) to build before we set or validate\n// stateSpec.\nvar stepInputShape=[inputShape[0]].concat(inputShape.slice(2));if(constantShape!=null){throw new NotImplementedError('Constants support is not implemented in RNN yet.');}else{this.cell.build(stepInputShape);}// Set or validate stateSpec.\nvar stateSize;if(Array.isArray(this.cell.stateSize)){stateSize=this.cell.stateSize;}else{stateSize=[this.cell.stateSize];}if(this.stateSpec!=null){if(!dist[\"util\"].arraysEqual(this.stateSpec.map(function(spec){return spec.shape[spec.shape.length-1];}),stateSize)){throw new ValueError(\"An initialState was passed that is not compatible with \"+\"cell.stateSize. Received stateSpec=\".concat(this.stateSpec,\"; \")+\"However cell.stateSize is \".concat(this.cell.stateSize));}}else{this.stateSpec=stateSize.map(function(dim){return new InputSpec({shape:[null,dim]});});}if(this.stateful){this.resetStates();}}/**\r\n     * Reset the state tensors of the RNN.\r\n     *\r\n     * If the `states` argument is `undefined` or `null`, will set the\r\n     * state tensor(s) of the RNN to all-zero tensors of the appropriate\r\n     * shape(s).\r\n     *\r\n     * If `states` is provided, will set the state tensors of the RNN to its\r\n     * value.\r\n     *\r\n     * @param states Optional externally-provided initial states.\r\n     * @param training Whether this call is done during training. For stateful\r\n     *   RNNs, this affects whether the old states are kept or discarded. In\r\n     *   particular, if `training` is `true`, the old states will be kept so\r\n     *   that subsequent backpropgataion through time (BPTT) may work properly.\r\n     *   Else, the old states will be discarded.\r\n     */},{key:\"resetStates\",value:function resetStates(states){var _this230=this;var training=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;Object(dist[\"tidy\"])(function(){if(!_this230.stateful){throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');}var batchSize=_this230.inputSpec[0].shape[0];if(batchSize==null){throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify '+'the batch size of your input tensors: \\n'+'- If using a Sequential model, specify the batch size by '+'passing a `batchInputShape` option to your first layer.\\n'+'- If using the functional API, specify the batch size by '+'passing a `batchShape` option to your Input layer.');}// Initialize state if null.\nif(_this230.states_==null){if(Array.isArray(_this230.cell.stateSize)){_this230.states_=_this230.cell.stateSize.map(function(dim){return dist[\"zeros\"]([batchSize,dim]);});}else{_this230.states_=[dist[\"zeros\"]([batchSize,_this230.cell.stateSize])];}}else if(states==null){// Dispose old state tensors.\ndist[\"dispose\"](_this230.states_);// For stateful RNNs, fully dispose kept old states.\nif(_this230.keptStates!=null){dist[\"dispose\"](_this230.keptStates);_this230.keptStates=[];}if(Array.isArray(_this230.cell.stateSize)){_this230.states_=_this230.cell.stateSize.map(function(dim){return dist[\"zeros\"]([batchSize,dim]);});}else{_this230.states_[0]=dist[\"zeros\"]([batchSize,_this230.cell.stateSize]);}}else{if(!Array.isArray(states)){states=[states];}if(states.length!==_this230.states_.length){throw new ValueError(\"Layer \".concat(_this230.name,\" expects \").concat(_this230.states_.length,\" state(s), \")+\"but it received \".concat(states.length,\" state value(s). Input \")+\"received: \".concat(states));}if(training===true){// Store old state tensors for complete disposal later, i.e., during\n// the next no-arg call to this method. We do not dispose the old\n// states immediately because that BPTT (among other things) require\n// them.\n_this230.keptStates.push(_this230.states_.slice());}else{dist[\"dispose\"](_this230.states_);}for(var index=0;index<_this230.states_.length;++index){var value=states[index];var dim=Array.isArray(_this230.cell.stateSize)?_this230.cell.stateSize[index]:_this230.cell.stateSize;var expectedShape=[batchSize,dim];if(!dist[\"util\"].arraysEqual(value.shape,expectedShape)){throw new ValueError(\"State \".concat(index,\" is incompatible with layer \").concat(_this230.name,\": \")+\"expected shape=\".concat(expectedShape,\", received shape=\").concat(value.shape));}_this230.states_[index]=value;}}_this230.states_=_this230.states_.map(function(state){return dist[\"keep\"](state.clone());});});}},{key:\"apply\",value:function apply(inputs,kwargs){// TODO(cais): Figure out whether initialState is in kwargs or inputs.\nvar initialState=kwargs==null?null:kwargs['initialState'];var constants=kwargs==null?null:kwargs['constants'];if(kwargs==null){kwargs={};}var standardized=standardizeArgs(inputs,initialState,constants,this.numConstants);inputs=standardized.inputs;initialState=standardized.initialState;constants=standardized.constants;// If any of `initial_state` or `constants` are specified and are\n// `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n// the input_spec to include them.\nvar additionalInputs=[];var additionalSpecs=[];if(initialState!=null){kwargs['initialState']=initialState;additionalInputs=additionalInputs.concat(initialState);this.stateSpec=[];var _iterator109=_createForOfIteratorHelper(initialState),_step109;try{for(_iterator109.s();!(_step109=_iterator109.n()).done;){var state=_step109.value;this.stateSpec.push(new InputSpec({shape:state.shape}));}// TODO(cais): Use the following instead.\n// this.stateSpec = initialState.map(state => new InputSpec({shape:\n// state.shape}));\n}catch(err){_iterator109.e(err);}finally{_iterator109.f();}additionalSpecs=additionalSpecs.concat(this.stateSpec);}if(constants!=null){kwargs['constants']=constants;additionalInputs=additionalInputs.concat(constants);// TODO(cais): Add this.constantsSpec.\nthis.numConstants=constants.length;}var isTensor=additionalInputs[0]instanceof topology_SymbolicTensor;if(isTensor){// Compute full input spec, including state and constants.\nvar fullInput=[inputs].concat(additionalInputs);var fullInputSpec=this.inputSpec.concat(additionalSpecs);// Perform the call with temporarily replaced inputSpec.\nvar originalInputSpec=this.inputSpec;this.inputSpec=fullInputSpec;var output=_get(_getPrototypeOf(recurrent_RNN.prototype),\"apply\",this).call(this,fullInput,kwargs);this.inputSpec=originalInputSpec;return output;}else{return _get(_getPrototypeOf(recurrent_RNN.prototype),\"apply\",this).call(this,inputs,kwargs);}}// tslint:disable-next-line:no-any\n},{key:\"call\",value:function call(inputs,kwargs){var _this231=this;// Input shape: `[samples, time (padded with zeros), input_dim]`.\n// Note that the .build() method of subclasses **must** define\n// this.inputSpec and this.stateSpec owith complete input shapes.\nreturn Object(dist[\"tidy\"])(function(){var mask=kwargs==null?null:kwargs['mask'];var training=kwargs==null?null:kwargs['training'];var initialState=kwargs==null?null:kwargs['initialState'];inputs=getExactlyOneTensor(inputs);if(initialState==null){if(_this231.stateful){initialState=_this231.states_;}else{initialState=_this231.getInitialState(inputs);}}var numStates=Array.isArray(_this231.cell.stateSize)?_this231.cell.stateSize.length:1;if(initialState.length!==numStates){throw new ValueError(\"RNN Layer has \".concat(numStates,\" state(s) but was passed \")+\"\".concat(initialState.length,\" initial state(s).\"));}if(_this231.unroll){console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');}var cellCallKwargs={training:training};// TODO(cais): Add support for constants.\nvar step=function step(inputs,states){// `inputs` and `states` are concatenated to form a single `Array` of\n// `tf.Tensor`s as the input to `cell.call()`.\nvar outputs=_this231.cell.call([inputs].concat(states),cellCallKwargs);// Marshall the return value into output and new states.\nreturn[outputs[0],outputs.slice(1)];};// TODO(cais): Add support for constants.\nvar rnnOutputs=rnn(step,inputs,initialState,_this231.goBackwards,mask,null,_this231.unroll,_this231.returnSequences);var lastOutput=rnnOutputs[0];var outputs=rnnOutputs[1];var states=rnnOutputs[2];if(_this231.stateful){_this231.resetStates(states,training);}var output=_this231.returnSequences?outputs:lastOutput;// TODO(cais): Porperty set learning phase flag.\nif(_this231.returnState){return[output].concat(states);}else{return output;}});}},{key:\"getInitialState\",value:function getInitialState(inputs){var _this232=this;return Object(dist[\"tidy\"])(function(){// Build an all-zero tensor of shape [samples, outputDim].\n// [Samples, timeSteps, inputDim].\nvar initialState=dist[\"zeros\"](inputs.shape);// [Samples].\ninitialState=dist[\"sum\"](initialState,[1,2]);initialState=expandDims(initialState);// [Samples, 1].\nif(Array.isArray(_this232.cell.stateSize)){return _this232.cell.stateSize.map(function(dim){return dim>1?tile(initialState,[1,dim]):initialState;});}else{return _this232.cell.stateSize>1?[tile(initialState,[1,_this232.cell.stateSize])]:[initialState];}});}},{key:\"trainableWeights\",get:function get(){if(!this.trainable){return[];}// Porting Note: In TypeScript, `this` is always an instance of `Layer`.\nreturn this.cell.trainableWeights;}},{key:\"nonTrainableWeights\",get:function get(){// Porting Note: In TypeScript, `this` is always an instance of `Layer`.\nif(!this.trainable){return this.cell.weights;}return this.cell.nonTrainableWeights;}},{key:\"setFastWeightInitDuringBuild\",value:function setFastWeightInitDuringBuild(value){_get(_getPrototypeOf(recurrent_RNN.prototype),\"setFastWeightInitDuringBuild\",this).call(this,value);if(this.cell!=null){this.cell.setFastWeightInitDuringBuild(value);}}},{key:\"getConfig\",value:function getConfig(){var config={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};if(this.numConstants!=null){config['numConstants']=this.numConstants;}var cellConfig=this.cell.getConfig();config['cell']={'className':this.cell.getClassName(),'config':cellConfig};var baseConfig=_get(_getPrototypeOf(recurrent_RNN.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var cellConfig=config['cell'];var cell=deserialize(cellConfig,customObjects);return new cls(Object.assign(config,{cell:cell}));}}]);return recurrent_RNN;}(topology_Layer);/** @nocollapse */recurrent_RNN.className='RNN';dist[\"serialization\"].registerClass(recurrent_RNN);/**\r\n * An RNNCell layer.\r\n */ // Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/** @doc {heading: 'Layers', subheading: 'Classes'} */var recurrent_RNNCell=/*#__PURE__*/function(_topology_Layer34){_inherits(recurrent_RNNCell,_topology_Layer34);var _super142=_createSuper(recurrent_RNNCell);function recurrent_RNNCell(){_classCallCheck2(this,recurrent_RNNCell);return _super142.apply(this,arguments);}return recurrent_RNNCell;}(topology_Layer);var recurrent_SimpleRNNCell=/*#__PURE__*/function(_recurrent_RNNCell){_inherits(recurrent_SimpleRNNCell,_recurrent_RNNCell);var _super143=_createSuper(recurrent_SimpleRNNCell);function recurrent_SimpleRNNCell(args){var _this233;_classCallCheck2(this,recurrent_SimpleRNNCell);_this233=_super143.call(this,args);_this233.DEFAULT_ACTIVATION='tanh';_this233.DEFAULT_KERNEL_INITIALIZER='glorotNormal';_this233.DEFAULT_RECURRENT_INITIALIZER='orthogonal';_this233.DEFAULT_BIAS_INITIALIZER='zeros';_this233.units=args.units;assertPositiveInteger(_this233.units,\"units\");_this233.activation=getActivation(args.activation==null?_this233.DEFAULT_ACTIVATION:args.activation);_this233.useBias=args.useBias==null?true:args.useBias;_this233.kernelInitializer=getInitializer(args.kernelInitializer||_this233.DEFAULT_KERNEL_INITIALIZER);_this233.recurrentInitializer=getInitializer(args.recurrentInitializer||_this233.DEFAULT_RECURRENT_INITIALIZER);_this233.biasInitializer=getInitializer(args.biasInitializer||_this233.DEFAULT_BIAS_INITIALIZER);_this233.kernelRegularizer=getRegularizer(args.kernelRegularizer);_this233.recurrentRegularizer=getRegularizer(args.recurrentRegularizer);_this233.biasRegularizer=getRegularizer(args.biasRegularizer);_this233.kernelConstraint=getConstraint(args.kernelConstraint);_this233.recurrentConstraint=getConstraint(args.recurrentConstraint);_this233.biasConstraint=getConstraint(args.biasConstraint);_this233.dropout=min([1,max([0,args.dropout==null?0:args.dropout])]);_this233.recurrentDropout=min([1,max([0,args.recurrentDropout==null?0:args.recurrentDropout])]);_this233.stateSize=_this233.units;_this233.dropoutMask=null;_this233.recurrentDropoutMask=null;return _this233;}_createClass(recurrent_SimpleRNNCell,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);// TODO(cais): Use regularizer.\nthis.kernel=this.addWeight('kernel',[inputShape[inputShape.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);this.recurrentKernel=this.addWeight('recurrent_kernel',[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,true,this.recurrentConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.units],null,this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}else{this.bias=null;}this.built=true;}// Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n//   `inputs` and `states`. Here, the two tensors are combined into an\n//   `Tensor[]` Array as the first input argument.\n//   Similarly, PyKeras' equivalent of this method returns two values:\n//    `output` and `[output]`. Here the two are combined into one length-2\n//    `Tensor[]`, consisting of `output` repeated.\n},{key:\"call\",value:function call(inputs,kwargs){var _this234=this;return Object(dist[\"tidy\"])(function(){inputs=inputs;if(inputs.length!==2){throw new ValueError(\"SimpleRNNCell expects 2 input Tensors, got \".concat(inputs.length,\".\"));}var prevOutput=inputs[1];inputs=inputs[0];var training=kwargs['training']==null?false:kwargs['training'];if(0<_this234.dropout&&_this234.dropout<1&&_this234.dropoutMask==null){_this234.dropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](inputs);},_this234.dropout,training);}if(0<_this234.recurrentDropout&&_this234.recurrentDropout<1&&_this234.recurrentDropoutMask==null){_this234.recurrentDropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](prevOutput);},_this234.recurrentDropout,training);}var h;var dpMask=_this234.dropoutMask;var recDpMask=_this234.recurrentDropoutMask;if(dpMask!=null){h=dot(dist[\"mul\"](inputs,dpMask),_this234.kernel.read());}else{h=dot(inputs,_this234.kernel.read());}if(_this234.bias!=null){h=biasAdd(h,_this234.bias.read());}if(recDpMask!=null){prevOutput=dist[\"mul\"](prevOutput,recDpMask);}var output=dist[\"add\"](h,dot(prevOutput,_this234.recurrentKernel.read()));if(_this234.activation!=null){output=_this234.activation.apply(output);}// TODO(cais): Properly set learning phase on output tensor?\nreturn[output,output];});}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};var baseConfig=_get(_getPrototypeOf(recurrent_SimpleRNNCell.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return recurrent_SimpleRNNCell;}(recurrent_RNNCell);/** @nocollapse */recurrent_SimpleRNNCell.className='SimpleRNNCell';dist[\"serialization\"].registerClass(recurrent_SimpleRNNCell);var recurrent_SimpleRNN=/*#__PURE__*/function(_recurrent_RNN){_inherits(recurrent_SimpleRNN,_recurrent_RNN);var _super144=_createSuper(recurrent_SimpleRNN);function recurrent_SimpleRNN(args){_classCallCheck2(this,recurrent_SimpleRNN);args.cell=new recurrent_SimpleRNNCell(args);return _super144.call(this,args);// TODO(cais): Add activityRegularizer.\n}_createClass(recurrent_SimpleRNN,[{key:\"call\",value:function call(inputs,kwargs){var _this235=this;return Object(dist[\"tidy\"])(function(){if(_this235.cell.dropoutMask!=null){dist[\"dispose\"](_this235.cell.dropoutMask);_this235.cell.dropoutMask=null;}if(_this235.cell.recurrentDropoutMask!=null){dist[\"dispose\"](_this235.cell.recurrentDropoutMask);_this235.cell.recurrentDropoutMask=null;}var mask=kwargs==null?null:kwargs['mask'];var training=kwargs==null?null:kwargs['training'];var initialState=kwargs==null?null:kwargs['initialState'];return _get(_getPrototypeOf(recurrent_SimpleRNN.prototype),\"call\",_this235).call(_this235,inputs,{mask:mask,training:training,initialState:initialState});});}// TODO(cais): Research possibility of refactoring out the tedious all\n//   the getters that delegate to `this.cell` below.\n},{key:\"units\",get:function get(){return this.cell.units;}},{key:\"activation\",get:function get(){return this.cell.activation;}},{key:\"useBias\",get:function get(){return this.cell.useBias;}},{key:\"kernelInitializer\",get:function get(){return this.cell.kernelInitializer;}},{key:\"recurrentInitializer\",get:function get(){return this.cell.recurrentInitializer;}},{key:\"biasInitializer\",get:function get(){return this.cell.biasInitializer;}},{key:\"kernelRegularizer\",get:function get(){return this.cell.kernelRegularizer;}},{key:\"recurrentRegularizer\",get:function get(){return this.cell.recurrentRegularizer;}},{key:\"biasRegularizer\",get:function get(){return this.cell.biasRegularizer;}},{key:\"kernelConstraint\",get:function get(){return this.cell.kernelConstraint;}},{key:\"recurrentConstraint\",get:function get(){return this.cell.recurrentConstraint;}},{key:\"biasConstraint\",get:function get(){return this.cell.biasConstraint;}},{key:\"dropout\",get:function get(){return this.cell.dropout;}},{key:\"recurrentDropout\",get:function get(){return this.cell.recurrentDropout;}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};var baseConfig=_get(_getPrototypeOf(recurrent_SimpleRNN.prototype),\"getConfig\",this).call(this);delete baseConfig['cell'];Object.assign(config,baseConfig);return config;}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){return new cls(config);}}]);return recurrent_SimpleRNN;}(recurrent_RNN);/** @nocollapse */recurrent_SimpleRNN.className='SimpleRNN';dist[\"serialization\"].registerClass(recurrent_SimpleRNN);var recurrent_GRUCell=/*#__PURE__*/function(_recurrent_RNNCell2){_inherits(recurrent_GRUCell,_recurrent_RNNCell2);var _super145=_createSuper(recurrent_GRUCell);function recurrent_GRUCell(args){var _this236;_classCallCheck2(this,recurrent_GRUCell);_this236=_super145.call(this,args);_this236.DEFAULT_ACTIVATION='tanh';_this236.DEFAULT_RECURRENT_ACTIVATION='hardSigmoid';_this236.DEFAULT_KERNEL_INITIALIZER='glorotNormal';_this236.DEFAULT_RECURRENT_INITIALIZER='orthogonal';_this236.DEFAULT_BIAS_INITIALIZER='zeros';if(args.resetAfter){throw new ValueError(\"GRUCell does not support reset_after parameter set to true.\");}_this236.units=args.units;assertPositiveInteger(_this236.units,'units');_this236.activation=getActivation(args.activation===undefined?_this236.DEFAULT_ACTIVATION:args.activation);_this236.recurrentActivation=getActivation(args.recurrentActivation===undefined?_this236.DEFAULT_RECURRENT_ACTIVATION:args.recurrentActivation);_this236.useBias=args.useBias==null?true:args.useBias;_this236.kernelInitializer=getInitializer(args.kernelInitializer||_this236.DEFAULT_KERNEL_INITIALIZER);_this236.recurrentInitializer=getInitializer(args.recurrentInitializer||_this236.DEFAULT_RECURRENT_INITIALIZER);_this236.biasInitializer=getInitializer(args.biasInitializer||_this236.DEFAULT_BIAS_INITIALIZER);_this236.kernelRegularizer=getRegularizer(args.kernelRegularizer);_this236.recurrentRegularizer=getRegularizer(args.recurrentRegularizer);_this236.biasRegularizer=getRegularizer(args.biasRegularizer);_this236.kernelConstraint=getConstraint(args.kernelConstraint);_this236.recurrentConstraint=getConstraint(args.recurrentConstraint);_this236.biasConstraint=getConstraint(args.biasConstraint);_this236.dropout=min([1,max([0,args.dropout==null?0:args.dropout])]);_this236.recurrentDropout=min([1,max([0,args.recurrentDropout==null?0:args.recurrentDropout])]);_this236.implementation=args.implementation;_this236.stateSize=_this236.units;_this236.dropoutMask=null;_this236.recurrentDropoutMask=null;return _this236;}_createClass(recurrent_GRUCell,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);var inputDim=inputShape[inputShape.length-1];this.kernel=this.addWeight('kernel',[inputDim,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);this.recurrentKernel=this.addWeight('recurrent_kernel',[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,true,this.recurrentConstraint);if(this.useBias){this.bias=this.addWeight('bias',[this.units*3],null,this.biasInitializer,this.biasRegularizer,true,this.biasConstraint);}else{this.bias=null;}// Porting Notes: Unlike the PyKeras implementation, we perform slicing\n//   of the weights and bias in the call() method, at execution time.\nthis.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this237=this;return Object(dist[\"tidy\"])(function(){inputs=inputs;if(inputs.length!==2){throw new ValueError(\"GRUCell expects 2 input Tensors (inputs, h, c), got \"+\"\".concat(inputs.length,\".\"));}var training=kwargs['training']==null?false:kwargs['training'];var hTMinus1=inputs[1];// Previous memory state.\ninputs=inputs[0];// Note: For superior performance, TensorFlow.js always uses\n// implementation 2, regardless of the actual value of\n// config.implementation.\nif(0<_this237.dropout&&_this237.dropout<1&&_this237.dropoutMask==null){_this237.dropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](inputs);},_this237.dropout,training,3);}if(0<_this237.recurrentDropout&&_this237.recurrentDropout<1&&_this237.recurrentDropoutMask==null){_this237.recurrentDropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](hTMinus1);},_this237.recurrentDropout,training,3);}var dpMask=_this237.dropoutMask;var recDpMask=_this237.recurrentDropoutMask;var z;var r;var hh;if(0<_this237.dropout&&_this237.dropout<1){inputs=dist[\"mul\"](inputs,dpMask[0]);}var matrixX=dot(inputs,_this237.kernel.read());if(_this237.useBias){matrixX=biasAdd(matrixX,_this237.bias.read());}if(0<_this237.recurrentDropout&&_this237.recurrentDropout<1){hTMinus1=dist[\"mul\"](hTMinus1,recDpMask[0]);}var recurrentKernelValue=_this237.recurrentKernel.read();var _dist$split=dist[\"split\"](recurrentKernelValue,[2*_this237.units,_this237.units],recurrentKernelValue.rank-1),_dist$split2=_slicedToArray(_dist$split,2),rk1=_dist$split2[0],rk2=_dist$split2[1];var matrixInner=dot(hTMinus1,rk1);var _dist$split3=dist[\"split\"](matrixX,3,matrixX.rank-1),_dist$split4=_slicedToArray(_dist$split3,3),xZ=_dist$split4[0],xR=_dist$split4[1],xH=_dist$split4[2];var _dist$split5=dist[\"split\"](matrixInner,2,matrixInner.rank-1),_dist$split6=_slicedToArray(_dist$split5,2),recurrentZ=_dist$split6[0],recurrentR=_dist$split6[1];z=_this237.recurrentActivation.apply(dist[\"add\"](xZ,recurrentZ));r=_this237.recurrentActivation.apply(dist[\"add\"](xR,recurrentR));var recurrentH=dot(dist[\"mul\"](r,hTMinus1),rk2);hh=_this237.activation.apply(dist[\"add\"](xH,recurrentH));var h=dist[\"add\"](dist[\"mul\"](z,hTMinus1),dist[\"mul\"](dist[\"add\"](1,dist[\"neg\"](z)),hh));// TODO(cais): Add use_learning_phase flag properly.\nreturn[h,h];});}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:false};var baseConfig=_get(_getPrototypeOf(recurrent_GRUCell.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return recurrent_GRUCell;}(recurrent_RNNCell);/** @nocollapse */recurrent_GRUCell.className='GRUCell';dist[\"serialization\"].registerClass(recurrent_GRUCell);var recurrent_GRU=/*#__PURE__*/function(_recurrent_RNN2){_inherits(recurrent_GRU,_recurrent_RNN2);var _super146=_createSuper(recurrent_GRU);function recurrent_GRU(args){_classCallCheck2(this,recurrent_GRU);if(args.implementation===0){console.warn('`implementation=0` has been deprecated, and now defaults to '+'`implementation=1`. Please update your layer call.');}args.cell=new recurrent_GRUCell(args);return _super146.call(this,args);// TODO(cais): Add activityRegularizer.\n}_createClass(recurrent_GRU,[{key:\"call\",value:function call(inputs,kwargs){var _this238=this;return Object(dist[\"tidy\"])(function(){if(_this238.cell.dropoutMask!=null){dist[\"dispose\"](_this238.cell.dropoutMask);_this238.cell.dropoutMask=null;}if(_this238.cell.recurrentDropoutMask!=null){dist[\"dispose\"](_this238.cell.recurrentDropoutMask);_this238.cell.recurrentDropoutMask=null;}var mask=kwargs==null?null:kwargs['mask'];var training=kwargs==null?null:kwargs['training'];var initialState=kwargs==null?null:kwargs['initialState'];return _get(_getPrototypeOf(recurrent_GRU.prototype),\"call\",_this238).call(_this238,inputs,{mask:mask,training:training,initialState:initialState});});}},{key:\"units\",get:function get(){return this.cell.units;}},{key:\"activation\",get:function get(){return this.cell.activation;}},{key:\"recurrentActivation\",get:function get(){return this.cell.recurrentActivation;}},{key:\"useBias\",get:function get(){return this.cell.useBias;}},{key:\"kernelInitializer\",get:function get(){return this.cell.kernelInitializer;}},{key:\"recurrentInitializer\",get:function get(){return this.cell.recurrentInitializer;}},{key:\"biasInitializer\",get:function get(){return this.cell.biasInitializer;}},{key:\"kernelRegularizer\",get:function get(){return this.cell.kernelRegularizer;}},{key:\"recurrentRegularizer\",get:function get(){return this.cell.recurrentRegularizer;}},{key:\"biasRegularizer\",get:function get(){return this.cell.biasRegularizer;}},{key:\"kernelConstraint\",get:function get(){return this.cell.kernelConstraint;}},{key:\"recurrentConstraint\",get:function get(){return this.cell.recurrentConstraint;}},{key:\"biasConstraint\",get:function get(){return this.cell.biasConstraint;}},{key:\"dropout\",get:function get(){return this.cell.dropout;}},{key:\"recurrentDropout\",get:function get(){return this.cell.recurrentDropout;}},{key:\"implementation\",get:function get(){return this.cell.implementation;}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:false};var baseConfig=_get(_getPrototypeOf(recurrent_GRU.prototype),\"getConfig\",this).call(this);delete baseConfig['cell'];Object.assign(config,baseConfig);return config;}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){if(config['implmentation']===0){config['implementation']=1;}return new cls(config);}}]);return recurrent_GRU;}(recurrent_RNN);/** @nocollapse */recurrent_GRU.className='GRU';dist[\"serialization\"].registerClass(recurrent_GRU);var recurrent_LSTMCell=/*#__PURE__*/function(_recurrent_RNNCell3){_inherits(recurrent_LSTMCell,_recurrent_RNNCell3);var _super147=_createSuper(recurrent_LSTMCell);function recurrent_LSTMCell(args){var _this239;_classCallCheck2(this,recurrent_LSTMCell);_this239=_super147.call(this,args);_this239.DEFAULT_ACTIVATION='tanh';_this239.DEFAULT_RECURRENT_ACTIVATION='hardSigmoid';_this239.DEFAULT_KERNEL_INITIALIZER='glorotNormal';_this239.DEFAULT_RECURRENT_INITIALIZER='orthogonal';_this239.DEFAULT_BIAS_INITIALIZER='zeros';_this239.units=args.units;assertPositiveInteger(_this239.units,'units');_this239.activation=getActivation(args.activation===undefined?_this239.DEFAULT_ACTIVATION:args.activation);_this239.recurrentActivation=getActivation(args.recurrentActivation===undefined?_this239.DEFAULT_RECURRENT_ACTIVATION:args.recurrentActivation);_this239.useBias=args.useBias==null?true:args.useBias;_this239.kernelInitializer=getInitializer(args.kernelInitializer||_this239.DEFAULT_KERNEL_INITIALIZER);_this239.recurrentInitializer=getInitializer(args.recurrentInitializer||_this239.DEFAULT_RECURRENT_INITIALIZER);_this239.biasInitializer=getInitializer(args.biasInitializer||_this239.DEFAULT_BIAS_INITIALIZER);_this239.unitForgetBias=args.unitForgetBias;_this239.kernelRegularizer=getRegularizer(args.kernelRegularizer);_this239.recurrentRegularizer=getRegularizer(args.recurrentRegularizer);_this239.biasRegularizer=getRegularizer(args.biasRegularizer);_this239.kernelConstraint=getConstraint(args.kernelConstraint);_this239.recurrentConstraint=getConstraint(args.recurrentConstraint);_this239.biasConstraint=getConstraint(args.biasConstraint);_this239.dropout=min([1,max([0,args.dropout==null?0:args.dropout])]);_this239.recurrentDropout=min([1,max([0,args.recurrentDropout==null?0:args.recurrentDropout])]);_this239.implementation=args.implementation;_this239.stateSize=[_this239.units,_this239.units];_this239.dropoutMask=null;_this239.recurrentDropoutMask=null;return _this239;}_createClass(recurrent_LSTMCell,[{key:\"build\",value:function build(inputShape){var _a;inputShape=getExactlyOneShape(inputShape);var inputDim=inputShape[inputShape.length-1];this.kernel=this.addWeight('kernel',[inputDim,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,true,this.kernelConstraint);this.recurrentKernel=this.addWeight('recurrent_kernel',[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,true,this.recurrentConstraint);var biasInitializer;if(this.useBias){if(this.unitForgetBias){var capturedBiasInit=this.biasInitializer;var capturedUnits=this.units;biasInitializer=new(_a=/*#__PURE__*/function(_initializers_Initial10){_inherits(CustomInit,_initializers_Initial10);var _super148=_createSuper(CustomInit);function CustomInit(){_classCallCheck2(this,CustomInit);return _super148.apply(this,arguments);}_createClass(CustomInit,[{key:\"apply\",value:function apply(shape,dtype){// TODO(cais): More informative variable names?\nvar bI=capturedBiasInit.apply([capturedUnits]);var bF=new initializers_Ones().apply([capturedUnits]);var bCAndH=capturedBiasInit.apply([capturedUnits*2]);return concatAlongFirstAxis(concatAlongFirstAxis(bI,bF),bCAndH);}}]);return CustomInit;}(initializers_Initializer),/** @nocollapse */_a.className='CustomInit',_a)();}else{biasInitializer=this.biasInitializer;}this.bias=this.addWeight('bias',[this.units*4],null,biasInitializer,this.biasRegularizer,true,this.biasConstraint);}else{this.bias=null;}// Porting Notes: Unlike the PyKeras implementation, we perform slicing\n//   of the weights and bias in the call() method, at execution time.\nthis.built=true;}},{key:\"call\",value:function call(inputs,kwargs){var _this240=this;return Object(dist[\"tidy\"])(function(){var training=kwargs['training']==null?false:kwargs['training'];inputs=inputs;if(inputs.length!==3){throw new ValueError(\"LSTMCell expects 3 input Tensors (inputs, h, c), got \"+\"\".concat(inputs.length,\".\"));}var hTMinus1=inputs[1];// Previous memory state.\nvar cTMinus1=inputs[2];// Previous carry state.\ninputs=inputs[0];if(0<_this240.dropout&&_this240.dropout<1&&_this240.dropoutMask==null){_this240.dropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](inputs);},_this240.dropout,training,4);}if(0<_this240.recurrentDropout&&_this240.recurrentDropout<1&&_this240.recurrentDropoutMask==null){_this240.recurrentDropoutMask=generateDropoutMask(function(){return dist[\"onesLike\"](hTMinus1);},_this240.recurrentDropout,training,4);}var dpMask=_this240.dropoutMask;var recDpMask=_this240.recurrentDropoutMask;// Note: For superior performance, TensorFlow.js always uses\n// implementation 2 regardless of the actual value of\n// config.implementation.\nvar i;var f;var c;var o;if(0<_this240.dropout&&_this240.dropout<1){inputs=dist[\"mul\"](inputs,dpMask[0]);}var z=dot(inputs,_this240.kernel.read());if(0<_this240.recurrentDropout&&_this240.recurrentDropout<1){hTMinus1=dist[\"mul\"](hTMinus1,recDpMask[0]);}z=dist[\"add\"](z,dot(hTMinus1,_this240.recurrentKernel.read()));if(_this240.useBias){z=biasAdd(z,_this240.bias.read());}var _dist$split7=dist[\"split\"](z,4,z.rank-1),_dist$split8=_slicedToArray(_dist$split7,4),z0=_dist$split8[0],z1=_dist$split8[1],z2=_dist$split8[2],z3=_dist$split8[3];i=_this240.recurrentActivation.apply(z0);f=_this240.recurrentActivation.apply(z1);c=dist[\"add\"](dist[\"mul\"](f,cTMinus1),dist[\"mul\"](i,_this240.activation.apply(z2)));o=_this240.recurrentActivation.apply(z3);var h=dist[\"mul\"](o,_this240.activation.apply(c));// TODO(cais): Add use_learning_phase flag properly.\nreturn[h,h,c];});}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};var baseConfig=_get(_getPrototypeOf(recurrent_LSTMCell.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}}]);return recurrent_LSTMCell;}(recurrent_RNNCell);/** @nocollapse */recurrent_LSTMCell.className='LSTMCell';dist[\"serialization\"].registerClass(recurrent_LSTMCell);var recurrent_LSTM=/*#__PURE__*/function(_recurrent_RNN3){_inherits(recurrent_LSTM,_recurrent_RNN3);var _super149=_createSuper(recurrent_LSTM);function recurrent_LSTM(args){_classCallCheck2(this,recurrent_LSTM);if(args.implementation===0){console.warn('`implementation=0` has been deprecated, and now defaults to '+'`implementation=1`. Please update your layer call.');}args.cell=new recurrent_LSTMCell(args);return _super149.call(this,args);// TODO(cais): Add activityRegularizer.\n}_createClass(recurrent_LSTM,[{key:\"call\",value:function call(inputs,kwargs){var _this241=this;return Object(dist[\"tidy\"])(function(){if(_this241.cell.dropoutMask!=null){dist[\"dispose\"](_this241.cell.dropoutMask);_this241.cell.dropoutMask=null;}if(_this241.cell.recurrentDropoutMask!=null){dist[\"dispose\"](_this241.cell.recurrentDropoutMask);_this241.cell.recurrentDropoutMask=null;}var mask=kwargs==null?null:kwargs['mask'];var training=kwargs==null?null:kwargs['training'];var initialState=kwargs==null?null:kwargs['initialState'];return _get(_getPrototypeOf(recurrent_LSTM.prototype),\"call\",_this241).call(_this241,inputs,{mask:mask,training:training,initialState:initialState});});}},{key:\"units\",get:function get(){return this.cell.units;}},{key:\"activation\",get:function get(){return this.cell.activation;}},{key:\"recurrentActivation\",get:function get(){return this.cell.recurrentActivation;}},{key:\"useBias\",get:function get(){return this.cell.useBias;}},{key:\"kernelInitializer\",get:function get(){return this.cell.kernelInitializer;}},{key:\"recurrentInitializer\",get:function get(){return this.cell.recurrentInitializer;}},{key:\"biasInitializer\",get:function get(){return this.cell.biasInitializer;}},{key:\"unitForgetBias\",get:function get(){return this.cell.unitForgetBias;}},{key:\"kernelRegularizer\",get:function get(){return this.cell.kernelRegularizer;}},{key:\"recurrentRegularizer\",get:function get(){return this.cell.recurrentRegularizer;}},{key:\"biasRegularizer\",get:function get(){return this.cell.biasRegularizer;}},{key:\"kernelConstraint\",get:function get(){return this.cell.kernelConstraint;}},{key:\"recurrentConstraint\",get:function get(){return this.cell.recurrentConstraint;}},{key:\"biasConstraint\",get:function get(){return this.cell.biasConstraint;}},{key:\"dropout\",get:function get(){return this.cell.dropout;}},{key:\"recurrentDropout\",get:function get(){return this.cell.recurrentDropout;}},{key:\"implementation\",get:function get(){return this.cell.implementation;}},{key:\"getConfig\",value:function getConfig(){var config={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};var baseConfig=_get(_getPrototypeOf(recurrent_LSTM.prototype),\"getConfig\",this).call(this);delete baseConfig['cell'];Object.assign(config,baseConfig);return config;}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){if(config['implmentation']===0){config['implementation']=1;}return new cls(config);}}]);return recurrent_LSTM;}(recurrent_RNN);/** @nocollapse */recurrent_LSTM.className='LSTM';dist[\"serialization\"].registerClass(recurrent_LSTM);var recurrent_StackedRNNCells=/*#__PURE__*/function(_recurrent_RNNCell4){_inherits(recurrent_StackedRNNCells,_recurrent_RNNCell4);var _super150=_createSuper(recurrent_StackedRNNCells);function recurrent_StackedRNNCells(args){var _this242;_classCallCheck2(this,recurrent_StackedRNNCells);_this242=_super150.call(this,args);_this242.cells=args.cells;return _this242;}_createClass(recurrent_StackedRNNCells,[{key:\"stateSize\",get:function get(){// States are a flat list in reverse order of the cell stack.\n// This allows perserving the requirement `stack.statesize[0] ===\n// outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n// assuming one LSTM has states `[h, c]`.\nvar stateSize=[];var _iterator110=_createForOfIteratorHelper(this.cells.slice().reverse()),_step110;try{for(_iterator110.s();!(_step110=_iterator110.n()).done;){var cell=_step110.value;if(Array.isArray(cell.stateSize)){stateSize.push.apply(stateSize,_toConsumableArray2(cell.stateSize));}else{stateSize.push(cell.stateSize);}}}catch(err){_iterator110.e(err);}finally{_iterator110.f();}return stateSize;}},{key:\"call\",value:function call(inputs,kwargs){var _this243=this;return Object(dist[\"tidy\"])(function(){inputs=inputs;var states=inputs.slice(1);// Recover per-cell states.\nvar nestedStates=[];var _iterator111=_createForOfIteratorHelper(_this243.cells.slice().reverse()),_step111;try{for(_iterator111.s();!(_step111=_iterator111.n()).done;){var _cell=_step111.value;if(Array.isArray(_cell.stateSize)){nestedStates.push(states.splice(0,_cell.stateSize.length));}else{nestedStates.push(states.splice(0,1));}}}catch(err){_iterator111.e(err);}finally{_iterator111.f();}nestedStates.reverse();// Call the cells in order and store the returned states.\nvar newNestedStates=[];var callInputs;for(var i=0;i<_this243.cells.length;++i){var cell=_this243.cells[i];states=nestedStates[i];// TODO(cais): Take care of constants.\nif(i===0){callInputs=[inputs[0]].concat(states);}else{callInputs=[callInputs[0]].concat(states);}callInputs=cell.call(callInputs,kwargs);newNestedStates.push(callInputs.slice(1));}// Format the new states as a flat list in reverse cell order.\nstates=[];var _iterator112=_createForOfIteratorHelper(newNestedStates.slice().reverse()),_step112;try{for(_iterator112.s();!(_step112=_iterator112.n()).done;){var _states;var cellStates=_step112.value;(_states=states).push.apply(_states,_toConsumableArray2(cellStates));}}catch(err){_iterator112.e(err);}finally{_iterator112.f();}return[callInputs[0]].concat(states);});}},{key:\"build\",value:function build(inputShape){if(isArrayOfShapes(inputShape)){// TODO(cais): Take care of input constants.\n// const constantShape = inputShape.slice(1);\ninputShape=inputShape[0];}inputShape=inputShape;var outputDim;this.cells.forEach(function(cell,i){nameScope(\"RNNCell_\".concat(i),function(){// TODO(cais): Take care of input constants.\ncell.build(inputShape);if(Array.isArray(cell.stateSize)){outputDim=cell.stateSize[0];}else{outputDim=cell.stateSize;}inputShape=[inputShape[0],outputDim];});});this.built=true;}},{key:\"getConfig\",value:function getConfig(){var cellConfigs=[];var _iterator113=_createForOfIteratorHelper(this.cells),_step113;try{for(_iterator113.s();!(_step113=_iterator113.n()).done;){var cell=_step113.value;cellConfigs.push({'className':cell.getClassName(),'config':cell.getConfig()});}}catch(err){_iterator113.e(err);}finally{_iterator113.f();}var config={'cells':cellConfigs};var baseConfig=_get(_getPrototypeOf(recurrent_StackedRNNCells.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}/** @nocollapse */},{key:\"trainableWeights\",get:function get(){if(!this.trainable){return[];}var weights=[];var _iterator114=_createForOfIteratorHelper(this.cells),_step114;try{for(_iterator114.s();!(_step114=_iterator114.n()).done;){var cell=_step114.value;weights.push.apply(weights,_toConsumableArray2(cell.trainableWeights));}}catch(err){_iterator114.e(err);}finally{_iterator114.f();}return weights;}},{key:\"nonTrainableWeights\",get:function get(){var weights=[];var _iterator115=_createForOfIteratorHelper(this.cells),_step115;try{for(_iterator115.s();!(_step115=_iterator115.n()).done;){var _cell2=_step115.value;weights.push.apply(weights,_toConsumableArray2(_cell2.nonTrainableWeights));}}catch(err){_iterator115.e(err);}finally{_iterator115.f();}if(!this.trainable){var trainableWeights=[];var _iterator116=_createForOfIteratorHelper(this.cells),_step116;try{for(_iterator116.s();!(_step116=_iterator116.n()).done;){var cell=_step116.value;trainableWeights.push.apply(trainableWeights,_toConsumableArray2(cell.trainableWeights));}}catch(err){_iterator116.e(err);}finally{_iterator116.f();}return trainableWeights.concat(weights);}return weights;}/**\r\n     * Retrieve the weights of a the model.\r\n     *\r\n     * @returns A flat `Array` of `tf.Tensor`s.\r\n     */},{key:\"getWeights\",value:function getWeights(){var weights=[];var _iterator117=_createForOfIteratorHelper(this.cells),_step117;try{for(_iterator117.s();!(_step117=_iterator117.n()).done;){var cell=_step117.value;weights.push.apply(weights,_toConsumableArray2(cell.weights));}}catch(err){_iterator117.e(err);}finally{_iterator117.f();}return batchGetValue(weights);}/**\r\n     * Set the weights of the model.\r\n     *\r\n     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\r\n     *     the output of `getWeights()`.\r\n     */},{key:\"setWeights\",value:function setWeights(weights){var tuples=[];var _iterator118=_createForOfIteratorHelper(this.cells),_step118;try{for(_iterator118.s();!(_step118=_iterator118.n()).done;){var cell=_step118.value;var numParams=cell.weights.length;var inputWeights=weights.splice(numParams);for(var i=0;i<cell.weights.length;++i){tuples.push([cell.weights[i],inputWeights[i]]);}}}catch(err){_iterator118.e(err);}finally{_iterator118.f();}batchSetValue(tuples);}}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var cells=[];var _iterator119=_createForOfIteratorHelper(config['cells']),_step119;try{for(_iterator119.s();!(_step119=_iterator119.n()).done;){var cellConfig=_step119.value;cells.push(deserialize(cellConfig,customObjects));}}catch(err){_iterator119.e(err);}finally{_iterator119.f();}return new cls({cells:cells});}}]);return recurrent_StackedRNNCells;}(recurrent_RNNCell);/** @nocollapse */recurrent_StackedRNNCells.className='StackedRNNCells';dist[\"serialization\"].registerClass(recurrent_StackedRNNCells);function generateDropoutMask(ones,rate){var training=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var count=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;function droppedInputs(){return dropout(ones(),rate);}if(count>1){var mask=[];for(var i=0;i<count;i++){mask.push(inTrainPhase(droppedInputs,ones,training));}return mask.map(function(m){return dist[\"keep\"](m.clone());});}else{return dist[\"keep\"](inTrainPhase(droppedInputs,ones,training).clone());}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /**\r\n * Layers that augment the functionality of a base layer.\r\n */ /**\r\n * Abstract wrapper base class.\r\n *\r\n * Wrappers take another layer and augment it in various ways.\r\n * Do not use this class as a layer, it is only an abstract base class.\r\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\r\n */var wrappers_Wrapper=/*#__PURE__*/function(_topology_Layer35){_inherits(wrappers_Wrapper,_topology_Layer35);var _super151=_createSuper(wrappers_Wrapper);function wrappers_Wrapper(args){var _this244;_classCallCheck2(this,wrappers_Wrapper);// Porting Note: In PyKeras, `self.layer` is set prior to the calling\n//   `super()`. But we can't do that here due to TypeScript's restriction.\n//   See: https://github.com/Microsoft/TypeScript/issues/8277\n//   As a result, we have to add checks in `get trainable()` and\n//   `set trainable()` below in order to prevent using `this.layer` when\n//   its value is `undefined`. The super constructor does use the getter\n//   and the setter of `this.layer`.\n_this244=_super151.call(this,args);_this244.layer=args.layer;return _this244;}_createClass(wrappers_Wrapper,[{key:\"build\",value:function build(inputShape){this.built=true;}// TODO(cais): Implement activityRegularizer getter.\n},{key:\"trainable\",get:function get(){// Porting Note: the check of `this.layer` here is necessary due to the\n//   way the `constructor` of this class is written (see Porting Note\n//   above).\nif(this.layer!=null){return this.layer.trainable;}else{return false;}},set:function set(value){// Porting Note: the check of `this.layer` here is necessary due to the\n//   way the `constructor` of this class is written (see Porting Note\n//   above).\nif(this.layer!=null){this.layer.trainable=value;}}},{key:\"trainableWeights\",get:function get(){return this.layer.trainableWeights;}// TODO(cais): Implement setter for trainableWeights.\n},{key:\"nonTrainableWeights\",get:function get(){return this.layer.nonTrainableWeights;}// TODO(cais): Implement setter for nonTrainableWeights.\n},{key:\"updates\",get:function get(){// tslint:disable-next-line:no-any\nreturn this.layer._updates;}// TODO(cais): Implement getUpdatesFor().\n},{key:\"losses\",get:function get(){return this.layer.losses;}// TODO(cais): Implement getLossesFor().\n},{key:\"getWeights\",value:function getWeights(){return this.layer.getWeights();}},{key:\"setWeights\",value:function setWeights(weights){this.layer.setWeights(weights);}},{key:\"getConfig\",value:function getConfig(){var config={'layer':{'className':this.layer.getClassName(),'config':this.layer.getConfig()}};var baseConfig=_get(_getPrototypeOf(wrappers_Wrapper.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}},{key:\"setFastWeightInitDuringBuild\",value:function setFastWeightInitDuringBuild(value){_get(_getPrototypeOf(wrappers_Wrapper.prototype),\"setFastWeightInitDuringBuild\",this).call(this,value);if(this.layer!=null){this.layer.setFastWeightInitDuringBuild(value);}}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var customObjects=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var layerConfig=config['layer'];var layer=deserialize(layerConfig,customObjects);delete config['layer'];var newConfig={layer:layer};Object.assign(newConfig,config);return new cls(newConfig);}}]);return wrappers_Wrapper;}(topology_Layer);var wrappers_TimeDistributed=/*#__PURE__*/function(_wrappers_Wrapper){_inherits(wrappers_TimeDistributed,_wrappers_Wrapper);var _super152=_createSuper(wrappers_TimeDistributed);function wrappers_TimeDistributed(args){var _this245;_classCallCheck2(this,wrappers_TimeDistributed);_this245=_super152.call(this,args);_this245.supportsMasking=true;return _this245;}_createClass(wrappers_TimeDistributed,[{key:\"build\",value:function build(inputShape){inputShape=getExactlyOneShape(inputShape);if(inputShape.length<3){throw new ValueError(\"TimeDistributed layer expects an input shape >= 3D, but received \"+\"input shape \".concat(JSON.stringify(inputShape)));}this.inputSpec=[{shape:inputShape}];var childInputShape=[inputShape[0]].concat(inputShape.slice(2));if(!this.layer.built){this.layer.build(childInputShape);this.layer.built=true;}_get(_getPrototypeOf(wrappers_TimeDistributed.prototype),\"build\",this).call(this,inputShape);}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){inputShape=getExactlyOneShape(inputShape);var childInputShape=[inputShape[0]].concat(inputShape.slice(2));var childOutputShape=this.layer.computeOutputShape(childInputShape);var timesteps=inputShape[1];return[childOutputShape[0],timesteps].concat(childOutputShape.slice(1));}},{key:\"call\",value:function call(inputs,kwargs){var _this246=this;return Object(dist[\"tidy\"])(function(){// TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\ninputs=getExactlyOneTensor(inputs);// Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n// values. Hence the inputs can't have an undetermined first (batch)\n// dimension, which is why we always use the K.rnn approach here.\nvar step=function step(inputs,states){// TODO(cais): Add useLearningPhase.\n// NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n//   some cases (e.g., `layer` is a `Sequential` instance), which is\n//   why `getExactlyOneTensor` is used below.\nvar output=getExactlyOneTensor(_this246.layer.call(inputs,kwargs));return[output,[]];};var rnnOutputs=rnn(step,inputs,[],false/* goBackwards */,null/* mask */,null/* constants */,false/* unroll */,true/* needPerStepOutputs */);var y=rnnOutputs[1];// TODO(cais): Add activity regularization.\n// TODO(cais): Add useLearningPhase.\nreturn y;});}}]);return wrappers_TimeDistributed;}(wrappers_Wrapper);/** @nocollapse */wrappers_TimeDistributed.className='TimeDistributed';dist[\"serialization\"].registerClass(wrappers_TimeDistributed);function checkBidirectionalMergeMode(value){checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES,'BidirectionalMergeMode',value);}var DEFAULT_BIDIRECTIONAL_MERGE_MODE='concat';var wrappers_Bidirectional=/*#__PURE__*/function(_wrappers_Wrapper2){_inherits(wrappers_Bidirectional,_wrappers_Wrapper2);var _super153=_createSuper(wrappers_Bidirectional);function wrappers_Bidirectional(args){var _this247;_classCallCheck2(this,wrappers_Bidirectional);_this247=_super153.call(this,args);// Note: When creating `this.forwardLayer`, the original Layer object\n//   (`config.layer`) ought to be cloned. This is why we call\n//   `getConfig()` followed by `deserialize()`. Without this cloning,\n//   the layer names saved during serialization will incorrectly contain\n//   the 'forward_' prefix. In Python Keras, this is done using\n//   `copy.copy` (shallow copy), which does not have a simple equivalent\n//   in JavaScript. JavaScript's `Object.assign()` does not copy\n//   methods.\nvar layerConfig=args.layer.getConfig();var forwDict={};forwDict['className']=args.layer.getClassName();forwDict['config']=layerConfig;_this247.forwardLayer=deserialize(forwDict);layerConfig['goBackwards']=layerConfig['goBackwards']===true?false:true;var backDict={};backDict['className']=args.layer.getClassName();backDict['config']=layerConfig;_this247.backwardLayer=deserialize(backDict);_this247.forwardLayer.name='forward_'+_this247.forwardLayer.name;_this247.backwardLayer.name='backward_'+_this247.backwardLayer.name;_this247.mergeMode=args.mergeMode===undefined?DEFAULT_BIDIRECTIONAL_MERGE_MODE:args.mergeMode;checkBidirectionalMergeMode(_this247.mergeMode);if(args.weights){throw new NotImplementedError('weights support is not implemented for Bidirectional layer yet.');}_this247._stateful=args.layer.stateful;_this247.returnSequences=args.layer.returnSequences;_this247.returnState=args.layer.returnState;_this247.supportsMasking=true;_this247._trainable=true;_this247.inputSpec=args.layer.inputSpec;_this247.numConstants=null;return _this247;}_createClass(wrappers_Bidirectional,[{key:\"trainable\",get:function get(){return this._trainable;},set:function set(value){// Porting Note: the check of `this.layer` here is necessary due to the\n//   way the `constructor` of this class is written (see Porting Note\n//   above).\nthis._trainable=value;if(this.forwardLayer!=null){this.forwardLayer.trainable=value;}if(this.backwardLayer!=null){this.backwardLayer.trainable=value;}}},{key:\"getWeights\",value:function getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());}},{key:\"setWeights\",value:function setWeights(weights){var numWeights=weights.length;var numeightsOver2=Math.floor(numWeights/2);this.forwardLayer.setWeights(weights.slice(0,numeightsOver2));this.backwardLayer.setWeights(weights.slice(numeightsOver2));}},{key:\"computeOutputShape\",value:function computeOutputShape(inputShape){var layerShapes=this.forwardLayer.computeOutputShape(inputShape);if(!(Array.isArray(layerShapes)&&Array.isArray(layerShapes[0]))){layerShapes=[layerShapes];}layerShapes=layerShapes;var outputShape;var outputShapes;var stateShape;if(this.returnState){stateShape=layerShapes.slice(1);outputShape=layerShapes[0];}else{outputShape=layerShapes[0];}outputShape=outputShape;if(this.mergeMode==='concat'){outputShape[outputShape.length-1]*=2;outputShapes=[outputShape];}else if(this.mergeMode==null){outputShapes=[outputShape,outputShape.slice()];}else{outputShapes=[outputShape];}if(this.returnState){if(this.mergeMode==null){return outputShapes.concat(stateShape).concat(stateShape.slice());}return[outputShape].concat(stateShape).concat(stateShape.slice());}return singletonOrArray(outputShapes);}},{key:\"apply\",value:function apply(inputs,kwargs){var initialState=kwargs==null?null:kwargs['initialState'];var constants=kwargs==null?null:kwargs['constants'];if(kwargs==null){kwargs={};}var standardized=standardizeArgs(inputs,initialState,constants,this.numConstants);inputs=standardized.inputs;initialState=standardized.initialState;constants=standardized.constants;if(Array.isArray(inputs)){initialState=inputs.slice(1);inputs=inputs[0];}if((initialState==null||initialState.length===0)&&constants==null){return _get(_getPrototypeOf(wrappers_Bidirectional.prototype),\"apply\",this).call(this,inputs,kwargs);}var additionalInputs=[];var additionalSpecs=[];if(initialState!=null){var numStates=initialState.length;if(numStates%2>0){throw new ValueError('When passing `initialState` to a Bidrectional RNN, '+'the state should be an Array containing the states of '+'the underlying RNNs.');}kwargs['initialState']=initialState;additionalInputs.push.apply(additionalInputs,_toConsumableArray2(initialState));var stateSpecs=initialState.map(function(state){return new InputSpec({shape:state.shape});});this.forwardLayer.stateSpec=stateSpecs.slice(0,numStates/2);this.backwardLayer.stateSpec=stateSpecs.slice(numStates/2);additionalSpecs.push.apply(additionalSpecs,_toConsumableArray2(stateSpecs));}if(constants!=null){throw new NotImplementedError('Support for constants in Bidirectional layers is not '+'implemented yet.');}var isSymbolicTensor=additionalInputs[0]instanceof topology_SymbolicTensor;for(var _i83=0,_additionalInputs=additionalInputs;_i83<_additionalInputs.length;_i83++){var tensor=_additionalInputs[_i83];if(tensor instanceof topology_SymbolicTensor!==isSymbolicTensor){throw new ValueError('The initial state of a Bidirectional layer cannot be '+'specified as a mix of symbolic and non-symbolic tensors');}}if(isSymbolicTensor){// Compute the full input and specs, including the states.\nvar fullInput=[inputs].concat(additionalInputs);var fullInputSpec=this.inputSpec.concat(additionalSpecs);// Perform the call temporarily and replace inputSpec.\n// Note: with initial states symbolic calls and non-symbolic calls to\n// this method differ in how the initial states are passed. For\n// symbolic calls, the initial states are passed in the first arg, as\n// an Array of SymbolicTensors; for non-symbolic calls, they are\n// passed in the second arg as a part of the kwargs. Hence the need to\n// temporarily modify inputSpec here.\n// TODO(cais): Make refactoring so that this hacky code below is no\n// longer needed.\nvar originalInputSpec=this.inputSpec;this.inputSpec=fullInputSpec;var output=_get(_getPrototypeOf(wrappers_Bidirectional.prototype),\"apply\",this).call(this,fullInput,kwargs);this.inputSpec=originalInputSpec;return output;}else{return _get(_getPrototypeOf(wrappers_Bidirectional.prototype),\"apply\",this).call(this,inputs,kwargs);}}},{key:\"call\",value:function call(inputs,kwargs){var _this248=this;return Object(dist[\"tidy\"])(function(){var initialState=kwargs['initialState'];var y;var yRev;if(initialState==null){y=_this248.forwardLayer.call(inputs,kwargs);yRev=_this248.backwardLayer.call(inputs,kwargs);}else{var forwardState=initialState.slice(0,initialState.length/2);var backwardState=initialState.slice(initialState.length/2);y=_this248.forwardLayer.call(inputs,Object.assign(kwargs,{initialState:forwardState}));yRev=_this248.backwardLayer.call(inputs,Object.assign(kwargs,{initialState:backwardState}));}var states;if(_this248.returnState){if(Array.isArray(y)){states=y.slice(1).concat(yRev.slice(1));}else{}y=y[0];yRev=yRev[0];}if(_this248.returnSequences){yRev=dist[\"reverse\"](yRev,1);}var output;if(_this248.mergeMode==='concat'){output=concatenate([y,yRev]);}else if(_this248.mergeMode==='sum'){output=dist[\"add\"](y,yRev);}else if(_this248.mergeMode==='ave'){output=dist[\"mul\"](.5,dist[\"add\"](y,yRev));}else if(_this248.mergeMode==='mul'){output=dist[\"mul\"](y,yRev);}else if(_this248.mergeMode==null){output=[y,yRev];}// TODO(cais): Properly set learning phase.\nif(_this248.returnState){if(_this248.mergeMode==null){return output.concat(states);}return[output].concat(states);}return output;});}},{key:\"resetStates\",value:function resetStates(states){this.forwardLayer.resetStates();this.backwardLayer.resetStates();}},{key:\"build\",value:function build(inputShape){var _this249=this;nameScope(this.forwardLayer.name,function(){_this249.forwardLayer.build(inputShape);});nameScope(this.backwardLayer.name,function(){_this249.backwardLayer.build(inputShape);});this.built=true;}},{key:\"computeMask\",value:function computeMask(inputs,mask){if(Array.isArray(mask)){mask=mask[0];}var outputMask;if(this.returnSequences){if(this.mergeMode==null){outputMask=[mask,mask];}else{outputMask=mask;}}else{if(this.mergeMode==null){outputMask=[null,null];}else{outputMask=null;}}if(this.returnState){var states=this.forwardLayer.states;var stateMask=states.map(function(state){return null;});if(Array.isArray(outputMask)){return outputMask.concat(stateMask).concat(stateMask);}else{return[outputMask].concat(stateMask).concat(stateMask);}}else{return outputMask;}}},{key:\"trainableWeights\",get:function get(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);}},{key:\"nonTrainableWeights\",get:function get(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);}// TODO(cais): Implement constraints().\n},{key:\"setFastWeightInitDuringBuild\",value:function setFastWeightInitDuringBuild(value){_get(_getPrototypeOf(wrappers_Bidirectional.prototype),\"setFastWeightInitDuringBuild\",this).call(this,value);if(this.forwardLayer!=null){this.forwardLayer.setFastWeightInitDuringBuild(value);}if(this.backwardLayer!=null){this.backwardLayer.setFastWeightInitDuringBuild(value);}}},{key:\"getConfig\",value:function getConfig(){var config={'mergeMode':this.mergeMode};// TODO(cais): Add logic for `numConstants` once the property is added.\nvar baseConfig=_get(_getPrototypeOf(wrappers_Bidirectional.prototype),\"getConfig\",this).call(this);Object.assign(config,baseConfig);return config;}/** @nocollapse */}],[{key:\"fromConfig\",value:function fromConfig(cls,config){var rnnLayer=deserialize(config['layer']);delete config['layer'];// TODO(cais): Add logic for `numConstants` once the property is added.\nif(config['numConstants']!=null){throw new NotImplementedError(\"Deserialization of a Bidirectional layer with numConstants \"+\"present is not supported yet.\");}// tslint:disable-next-line:no-any\nvar newConfig=config;newConfig['layer']=rnnLayer;return new cls(newConfig);}}]);return wrappers_Bidirectional;}(wrappers_Wrapper);/** @nocollapse */wrappers_Bidirectional.className='Bidirectional';dist[\"serialization\"].registerClass(wrappers_Bidirectional);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// Input Layer.\n/**\r\n * An input layer is an entry point into a `tf.LayersModel`.\r\n *\r\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\r\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\r\n * should not be specified explicitly. However, it can be useful sometimes,\r\n * e.g., when constructing a sequential model from a subset of another\r\n * sequential model's layers. Like the code snippet below shows.\r\n *\r\n * ```js\r\n * // Define a model which simply adds two inputs.\r\n * const model1 = tf.sequential();\r\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\r\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\r\n * model1.summary();\r\n * model1.predict(tf.zeros([1, 4])).print();\r\n *\r\n * // Construct another model, reusing the second layer of `model1` while\r\n * // not using the first layer of `model1`. Note that you cannot add the second\r\n * // layer of `model` directly as the first layer of the new sequential model,\r\n * // because doing so will lead to an error related to the fact that the layer\r\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\r\n * // it to the new sequential model before adding the reused layer.\r\n * const model2 = tf.sequential();\r\n * // Use an inputShape that matches the input shape of `model1`'s second\r\n * // layer.\r\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\r\n * model2.add(model1.layers[1]);\r\n * model2.summary();\r\n * model2.predict(tf.zeros([1, 3])).print();\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */function exports_layers_inputLayer(args){return new input_layer_InputLayer(args);}// Advanced Activation Layers.\n/**\r\n * Exponetial Linear Unit (ELU).\r\n *\r\n * It follows:\r\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\r\n * `f(x) = x for x >= 0`.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n *\r\n * References:\r\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\r\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function exports_layers_elu(args){return new advanced_activations_ELU(args);}/**\r\n * Rectified Linear Unit activation function.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\r\n *   not include the sample axis) when using this layer as the first layer\r\n *   in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function reLU(args){return new advanced_activations_ReLU(args);}/**\r\n * Leaky version of a rectified linear unit.\r\n *\r\n * It allows a small gradient when the unit is not active:\r\n * `f(x) = alpha * x for x < 0.`\r\n * `f(x) = x for x >= 0.`\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function leakyReLU(args){return new advanced_activations_LeakyReLU(args);}/**\r\n * Parameterized version of a leaky rectified linear unit.\r\n *\r\n * It follows\r\n * `f(x) = alpha * x for x < 0.`\r\n * `f(x) = x for x >= 0.`\r\n * wherein `alpha` is a trainable weight.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function prelu(args){return new advanced_activations_PReLU(args);}/**\r\n * Softmax activation layer.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function softmax(args){return new advanced_activations_Softmax(args);}/**\r\n * Thresholded Rectified Linear Unit.\r\n *\r\n * It follows:\r\n * `f(x) = x for x > theta`,\r\n * `f(x) = 0 otherwise`.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as the input.\r\n *\r\n * References:\r\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\r\n * Features](http://arxiv.org/abs/1402.3337)\r\n */ /**\r\n * @doc {\r\n *   heading: 'Layers',\r\n *   subheading: 'Advanced Activation',\r\n *   namespace: 'layers'\r\n * }\r\n */function thresholdedReLU(args){return new advanced_activations_ThresholdedReLU(args);}// Convolutional Layers.\n/**\r\n * 1D convolution layer (e.g., temporal convolution).\r\n *\r\n * This layer creates a convolution kernel that is convolved\r\n * with the layer input over a single spatial (or temporal) dimension\r\n * to produce a tensor of outputs.\r\n *\r\n * If `use_bias` is True, a bias vector is created and added to the outputs.\r\n *\r\n * If `activation` is not `null`, it is applied to the outputs as well.\r\n *\r\n * When using this layer as the first layer in a model, provide an\r\n * `inputShape` argument `Array` or `null`.\r\n *\r\n * For example, `inputShape` would be:\r\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\r\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\r\n */function exports_layers_conv1d(args){return new convolutional_Conv1D(args);}/**\r\n * 2D convolution layer (e.g. spatial convolution over images).\r\n *\r\n * This layer creates a convolution kernel that is convolved\r\n * with the layer input to produce a tensor of outputs.\r\n *\r\n * If `useBias` is True, a bias vector is created and added to the outputs.\r\n *\r\n * If `activation` is not `null`, it is applied to the outputs as well.\r\n *\r\n * When using this layer as the first layer in a model,\r\n * provide the keyword argument `inputShape`\r\n * (Array of integers, does not include the sample axis),\r\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\r\n * in `dataFormat='channelsLast'`.\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function exports_layers_conv2d(args){return new convolutional_Conv2D(args);}/**\r\n * Transposed convolutional layer (sometimes called Deconvolution).\r\n *\r\n * The need for transposed convolutions generally arises\r\n * from the desire to use a transformation going in the opposite direction of\r\n * a normal convolution, i.e., from something that has the shape of the output\r\n * of some convolution to something that has the shape of its input while\r\n * maintaining a connectivity pattern that is compatible with said\r\n * convolution.\r\n *\r\n * When using this layer as the first layer in a model, provide the\r\n * configuration `inputShape` (`Array` of integers, does not include the\r\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\r\n * `dataFormat: 'channelsLast'`.\r\n *\r\n * Input shape:\r\n *   4D tensor with shape:\r\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\r\n *   or 4D tensor with shape\r\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\r\n *\r\n * Output shape:\r\n *   4D tensor with shape:\r\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\r\n * `'channelsFirst'`. or 4D tensor with shape:\r\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\r\n *\r\n * References:\r\n *   - [A guide to convolution arithmetic for deep\r\n * learning](https://arxiv.org/abs/1603.07285v1)\r\n *   - [Deconvolutional\r\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function conv2dTranspose(args){return new convolutional_Conv2DTranspose(args);}/**\r\n * 3D convolution layer (e.g. spatial convolution over volumes).\r\n *\r\n * This layer creates a convolution kernel that is convolved\r\n * with the layer input to produce a tensor of outputs.\r\n *\r\n * If `useBias` is True, a bias vector is created and added to the outputs.\r\n *\r\n * If `activation` is not `null`, it is applied to the outputs as well.\r\n *\r\n * When using this layer as the first layer in a model,\r\n * provide the keyword argument `inputShape`\r\n * (Array of integers, does not include the sample axis),\r\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\r\n * in `dataFormat='channelsLast'`.\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function exports_layers_conv3d(args){return new convolutional_Conv3D(args);}/**\r\n * Depthwise separable 2D convolution.\r\n *\r\n * Separable convolution consists of first performing\r\n * a depthwise spatial convolution\r\n * (which acts on each input channel separately)\r\n * followed by a pointwise convolution which mixes together the resulting\r\n * output channels. The `depthMultiplier` argument controls how many\r\n * output channels are generated per input channel in the depthwise step.\r\n *\r\n * Intuitively, separable convolutions can be understood as\r\n * a way to factorize a convolution kernel into two smaller kernels,\r\n * or as an extreme version of an Inception block.\r\n *\r\n * Input shape:\r\n *   4D tensor with shape:\r\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\r\n *   or 4D tensor with shape:\r\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\r\n *\r\n * Output shape:\r\n *   4D tensor with shape:\r\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\r\n *   or 4D tensor with shape:\r\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\r\n *     `rows` and `cols` values might have changed due to padding.\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function separableConv2d(args){return new SeparableConv2D(args);}/**\r\n * Cropping layer for 2D input (e.g., image).\r\n *\r\n * This layer can crop an input\r\n * at the top, bottom, left and right side of an image tensor.\r\n *\r\n * Input shape:\r\n *   4D tensor with shape:\r\n *   - If `dataFormat` is `\"channelsLast\"`:\r\n *     `[batch, rows, cols, channels]`\r\n *   - If `data_format` is `\"channels_first\"`:\r\n *     `[batch, channels, rows, cols]`.\r\n *\r\n * Output shape:\r\n *   4D with shape:\r\n *   - If `dataFormat` is `\"channelsLast\"`:\r\n *     `[batch, croppedRows, croppedCols, channels]`\r\n *    - If `dataFormat` is `\"channelsFirst\"`:\r\n *     `[batch, channels, croppedRows, croppedCols]`.\r\n *\r\n * Examples\r\n * ```js\r\n *\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\r\n *                                inputShape: [128, 128, 3]}));\r\n * //now output shape is [batch, 124, 124, 3]\r\n * ```\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function cropping2D(args){return new convolutional_Cropping2D(args);}/**\r\n * Upsampling layer for 2D inputs.\r\n *\r\n * Repeats the rows and columns of the data\r\n * by size[0] and size[1] respectively.\r\n *\r\n *\r\n * Input shape:\r\n *    4D tensor with shape:\r\n *     - If `dataFormat` is `\"channelsLast\"`:\r\n *         `[batch, rows, cols, channels]`\r\n *     - If `dataFormat` is `\"channelsFirst\"`:\r\n *        `[batch, channels, rows, cols]`\r\n *\r\n * Output shape:\r\n *     4D tensor with shape:\r\n *     - If `dataFormat` is `\"channelsLast\"`:\r\n *        `[batch, upsampledRows, upsampledCols, channels]`\r\n *     - If `dataFormat` is `\"channelsFirst\"`:\r\n *         `[batch, channels, upsampledRows, upsampledCols]`\r\n *\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function upSampling2d(args){return new convolutional_UpSampling2D(args);}// Convolutional(depthwise) Layers.\n/**\r\n * Depthwise separable 2D convolution.\r\n *\r\n * Depthwise Separable convolutions consists in performing just the first step\r\n * in a depthwise spatial convolution (which acts on each input channel\r\n * separately). The `depthMultplier` argument controls how many output channels\r\n * are generated per input channel in the depthwise step.\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\r\n */function exports_layers_depthwiseConv2d(args){return new convolutional_depthwise_DepthwiseConv2D(args);}// Basic Layers.\n/**\r\n * Applies an activation function to an output.\r\n *\r\n * This layer applies element-wise activation function.  Other layers, notably\r\n * `dense` can also apply activation functions.  Use this isolated activation\r\n * function to extract the values before and after the\r\n * activation. For instance:\r\n *\r\n * ```js\r\n * const input = tf.input({shape: [5]});\r\n * const denseLayer = tf.layers.dense({units: 1});\r\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\r\n *\r\n * // Obtain the output symbolic tensors by applying the layers in order.\r\n * const denseOutput = denseLayer.apply(input);\r\n * const activationOutput = activationLayer.apply(denseOutput);\r\n *\r\n * // Create the model based on the inputs.\r\n * const model = tf.model({\r\n *     inputs: input,\r\n *     outputs: [denseOutput, activationOutput]\r\n * });\r\n *\r\n * // Collect both outputs and print separately.\r\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\r\n * denseOut.print();\r\n * activationOut.print();\r\n * ```\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\r\n */function exports_layers_activation(args){return new core_Activation(args);}/**\r\n * Creates a dense (fully connected) layer.\r\n *\r\n * This layer implements the operation:\r\n *   `output = activation(dot(input, kernel) + bias)`\r\n *\r\n * `activation` is the element-wise activation function\r\n *   passed as the `activation` argument.\r\n *\r\n * `kernel` is a weights matrix created by the layer.\r\n *\r\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\r\n * is `true`).\r\n *\r\n * **Input shape:**\r\n *\r\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\r\n *\r\n *   The most common situation would be\r\n *   a 2D input with shape `(batchSize, inputDim)`.\r\n *\r\n * **Output shape:**\r\n *\r\n *   nD tensor with shape: `(batchSize, ..., units)`.\r\n *\r\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\r\n *   the output would have shape `(batchSize, units)`.\r\n *\r\n * Note: if the input to the layer has a rank greater than 2, then it is\r\n * flattened prior to the initial dot product with the kernel.\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function dense(args){return new core_Dense(args);}/**\r\n * Applies\r\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\r\n * the input.\r\n *\r\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\r\n * each update during training time, which helps prevent overfitting.\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function exports_layers_dropout(args){return new core_Dropout(args);}/**\r\n * Spatial 1D version of Dropout.\r\n *\r\n * This Layer type performs the same function as the Dropout layer, but it drops\r\n * entire 1D feature maps instead of individual elements. For example, if an\r\n * input example consists of 3 timesteps and the feature map for each timestep\r\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\r\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\r\n * elements of the 3rd timestep.\r\n *\r\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\r\n * case in early convolution layers), regular dropout will not regularize the\r\n * activation and will otherwise just result in merely an effective learning\r\n * rate decrease. In this case, `spatialDropout1d` will help promote\r\n * independence among feature maps and should be used instead.\r\n *\r\n * **Arguments:**\r\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\r\n *     to drop.\r\n *\r\n * **Input shape:**\r\n *   3D tensor with shape `(samples, timesteps, channels)`.\r\n *\r\n * **Output shape:**\r\n *   Same as the input shape.\r\n *\r\n * References:\r\n *   - [Efficient Object Localization Using Convolutional\r\n *      Networks](https://arxiv.org/abs/1411.4280)\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function spatialDropout1d(args){return new SpatialDropout1D(args);}/**\r\n * Flattens the input. Does not affect the batch size.\r\n *\r\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\r\n * 2D).\r\n *\r\n * For example:\r\n *\r\n * ```js\r\n * const input = tf.input({shape: [4, 3]});\r\n * const flattenLayer = tf.layers.flatten();\r\n * // Inspect the inferred output shape of the flatten layer, which\r\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\r\n * // flattening. (The 1st dimension is the undermined batch size.)\r\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function exports_layers_flatten(args){return new core_Flatten(args);}/**\r\n * Repeats the input n times in a new dimension.\r\n *\r\n * ```js\r\n *  const model = tf.sequential();\r\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\r\n *  const x = tf.tensor2d([[10, 20]]);\r\n *  // Use the model to do inference on a data point the model hasn't see\r\n *  model.predict(x).print();\r\n *  // output shape is now [batch, 2, 4]\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function repeatVector(args){return new core_RepeatVector(args);}/**\r\n * Reshapes an input to a certain shape.\r\n *\r\n * ```js\r\n * const input = tf.input({shape: [4, 3]});\r\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\r\n * // Inspect the inferred output shape of the Reshape layer, which\r\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\r\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\r\n * ```\r\n *\r\n * Input shape:\r\n *   Arbitrary, although all dimensions in the input shape must be fixed.\r\n *   Use the configuration `inputShape` when using this layer as the\r\n *   first layer in a model.\r\n *\r\n *\r\n * Output shape:\r\n *   [batchSize, targetShape[0], targetShape[1], ...,\r\n *    targetShape[targetShape.length - 1]].\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function reshape(args){return new core_Reshape(args);}/**\r\n * Permutes the dimensions of the input according to a given pattern.\r\n *\r\n * Useful for, e.g., connecting RNNs and convnets together.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.permute({\r\n *   dims: [2, 1],\r\n *   inputShape: [10, 64]\r\n * }));\r\n * console.log(model.outputShape);\r\n * // Now model's output shape is [null, 64, 10], where null is the\r\n * // unpermuted sample (batch) dimension.\r\n * ```\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the configuration field `inputShape` when using this\r\n *   layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\r\n *   permuted) according to the `dims` configuration of this layer.\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function permute(args){return new core_Permute(args);}/**\r\n * Maps positive integers (indices) into dense vectors of fixed size.\r\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\r\n *\r\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\r\n *\r\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\r\n * outputDim]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */function embedding(args){return new embeddings_Embedding(args);}// Merge Layers.\n/**\r\n * Layer that performs element-wise addition on an `Array` of inputs.\r\n *\r\n * It takes as input a list of tensors, all of the same shape, and returns a\r\n * single tensor (also of the same shape). The inputs are specified as an\r\n * `Array` when the `apply` method of the `Add` layer instance is called. For\r\n * example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const addLayer = tf.layers.add();\r\n * const sum = addLayer.apply([input1, input2]);\r\n * console.log(JSON.stringify(sum.shape));\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_add(args){return new merge_Add(args);}/**\r\n * Layer that performs element-wise averaging on an `Array` of inputs.\r\n *\r\n * It takes as input a list of tensors, all of the same shape, and returns a\r\n * single tensor (also of the same shape). For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const averageLayer = tf.layers.average();\r\n * const average = averageLayer.apply([input1, input2]);\r\n * console.log(JSON.stringify(average.shape));\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_average(args){return new merge_Average(args);}/**\r\n * Layer that concatenates an `Array` of inputs.\r\n *\r\n * It takes a list of tensors, all of the same shape except for the\r\n * concatenation axis, and returns a single tensor, the concatenation\r\n * of all inputs. For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 3]});\r\n * const concatLayer = tf.layers.concatenate();\r\n * const output = concatLayer.apply([input1, input2]);\r\n * console.log(JSON.stringify(output.shape));\r\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\r\n * // dimension. The last dimension (5) is the result of concatenating the\r\n * // last dimensions of the inputs (2 and 3).\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_concatenate(args){return new merge_Concatenate(args);}/**\r\n * Layer that computes the element-wise maximum an `Array` of inputs.\r\n *\r\n * It takes as input a list of tensors, all of the same shape and returns a\r\n * single tensor (also of the same shape). For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const maxLayer = tf.layers.maximum();\r\n * const max = maxLayer.apply([input1, input2]);\r\n * console.log(JSON.stringify(max.shape));\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_maximum(args){return new merge_Maximum(args);}/**\r\n * Layer that computes the element-wise minimum of an `Array` of inputs.\r\n *\r\n * It takes as input a list of tensors, all of the same shape and returns a\r\n * single tensor (also of the same shape). For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const minLayer = tf.layers.minimum();\r\n * const min = minLayer.apply([input1, input2]);\r\n * console.log(JSON.stringify(min.shape));\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_minimum(args){return new merge_Minimum(args);}/**\r\n * Layer that multiplies (element-wise) an `Array` of inputs.\r\n *\r\n * It takes as input an Array of tensors, all of the same\r\n * shape, and returns a single tensor (also of the same shape).\r\n * For example:\r\n *\r\n * ```js\r\n * const input1 = tf.input({shape: [2, 2]});\r\n * const input2 = tf.input({shape: [2, 2]});\r\n * const input3 = tf.input({shape: [2, 2]});\r\n * const multiplyLayer = tf.layers.multiply();\r\n * const product = multiplyLayer.apply([input1, input2, input3]);\r\n * console.log(product.shape);\r\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\r\n * // dimension.\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_multiply(args){return new merge_Multiply(args);}/**\r\n * Layer that computes a dot product between samples in two tensors.\r\n *\r\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\r\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\r\n * where each entry at index `[i, 0]` will be the dot product between\r\n * `a[i, :]` and `b[i, :]`.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * const dotLayer = tf.layers.dot({axes: -1});\r\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\r\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\r\n *\r\n * // Invoke the layer's apply() method in eager (imperative) mode.\r\n * const y = dotLayer.apply([x1, x2]);\r\n * y.print();\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */function exports_layers_dot(args){return new merge_Dot(args);}// Normalization Layers.\n/**\r\n * Batch normalization layer (Ioffe and Szegedy, 2014).\r\n *\r\n * Normalize the activations of the previous layer at each batch,\r\n * i.e. applies a transformation that maintains the mean activation\r\n * close to 0 and the activation standard deviation close to 1.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\r\n *   not include the sample axis) when calling the constructor of this class,\r\n *   if this layer is used as a first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\r\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\r\n */function exports_layers_batchNormalization(args){return new normalization_BatchNormalization(args);}/**\r\n * Layer-normalization layer (Ba et al., 2016).\r\n *\r\n * Normalizes the activations of the previous layer for each given example in a\r\n * batch independently, instead of across a batch like in `batchNormalization`.\r\n * In other words, this layer applies a transformation that maintanis the mean\r\n * activation within each example close to0 and activation variance close to 1.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\r\n *   layer in a model.\r\n *\r\n * Output shape:\r\n *   Same as input.\r\n *\r\n * References:\r\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\r\n */ /**\r\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\r\n */function layerNormalization(args){return new normalization_LayerNormalization(args);}// Padding Layers.\n/**\r\n * Zero-padding layer for 2D input (e.g., image).\r\n *\r\n * This layer can add rows and columns of zeros\r\n * at the top, bottom, left and right side of an image tensor.\r\n *\r\n * Input shape:\r\n *   4D tensor with shape:\r\n *   - If `dataFormat` is `\"channelsLast\"`:\r\n *     `[batch, rows, cols, channels]`\r\n *   - If `data_format` is `\"channels_first\"`:\r\n *     `[batch, channels, rows, cols]`.\r\n *\r\n * Output shape:\r\n *   4D with shape:\r\n *   - If `dataFormat` is `\"channelsLast\"`:\r\n *     `[batch, paddedRows, paddedCols, channels]`\r\n *    - If `dataFormat` is `\"channelsFirst\"`:\r\n *     `[batch, channels, paddedRows, paddedCols]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */function zeroPadding2d(args){return new padding_ZeroPadding2D(args);}// Pooling Layers.\n/**\r\n * Average pooling operation for spatial data.\r\n *\r\n * Input shape: `[batchSize, inLength, channels]`\r\n *\r\n * Output shape: `[batchSize, pooledLength, channels]`\r\n *\r\n * `tf.avgPool1d` is an alias.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function averagePooling1d(args){return new pooling_AveragePooling1D(args);}function avgPool1d(args){return averagePooling1d(args);}// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling1d(args){return averagePooling1d(args);}/**\r\n * Average pooling operation for spatial data.\r\n *\r\n * Input shape:\r\n *  - If `dataFormat === CHANNEL_LAST`:\r\n *      4D tensor with shape:\r\n *      `[batchSize, rows, cols, channels]`\r\n *  - If `dataFormat === CHANNEL_FIRST`:\r\n *      4D tensor with shape:\r\n *      `[batchSize, channels, rows, cols]`\r\n *\r\n * Output shape\r\n *  - If `dataFormat === CHANNEL_LAST`:\r\n *      4D tensor with shape:\r\n *      `[batchSize, pooleRows, pooledCols, channels]`\r\n *  - If `dataFormat === CHANNEL_FIRST`:\r\n *      4D tensor with shape:\r\n *      `[batchSize, channels, pooleRows, pooledCols]`\r\n *\r\n * `tf.avgPool2d` is an alias.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function averagePooling2d(args){return new pooling_AveragePooling2D(args);}function avgPool2d(args){return averagePooling2d(args);}// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling2d(args){return averagePooling2d(args);}/**\r\n * Average pooling operation for 3D data.\r\n *\r\n * Input shape\r\n *   - If `dataFormat === channelsLast`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, depths, rows, cols, channels]`\r\n *   - If `dataFormat === channelsFirst`:\r\n *      4D tensor with shape:\r\n *       `[batchSize, channels, depths, rows, cols]`\r\n *\r\n * Output shape\r\n *   - If `dataFormat=channelsLast`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\r\n *   - If `dataFormat=channelsFirst`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function averagePooling3d(args){return new pooling_AveragePooling3D(args);}function avgPool3d(args){return averagePooling3d(args);}// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling3d(args){return averagePooling3d(args);}/**\r\n * Global average pooling operation for temporal data.\r\n *\r\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\r\n *\r\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function globalAveragePooling1d(args){return new pooling_GlobalAveragePooling1D(args);}/**\r\n * Global average pooling operation for spatial data.\r\n *\r\n * Input shape:\r\n *   - If `dataFormat` is `CHANNEL_LAST`:\r\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\r\n *   - If `dataFormat` is `CHANNEL_FIRST`:\r\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\r\n *\r\n * Output shape:\r\n *   2D tensor with shape: `[batchSize, channels]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function globalAveragePooling2d(args){return new pooling_GlobalAveragePooling2D(args);}/**\r\n * Global max pooling operation for temporal data.\r\n *\r\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\r\n *\r\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function globalMaxPooling1d(args){return new pooling_GlobalMaxPooling1D(args);}/**\r\n * Global max pooling operation for spatial data.\r\n *\r\n * Input shape:\r\n *   - If `dataFormat` is `CHANNEL_LAST`:\r\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\r\n *   - If `dataFormat` is `CHANNEL_FIRST`:\r\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\r\n *\r\n * Output shape:\r\n *   2D tensor with shape: `[batchSize, channels]`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function globalMaxPooling2d(args){return new pooling_GlobalMaxPooling2D(args);}/**\r\n * Max pooling operation for temporal data.\r\n *\r\n * Input shape:  `[batchSize, inLength, channels]`\r\n *\r\n * Output shape: `[batchSize, pooledLength, channels]`\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function maxPooling1d(args){return new pooling_MaxPooling1D(args);}/**\r\n * Max pooling operation for spatial data.\r\n *\r\n * Input shape\r\n *   - If `dataFormat === CHANNEL_LAST`:\r\n *       4D tensor with shape:\r\n *       `[batchSize, rows, cols, channels]`\r\n *   - If `dataFormat === CHANNEL_FIRST`:\r\n *      4D tensor with shape:\r\n *       `[batchSize, channels, rows, cols]`\r\n *\r\n * Output shape\r\n *   - If `dataFormat=CHANNEL_LAST`:\r\n *       4D tensor with shape:\r\n *       `[batchSize, pooleRows, pooledCols, channels]`\r\n *   - If `dataFormat=CHANNEL_FIRST`:\r\n *       4D tensor with shape:\r\n *       `[batchSize, channels, pooleRows, pooledCols]`\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function maxPooling2d(args){return new pooling_MaxPooling2D(args);}/**\r\n * Max pooling operation for 3D data.\r\n *\r\n * Input shape\r\n *   - If `dataFormat === channelsLast`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, depths, rows, cols, channels]`\r\n *   - If `dataFormat === channelsFirst`:\r\n *      5D tensor with shape:\r\n *       `[batchSize, channels, depths, rows, cols]`\r\n *\r\n * Output shape\r\n *   - If `dataFormat=channelsLast`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\r\n *   - If `dataFormat=channelsFirst`:\r\n *       5D tensor with shape:\r\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\r\n */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */function maxPooling3d(args){return new pooling_MaxPooling3D(args);}// Recurrent Layers.\n/**\r\n * Gated Recurrent Unit - Cho et al. 2014.\r\n *\r\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\r\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\r\n * on a sequence of inputs. The shape of the input (not including the first,\r\n * batch dimension) needs to be at least 2-D, with the first dimension being\r\n * time steps. For example:\r\n *\r\n * ```js\r\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = rnn.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the `GRUCell`'s number of units.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function gru(args){return new recurrent_GRU(args);}/**\r\n * Cell class for `GRU`.\r\n *\r\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\r\n * `apply` method takes the input data of only a single time step and returns\r\n * the cell's output at the time step, while `GRU` takes the input data\r\n * over a number of time steps. For example:\r\n *\r\n * ```js\r\n * const cell = tf.layers.gruCell({units: 2});\r\n * const input = tf.input({shape: [10]});\r\n * const output = cell.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10]: This is the cell's output at a single time step. The 1st\r\n * // dimension is the unknown batch size.\r\n * ```\r\n *\r\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\r\n * most typical use of this workflow is to combine a number of cells into a\r\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\r\n * RNN. For example:\r\n *\r\n * ```js\r\n * const cells = [\r\n *   tf.layers.gruCell({units: 4}),\r\n *   tf.layers.gruCell({units: 8}),\r\n * ];\r\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps and a length-20 vector at each step.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = rnn.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the last `gruCell`'s number of units.\r\n * ```\r\n *\r\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\r\n * `tf.layers.gru`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function gruCell(args){return new recurrent_GRUCell(args);}/**\r\n * Long-Short Term Memory layer - Hochreiter 1997.\r\n *\r\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\r\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\r\n * on a sequence of inputs. The shape of the input (not including the first,\r\n * batch dimension) needs to be at least 2-D, with the first dimension being\r\n * time steps. For example:\r\n *\r\n * ```js\r\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = lstm.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the `LSTMCell`'s number of units.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function lstm(args){return new recurrent_LSTM(args);}/**\r\n * Cell class for `LSTM`.\r\n *\r\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\r\n * `apply` method takes the input data of only a single time step and returns\r\n * the cell's output at the time step, while `LSTM` takes the input data\r\n * over a number of time steps. For example:\r\n *\r\n * ```js\r\n * const cell = tf.layers.lstmCell({units: 2});\r\n * const input = tf.input({shape: [10]});\r\n * const output = cell.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10]: This is the cell's output at a single time step. The 1st\r\n * // dimension is the unknown batch size.\r\n * ```\r\n *\r\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\r\n * most typical use of this workflow is to combine a number of cells into a\r\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\r\n * RNN. For example:\r\n *\r\n * ```js\r\n * const cells = [\r\n *   tf.layers.lstmCell({units: 4}),\r\n *   tf.layers.lstmCell({units: 8}),\r\n * ];\r\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps and a length-20 vector at each step.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = rnn.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the last `lstmCell`'s number of units.\r\n * ```\r\n *\r\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\r\n * `tf.layers.lstm`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function lstmCell(args){return new recurrent_LSTMCell(args);}/**\r\n * Fully-connected RNN where the output is to be fed back to input.\r\n *\r\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\r\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\r\n * on a sequence of inputs. The shape of the input (not including the first,\r\n * batch dimension) needs to be at least 2-D, with the first dimension being\r\n * time steps. For example:\r\n *\r\n * ```js\r\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = rnn.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function simpleRNN(args){return new recurrent_SimpleRNN(args);}/**\r\n * Cell class for `SimpleRNN`.\r\n *\r\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\r\n * `apply` method takes the input data of only a single time step and returns\r\n * the cell's output at the time step, while `SimpleRNN` takes the input data\r\n * over a number of time steps. For example:\r\n *\r\n * ```js\r\n * const cell = tf.layers.simpleRNNCell({units: 2});\r\n * const input = tf.input({shape: [10]});\r\n * const output = cell.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10]: This is the cell's output at a single time step. The 1st\r\n * // dimension is the unknown batch size.\r\n * ```\r\n *\r\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\r\n * most typical use of this workflow is to combine a number of cells into a\r\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\r\n * RNN. For example:\r\n *\r\n * ```js\r\n * const cells = [\r\n *   tf.layers.simpleRNNCell({units: 4}),\r\n *   tf.layers.simpleRNNCell({units: 8}),\r\n * ];\r\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\r\n *\r\n * // Create an input with 10 time steps and a length-20 vector at each step.\r\n * const input = tf.input({shape: [10, 20]});\r\n * const output = rnn.apply(input);\r\n *\r\n * console.log(JSON.stringify(output.shape));\r\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\r\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\r\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\r\n * ```\r\n *\r\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\r\n * `tf.layers.simpleRNN`.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function simpleRNNCell(args){return new recurrent_SimpleRNNCell(args);}/**\r\n * Base class for recurrent layers.\r\n *\r\n * Input shape:\r\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\r\n *\r\n * Output shape:\r\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\r\n *     tensor is the output. The remaining tensors are the states at the\r\n *     last time step, each with shape `[batchSize, units]`.\r\n *   - if `returnSequences`, the output will have shape\r\n *     `[batchSize, timeSteps, units]`.\r\n *   - else, the output will have shape `[batchSize, units]`.\r\n *\r\n * Masking:\r\n *   This layer supports masking for input data with a variable number\r\n *   of timesteps. To introduce masks to your data,\r\n *   use an embedding layer with the `mask_zero` parameter\r\n *   set to `True`.\r\n *\r\n * Notes on using statefulness in RNNs:\r\n *   You can set RNN layers to be 'stateful', which means that the states\r\n *   computed for the samples in one batch will be reused as initial states\r\n *   for the samples in the next batch. This assumes a one-to-one mapping\r\n *   between samples in different successive batches.\r\n *\r\n *   To enable statefulness:\r\n *     - specify `stateful: true` in the layer constructor.\r\n *     - specify a fixed batch size for your model, by passing\r\n *       if sequential model:\r\n *         `batchInputShape=[...]` to the first layer in your model.\r\n *       else for functional model with 1 or more Input layers:\r\n *         `batchShape=[...]` to all the first layers in your model.\r\n *       This is the expected shape of your inputs *including the batch size*.\r\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\r\n *     - specify `shuffle=False` when calling fit().\r\n *\r\n *   To reset the states of your model, call `.resetStates()` on either\r\n *   a specific layer, or on your entire model.\r\n *\r\n * Note on specifying the initial state of RNNs\r\n *   You can specify the initial state of RNN layers symbolically by\r\n *   calling them with the option `initialState`. The value of\r\n *   `initialState` should be a tensor or list of tensors representing\r\n *   the initial state of the RNN layer.\r\n *\r\n *   You can specify the initial state of RNN layers numerically by\r\n *   calling `resetStates` with the keyword argument `states`. The value of\r\n *   `states` should be a numpy array or list of numpy arrays representing\r\n *   the initial state of the RNN layer.\r\n *\r\n * Note on passing external constants to RNNs\r\n *   You can pass \"external\" constants to the cell using the `constants`\r\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\r\n *   method accepts the same keyword argument `constants`. Such constants\r\n *   can be used to conditon the cell transformation on additional static inputs\r\n *   (not changing over time), a.k.a an attention mechanism.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function exports_layers_rnn(args){return new recurrent_RNN(args);}/**\r\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\r\n *\r\n * Used to implement efficient stacked RNNs.\r\n */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */function stackedRNNCells(args){return new recurrent_StackedRNNCells(args);}// Wrapper Layers.\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */function bidirectional(args){return new wrappers_Bidirectional(args);}/**\r\n * This wrapper applies a layer to every temporal slice of an input.\r\n *\r\n * The input should be at least 3D,  and the dimension of the index `1` will be\r\n * considered to be the temporal dimension.\r\n *\r\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\r\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\r\n * 16]`, and the `inputShape`, not including the sample dimension, is\r\n * `[10, 16]`.\r\n *\r\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\r\n * timesteps, independently:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.timeDistributed({\r\n *   layer: tf.layers.dense({units: 8}),\r\n *   inputShape: [10, 16],\r\n * }));\r\n *\r\n * // Now model.outputShape = [null, 10, 8].\r\n * // The output will then have shape `[32, 10, 8]`.\r\n *\r\n * // In subsequent layers, there is no need for `inputShape`:\r\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * // Now model.outputShape = [null, 10, 32].\r\n * ```\r\n *\r\n * The output will then have shape `[32, 10, 32]`.\r\n *\r\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\r\n * instance a `Conv2D` layer.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.timeDistributed({\r\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\r\n *   inputShape: [10, 299, 299, 3],\r\n * }));\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n */ /** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */function timeDistributed(args){return new wrappers_TimeDistributed(args);}// Aliases for pooling.\nvar globalMaxPool1d=globalMaxPooling1d;var globalMaxPool2d=globalMaxPooling2d;var maxPool1d=maxPooling1d;var maxPool2d=maxPooling2d;/**\r\n * Apply additive zero-centered Gaussian noise.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * This is useful to mitigate overfitting\r\n * (you could see it as a form of random data augmentation).\r\n * Gaussian Noise (GS) is a natural choice as corruption process\r\n * for real valued inputs.\r\n *\r\n * # Arguments\r\n *     stddev: float, standard deviation of the noise distribution.\r\n *\r\n * # Input shape\r\n *         Arbitrary. Use the keyword argument `input_shape`\r\n *         (tuple of integers, does not include the samples axis)\r\n *         when using this layer as the first layer in a model.\r\n *\r\n * # Output shape\r\n *         Same shape as input.\r\n */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */function gaussianNoise(args){return new noise_GaussianNoise(args);}/**\r\n * Apply multiplicative 1-centered Gaussian noise.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * Arguments:\r\n *   - `rate`: float, drop probability (as with `Dropout`).\r\n *     The multiplicative noise will have\r\n *     standard deviation `sqrt(rate / (1 - rate))`.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\r\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\r\n *\r\n */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */function gaussianDropout(args){return new noise_GaussianDropout(args);}/**\r\n * Applies Alpha Dropout to the input.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\r\n * to their original values, in order to ensure the self-normalizing property\r\n * even after this dropout.\r\n * Alpha Dropout fits well to Scaled Exponential Linear Units\r\n * by randomly setting activations to the negative saturation value.\r\n *\r\n * Arguments:\r\n *   - `rate`: float, drop probability (as with `Dropout`).\r\n *     The multiplicative noise will have\r\n *     standard deviation `sqrt(rate / (1 - rate))`.\r\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\r\n *     shape for randomly generated keep/drop flags.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\r\n */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */function alphaDropout(args){return new noise_AlphaDropout(args);}/**\r\n * Masks a sequence by using a mask value to skip timesteps.\r\n *\r\n * If all features for a given sample timestep are equal to `mask_value`,\r\n * then the sample timestep will be masked (skipped) in all downstream layers\r\n * (as long as they support masking).\r\n *\r\n * If any downstream layer does not support masking yet receives such\r\n * an input mask, an exception will be raised.\r\n *\r\n * Arguments:\r\n *   - `maskValue`: Either None or mask value to skip.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n */ /** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */function masking(args){return new core_Masking(args);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_metrics.js\n/**\r\n * Binary accuracy metric function.\r\n *\r\n * `yTrue` and `yPred` can have 0-1 values. Example:\r\n * ```js\r\n * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);\r\n * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);\r\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\r\n * accuracy.print();\r\n * ```\r\n *\r\n * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in\r\n * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,\r\n * a value >= 0.5 and <= 1.0 is interpreted as 1.\r\n * )\r\n * Example:\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\r\n * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);\r\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\r\n * accuracy.print();\r\n * ```\r\n *\r\n * @param yTrue Binary Tensor of truth.\r\n * @param yPred Binary Tensor of prediction.\r\n * @return Accuracy Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_binaryAccuracy(yTrue,yPred){return binaryAccuracy(yTrue,yPred);}/**\r\n * Binary crossentropy metric function.\r\n *\r\n * Example:\r\n * ```js\r\n * const x = tf.tensor2d([[0], [1], [1], [1]]);\r\n * const y = tf.tensor2d([[0], [0], [0.5], [1]]);\r\n * const crossentropy = tf.metrics.binaryCrossentropy(x, y);\r\n * crossentropy.print();\r\n * ```\r\n *\r\n * @param yTrue Binary Tensor of truth.\r\n * @param yPred Binary Tensor of prediction, probabilities for the `1` case.\r\n * @return Accuracy Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_binaryCrossentropy(yTrue,yPred){return metrics_binaryCrossentropy(yTrue,yPred);}/**\r\n * Sparse categorical accuracy metric function.\r\n *\r\n * Example:\r\n * ```js\r\n *\r\n * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);\r\n * const yPred = tf.tensor2d(\r\n *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\r\n * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);\r\n * crossentropy.print();\r\n * ```\r\n *\r\n * @param yTrue True labels: indices.\r\n * @param yPred Predicted probabilities or logits.\r\n * @returns Accuracy tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_sparseCategoricalAccuracy(yTrue,yPred){return sparseCategoricalAccuracy(yTrue,yPred);}/**\r\n * Categorical accuracy metric function.\r\n *\r\n * Example:\r\n * ```js\r\n * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);\r\n * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);\r\n * const accuracy = tf.metrics.categoricalAccuracy(x, y);\r\n * accuracy.print();\r\n * ```\r\n *\r\n * @param yTrue Binary Tensor of truth: one-hot encoding of categories.\r\n * @param yPred Binary Tensor of prediction: probabilities or logits for the\r\n *   same categories as in `yTrue`.\r\n * @return Accuracy Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_categoricalAccuracy(yTrue,yPred){return categoricalAccuracy(yTrue,yPred);}/**\r\n * Categorical crossentropy between an output tensor and a target tensor.\r\n *\r\n * @param target A tensor of the same shape as `output`.\r\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\r\n *  `true`, in which case `output` is expected to be the logits).\r\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\r\n *   a tensor of logits.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_categoricalCrossentropy(yTrue,yPred){return metrics_categoricalCrossentropy(yTrue,yPred);}/**\r\n * Computes the precision of the predictions with respect to the labels.\r\n *\r\n * Example:\r\n * ```js\r\n * const x = tf.tensor2d(\r\n *    [\r\n *      [0, 0, 0, 1],\r\n *      [0, 1, 0, 0],\r\n *      [0, 0, 0, 1],\r\n *      [1, 0, 0, 0],\r\n *      [0, 0, 1, 0]\r\n *    ]\r\n * );\r\n *\r\n * const y = tf.tensor2d(\r\n *    [\r\n *      [0, 0, 1, 0],\r\n *      [0, 1, 0, 0],\r\n *      [0, 0, 0, 1],\r\n *      [0, 1, 0, 0],\r\n *      [0, 1, 0, 0]\r\n *    ]\r\n * );\r\n *\r\n * const precision = tf.metrics.precision(x, y);\r\n * precision.print();\r\n * ```\r\n *\r\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\r\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\r\n * @return Precision Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_precision(yTrue,yPred){return precision(yTrue,yPred);}/**\r\n * Computes the recall of the predictions with respect to the labels.\r\n *\r\n * Example:\r\n * ```js\r\n * const x = tf.tensor2d(\r\n *    [\r\n *      [0, 0, 0, 1],\r\n *      [0, 1, 0, 0],\r\n *      [0, 0, 0, 1],\r\n *      [1, 0, 0, 0],\r\n *      [0, 0, 1, 0]\r\n *    ]\r\n * );\r\n *\r\n * const y = tf.tensor2d(\r\n *    [\r\n *      [0, 0, 1, 0],\r\n *      [0, 1, 0, 0],\r\n *      [0, 0, 0, 1],\r\n *      [0, 1, 0, 0],\r\n *      [0, 1, 0, 0]\r\n *    ]\r\n * );\r\n *\r\n * const recall = tf.metrics.recall(x, y);\r\n * recall.print();\r\n * ```\r\n *\r\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\r\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\r\n * @return Recall Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_recall(yTrue,yPred){return recall(yTrue,yPred);}/**\r\n * Loss or metric function: Cosine proximity.\r\n *\r\n * Mathematically, cosine proximity is defined as:\r\n *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,\r\n * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`\r\n * represents element-wise multiplication.\r\n *\r\n * ```js\r\n * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);\r\n * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);\r\n * const proximity = tf.metrics.cosineProximity(yTrue, yPred);\r\n * proximity.print();\r\n * ```\r\n *\r\n * @param yTrue Truth Tensor.\r\n * @param yPred Prediction Tensor.\r\n * @return Cosine proximity Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_cosineProximity(yTrue,yPred){return cosineProximity(yTrue,yPred);}/**\r\n * Loss or metric function: Mean absolute error.\r\n *\r\n * Mathematically, mean absolute error is defined as:\r\n *   `mean(abs(yPred - yTrue))`,\r\n * wherein the `mean` is applied over feature dimensions.\r\n *\r\n * ```js\r\n * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);\r\n * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);\r\n * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);\r\n * mse.print();\r\n * ```\r\n *\r\n * @param yTrue Truth Tensor.\r\n * @param yPred Prediction Tensor.\r\n * @return Mean absolute error Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_meanAbsoluteError(yTrue,yPred){return meanAbsoluteError(yTrue,yPred);}/**\r\n * Loss or metric function: Mean absolute percentage error.\r\n *\r\n * ```js\r\n * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);\r\n * const yPred = tf.tensor2d([[0, 1], [11, 24]]);\r\n * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);\r\n * mse.print();\r\n * ```\r\n *\r\n * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.\r\n *\r\n * @param yTrue Truth Tensor.\r\n * @param yPred Prediction Tensor.\r\n * @return Mean absolute percentage error Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_meanAbsolutePercentageError(yTrue,yPred){return meanAbsolutePercentageError(yTrue,yPred);}function exports_metrics_MAPE(yTrue,yPred){return meanAbsolutePercentageError(yTrue,yPred);}function exports_metrics_mape(yTrue,yPred){return meanAbsolutePercentageError(yTrue,yPred);}/**\r\n * Loss or metric function: Mean squared error.\r\n *\r\n * ```js\r\n * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);\r\n * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);\r\n * const mse = tf.metrics.meanSquaredError(yTrue, yPred);\r\n * mse.print();\r\n * ```\r\n *\r\n * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.\r\n *\r\n * @param yTrue Truth Tensor.\r\n * @param yPred Prediction Tensor.\r\n * @return Mean squared error Tensor.\r\n */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */function exports_metrics_meanSquaredError(yTrue,yPred){return meanSquaredError(yTrue,yPred);}function exports_metrics_MSE(yTrue,yPred){return meanSquaredError(yTrue,yPred);}function exports_metrics_mse(yTrue,yPred){return meanSquaredError(yTrue,yPred);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_models.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/exports_regularizers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // tslint:disable-next-line:max-line-length\n/**\r\n * Regularizer for L1 and L2 regularization.\r\n *\r\n * Adds a term to the loss to penalize large weights:\r\n * loss += sum(l1 * abs(x)) + sum(l2 * x^2)\r\n */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */function l1l2(config){return new regularizers_L1L2(config);}/**\r\n * Regularizer for L1 regularization.\r\n *\r\n * Adds a term to the loss to penalize large weights:\r\n * loss += sum(l1 * abs(x))\r\n * @param args l1 config.\r\n */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */function exports_regularizers_l1(config){return l1(config);}/**\r\n * Regularizer for L2 regularization.\r\n *\r\n * Adds a term to the loss to penalize large weights:\r\n * loss += sum(l2 * x^2)\r\n * @param args l2 config.\r\n */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */function exports_regularizers_l2(config){return l2(config);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ /* Original source: keras/callbacks.py */var callbacks_Callback=/*#__PURE__*/function(_BaseCallback4){_inherits(callbacks_Callback,_BaseCallback4);var _super154=_createSuper(callbacks_Callback);function callbacks_Callback(){var _this250;_classCallCheck2(this,callbacks_Callback);_this250=_super154.apply(this,arguments);/** Instance of `keras.models.Model`. Reference of the model being trained. */_this250.model=null;return _this250;}_createClass(callbacks_Callback,[{key:\"setModel\",value:function setModel(model){if(!(model instanceof training_LayersModel)){throw new Error('model must be a LayersModel, not some other Container');}this.model=model;}}]);return callbacks_Callback;}(BaseCallback);function less(currVal,prevVal){return currVal<prevVal;}function greater(currVal,prevVal){return currVal>prevVal;}/**\r\n * A Callback that stops training when a monitored quantity has stopped\r\n * improving.\r\n */var callbacks_EarlyStopping=/*#__PURE__*/function(_callbacks_Callback){_inherits(callbacks_EarlyStopping,_callbacks_Callback);var _super155=_createSuper(callbacks_EarlyStopping);function callbacks_EarlyStopping(args){var _this251;_classCallCheck2(this,callbacks_EarlyStopping);_this251=_super155.call(this);if(args==null){args={};}if(args.restoreBestWeights){throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');}_this251.monitor=args.monitor||'val_loss';_this251.minDelta=Math.abs(args.minDelta||0);_this251.patience=args.patience||0;_this251.verbose=args.verbose||0;_this251.mode=args.mode||'auto';_this251.baseline=args.baseline;if(['auto','min','max'].indexOf(_this251.mode)===-1){console.warn(\"EarlyStopping mode '\".concat(_this251.mode,\"' is invalid. \")+\"Falling back to mode 'auto'.\");_this251.mode='auto';}if(_this251.mode==='min'){_this251.monitorFunc=less;}else if(_this251.mode==='max'){_this251.monitorFunc=greater;}else{// For mode === 'auto'.\nif(_this251.monitor.indexOf('acc')!==-1){_this251.monitorFunc=greater;}else{_this251.monitorFunc=less;}}if(_this251.monitorFunc===less){_this251.minDelta*=-1;}return _this251;}_createClass(callbacks_EarlyStopping,[{key:\"onTrainBegin\",value:function(){var _onTrainBegin5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee159(logs){return regeneratorRuntime.wrap(function _callee159$(_context159){while(1){switch(_context159.prev=_context159.next){case 0:this.wait=0;this.stoppedEpoch=0;if(this.baseline!=null){this.best=this.baseline;}else{this.best=this.monitorFunc===less?Infinity:-Infinity;}case 3:case\"end\":return _context159.stop();}}},_callee159,this);}));function onTrainBegin(_x220){return _onTrainBegin5.apply(this,arguments);}return onTrainBegin;}()},{key:\"onEpochEnd\",value:function(){var _onEpochEnd6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee160(epoch,logs){var current;return regeneratorRuntime.wrap(function _callee160$(_context160){while(1){switch(_context160.prev=_context160.next){case 0:_context160.next=2;return resolveScalarsInLogs(logs);case 2:current=this.getMonitorValue(logs);if(!(current==null)){_context160.next=5;break;}return _context160.abrupt(\"return\");case 5:if(this.monitorFunc(current-this.minDelta,this.best)){this.best=current;this.wait=0;// TODO(cais): Logic for restoreBestWeights.\n}else{this.wait++;if(this.wait>=this.patience){this.stoppedEpoch=epoch;this.model.stopTraining=true;}// TODO(cais): Logic for restoreBestWeights.\n}case 6:case\"end\":return _context160.stop();}}},_callee160,this);}));function onEpochEnd(_x221,_x222){return _onEpochEnd6.apply(this,arguments);}return onEpochEnd;}()},{key:\"onTrainEnd\",value:function(){var _onTrainEnd4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee161(logs){return regeneratorRuntime.wrap(function _callee161$(_context161){while(1){switch(_context161.prev=_context161.next){case 0:if(this.stoppedEpoch>0&&this.verbose){console.log(\"Epoch \".concat(this.stoppedEpoch,\": early stopping.\"));}case 1:case\"end\":return _context161.stop();}}},_callee161,this);}));function onTrainEnd(_x223){return _onTrainEnd4.apply(this,arguments);}return onTrainEnd;}()},{key:\"getMonitorValue\",value:function getMonitorValue(logs){if(logs==null){logs={};}var monitorValue=logs[this.monitor];if(monitorValue==null){console.warn(\"Metric for EarlyStopping \".concat(this.monitor,\" is not available. \")+\"Available metrics are: \".concat(Object.keys(logs)));}return monitorValue;}}]);return callbacks_EarlyStopping;}(callbacks_Callback);/**\r\n * Factory function for a Callback that stops training when a monitored\r\n * quantity has stopped improving.\r\n *\r\n * Early stopping is a type of regularization, and protects model against\r\n * overfitting.\r\n *\r\n * The following example based on fake data illustrates how this callback\r\n * can be used during `tf.LayersModel.fit()`:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense({\r\n *   units: 3,\r\n *   activation: 'softmax',\r\n *   kernelInitializer: 'ones',\r\n *   inputShape: [2]\r\n * }));\r\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\r\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\r\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\r\n * model.compile(\r\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\r\n *\r\n * // Without the EarlyStopping callback, the val_acc value would be:\r\n * //   0.5, 0.5, 0.5, 0.5, ...\r\n * // With val_acc being monitored, training should stop after the 2nd epoch.\r\n * const history = await model.fit(xs, ys, {\r\n *   epochs: 10,\r\n *   validationData: [xsVal, ysVal],\r\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\r\n * });\r\n *\r\n * // Expect to see a length-2 array.\r\n * console.log(history.history.val_acc);\r\n * ```\r\n */ /**\r\n * @doc {\r\n *   heading: 'Callbacks',\r\n *   namespace: 'callbacks'\r\n * }\r\n */function earlyStopping(args){return new callbacks_EarlyStopping(args);}var callbacks_callbacks={earlyStopping:earlyStopping};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-layers/dist/index.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */ // This file lists all exports of TensorFlow.js Layers\n/***/},/* 88 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"array\",function(){return(/* reexport */array);});__webpack_require__.d(__webpack_exports__,\"Dataset\",function(){return(/* reexport */dataset_Dataset);});__webpack_require__.d(__webpack_exports__,\"zip\",function(){return(/* reexport */zip);});__webpack_require__.d(__webpack_exports__,\"CSVDataset\",function(){return(/* reexport */csv_dataset_CSVDataset);});__webpack_require__.d(__webpack_exports__,\"TextLineDataset\",function(){return(/* reexport */text_line_dataset_TextLineDataset);});__webpack_require__.d(__webpack_exports__,\"csv\",function(){return(/* reexport */csv);});__webpack_require__.d(__webpack_exports__,\"func\",function(){return(/* reexport */func);});__webpack_require__.d(__webpack_exports__,\"generator\",function(){return(/* reexport */readers_generator);});__webpack_require__.d(__webpack_exports__,\"microphone\",function(){return(/* reexport */microphone);});__webpack_require__.d(__webpack_exports__,\"webcam\",function(){return(/* reexport */webcam);});__webpack_require__.d(__webpack_exports__,\"FileDataSource\",function(){return(/* reexport */file_data_source_FileDataSource);});__webpack_require__.d(__webpack_exports__,\"URLDataSource\",function(){return(/* reexport */url_data_source_URLDataSource);});__webpack_require__.d(__webpack_exports__,\"version_data\",function(){return(/* reexport */version);});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// EXTERNAL MODULE: ./node_modules/seedrandom/index.js\nvar seedrandom=__webpack_require__(20);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js + 3 modules\nvar lazy_iterator=__webpack_require__(14);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js\nvar deep_map=__webpack_require__(19);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/dataset.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ // TODO(soergel): consider vectorized operations within the pipeline.\n/**\r\n * Represents a potentially large list of independent data elements (typically\r\n * 'samples' or 'examples').\r\n *\r\n * A 'data example' may be a primitive, an array, a map from string keys to\r\n * values, or any nested structure of these.\r\n *\r\n * A `Dataset` represents an ordered collection of elements, together with a\r\n * chain of transformations to be performed on those elements. Each\r\n * transformation is a method of `Dataset` that returns another `Dataset`, so\r\n * these may be chained, e.g.\r\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\r\n *\r\n * Data loading and transformation is done in a lazy, streaming fashion.  The\r\n * dataset may be iterated over multiple times; each iteration starts the data\r\n * loading anew and recapitulates the transformations.\r\n *\r\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\r\n * its transformations are applied one example at a time. Batching produces a\r\n * new `Dataset` where each element is a batch. Batching should usually come\r\n * last in a pipeline, because data transformations are easier to express on a\r\n * per-example basis than on a per-batch basis.\r\n *\r\n * The following code examples are calling `await dataset.forEachAsync(...)` to\r\n * iterate once over the entire dataset in order to print out the data.\r\n */ /** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */var dataset_Dataset=/*#__PURE__*/function(){function dataset_Dataset(){_classCallCheck2(this,dataset_Dataset);this.size=null;}// TODO(soergel): Make Datasets report whether repeated iterator() calls\n// produce the same result (e.g., reading from a file) or different results\n// (e.g., from the webcam).  Currently we don't make this distinction but it\n// could be important for the user to know.\n// abstract isDeterministic(): boolean;\n/**\r\n     * Groups elements into batches.\r\n     *\r\n     * It is assumed that each of the incoming dataset elements has the same\r\n     * structure-- i.e. the same set of keys at each location in an object\r\n     * hierarchy.  For each key, the resulting `Dataset` provides a batched\r\n     * element collecting all of the incoming values for that key.\r\n     *\r\n     *  * Incoming primitives are grouped into a 1-D Tensor.\r\n     *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\r\n     *    the batch dimension.\r\n     *  * Incoming arrays are converted to Tensor and then batched.\r\n     *  * A nested array is interpreted as an n-D Tensor, so the batched result\r\n     *    has n+1 dimensions.\r\n     *  * An array that cannot be converted to Tensor produces an error.\r\n     *\r\n     * If an array should not be batched as a unit, it should first be converted\r\n     * to an object with integer keys.\r\n     *\r\n     * Here are a few examples:\r\n     *\r\n     * Batch a dataset of numbers:\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\r\n     * await a.forEachAsync(e => e.print());\r\n     * ```\r\n     *\r\n     * Batch a dataset of arrays:\r\n     * ```js\r\n     * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\r\n     * await b.forEachAsync(e => e.print());\r\n     * ```\r\n     *\r\n     * Batch a dataset of objects:\r\n     * ```js\r\n     * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\r\n     *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\r\n     *   {a: 8, b: 18}]).batch(4);\r\n     * await c.forEachAsync(e => {\r\n     *   console.log('{');\r\n     *   for(var key in e) {\r\n     *     console.log(key+':');\r\n     *     e[key].print();\r\n     *   }\r\n     *   console.log('}');\r\n     * })\r\n     * ```\r\n     *\r\n     * @param batchSize The number of elements desired per batch.\r\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\r\n     *   than batchSize elements. Default true.\r\n     * @returns A `Dataset`, from which a stream of batches can be obtained.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */_createClass(dataset_Dataset,[{key:\"batch\",value:function batch(batchSize){var smallLastBatch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var base=this;dist[\"util\"].assert(batchSize>0,function(){return\"batchSize needs to be positive, but it is\\n      \".concat(batchSize);});var size;if(this.size===Infinity||this.size==null){// If the size of this dataset is infinity or null, the new size keeps the\n// same.\nsize=this.size;}else if(smallLastBatch){// If the size of this dataset is known and include small last batch, the\n// new size is full batch count plus last batch.\nsize=Math.ceil(this.size/batchSize);}else{// If the size of this dataset is known and not include small last batch,\n// the new size is full batch count.\nsize=Math.floor(this.size/batchSize);}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee172(){return regeneratorRuntime.wrap(function _callee172$(_context175){while(1){switch(_context175.prev=_context175.next){case 0:_context175.next=2;return base.iterator();case 2:return _context175.abrupt(\"return\",_context175.sent.columnMajorBatch(batchSize,smallLastBatch,deepBatchConcat));case 3:case\"end\":return _context175.stop();}}},_callee172);})),size);}/**\r\n     * Concatenates this `Dataset` with another.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3]);\r\n     * const b = tf.data.array([4, 5, 6]);\r\n     * const c = a.concatenate(b);\r\n     * await c.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param dataset A `Dataset` to be concatenated onto this one.\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"concatenate\",value:function concatenate(dataset){var base=this;var size;if(this.size===Infinity||dataset.size===Infinity){// If the size of any of these two dataset is infinity, new size is\n// infinity.\nsize=Infinity;}else if(this.size!=null&&dataset.size!=null){// If the size of both datasets are known and not infinity, new size is\n// sum the size of these two datasets.\nsize=this.size+dataset.size;}else{// If neither of these two datasets has infinite size and any of these two\n// datasets' size is null, the new size is null.\nsize=null;}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee173(){return regeneratorRuntime.wrap(function _callee173$(_context176){while(1){switch(_context176.prev=_context176.next){case 0:_context176.next=2;return base.iterator();case 2:_context176.t0=_context176.sent;_context176.next=5;return dataset.iterator();case 5:_context176.t1=_context176.sent;return _context176.abrupt(\"return\",_context176.t0.concatenate.call(_context176.t0,_context176.t1));case 7:case\"end\":return _context176.stop();}}},_callee173);})),size);}/**\r\n     * Filters this dataset according to `predicate`.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n     *   .filter(x => x%2 === 0);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param predicate A function mapping a dataset element to a boolean or a\r\n     * `Promise` for one.\r\n     *\r\n     * @returns A `Dataset` of elements for which the predicate was true.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"filter\",value:function filter(predicate){var base=this;var size;if(this.size===Infinity){// If the size of this dataset is infinity, new size is infinity\nsize=Infinity;}else{// If this dataset has limited elements, new size is null because it might\n// exhausted randomly.\nsize=null;}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee174(){return regeneratorRuntime.wrap(function _callee174$(_context177){while(1){switch(_context177.prev=_context177.next){case 0:_context177.next=2;return base.iterator();case 2:return _context177.abrupt(\"return\",_context177.sent.filter(function(x){return dist[\"tidy\"](function(){return predicate(x);});}));case 3:case\"end\":return _context177.stop();}}},_callee174);})),size);}/**\r\n     * Apply a function to every element of the dataset.\r\n     *\r\n     * After the function is applied to a dataset element, any Tensors contained\r\n     * within that element are disposed.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3]);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param f A function to apply to each dataset element.\r\n     * @returns A `Promise` that resolves after all elements have been processed.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"forEachAsync\",value:function(){var _forEachAsync2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee175(f){return regeneratorRuntime.wrap(function _callee175$(_context178){while(1){switch(_context178.prev=_context178.next){case 0:_context178.next=2;return this.iterator();case 2:return _context178.abrupt(\"return\",_context178.sent.forEachAsync(f));case 3:case\"end\":return _context178.stop();}}},_callee175,this);}));function forEachAsync(_x224){return _forEachAsync2.apply(this,arguments);}return forEachAsync;}()/**\r\n     * Maps this dataset through a 1-to-1 transform.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3]).map(x => x*x);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param transform A function mapping a dataset element to a transformed\r\n     *   dataset element.\r\n     *\r\n     * @returns A `Dataset` of transformed elements.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"map\",value:function map(transform){var base=this;return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee176(){return regeneratorRuntime.wrap(function _callee176$(_context179){while(1){switch(_context179.prev=_context179.next){case 0:_context179.next=2;return base.iterator();case 2:return _context179.abrupt(\"return\",_context179.sent.map(function(x){return dist[\"tidy\"](function(){return transform(x);});}));case 3:case\"end\":return _context179.stop();}}},_callee176);})),this.size);}/**\r\n     * Maps this dataset through an async 1-to-1 transform.\r\n     *\r\n     * ```js\r\n     * const a =\r\n     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\r\n     *    setTimeout(() => {\r\n     *      resolve(x * x);\r\n     *    }, Math.random()*1000 + 500);\r\n     *  }));\r\n     * console.log(await a.toArray());\r\n     * ```\r\n     *\r\n     * @param transform A function mapping a dataset element to a `Promise` for a\r\n     *   transformed dataset element.  This transform is responsible for disposing\r\n     *   any intermediate `Tensor`s, i.e. by wrapping its computation in\r\n     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\r\n     *   `map()` case).\r\n     *\r\n     * @returns A `Dataset` of transformed elements.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"mapAsync\",value:function mapAsync(transform){var base=this;return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee177(){return regeneratorRuntime.wrap(function _callee177$(_context180){while(1){switch(_context180.prev=_context180.next){case 0:_context180.next=2;return base.iterator();case 2:return _context180.abrupt(\"return\",_context180.sent.mapAsync(transform));case 3:case\"end\":return _context180.stop();}}},_callee177);})),this.size);}/**\r\n     *  Creates a `Dataset` that prefetches elements from this dataset.\r\n     *\r\n     * @param bufferSize: An integer specifying the number of elements to be\r\n     *   prefetched.\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"prefetch\",value:function prefetch(bufferSize){if(bufferSize==null){throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');}var base=this;return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee178(){return regeneratorRuntime.wrap(function _callee178$(_context181){while(1){switch(_context181.prev=_context181.next){case 0:_context181.next=2;return base.iterator();case 2:return _context181.abrupt(\"return\",_context181.sent.prefetch(bufferSize));case 3:case\"end\":return _context181.stop();}}},_callee178);})),this.size);}/**\r\n     * Repeats this dataset `count` times.\r\n     *\r\n     * NOTE: If this dataset is a function of global state (e.g. a random number\r\n     * generator), then different repetitions may produce different elements.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3]).repeat(3);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param count: (Optional) An integer, representing the number of times\r\n     *   the dataset should be repeated. The default behavior (if `count` is\r\n     *   `undefined` or negative) is for the dataset be repeated indefinitely.\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"repeat\",value:function repeat(count){var base=this;var size;if(this.size!=null&&count>0){// If this dataset has size and count is positive, new size is current\n// size multiply count. This also covers the case that current size is\n// infinity.\nsize=this.size*count;}else if(count===0){// If count is 0, new size is 0.\nsize=0;}else if(this.size!=null&&(count===undefined||count<0)){// If this dataset has size and count is undefined or negative, the\n// dataset will be repeated indefinitely and new size is infinity.\nsize=Infinity;}else{// If the size of this dataset is null, the new dataset's size is null.\nsize=null;}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee180(){var iteratorIterator;return regeneratorRuntime.wrap(function _callee180$(_context183){while(1){switch(_context183.prev=_context183.next){case 0:iteratorIterator=Object(lazy_iterator[\"e\"/* iteratorFromFunction */])(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee179(){return regeneratorRuntime.wrap(function _callee179$(_context182){while(1){switch(_context182.prev=_context182.next){case 0:_context182.next=2;return base.iterator();case 2:_context182.t0=_context182.sent;return _context182.abrupt(\"return\",{value:_context182.t0,done:false});case 4:case\"end\":return _context182.stop();}}},_callee179);})));return _context183.abrupt(\"return\",Object(lazy_iterator[\"d\"/* iteratorFromConcatenated */])(iteratorIterator.take(count)));case 2:case\"end\":return _context183.stop();}}},_callee180);})),size);}/**\r\n     * Creates a `Dataset` that skips `count` initial elements from this dataset.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param count: The number of elements of this dataset that should be skipped\r\n     *   to form the new dataset.  If `count` is greater than the size of this\r\n     *   dataset, the new dataset will contain no elements.  If `count`\r\n     *   is `undefined` or negative, skips the entire dataset.\r\n     *\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"skip\",value:function skip(count){var base=this;var size;if(this.size!=null&&count>=0&&this.size>=count){// If the size of this dataset is greater than count, the new dataset's\n// size is current size minus skipped size.This also covers the case that\n// current size is infinity.\nsize=this.size-count;}else if(this.size!=null&&(this.size<count||count===undefined||count<0)){// If the size of this dataset is smaller than count, or count is\n// undefined or negative, skips the entire dataset and the new size is 0.\nsize=0;}else{// If the size of this dataset is null, the new dataset's size is null.\nsize=null;}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee181(){return regeneratorRuntime.wrap(function _callee181$(_context184){while(1){switch(_context184.prev=_context184.next){case 0:_context184.next=2;return base.iterator();case 2:return _context184.abrupt(\"return\",_context184.sent.skip(count));case 3:case\"end\":return _context184.stop();}}},_callee181);})),size);}/**\r\n     * Pseudorandomly shuffles the elements of this dataset. This is done in a\r\n     * streaming manner, by sampling from a given number of prefetched elements.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param bufferSize: An integer specifying the number of elements from this\r\n     *   dataset from which the new dataset will sample.\r\n     * @param seed: (Optional) An integer specifying the random seed that will\r\n     *   be used to create the distribution.\r\n     * @param reshuffleEachIteration: (Optional) A boolean, which if true\r\n     *   indicates that the dataset should be pseudorandomly reshuffled each time\r\n     *   it is iterated over. If false, elements will be returned in the same\r\n     *   shuffled order on each iteration. (Defaults to `true`.)\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"shuffle\",value:function shuffle(bufferSize,seed){var reshuffleEachIteration=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(bufferSize==null||bufferSize<0){if(this.size==null){throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');}else{throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  '+'If your data fits in main memory (for regular JS objects), '+'and/or GPU memory (for `tf.Tensor`s), consider setting '+\"bufferSize to the dataset size (\".concat(this.size,\" elements)\"));}}var base=this;var random=seedrandom[\"alea\"](seed||dist[\"util\"].now().toString());return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee182(){var seed2;return regeneratorRuntime.wrap(function _callee182$(_context185){while(1){switch(_context185.prev=_context185.next){case 0:seed2=random.int32();if(reshuffleEachIteration){seed2+=random.int32();}_context185.next=4;return base.iterator();case 4:return _context185.abrupt(\"return\",_context185.sent.shuffle(bufferSize,seed2.toString()));case 5:case\"end\":return _context185.stop();}}},_callee182);})),this.size);}/**\r\n     * Creates a `Dataset` with at most `count` initial elements from this\r\n     * dataset.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\r\n     * await a.forEachAsync(e => console.log(e));\r\n     * ```\r\n     *\r\n     * @param count: The number of elements of this dataset that should be taken\r\n     *   to form the new dataset.  If `count` is `undefined` or negative, or if\r\n     *   `count` is greater than the size of this dataset, the new dataset will\r\n     *   contain all elements of this dataset.\r\n     * @returns A `Dataset`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"take\",value:function take(count){var base=this;var size;if(this.size!=null&&this.size>count){// If the size of this dataset is greater than count, the new dataset's\n// size is count.\nsize=count;}else if(this.size!=null&&this.size<=count){// If the size of this dataset is equal or smaller than count, the new\n// dataset's size is the size of this dataset.\nsize=this.size;}else{// If the size of this dataset is null, the new dataset's size is null.\nsize=null;}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee183(){return regeneratorRuntime.wrap(function _callee183$(_context186){while(1){switch(_context186.prev=_context186.next){case 0:_context186.next=2;return base.iterator();case 2:return _context186.abrupt(\"return\",_context186.sent.take(count));case 3:case\"end\":return _context186.stop();}}},_callee183);})),size);}/**\r\n     * Collect all elements of this dataset into an array.\r\n     *\r\n     * Obviously this will succeed only for small datasets that fit in memory.\r\n     * Useful for testing and generally should be avoided if possible.\r\n     *\r\n     * ```js\r\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\r\n     * console.log(await a.toArray());\r\n     * ```\r\n     *\r\n     * @returns A Promise for an array of elements, which will resolve\r\n     *   when a new stream has been obtained and fully consumed.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */},{key:\"toArray\",value:function(){var _toArray2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee184(){return regeneratorRuntime.wrap(function _callee184$(_context187){while(1){switch(_context187.prev=_context187.next){case 0:if(!(this.size===Infinity)){_context187.next=2;break;}throw new Error('Can not convert infinite data stream to array.');case 2:_context187.next=4;return this.iterator();case 4:return _context187.abrupt(\"return\",_context187.sent.toArray());case 5:case\"end\":return _context187.stop();}}},_callee184,this);}));function toArray(){return _toArray2.apply(this,arguments);}return toArray;}()/**\r\n     * Collect all elements of this dataset into an array with prefetching 100\r\n     * elements. This is useful for testing, because the prefetch changes the\r\n     * order in which the Promises are resolved along the processing pipeline.\r\n     * This may help expose bugs where results are dependent on the order of\r\n     * Promise resolution rather than on the logical order of the stream (i.e.,\r\n     * due to hidden mutable state).\r\n     *\r\n     * @returns A Promise for an array of elements, which will resolve\r\n     *   when a new stream has been obtained and fully consumed.\r\n     */},{key:\"toArrayForTest\",value:function(){var _toArrayForTest2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee185(){return regeneratorRuntime.wrap(function _callee185$(_context188){while(1){switch(_context188.prev=_context188.next){case 0:if(!(this.size===Infinity)){_context188.next=2;break;}throw new Error('Can not convert infinite data stream to array.');case 2:_context188.next=4;return this.iterator();case 4:return _context188.abrupt(\"return\",_context188.sent.toArrayForTest());case 5:case\"end\":return _context188.stop();}}},_callee185,this);}));function toArrayForTest(){return _toArrayForTest2.apply(this,arguments);}return toArrayForTest;}()}]);return dataset_Dataset;}();// TODO(soergel): deep sharded shuffle, where supported\ndataset_Dataset.MAX_BUFFER_SIZE=10000;/**\r\n * Create a `Dataset` defined by a provided iterator() function.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const iter = tf.data.iteratorFromFunction(func);\r\n * const ds = tf.data.datasetFromIteratorFn(iter);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n */function datasetFromIteratorFn(iteratorFn){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return new(/*#__PURE__*/function(_dataset_Dataset){_inherits(_class,_dataset_Dataset);var _super156=_createSuper(_class);function _class(){var _this252;_classCallCheck2(this,_class);_this252=_super156.apply(this,arguments);_this252.size=size;return _this252;}/*\r\n         * Provide a new stream of elements.  Note this will also start new streams\r\n         * from any underlying `Dataset`s.\r\n         */_createClass(_class,[{key:\"iterator\",value:function(){var _iterator121=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee186(){return regeneratorRuntime.wrap(function _callee186$(_context189){while(1){switch(_context189.prev=_context189.next){case 0:return _context189.abrupt(\"return\",iteratorFn());case 1:case\"end\":return _context189.stop();}}},_callee186);}));function iterator(){return _iterator121.apply(this,arguments);}return iterator;}()}]);return _class;}(dataset_Dataset))();}/**\r\n * Create a `Dataset` from an array of elements.\r\n *\r\n * Create a Dataset from an array of objects:\r\n * ```js\r\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\r\n * await a.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Create a Dataset from an array of numbers:\r\n * ```js\r\n * const a = tf.data.array([4, 5, 6]);\r\n * await a.forEachAsync(e => console.log(e));\r\n * ```\r\n * @param items An array of elements that will be parsed as items in a dataset.\r\n */ /** @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'} */function array(items){return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee187(){return regeneratorRuntime.wrap(function _callee187$(_context190){while(1){switch(_context190.prev=_context190.next){case 0:return _context190.abrupt(\"return\",Object(lazy_iterator[\"f\"/* iteratorFromItems */])(items));case 1:case\"end\":return _context190.stop();}}},_callee187);})),items.length);}/**\r\n * Create a `Dataset` by zipping together an array, dict, or nested\r\n * structure of `Dataset`s (and perhaps additional constants).\r\n * The underlying datasets must provide elements in a consistent order such that\r\n * they correspond.\r\n *\r\n * The number of elements in the resulting dataset is the same as the size of\r\n * the smallest dataset in datasets.\r\n *\r\n * The nested structure of the `datasets` argument determines the\r\n * structure of elements in the resulting iterator.\r\n *\r\n * Note this means that, given an array of two datasets that produce dict\r\n * elements, the result is a dataset that produces elements that are arrays\r\n * of two dicts:\r\n *\r\n * Zip an array of datasets:\r\n * ```js\r\n * console.log('Zip two datasets of objects:');\r\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\r\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\r\n * const ds3 = tf.data.zip([ds1, ds2]);\r\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\r\n *\r\n * // If the goal is to merge the dicts in order to produce elements like\r\n * // {a: ..., b: ...}, this requires a second step such as:\r\n * console.log('Merge the objects:');\r\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\r\n * await ds4.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Zip a dict of datasets:\r\n * ```js\r\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\r\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\r\n * const c = tf.data.zip({c: a, d: b});\r\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\r\n * ```\r\n */ /** @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'} */function zip(datasets){// manually type-check the argument for JS users\nif(!Object(deep_map[\"e\"/* isIterable */])(datasets)){throw new Error('The argument to zip() must be an object or array.');}var size;if(Array.isArray(datasets)){for(var i=0;i<datasets.length;i++){size=size==null?datasets[i].size:Math.min(size,datasets[i].size);}}else if(datasets instanceof Object){for(var ds in datasets){size=size==null?datasets[ds].size:Math.min(size,datasets[ds].size);}}return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee188(){var streams;return regeneratorRuntime.wrap(function _callee188$(_context191){while(1){switch(_context191.prev=_context191.next){case 0:_context191.next=2;return Object(deep_map[\"c\"/* deepMapAndAwaitAll */])(datasets,function(d){if(d instanceof dataset_Dataset){return{value:d.iterator(),recurse:false};}else if(Object(deep_map[\"e\"/* isIterable */])(d)){return{value:null,recurse:true};}else{throw new Error('Leaves of the structure passed to zip() must be Datasets, '+'not primitives.');}});case 2:streams=_context191.sent;return _context191.abrupt(\"return\",Object(lazy_iterator[\"g\"/* iteratorFromZipped */])(streams,lazy_iterator[\"c\"/* ZipMismatchMode */].SHORTEST));case 4:case\"end\":return _context191.stop();}}},_callee188);})),size);}/**\r\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\r\n *\r\n * Accepts an array of identically-structured nested elements and either batches\r\n * them (if they are primitives, numeric arrays, or Tensors) or requests\r\n * recursion (if not).\r\n */ // tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows){if(rows===null){return null;}// use the first item to decide whether to recurse or batch here.\nvar exampleRow=rows[0];if(Object(deep_map[\"a\"/* canTensorify */])(exampleRow)){// rows is an array of primitives, Tensors, or arrays.  Batch them.\nvar value=batchConcat(rows);return{value:value,recurse:false};}// the example row is an object, so recurse into it.\nreturn{value:null,recurse:true};}/**\r\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\r\n * into a single new Tensor where axis 0 is the batch dimension.\r\n */function batchConcat(arrays){if(arrays.length===0){// We can't return an empty Tensor because we don't know the element shape.\nthrow new Error('Can\\'t make a batch of zero elements.');}if(arrays[0]instanceof dist[\"Tensor\"]){// Input is an array of Tensors\nreturn dist[\"stack\"](arrays);}else{// Input is a possibly-nested array of numbers.\nreturn dist[\"tensor\"](arrays);}}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/datasets/text_line_dataset.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Represents a potentially large collection of text lines.\r\n *\r\n * The results are not batched.\r\n */var text_line_dataset_TextLineDataset=/*#__PURE__*/function(_dataset_Dataset2){_inherits(text_line_dataset_TextLineDataset,_dataset_Dataset2);var _super157=_createSuper(text_line_dataset_TextLineDataset);/**\r\n     * Create a `TextLineDataset`.\r\n     *\r\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\r\n     */function text_line_dataset_TextLineDataset(input){var _this253;_classCallCheck2(this,text_line_dataset_TextLineDataset);_this253=_super157.call(this);_this253.input=input;return _this253;}_createClass(text_line_dataset_TextLineDataset,[{key:\"iterator\",value:function(){var _iterator122=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee189(){var inputIterator,utf8Iterator,lineIterator;return regeneratorRuntime.wrap(function _callee189$(_context192){while(1){switch(_context192.prev=_context192.next){case 0:_context192.next=2;return this.input.iterator();case 2:inputIterator=_context192.sent;utf8Iterator=inputIterator.decodeUTF8();lineIterator=utf8Iterator.split('\\n').map(function(line){// Windows/DOS format text file has extra line breaker at the end of line.\nif(line.endsWith('\\r')){line=line.slice(0,-1);}return line;});return _context192.abrupt(\"return\",lineIterator);case 6:case\"end\":return _context192.stop();}}},_callee189,this);}));function iterator(){return _iterator122.apply(this,arguments);}return iterator;}()}]);return text_line_dataset_TextLineDataset;}(dataset_Dataset);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */var CODE_QUOTE='\"';var STATE_OUT=Symbol('out');var STATE_FIELD=Symbol('field');var STATE_QUOTE=Symbol('quote');var STATE_QUOTE_AFTER_QUOTE=Symbol('quoteafterquote');var STATE_WITHIN_QUOTE_IN_QUOTE=Symbol('quoteinquote');/**\r\n * Represents a potentially large collection of delimited text records.\r\n *\r\n * The produced `TensorContainer`s each contain one key-value pair for\r\n * every column of the table.  When a field is empty in the incoming data, the\r\n * resulting value is `undefined`, or throw error if it is required.  Values\r\n * that can be parsed as numbers are emitted as type `number`, other values\r\n * are parsed as `string`.\r\n *\r\n * The results are not batched.\r\n */ /** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */var csv_dataset_CSVDataset=/*#__PURE__*/function(_dataset_Dataset3){_inherits(csv_dataset_CSVDataset,_dataset_Dataset3);var _super158=_createSuper(csv_dataset_CSVDataset);/**\r\n     * Create a `CSVDataset`.\r\n     *\r\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\r\n     * @param csvConfig (Optional) A CSVConfig object that contains configurations\r\n     *     of reading and decoding from CSV file(s).\r\n     *\r\n     *     hasHeader: (Optional) A boolean value that indicates whether the first\r\n     *     row of provided CSV file is a header line with column names, and should\r\n     *     not be included in the data. Defaults to `true`.\r\n     *\r\n     *     columnNames: (Optional) A list of strings that corresponds to\r\n     *     the CSV column names, in order. If provided, it ignores the column\r\n     *     names inferred from the header row. If not provided, infers the column\r\n     *     names from the first row of the records. If hasHeader is false and\r\n     *     columnNames is not provided, this method throws an error.\r\n     *\r\n     *     columnConfigs: (Optional) A dictionary whose key is column names, value\r\n     *     is an object stating if this column is required, column's data type,\r\n     *     default value, and if this column is label. If provided, keys must\r\n     *     correspond to names provided in columnNames or inferred from the file\r\n     *     header lines. If isLabel is true any column, returns an array of two\r\n     *     items: the first item is a dict of features key/value pairs, the second\r\n     *     item is a dict of labels key/value pairs. If no feature is marked as\r\n     *     label, returns a dict of features only.\r\n     *\r\n     *     configuredColumnsOnly (Optional) If true, only columns provided in\r\n     *     columnConfigs will be parsed and provided during iteration.\r\n     *\r\n     *     delimiter (Optional) The string used to parse each line of the input\r\n     *     file. Defaults to `,`.\r\n     */function csv_dataset_CSVDataset(input,csvConfig){var _this254;_classCallCheck2(this,csv_dataset_CSVDataset);_this254=_super158.call(this);_this254.input=input;_this254.hasHeader=true;_this254.fullColumnNames=null;_this254.columnNamesValidated=false;_this254.columnConfigs=null;_this254.configuredColumnsOnly=false;_this254.delimiter=',';_this254.delimWhitespace=false;_this254.base=new text_line_dataset_TextLineDataset(input);if(!csvConfig){csvConfig={};}_this254.hasHeader=csvConfig.hasHeader===false?false:true;_this254.fullColumnNames=csvConfig.columnNames;_this254.columnConfigs=csvConfig.columnConfigs;_this254.configuredColumnsOnly=csvConfig.configuredColumnsOnly;if(csvConfig.delimWhitespace){dist[\"util\"].assert(csvConfig.delimiter==null,function(){return'Delimiter should not be provided when delimWhitespace is true.';});_this254.delimWhitespace=true;_this254.delimiter=' ';}else{_this254.delimiter=csvConfig.delimiter?csvConfig.delimiter:',';}return _this254;}/**\r\n     * Returns column names of the csv dataset. If `configuredColumnsOnly` is\r\n     * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\r\n     * false and `columnNames` is provided, `columnNames`. If\r\n     * `configuredColumnsOnly` is false and `columnNames` is not provided, return\r\n     * all column names parsed from the csv file. For example usage please go to\r\n     * `tf.data.csv`.\r\n     */ /** @doc {heading: 'Data', subheading: 'Classes'} */_createClass(csv_dataset_CSVDataset,[{key:\"columnNames\",value:function(){var _columnNames=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee190(){return regeneratorRuntime.wrap(function _callee190$(_context193){while(1){switch(_context193.prev=_context193.next){case 0:if(this.columnNamesValidated){_context193.next=3;break;}_context193.next=3;return this.setColumnNames();case 3:return _context193.abrupt(\"return\",this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames);case 4:case\"end\":return _context193.stop();}}},_callee190,this);}));function columnNames(){return _columnNames.apply(this,arguments);}return columnNames;}()/* 1) If `columnNames` is provided as string[], use this string[] as output\r\n     * keys in corresponding order. The length must match the number of inferred\r\n     * columns if `hasHeader` is true .\r\n     * 2) If `columnNames` is not provided, parse header line as `columnNames` if\r\n     * hasHeader is true. If `hasHeader` is false, throw an error.\r\n     * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\r\n     * exist in parsed `columnNames`.\r\n     */},{key:\"setColumnNames\",value:function(){var _setColumnNames=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee191(){var _this255=this;var columnNamesFromFile,counts,duplicateNames,_i89,_Object$keys9,key,index;return regeneratorRuntime.wrap(function _callee191$(_context194){while(1){switch(_context194.prev=_context194.next){case 0:_context194.next=2;return this.maybeReadHeaderLine();case 2:columnNamesFromFile=_context194.sent;if(!(!this.fullColumnNames&&!columnNamesFromFile)){_context194.next=7;break;}throw new Error('Column names must be provided if there is no header line.');case 7:if(this.fullColumnNames&&columnNamesFromFile){// Check provided columnNames match header line.\ndist[\"util\"].assert(columnNamesFromFile.length===this.fullColumnNames.length,function(){return'The length of provided columnNames ('+_this255.fullColumnNames.length.toString()+') does not match the length of the header line read from '+'file ('+columnNamesFromFile.length.toString()+').';});}case 8:if(!this.fullColumnNames){this.fullColumnNames=columnNamesFromFile;}// Check if there are duplicate column names.\ncounts=this.fullColumnNames.reduce(function(countAcc,name){countAcc[name]=countAcc[name]+1||1;return countAcc;},{});duplicateNames=Object.keys(counts).filter(function(name){return counts[name]>1;});dist[\"util\"].assert(duplicateNames.length===0,function(){return'Duplicate column names found: '+duplicateNames.toString();});// Check if keys in columnConfigs match columnNames.\nif(!this.columnConfigs){_context194.next=22;break;}_i89=0,_Object$keys9=Object.keys(this.columnConfigs);case 14:if(!(_i89<_Object$keys9.length)){_context194.next=22;break;}key=_Object$keys9[_i89];index=this.fullColumnNames.indexOf(key);if(!(index===-1)){_context194.next=19;break;}throw new Error('The key \"'+key+'\" provided in columnConfigs does not match any of the column '+'names ('+this.fullColumnNames.toString()+').');case 19:_i89++;_context194.next=14;break;case 22:this.columnNamesValidated=true;case 23:case\"end\":return _context194.stop();}}},_callee191,this);}));function setColumnNames(){return _setColumnNames.apply(this,arguments);}return setColumnNames;}()},{key:\"maybeReadHeaderLine\",value:function(){var _maybeReadHeaderLine=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee192(){var iter,firstElement,firstLine,headers;return regeneratorRuntime.wrap(function _callee192$(_context195){while(1){switch(_context195.prev=_context195.next){case 0:if(!this.hasHeader){_context195.next=14;break;}_context195.next=3;return this.base.iterator();case 3:iter=_context195.sent;_context195.next=6;return iter.next();case 6:firstElement=_context195.sent;if(!firstElement.done){_context195.next=9;break;}throw new Error('No data was found for CSV parsing.');case 9:firstLine=firstElement.value;headers=this.parseRow(firstLine,false);return _context195.abrupt(\"return\",headers);case 14:return _context195.abrupt(\"return\",null);case 15:case\"end\":return _context195.stop();}}},_callee192,this);}));function maybeReadHeaderLine(){return _maybeReadHeaderLine.apply(this,arguments);}return maybeReadHeaderLine;}()},{key:\"iterator\",value:function(){var _iterator123=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee193(){var _this256=this;var lines;return regeneratorRuntime.wrap(function _callee193$(_context196){while(1){switch(_context196.prev=_context196.next){case 0:if(this.columnNamesValidated){_context196.next=3;break;}_context196.next=3;return this.setColumnNames();case 3:_context196.next=5;return this.base.iterator();case 5:lines=_context196.sent;if(this.hasHeader){// We previously read the first line to get the columnNames.\n// Now that we're providing data, skip it.\nlines=lines.skip(1);}return _context196.abrupt(\"return\",lines.map(function(x){return _this256.makeDataElement(x);}));case 8:case\"end\":return _context196.stop();}}},_callee193,this);}));function iterator(){return _iterator123.apply(this,arguments);}return iterator;}()},{key:\"makeDataElement\",value:function makeDataElement(line){var values=this.parseRow(line);var features={};var labels={};for(var i=0;i<this.fullColumnNames.length;i++){var key=this.fullColumnNames[i];var config=this.columnConfigs?this.columnConfigs[key]:null;if(this.configuredColumnsOnly&&!config){// This column is not selected.\ncontinue;}else{var value=values[i];var parsedValue=null;if(value===''){// If default value is provided, use it. If default value is not\n// provided, set as undefined.\nif(config&&config.default!==undefined){parsedValue=config.default;}else if(config&&(config.required||config.isLabel)){throw new Error(\"Required column \".concat(key,\" is empty in this line: \").concat(line));}else{parsedValue=undefined;}}else{// A value is present, so parse it based on type\nvar valueAsNum=Number(value);if(isNaN(valueAsNum)){// The value is a string and this column is declared as boolean\n// in config, parse it as boolean.\nif(config&&config.dtype==='bool'){parsedValue=this.getBoolean(value);}else{// Set value as string\nparsedValue=value;}}else if(!config||!config.dtype){// If this value is a number and no type config is provided, return\n// it as number.\nparsedValue=valueAsNum;}else{// If this value is a number and data type is provided, parse it\n// according to provided data type.\nswitch(config.dtype){case'float32':parsedValue=valueAsNum;break;case'int32':parsedValue=Math.floor(valueAsNum);break;case'bool':parsedValue=this.getBoolean(value);break;default:parsedValue=valueAsNum;}}}// Check if this column is label.\nconfig&&config.isLabel?labels[key]=parsedValue:features[key]=parsedValue;}}// If label exists, return an object of features and labels as {xs:features,\n// ys:labels}, otherwise return features only.\nif(Object.keys(labels).length===0){return features;}else{return{xs:features,ys:labels};}}},{key:\"getBoolean\",value:function getBoolean(value){if(value==='1'||value.toLowerCase()==='true'){return 1;}else{return 0;}}// adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n},{key:\"parseRow\",value:function parseRow(line){var validateElementCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var result=[];var readOffset=0;var readLength=line.length;var currentState=STATE_OUT;// Goes through the line to parse quote.\nfor(var i=0;i<readLength;i++){switch(currentState){// Before enter a new field\ncase STATE_OUT:switch(line.charAt(i)){// Enter a quoted field\ncase CODE_QUOTE:readOffset=i+1;currentState=STATE_QUOTE;break;// Read an empty field\ncase this.delimiter:readOffset=i+1;// If delimiter is white space and configured to collapse\n// multiple white spaces, ignore this white space.\nif(this.delimiter===' '&&this.delimWhitespace){break;}result.push('');currentState=STATE_OUT;break;// Enter an unquoted field\ndefault:currentState=STATE_FIELD;readOffset=i;break;}break;// In an unquoted field\ncase STATE_FIELD:switch(line.charAt(i)){// Exit an unquoted field, add it to result\ncase this.delimiter:result.push(line.substring(readOffset,i));currentState=STATE_OUT;readOffset=i+1;break;default:}break;// In a quoted field\ncase STATE_QUOTE:switch(line.charAt(i)){// Read a quote after a quote\ncase CODE_QUOTE:currentState=STATE_QUOTE_AFTER_QUOTE;break;default:}break;// This state means it's right after a second quote in a field\ncase STATE_QUOTE_AFTER_QUOTE:switch(line.charAt(i)){// Finished a quoted field\ncase this.delimiter:result.push(line.substring(readOffset,i-1));currentState=STATE_OUT;readOffset=i+1;break;// Finished a quoted part in a quoted field\ncase CODE_QUOTE:currentState=STATE_QUOTE;break;// In a quoted part in a quoted field\ndefault:currentState=STATE_WITHIN_QUOTE_IN_QUOTE;break;}break;case STATE_WITHIN_QUOTE_IN_QUOTE:switch(line.charAt(i)){// Exit a quoted part in a quoted field\ncase CODE_QUOTE:currentState=STATE_QUOTE;break;default:}break;default:}}// Adds last item based on if it is quoted.\nif(currentState===STATE_QUOTE_AFTER_QUOTE){result.push(line.substring(readOffset,readLength-1));}else{result.push(line.substring(readOffset));}// Check if each row has the same number of elements as column names.\nif(validateElementCount&&result.length!==this.fullColumnNames.length){throw new Error(\"Invalid row in csv file. Should have \".concat(this.fullColumnNames.length,\" elements in a row, but got \").concat(result));}return result;}}]);return csv_dataset_CSVDataset;}(dataset_Dataset);// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Provide a stream of tensors from microphone audio stream. The tensors are\r\n * representing audio data as frequency-domain spectrogram generated with\r\n * browser's native FFT. Tensors representing time-domain waveform is available\r\n * based on configuration. Only works in browser environment.\r\n */var microphone_iterator_MicrophoneIterator=/*#__PURE__*/function(_lazy_iterator$a){_inherits(microphone_iterator_MicrophoneIterator,_lazy_iterator$a);var _super159=_createSuper(microphone_iterator_MicrophoneIterator);function microphone_iterator_MicrophoneIterator(microphoneConfig){var _this257;_classCallCheck2(this,microphone_iterator_MicrophoneIterator);_this257=_super159.call(this);_this257.microphoneConfig=microphoneConfig;_this257.isClosed=false;_this257.fftSize=microphoneConfig.fftSize||1024;var fftSizeLog2=Math.log2(_this257.fftSize);if(_this257.fftSize<0||fftSizeLog2<4||fftSizeLog2>14||!Number.isInteger(fftSizeLog2)){throw new Error(\"Invalid fftSize: it must be a power of 2 between \"+\"2 to 4 and 2 to 14, but got \".concat(_this257.fftSize));}_this257.numFrames=microphoneConfig.numFramesPerSpectrogram||43;_this257.sampleRateHz=microphoneConfig.sampleRateHz;_this257.columnTruncateLength=microphoneConfig.columnTruncateLength||_this257.fftSize;_this257.audioTrackConstraints=microphoneConfig.audioTrackConstraints;_this257.smoothingTimeConstant=microphoneConfig.smoothingTimeConstant||0;_this257.includeSpectrogram=microphoneConfig.includeSpectrogram===false?false:true;_this257.includeWaveform=microphoneConfig.includeWaveform===true?true:false;if(!_this257.includeSpectrogram&&!_this257.includeWaveform){throw new Error('Both includeSpectrogram and includeWaveform are false. '+'At least one type of data should be returned.');}return _this257;}_createClass(microphone_iterator_MicrophoneIterator,[{key:\"summary\",value:function summary(){return\"microphone\";}// Construct a MicrophoneIterator and start the audio stream.\n},{key:\"start\",value:// Start the audio stream and FFT.\nfunction(){var _start4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee194(){var ctxConstructor,streamSource;return regeneratorRuntime.wrap(function _callee194$(_context197){while(1){switch(_context197.prev=_context197.next){case 0:_context197.prev=0;_context197.next=3;return navigator.mediaDevices.getUserMedia({audio:this.audioTrackConstraints==null?true:this.audioTrackConstraints,video:false});case 3:this.stream=_context197.sent;_context197.next=9;break;case 6:_context197.prev=6;_context197.t0=_context197[\"catch\"](0);throw new Error(\"Error thrown while initializing video stream: \".concat(_context197.t0.message));case 9:if(this.stream){_context197.next=11;break;}throw new Error('Could not obtain audio from microphone.');case 11:ctxConstructor=// tslint:disable-next-line:no-any\nwindow.AudioContext||window.webkitAudioContext;this.audioContext=new ctxConstructor();if(this.sampleRateHz){_context197.next=17;break;}// If sample rate is not provided, use the available sample rate on\n// device.\nthis.sampleRateHz=this.audioContext.sampleRate;_context197.next=19;break;case 17:if(!(this.audioContext.sampleRate!==this.sampleRateHz)){_context197.next=19;break;}throw new Error(\"Mismatch in sampling rate: \"+\"Expected: \".concat(this.sampleRateHz,\"; \")+\"Actual: \".concat(this.audioContext.sampleRate));case 19:streamSource=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser();this.analyser.fftSize=this.fftSize*2;this.analyser.smoothingTimeConstant=this.smoothingTimeConstant;streamSource.connect(this.analyser);this.freqData=new Float32Array(this.fftSize);this.timeData=new Float32Array(this.fftSize);return _context197.abrupt(\"return\");case 27:case\"end\":return _context197.stop();}}},_callee194,this,[[0,6]]);}));function start(){return _start4.apply(this,arguments);}return start;}()},{key:\"next\",value:function(){var _next17=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee195(){var spectrogramTensor,waveformTensor,audioDataQueue,freqData,timeData;return regeneratorRuntime.wrap(function _callee195$(_context198){while(1){switch(_context198.prev=_context198.next){case 0:if(!this.isClosed){_context198.next=2;break;}return _context198.abrupt(\"return\",{value:null,done:true});case 2:_context198.next=4;return this.getAudioData();case 4:audioDataQueue=_context198.sent;if(this.includeSpectrogram){freqData=this.flattenQueue(audioDataQueue.freqDataQueue);spectrogramTensor=this.getTensorFromAudioDataArray(freqData,[this.numFrames,this.columnTruncateLength,1]);}if(this.includeWaveform){timeData=this.flattenQueue(audioDataQueue.timeDataQueue);waveformTensor=this.getTensorFromAudioDataArray(timeData,[this.numFrames*this.fftSize,1]);}return _context198.abrupt(\"return\",{value:{'spectrogram':spectrogramTensor,'waveform':waveformTensor},done:false});case 8:case\"end\":return _context198.stop();}}},_callee195,this);}));function next(){return _next17.apply(this,arguments);}return next;}()// Capture one result from the audio stream, and extract the value from\n// iterator.next() result.\n},{key:\"capture\",value:function(){var _capture=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee196(){return regeneratorRuntime.wrap(function _callee196$(_context199){while(1){switch(_context199.prev=_context199.next){case 0:_context199.next=2;return this.next();case 2:return _context199.abrupt(\"return\",_context199.sent.value);case 3:case\"end\":return _context199.stop();}}},_callee196,this);}));function capture(){return _capture.apply(this,arguments);}return capture;}()},{key:\"getAudioData\",value:function(){var _getAudioData=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee197(){var _this258=this;var freqDataQueue,timeDataQueue,currentFrames;return regeneratorRuntime.wrap(function _callee197$(_context200){while(1){switch(_context200.prev=_context200.next){case 0:freqDataQueue=[];timeDataQueue=[];currentFrames=0;return _context200.abrupt(\"return\",new Promise(function(resolve){var intervalID=setInterval(function(){if(_this258.includeSpectrogram){_this258.analyser.getFloatFrequencyData(_this258.freqData);// If the audio stream is initializing, return empty queue.\nif(_this258.freqData[0]===-Infinity){resolve({freqDataQueue:freqDataQueue,timeDataQueue:timeDataQueue});}freqDataQueue.push(_this258.freqData.slice(0,_this258.columnTruncateLength));}if(_this258.includeWaveform){_this258.analyser.getFloatTimeDomainData(_this258.timeData);timeDataQueue.push(_this258.timeData.slice());}// Clean interval and return when all frames have been collected\nif(++currentFrames===_this258.numFrames){clearInterval(intervalID);resolve({freqDataQueue:freqDataQueue,timeDataQueue:timeDataQueue});}},_this258.fftSize/_this258.sampleRateHz*1e3);}));case 4:case\"end\":return _context200.stop();}}},_callee197);}));function getAudioData(){return _getAudioData.apply(this,arguments);}return getAudioData;}()// Stop the audio stream and pause the iterator.\n},{key:\"stop\",value:function stop(){if(!this.isClosed){this.isClosed=true;this.analyser.disconnect();this.audioContext.close();if(this.stream!=null&&this.stream.getTracks().length>0){this.stream.getTracks()[0].stop();}}}// Override toArray() function to prevent collecting.\n},{key:\"toArray\",value:function toArray(){throw new Error('Can not convert infinite audio stream to array.');}// Return audio sampling rate in Hz\n},{key:\"getSampleRate\",value:function getSampleRate(){return this.sampleRateHz;}},{key:\"flattenQueue\",value:function flattenQueue(queue){var frameSize=queue[0].length;var freqData=new Float32Array(queue.length*frameSize);queue.forEach(function(data,i){return freqData.set(data,i*frameSize);});return freqData;}},{key:\"getTensorFromAudioDataArray\",value:function getTensorFromAudioDataArray(freqData,shape){var vals=new Float32Array(dist[\"util\"].sizeFromShape(shape));// If the data is less than the output shape, the rest is padded with zeros.\nvals.set(freqData,vals.length-freqData.length);return Object(dist[\"tensor\"])(vals,shape);}}],[{key:\"create\",value:function(){var _create=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee198(){var microphoneConfig,microphoneIterator,_args203=arguments;return regeneratorRuntime.wrap(function _callee198$(_context201){while(1){switch(_context201.prev=_context201.next){case 0:microphoneConfig=_args203.length>0&&_args203[0]!==undefined?_args203[0]:{};if(!Object(dist[\"env\"])().get('IS_NODE')){_context201.next=3;break;}throw new Error('microphone API is only supported in browser environment.');case 3:microphoneIterator=new microphone_iterator_MicrophoneIterator(microphoneConfig);// Call async function start() to initialize the audio stream.\n_context201.next=6;return microphoneIterator.start();case 6:return _context201.abrupt(\"return\",microphoneIterator);case 7:case\"end\":return _context201.stop();}}},_callee198);}));function create(){return _create.apply(this,arguments);}return create;}()}]);return microphone_iterator_MicrophoneIterator;}(lazy_iterator[\"a\"/* LazyIterator */]);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Provide a stream of image tensors from webcam video stream. Only works in\r\n * browser environment.\r\n */var webcam_iterator_WebcamIterator=/*#__PURE__*/function(_lazy_iterator$a2){_inherits(webcam_iterator_WebcamIterator,_lazy_iterator$a2);var _super160=_createSuper(webcam_iterator_WebcamIterator);function webcam_iterator_WebcamIterator(webcamVideoElement,webcamConfig){var _this259;_classCallCheck2(this,webcam_iterator_WebcamIterator);_this259=_super160.call(this);_this259.webcamVideoElement=webcamVideoElement;_this259.webcamConfig=webcamConfig;_this259.isClosed=true;_this259.resize=false;if(_this259.needToResize()){_this259.resize=true;_this259.cropSize=[_this259.webcamConfig.resizeHeight,_this259.webcamConfig.resizeWidth];_this259.cropBoxInd=Object(dist[\"tensor1d\"])([0],'int32');if(_this259.webcamConfig.centerCrop){// Calculate the box based on resizing shape.\nvar widthCroppingRatio=_this259.webcamConfig.resizeWidth*1.0/_this259.webcamVideoElement.width;var heightCroppingRatio=_this259.webcamConfig.resizeHeight*1.0/_this259.webcamVideoElement.height;var widthCropStart=(1-widthCroppingRatio)/2;var heightCropStart=(1-heightCroppingRatio)/2;var widthCropEnd=widthCropStart+widthCroppingRatio;var heightCropEnd=heightCroppingRatio+heightCropStart;_this259.cropBox=Object(dist[\"tensor2d\"])([heightCropStart,widthCropStart,heightCropEnd,widthCropEnd],[1,4]);}else{_this259.cropBox=Object(dist[\"tensor2d\"])([0,0,1,1],[1,4]);}}return _this259;}_createClass(webcam_iterator_WebcamIterator,[{key:\"summary\",value:function summary(){return\"webcam\";}// Construct a WebcamIterator and start it's video stream.\n},{key:\"start\",value:// Async function to start video stream.\nfunction(){var _start5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee199(){var _this260=this;return regeneratorRuntime.wrap(function _callee199$(_context202){while(1){switch(_context202.prev=_context202.next){case 0:if(this.webcamConfig.facingMode){dist[\"util\"].assert(this.webcamConfig.facingMode==='user'||this.webcamConfig.facingMode==='environment',function(){return\"Invalid webcam facing mode: \".concat(_this260.webcamConfig.facingMode,\". \")+\"Please provide 'user' or 'environment'\";});}_context202.prev=1;_context202.next=4;return navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:'user',width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}});case 4:this.stream=_context202.sent;_context202.next=11;break;case 7:_context202.prev=7;_context202.t0=_context202[\"catch\"](1);// Modify the error message but leave the stack trace intact\n_context202.t0.message=\"Error thrown while initializing video stream: \".concat(_context202.t0.message);throw _context202.t0;case 11:if(this.stream){_context202.next=13;break;}throw new Error('Could not obtain video from webcam.');case 13:// Older browsers may not have srcObject\ntry{this.webcamVideoElement.srcObject=this.stream;}catch(error){console.log(error);this.webcamVideoElement.src=window.URL.createObjectURL(this.stream);}// Start the webcam video stream\nthis.webcamVideoElement.play();this.isClosed=false;return _context202.abrupt(\"return\",new Promise(function(resolve){// Add event listener to make sure the webcam has been fully initialized.\n_this260.webcamVideoElement.onloadedmetadata=function(){resolve();};}));case 17:case\"end\":return _context202.stop();}}},_callee199,this,[[1,7]]);}));function start(){return _start5.apply(this,arguments);}return start;}()},{key:\"next\",value:function(){var _next18=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee200(){var img;return regeneratorRuntime.wrap(function _callee200$(_context203){while(1){switch(_context203.prev=_context203.next){case 0:if(!this.isClosed){_context203.next=2;break;}return _context203.abrupt(\"return\",{value:null,done:true});case 2:_context203.prev=2;img=dist[\"browser\"].fromPixels(this.webcamVideoElement);_context203.next=9;break;case 6:_context203.prev=6;_context203.t0=_context203[\"catch\"](2);throw new Error(\"Error thrown converting video to pixels: \".concat(JSON.stringify(_context203.t0)));case 9:if(!this.resize){_context203.next=22;break;}_context203.prev=10;return _context203.abrupt(\"return\",{value:this.cropAndResizeFrame(img),done:false});case 14:_context203.prev=14;_context203.t1=_context203[\"catch\"](10);throw new Error(\"Error thrown cropping the video: \".concat(_context203.t1.message));case 17:_context203.prev=17;img.dispose();return _context203.finish(17);case 20:_context203.next=23;break;case 22:return _context203.abrupt(\"return\",{value:img,done:false});case 23:case\"end\":return _context203.stop();}}},_callee200,this,[[2,6],[10,14,17,20]]);}));function next(){return _next18.apply(this,arguments);}return next;}()},{key:\"needToResize\",value:function needToResize(){// If resizeWidth and resizeHeight are provided, and different from the\n// width and height of original HTMLVideoElement, then resizing and cropping\n// is required.\nif(this.webcamConfig.resizeWidth&&this.webcamConfig.resizeHeight&&(this.webcamVideoElement.width!==this.webcamConfig.resizeWidth||this.webcamVideoElement.height!==this.webcamConfig.resizeHeight)){return true;}return false;}// Cropping and resizing each frame based on config\n},{key:\"cropAndResizeFrame\",value:function cropAndResizeFrame(img){var _this261=this;return Object(dist[\"tidy\"])(function(){var expandedImage=img.toFloat().expandDims(0);var resizedImage;resizedImage=dist[\"image\"].cropAndResize(expandedImage,_this261.cropBox,_this261.cropBoxInd,_this261.cropSize,'bilinear');// Extract image from batch cropping.\nvar shape=resizedImage.shape;return resizedImage.reshape(shape.slice(1));});}// Capture one frame from the video stream, and extract the value from\n// iterator.next() result.\n},{key:\"capture\",value:function(){var _capture2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee201(){return regeneratorRuntime.wrap(function _callee201$(_context204){while(1){switch(_context204.prev=_context204.next){case 0:_context204.next=2;return this.next();case 2:return _context204.abrupt(\"return\",_context204.sent.value);case 3:case\"end\":return _context204.stop();}}},_callee201,this);}));function capture(){return _capture2.apply(this,arguments);}return capture;}()// Stop the video stream and pause webcam iterator.\n},{key:\"stop\",value:function stop(){var tracks=this.stream.getTracks();tracks.forEach(function(track){return track.stop();});try{this.webcamVideoElement.srcObject=null;}catch(error){console.log(error);this.webcamVideoElement.src=null;}this.isClosed=true;}// Override toArray() function to prevent collecting.\n},{key:\"toArray\",value:function toArray(){throw new Error('Can not convert infinite video stream to array.');}}],[{key:\"create\",value:function(){var _create2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee202(webcamVideoElement){var webcamConfig,webcamIterator,_args207=arguments;return regeneratorRuntime.wrap(function _callee202$(_context205){while(1){switch(_context205.prev=_context205.next){case 0:webcamConfig=_args207.length>1&&_args207[1]!==undefined?_args207[1]:{};if(!Object(dist[\"env\"])().get('IS_NODE')){_context205.next=3;break;}throw new Error('tf.data.webcam is only supported in browser environment.');case 3:if(webcamVideoElement){_context205.next=9;break;}// If webcam video element is not provided, create a hidden video element\n// with provided width and height.\nwebcamVideoElement=document.createElement('video');if(!(!webcamConfig.resizeWidth||!webcamConfig.resizeHeight)){_context205.next=7;break;}throw new Error('Please provide webcam video element, or resizeWidth and '+'resizeHeight to create a hidden video element.');case 7:webcamVideoElement.width=webcamConfig.resizeWidth;webcamVideoElement.height=webcamConfig.resizeHeight;case 9:webcamIterator=new webcam_iterator_WebcamIterator(webcamVideoElement,webcamConfig);// Call async function to initialize the video stream.\n_context205.next=12;return webcamIterator.start();case 12:return _context205.abrupt(\"return\",webcamIterator);case 13:case\"end\":return _context205.stop();}}},_callee202);}));function create(_x225){return _create2.apply(this,arguments);}return create;}()}]);return webcam_iterator_WebcamIterator;}(lazy_iterator[\"a\"/* LazyIterator */]);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/datasource.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Represents a data source readable as a stream of binary data chunks.\r\n *\r\n * Because `Dataset`s can be read repeatedly (via `Dataset.iterator()`), this\r\n * provides a means to repeatedly create streams from the underlying data\r\n * sources.\r\n */var DataSource=function DataSource(){_classCallCheck2(this,DataSource);};// TODO(soergel): consider convenience factory functions here\n// in combination with chainable source->dataset above, e.g.:\n// tf.data.url(...).asCsvDataset().shuffle().batch()\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/byte_chunk_iterator.js\nvar byte_chunk_iterator=__webpack_require__(57);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ // inspired by https://github.com/maxogden/filereader-stream\n/**\r\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\r\n * @param file The source File, Blob or Uint8Array.\r\n * @param options Optional settings controlling file reading.\r\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\r\n *   input File, Blob or Uint8Array.\r\n */var file_chunk_iterator_FileChunkIterator=/*#__PURE__*/function(_byte_chunk_iterator$){_inherits(file_chunk_iterator_FileChunkIterator,_byte_chunk_iterator$);var _super161=_createSuper(file_chunk_iterator_FileChunkIterator);function file_chunk_iterator_FileChunkIterator(file){var _this262;var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck2(this,file_chunk_iterator_FileChunkIterator);_this262=_super161.call(this);_this262.file=file;_this262.options=options;dist[\"util\"].assert(file instanceof Uint8Array||(Object(dist[\"env\"])().get('IS_BROWSER')?file instanceof File||file instanceof Blob:false),function(){return'FileChunkIterator only supports File, Blob and Uint8Array '+'right now.';});_this262.offset=options.offset||0;// default 1MB chunk has tolerable perf on large files\n_this262.chunkSize=options.chunkSize||1024*1024;return _this262;}_createClass(file_chunk_iterator_FileChunkIterator,[{key:\"summary\",value:function summary(){return\"FileChunks \".concat(this.file);}},{key:\"next\",value:function(){var _next19=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee203(){var _this263=this;var chunk;return regeneratorRuntime.wrap(function _callee203$(_context206){while(1){switch(_context206.prev=_context206.next){case 0:if(!(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))){_context206.next=2;break;}return _context206.abrupt(\"return\",{value:null,done:true});case 2:chunk=new Promise(function(resolve,reject){var end=_this263.offset+_this263.chunkSize;if(_this263.file instanceof Uint8Array){// Note if end > this.uint8Array.byteLength, we just get a small last\n// chunk.\nresolve(new Uint8Array(_this263.file.slice(_this263.offset,end)));}else{// This branch assumes that this.file type is File or Blob, which\n// means it is in the browser environment.\n// TODO(soergel): is this a performance issue?\nvar fileReader=new FileReader();fileReader.onload=function(event){var data=fileReader.result;// Not sure we can trust the return type of\n// FileReader.readAsArrayBuffer See e.g.\n// https://github.com/node-file-api/FileReader/issues/2\nif(data instanceof ArrayBuffer){data=new Uint8Array(data);}if(!(data instanceof Uint8Array)){return reject(new TypeError('FileReader returned unknown type.'));}resolve(data);};fileReader.onabort=function(event){return reject(new Error('Aborted'));};fileReader.onerror=function(event){return reject(new Error(event.type));};// TODO(soergel): better handle onabort, onerror\n// Note if end > this.file.size, we just get a small last chunk.\nvar slice=_this263.file.slice(_this263.offset,end);// We can't use readAsText here (even if we know the file is text)\n// because the slice boundary may fall within a multi-byte character.\nfileReader.readAsArrayBuffer(slice);}_this263.offset=end;});_context206.next=5;return chunk;case 5:_context206.t0=_context206.sent;return _context206.abrupt(\"return\",{value:_context206.t0,done:false});case 7:case\"end\":return _context206.stop();}}},_callee203,this);}));function next(){return _next19.apply(this,arguments);}return next;}()}]);return file_chunk_iterator_FileChunkIterator;}(byte_chunk_iterator[\"a\"/* ByteChunkIterator */]);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/iterators/url_chunk_iterator.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Provide a stream of chunks from a URL.\r\n *\r\n * Note this class first downloads the entire file into memory before providing\r\n * the first element from the stream.  This is because the Fetch API does not\r\n * yet reliably provide a reader stream for the response body.\r\n */function urlChunkIterator(_x226){return _urlChunkIterator.apply(this,arguments);}// Generate RequestInit from Request to match tf.util.fetch signature.\nfunction _urlChunkIterator(){_urlChunkIterator=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee208(url){var options,urlString,requestInit,response,uint8Array,_args213=arguments;return regeneratorRuntime.wrap(function _callee208$(_context211){while(1){switch(_context211.prev=_context211.next){case 0:options=_args213.length>1&&_args213[1]!==undefined?_args213[1]:{};if(typeof url==='string'){urlString=url;}else{urlString=url.url;requestInit=getRequestInitFromRequest(url);}_context211.next=4;return dist[\"util\"].fetch(urlString,requestInit);case 4:response=_context211.sent;if(!response.ok){_context211.next=14;break;}_context211.t0=Uint8Array;_context211.next=9;return response.arrayBuffer();case 9:_context211.t1=_context211.sent;uint8Array=new _context211.t0(_context211.t1);return _context211.abrupt(\"return\",new file_chunk_iterator_FileChunkIterator(uint8Array,options));case 14:throw new Error(response.statusText);case 15:case\"end\":return _context211.stop();}}},_callee208);}));return _urlChunkIterator.apply(this,arguments);}var getRequestInitFromRequest=function getRequestInitFromRequest(request){var init={method:request.method,headers:request.headers,body:request.body,mode:request.mode,credentials:request.credentials,cache:request.cache,redirect:request.redirect,referrer:request.referrer,integrity:request.integrity};return init;};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/util/source_util.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ // Skip tslint any type check cause this method is aiming to check type of\n// input.\n// tslint:disable-next-line:no-any\nfunction isLocalPath(source){return typeof source==='string'&&source.substr(0,7)==='file://';}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\r\n * chunks.\r\n */var file_data_source_FileDataSource=/*#__PURE__*/function(_DataSource){_inherits(file_data_source_FileDataSource,_DataSource);var _super162=_createSuper(file_data_source_FileDataSource);/**\r\n     * Create a `FileDataSource`.\r\n     *\r\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\r\n     *     read. Local file only works in node environment.\r\n     * @param options Options passed to the underlying `FileChunkIterator`s,\r\n     *   such as {chunksize: 1024}.\r\n     */function file_data_source_FileDataSource(input){var _this264;var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck2(this,file_data_source_FileDataSource);_this264=_super162.call(this);_this264.input=input;_this264.options=options;return _this264;}_createClass(file_data_source_FileDataSource,[{key:\"iterator\",value:function(){var _iterator124=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee204(){var fs;return regeneratorRuntime.wrap(function _callee204$(_context207){while(1){switch(_context207.prev=_context207.next){case 0:if(isLocalPath(this.input)&&Object(dist[\"env\"])().get('IS_NODE')){// tslint:disable-next-line:no-require-imports\nfs=__webpack_require__(79);this.input=fs.readFileSync(this.input.substr(7));}// TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n// with file in browser.\nreturn _context207.abrupt(\"return\",new file_chunk_iterator_FileChunkIterator(this.input,this.options));case 2:case\"end\":return _context207.stop();}}},_callee204,this);}));function iterator(){return _iterator124.apply(this,arguments);}return iterator;}()}]);return file_data_source_FileDataSource;}(DataSource);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /*\r\n * Represents a URL readable as a stream of binary data chunks.\r\n */var url_data_source_URLDataSource=/*#__PURE__*/function(_DataSource2){_inherits(url_data_source_URLDataSource,_DataSource2);var _super163=_createSuper(url_data_source_URLDataSource);/**\r\n     * Create a `URLDataSource`.\r\n     *\r\n     * @param url A source URL string, or a `Request` object.\r\n     * @param options Options passed to the underlying `FileChunkIterator`s,\r\n     *   such as {chunksize: 1024}.\r\n     */function url_data_source_URLDataSource(url){var _this265;var fileOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck2(this,url_data_source_URLDataSource);_this265=_super163.call(this);_this265.url=url;_this265.fileOptions=fileOptions;return _this265;}// TODO(soergel): provide appropriate caching options.  Currently this\n// will download the URL anew for each call to iterator().  Since we have\n// to treat the downloaded file as a blob/buffer anyway, we may as well retain\n// it-- but that raises GC issues.  Also we may want a persistent disk cache.\n_createClass(url_data_source_URLDataSource,[{key:\"iterator\",value:function(){var _iterator125=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee205(){return regeneratorRuntime.wrap(function _callee205$(_context208){while(1){switch(_context208.prev=_context208.next){case 0:if(!isLocalPath(this.url)){_context208.next=4;break;}return _context208.abrupt(\"return\",new file_data_source_FileDataSource(this.url,this.fileOptions).iterator());case 4:return _context208.abrupt(\"return\",urlChunkIterator(this.url,this.fileOptions));case 5:case\"end\":return _context208.stop();}}},_callee205,this);}));function iterator(){return _iterator125.apply(this,arguments);}return iterator;}()}]);return url_data_source_URLDataSource;}(DataSource);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/readers.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */ /**\r\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\r\n * or local path if it's in Node environment.\r\n *\r\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\r\n * element in returned `CSVDataset` will be an object of\r\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\r\n * is a dict of labels key/value pairs. If no column is marked as label,\r\n * returns a dict of features only.\r\n *\r\n * ```js\r\n * const csvUrl =\r\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\r\n *\r\n * async function run() {\r\n *   // We want to predict the column \"medv\", which represents a median value of\r\n *   // a home (in $1000s), so we mark it as a label.\r\n *   const csvDataset = tf.data.csv(\r\n *     csvUrl, {\r\n *       columnConfigs: {\r\n *         medv: {\r\n *           isLabel: true\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n *   // Number of features is the number of column names minus one for the label\r\n *   // column.\r\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\r\n *\r\n *   // Prepare the Dataset for training.\r\n *   const flattenedDataset =\r\n *     csvDataset\r\n *     .map(({xs, ys}) =>\r\n *       {\r\n *         // Convert xs(features) and ys(labels) from object form (keyed by\r\n *         // column name) to array form.\r\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\r\n *       })\r\n *     .batch(10);\r\n *\r\n *   // Define the model.\r\n *   const model = tf.sequential();\r\n *   model.add(tf.layers.dense({\r\n *     inputShape: [numOfFeatures],\r\n *     units: 1\r\n *   }));\r\n *   model.compile({\r\n *     optimizer: tf.train.sgd(0.000001),\r\n *     loss: 'meanSquaredError'\r\n *   });\r\n *\r\n *   // Fit the model using the prepared Dataset\r\n *   return model.fitDataset(flattenedDataset, {\r\n *     epochs: 10,\r\n *     callbacks: {\r\n *       onEpochEnd: async (epoch, logs) => {\r\n *         console.log(epoch + ':' + logs.loss);\r\n *       }\r\n *     }\r\n *   });\r\n * }\r\n *\r\n * await run();\r\n * ```\r\n *\r\n * @param source URL or local path to get CSV file. If it's a local path, it\r\n * must have prefix `file://` and it only works in node environment.\r\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\r\n *     of reading and decoding from CSV file(s).\r\n */ /**\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */function csv(source){var csvConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return new csv_dataset_CSVDataset(new url_data_source_URLDataSource(source),csvConfig);}/**\r\n * Create a `Dataset` that produces each element by calling a provided function.\r\n *\r\n * Note that repeated iterations over this `Dataset` may produce different\r\n * results, because the function will be called anew for each element of each\r\n * iteration.\r\n *\r\n * Also, beware that the sequence of calls to this function may be out of order\r\n * in time with respect to the logical order of the Dataset. This is due to the\r\n * asynchronous lazy nature of stream processing, and depends on downstream\r\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\r\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\r\n * pointer), then the order of the produced elements may be scrambled.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const ds = tf.data.func(func);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param f A function that produces one data element on each call.\r\n */function func(f){var iter=Object(lazy_iterator[\"e\"/* iteratorFromFunction */])(f);return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee206(){return regeneratorRuntime.wrap(function _callee206$(_context209){while(1){switch(_context209.prev=_context209.next){case 0:return _context209.abrupt(\"return\",iter);case 1:case\"end\":return _context209.stop();}}},_callee206);})));}/**\r\n * Create a `Dataset` that produces each element from provided JavaScript\r\n * generator, which is a function*\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\r\n * or a function that returns an\r\n * iterator\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\r\n *\r\n * The returned iterator should have `.next()` function that returns element in\r\n * format of `{value: TensorContainer, done:boolean}`.\r\n *\r\n * Example of creating a dataset from an iterator factory:\r\n * ```js\r\n * function makeIterator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *\r\n *   const iterator = {\r\n *     next: () => {\r\n *       let result;\r\n *       if (index < numElements) {\r\n *         result = {value: index, done: false};\r\n *         index++;\r\n *         return result;\r\n *       }\r\n *       return {value: index, done: true};\r\n *     }\r\n *   };\r\n *   return iterator;\r\n * }\r\n * const ds = tf.data.generator(makeIterator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Example of creating a dataset from a generator:\r\n * ```js\r\n * function* dataGenerator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *   while (index < numElements) {\r\n *     const x = index;\r\n *     index++;\r\n *     yield x;\r\n *   }\r\n * }\r\n *\r\n * const ds = tf.data.generator(dataGenerator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param generator A Javascript generator function that returns a JavaScript\r\n *     iterator.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */function readers_generator(generator){return datasetFromIteratorFn(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee207(){var gen;return regeneratorRuntime.wrap(function _callee207$(_context210){while(1){switch(_context210.prev=_context210.next){case 0:_context210.next=2;return generator();case 2:gen=_context210.sent;return _context210.abrupt(\"return\",Object(lazy_iterator[\"e\"/* iteratorFromFunction */])(function(){return gen.next();}));case 4:case\"end\":return _context210.stop();}}},_callee207);})));}/**\r\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\r\n * only works in Browser environment when the device has webcam.\r\n *\r\n * Note: this code snippet only works when the device has a webcam. It will\r\n * request permission to open the webcam when running.\r\n * ```js\r\n * const videoElement = document.createElement('video');\r\n * videoElement.width = 100;\r\n * videoElement.height = 100;\r\n * const cam = await tf.data.webcam(videoElement);\r\n * const img = await cam.capture();\r\n * img.print();\r\n * cam.stop();\r\n * ```\r\n *\r\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\r\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\r\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\r\n *     provided to set the generated tensor shape.\r\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\r\n *     reading and manipulating data from webcam video stream.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */function webcam(_x227,_x228){return _webcam.apply(this,arguments);}/**\r\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\r\n * microphone audio stream with browser's native FFT. This API only works in\r\n * browser environment when the device has microphone.\r\n *\r\n * Note: this code snippet only works when the device has a microphone. It will\r\n * request permission to open the microphone when running.\r\n * ```js\r\n * const mic = await tf.data.microphone({\r\n *   fftSize: 1024,\r\n *   columnTruncateLength: 232,\r\n *   numFramesPerSpectrogram: 43,\r\n *   sampleRateHz:44100,\r\n *   includeSpectrogram: true,\r\n *   includeWaveform: true\r\n * });\r\n * const audioData = await mic.capture();\r\n * const spectrogramTensor = audioData.spectrogram;\r\n * spectrogramTensor.print();\r\n * const waveformTensor = audioData.waveform;\r\n * waveformTensor.print();\r\n * mic.stop();\r\n * ```\r\n *\r\n * @param microphoneConfig A `MicrophoneConfig` object that contains\r\n *     configurations of reading audio data from microphone.\r\n */ /**\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */function _webcam(){_webcam=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee209(webcamVideoElement,webcamConfig){return regeneratorRuntime.wrap(function _callee209$(_context212){while(1){switch(_context212.prev=_context212.next){case 0:return _context212.abrupt(\"return\",webcam_iterator_WebcamIterator.create(webcamVideoElement,webcamConfig));case 1:case\"end\":return _context212.stop();}}},_callee209);}));return _webcam.apply(this,arguments);}function microphone(_x229){return _microphone.apply(this,arguments);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/version.js\n/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!\nfunction _microphone(){_microphone=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee210(microphoneConfig){return regeneratorRuntime.wrap(function _callee210$(_context213){while(1){switch(_context213.prev=_context213.next){case 0:return _context213.abrupt(\"return\",microphone_iterator_MicrophoneIterator.create(microphoneConfig));case 1:case\"end\":return _context213.stop();}}},_callee210);}));return _microphone.apply(this,arguments);}var version='2.0.1';// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-data/dist/index.js\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ /***/},/* 89 */ /***/function(module,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXPORTS\n__webpack_require__.d(__webpack_exports__,\"MathBackendCPU\",function(){return(/* reexport */base[\"a\"/* MathBackendCPU */]);});__webpack_require__.d(__webpack_exports__,\"version_cpu\",function(){return(/* reexport */base[\"c\"/* version_cpu */]);});__webpack_require__.d(__webpack_exports__,\"shared\",function(){return(/* reexport */base[\"b\"/* shared */]);});// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-core/dist/index.js + 269 modules\nvar dist=__webpack_require__(0);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js + 3 modules\nvar base=__webpack_require__(31);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\nvar cpu_util=__webpack_require__(9);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/kernel_utils.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function createBinaryKernelConfig(name,op){return{kernelName:name,backendName:'cpu',kernelFunc:function kernelFunc(_ref62){var inputs=_ref62.inputs,backend=_ref62.backend;var a=inputs.a,b=inputs.b;var cpuBackend=backend;Object(cpu_util[\"a\"/* assertNotComplex */])([a,b],name);var aVals=cpuBackend.data.get(a.dataId).values;var bVals=cpuBackend.data.get(b.dataId).values;var _op=op(a.shape,b.shape,aVals,bVals,a.dtype),_op2=_slicedToArray(_op,2),resultData=_op2[0],resultShape=_op2[1];var dataId=cpuBackend.write(resultData,resultShape,a.dtype);return{dataId:dataId,shape:resultShape,dtype:a.dtype};}};}function createBinaryKernelImpl(op){return function(aShape,bShape,aVals,bVals,dtype){var newShape=dist[\"backend_util\"].assertAndGetBroadcastShape(aShape,bShape);var resultRank=newShape.length;var resultStrides=dist[\"util\"].computeStrides(newShape);var resultSize=dist[\"util\"].sizeFromShape(newShape);var result=dist[\"util\"].getTypedArrayFromDType(dtype,resultSize);var aRank=aShape.length;var bRank=bShape.length;var aStrides=dist[\"util\"].computeStrides(aShape);var bStrides=dist[\"util\"].computeStrides(bShape);var aBroadcastDims=dist[\"backend_util\"].getBroadcastDims(aShape,newShape);var bBroadcastDims=dist[\"backend_util\"].getBroadcastDims(bShape,newShape);if(aBroadcastDims.length+bBroadcastDims.length===0){for(var i=0;i<result.length;++i){result[i]=op(aVals[i%aVals.length],bVals[i%bVals.length]);}}else{var _loop27=function _loop27(_i90){var loc=dist[\"util\"].indexToLoc(_i90,resultRank,resultStrides);var aLoc=loc.slice(-aRank);aBroadcastDims.forEach(function(d){return aLoc[d]=0;});var aIndex=dist[\"util\"].locToIndex(aLoc,aRank,aStrides);var bLoc=loc.slice(-bRank);bBroadcastDims.forEach(function(d){return bLoc[d]=0;});var bIndex=dist[\"util\"].locToIndex(bLoc,bRank,bStrides);result[_i90]=op(aVals[aIndex],bVals[bIndex]);};for(var _i90=0;_i90<result.length;++_i90){_loop27(_i90);}}return[result,newShape];};}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Div_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var divImpl=createBinaryKernelImpl(function(a,b){return a/b;});// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Div.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var divConfig=createBinaryKernelConfig(dist[\"Div\"],divImpl);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js\nvar Max_impl=__webpack_require__(37);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js\nvar Transpose_impl=__webpack_require__(30);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxConfig={kernelName:dist[\"Max\"],backendName:'cpu',kernelFunc:function kernelFunc(_ref63){var inputs=_ref63.inputs,attrs=_ref63.attrs,backend=_ref63.backend;var x=inputs.x;var reductionIndices=attrs.reductionIndices;var cpuBackend=backend;var xShape=x.shape;var xRank=xShape.length;var origAxes=dist[\"util\"].parseAxisParam(reductionIndices,xShape);var axes=origAxes;var permutedAxes=dist[\"backend_util\"].getAxesPermutation(axes,xRank);var xVals=cpuBackend.data.get(x.dataId).values;if(permutedAxes!=null){var newShape=new Array(xRank);for(var i=0;i<newShape.length;i++){newShape[i]=xShape[permutedAxes[i]];}xVals=Object(Transpose_impl[\"a\"/* transposeImpl */])(xVals,xShape,x.dtype,permutedAxes,newShape);axes=dist[\"backend_util\"].getInnerMostAxes(axes.length,xRank);xShape=newShape;}Object(cpu_util[\"a\"/* assertNotComplex */])(x,'max');dist[\"backend_util\"].assertAxesAreInnerMostDims('max',axes,xRank);var _dist$backend_util$co29=dist[\"backend_util\"].computeOutAndReduceShapes(xShape,axes),_dist$backend_util$co30=_slicedToArray(_dist$backend_util$co29,2),maxOutShape=_dist$backend_util$co30[0],reduceShape=_dist$backend_util$co30[1];var reduceSize=dist[\"util\"].sizeFromShape(reduceShape);var result=Object(Max_impl[\"a\"/* maxImpl */])(xVals,reduceSize,maxOutShape,x.dtype);var dataId=cpuBackend.write(result,maxOutShape,x.dtype);return{dataId:dataId,shape:maxOutShape,dtype:x.dtype};}};// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js\nvar pool_utils=__webpack_require__(26);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax_impl.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */function maxPoolWithArgmaxImpl(xValues,xShape,dtype,includeBatchInIndex,convInfo){var strides=dist[\"util\"].computeStrides(xShape);var maxPools=Object(pool_utils[\"b\"/* pool */])(xValues,xShape,dtype,strides,convInfo,'max');var maxPositions=Object(pool_utils[\"a\"/* maxPoolPositions */])(xValues,xShape,dtype,convInfo,true,includeBatchInIndex);return[maxPools.values,maxPositions.values];}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var maxPoolWithArgmaxConfig={kernelName:dist[\"MaxPoolWithArgmax\"],backendName:'cpu',kernelFunc:function kernelFunc(_ref64){var inputs=_ref64.inputs,attrs=_ref64.attrs,backend=_ref64.backend;var x=inputs.x;var filterSize=attrs.filterSize,strides=attrs.strides,pad=attrs.pad,includeBatchInIndex=attrs.includeBatchInIndex;var cpuBackend=backend;Object(cpu_util[\"a\"/* assertNotComplex */])(x,'MaxPoolWithArgmax');var values=cpuBackend.data.get(x.dataId).values;var convInfo=dist[\"backend_util\"].computePool2DInfo(x.shape,filterSize,strides,[1,1],pad);var _maxPoolWithArgmaxImp3=maxPoolWithArgmaxImpl(values,x.shape,x.dtype,includeBatchInIndex,convInfo),_maxPoolWithArgmaxImp4=_slicedToArray(_maxPoolWithArgmaxImp3,2),pooled=_maxPoolWithArgmaxImp4[0],indexes=_maxPoolWithArgmaxImp4[1];var pooledDataId=cpuBackend.write(pooled,convInfo.outShape,x.dtype);var indexesDataId=cpuBackend.write(indexes,convInfo.outShape,x.dtype);return[{dataId:pooledDataId,shape:convInfo.outShape,dtype:x.dtype},{dataId:indexesDataId,shape:convInfo.outShape,dtype:'int32'}];}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV5.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var nonMaxSuppressionV5=dist[\"kernel_impls\"].nonMaxSuppressionV5;var nonMaxSuppressionV5Config={kernelName:dist[\"NonMaxSuppressionV5\"],backendName:'cpu',kernelFunc:function kernelFunc(_ref65){var inputs=_ref65.inputs,backend=_ref65.backend,attrs=_ref65.attrs;var boxes=inputs.boxes,scores=inputs.scores;var maxOutputSize=attrs.maxOutputSize,iouThreshold=attrs.iouThreshold,scoreThreshold=attrs.scoreThreshold,softNmsSigma=attrs.softNmsSigma;var cpuBackend=backend;Object(cpu_util[\"a\"/* assertNotComplex */])(boxes,'NonMaxSuppressionWithScore');var boxesVals=cpuBackend.data.get(boxes.dataId).values;var scoresVals=cpuBackend.data.get(scores.dataId).values;var maxOutputSizeVal=maxOutputSize;var iouThresholdVal=iouThreshold;var scoreThresholdVal=scoreThreshold;var softNmsSigmaVal=softNmsSigma;var _nonMaxSuppressionV2=nonMaxSuppressionV5(boxesVals,scoresVals,maxOutputSizeVal,iouThresholdVal,scoreThresholdVal,softNmsSigmaVal),selectedIndices=_nonMaxSuppressionV2.selectedIndices,selectedScores=_nonMaxSuppressionV2.selectedScores;return[selectedIndices,selectedScores];}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Square.js\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squareConfig={kernelName:dist[\"Square\"],backendName:'cpu',kernelFunc:function kernelFunc(_ref66){var inputs=_ref66.inputs,backend=_ref66.backend;var x=inputs.x;var cpuBackend=backend;Object(cpu_util[\"a\"/* assertNotComplex */])(x,'square');var values=cpuBackend.data.get(x.dataId).values;var newValues=new Float32Array(values.length);for(var i=0;i<values.length;++i){var value=values[i];newValues[i]=value*value;}var dataId=cpuBackend.write(newValues,x.shape,x.dtype);return{dataId:dataId,shape:x.shape,dtype:x.dtype};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var squaredDifferenceImpl=createBinaryKernelImpl(function(aVal,bVal){var diff=aVal-bVal;return diff*diff;});var squaredDifferenceConfig=createBinaryKernelConfig(dist[\"SquaredDifference\"],squaredDifferenceImpl);// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */var transposeConfig={kernelName:dist[\"Transpose\"],backendName:'cpu',kernelFunc:function kernelFunc(_ref67){var inputs=_ref67.inputs,attrs=_ref67.attrs,backend=_ref67.backend;var x=inputs.x;var perm=attrs.perm;var cpuBackend=backend;Object(cpu_util[\"a\"/* assertNotComplex */])(x,'transpose');var xRank=x.shape.length;var newShape=new Array(xRank);for(var i=0;i<newShape.length;i++){newShape[i]=x.shape[perm[i]];}var values=cpuBackend.data.get(x.dataId).values;var result=Object(Transpose_impl[\"a\"/* transposeImpl */])(values,x.shape,x.dtype,perm,newShape);var dataId=cpuBackend.write(result,newShape,x.dtype);return{dataId:dataId,shape:newShape,dtype:x.dtype};}};// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/register_all_kernels.js\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\n// List all kernel configs here\nvar kernelConfigs=[nonMaxSuppressionV5Config,squareConfig,squaredDifferenceConfig,divConfig,transposeConfig,maxPoolWithArgmaxConfig,maxConfig];for(var _i91=0,_kernelConfigs2=kernelConfigs;_i91<_kernelConfigs2.length;_i91++){var kernelConfig=_kernelConfigs2[_i91];Object(dist[\"registerKernel\"])(kernelConfig);}// CONCATENATED MODULE: ./node_modules/@tensorflow/tfjs-backend-cpu/dist/index.js\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */ // Side effects for default initialization of MathBackendCPU\nObject(dist[\"registerBackend\"])('cpu',function(){return new base[\"a\"/* MathBackendCPU */]();},1/* priority */);// All exports from this package should be in base.\n/***/},/* 90 */ /***/function(__webpack_module__,__webpack_exports__,__webpack_require__){\"use strict\";// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs/dist/tf.node.js\nvar tf_node=__webpack_require__(60);// EXTERNAL MODULE: ./node_modules/regression/dist/regression.js\nvar regression=__webpack_require__(80);// CONCATENATED MODULE: ./src/params.mjs\nvar params={moveTickSize:50,videoContainerId:'webgazerVideoContainer',videoElementId:'webgazerVideoFeed',videoElementCanvasId:'webgazerVideoCanvas',faceOverlayId:'webgazerFaceOverlay',faceFeedbackBoxId:'webgazerFaceFeedbackBox',gazeDotId:'webgazerGazeDot',videoViewerWidth:320,videoViewerHeight:240,faceFeedbackBoxRatio:0.66,// View options\nshowVideo:true,mirrorVideo:true,showFaceOverlay:true,showFaceFeedbackBox:true,showGazeDot:true,camConstraints:{video:{width:{min:320,ideal:640,max:1920},height:{min:240,ideal:480,max:1080},facingMode:\"user\"}},dataTimestep:50,showVideoPreview:true,applyKalmanFilter:true,// Whether or not to store accuracy eigenValues, used by the calibration example file\nstoringPoints:false};/* harmony default export */var src_params=params;// CONCATENATED MODULE: ./src/dom_util.mjs\n// helper functions\n/**\r\n * Provides requestAnimationFrame in a cross browser way.\r\n */window.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(/* function FrameRequestCallback */callback,/* DOMElement Element */element){return window.setTimeout(callback,1000/60);};}();/**\r\n * Provides cancelRequestAnimationFrame in a cross browser way.\r\n */window.cancelRequestAnimFrame=function(){return window.cancelCancelRequestAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout;}();// EXTERNAL MODULE: ./node_modules/localforage/dist/localforage.js\nvar localforage=__webpack_require__(32);// EXTERNAL MODULE: ./node_modules/@tensorflow-models/facemesh/dist/index.js\nvar dist=__webpack_require__(59);// CONCATENATED MODULE: ./src/facemesh.mjs\n/**\r\n * Constructor of TFFaceMesh object\r\n * @constructor\r\n * */var TFFaceMesh=function TFFaceMesh(){//Backend options are webgl, wasm, and CPU.\n//For recent laptops WASM is better than WebGL.\n//TODO: This hack makes loading the model block the UI. We should fix that\n// this.model = (async () => { return await facemesh.load({\"maxFaces\":1}) })();\nthis.model=dist.load({\"maxFaces\":1});this.predictionReady=false;};// Global variable for face landmark positions array\nTFFaceMesh.prototype.positionsArray=null;/**\r\n * Isolates the two patches that correspond to the user's eyes\r\n * @param  {Canvas} imageCanvas - canvas corresponding to the webcam stream\r\n * @param  {Number} width - of imageCanvas\r\n * @param  {Number} height - of imageCanvas\r\n * @return {Object} the two eye-patches, first left, then right eye\r\n */TFFaceMesh.prototype.getEyePatches=/*#__PURE__*/function(){var _ref68=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee211(imageCanvas,width,height){var model,predictions,positions,leftOriginX,leftOriginY,leftWidth,leftHeight,rightOriginX,rightOriginY,rightWidth,rightHeight,eyeObjs,leftImageData,rightImageData;return regeneratorRuntime.wrap(function _callee211$(_context214){while(1){switch(_context214.prev=_context214.next){case 0:if(!(imageCanvas.width===0)){_context214.next=2;break;}return _context214.abrupt(\"return\",null);case 2:_context214.next=4;return this.model;case 4:model=_context214.sent;_context214.next=7;return model.estimateFaces(imageCanvas);case 7:predictions=_context214.sent;if(!(predictions.length==0)){_context214.next=10;break;}return _context214.abrupt(\"return\",false);case 10:// Save positions to global variable\nthis.positionsArray=predictions[0].scaledMesh;positions=this.positionsArray;// Fit the detected eye in a rectangle. [20200626 xk] not clear which approach is better\n// https://raw.githubusercontent.com/tensorflow/tfjs-models/master/facemesh/mesh_map.jpg\n// // Maintains a relatively stable shape of the bounding box at the cost of cutting off parts of\n// // the eye when the eye is tilted.\n// var leftOriginX = Math.round(positions[130][0]);\n// var leftOriginY = Math.round(positions[27][1]);\n// var leftWidth = Math.round(positions[243][0] - leftOriginX);\n// var leftHeight = Math.round(positions[23][1] - leftOriginY);\n// var rightOriginX = Math.round(positions[463][0]);\n// var rightOriginY = Math.round(positions[257][1]);\n// var rightWidth = Math.round(positions[359][0] - rightOriginX);\n// var rightHeight = Math.round(positions[253][1] - rightOriginY);\n// Won't really cut off any parts of the eye, at the cost of warping the shape (i.e. height/\n// width ratio) of the bounding box.\nleftOriginX=Math.round(Math.min(positions[247][0],positions[130][0],positions[25][0]));leftOriginY=Math.round(Math.min(positions[247][1],positions[27][1],positions[190][1]));leftWidth=Math.round(Math.max(positions[190][0],positions[243][0],positions[233][0])-leftOriginX);leftHeight=Math.round(Math.max(positions[25][1],positions[23][1],positions[112][1])-leftOriginY);rightOriginX=Math.round(Math.min(positions[414][0],positions[463][0],positions[453][0]));rightOriginY=Math.round(Math.min(positions[414][1],positions[257][1],positions[467][1]));rightWidth=Math.round(Math.max(positions[467][0],positions[359][0],positions[255][0])-rightOriginX);rightHeight=Math.round(Math.max(positions[341][1],positions[253][1],positions[255][1])-rightOriginY);if(!(leftWidth===0||rightWidth===0)){_context214.next=23;break;}console.log('an eye patch had zero width');return _context214.abrupt(\"return\",null);case 23:if(!(leftHeight===0||rightHeight===0)){_context214.next=26;break;}console.log('an eye patch had zero height');return _context214.abrupt(\"return\",null);case 26:// Start building object to be returned\neyeObjs={};leftImageData=imageCanvas.getContext('2d').getImageData(leftOriginX,leftOriginY,leftWidth,leftHeight);eyeObjs.left={patch:leftImageData,imagex:leftOriginX,imagey:leftOriginY,width:leftWidth,height:leftHeight};rightImageData=imageCanvas.getContext('2d').getImageData(rightOriginX,rightOriginY,rightWidth,rightHeight);eyeObjs.right={patch:rightImageData,imagex:rightOriginX,imagey:rightOriginY,width:rightWidth,height:rightHeight};this.predictionReady=true;return _context214.abrupt(\"return\",eyeObjs);case 33:case\"end\":return _context214.stop();}}},_callee211,this);}));return function(_x230,_x231,_x232){return _ref68.apply(this,arguments);};}();/**\r\n * Returns the positions array corresponding to the last call to getEyePatches.\r\n * Requires that getEyePatches() was called previously, else returns null.\r\n */TFFaceMesh.prototype.getPositions=function(){return this.positionsArray;};/**\r\n * Reset the tracker to default values\r\n */TFFaceMesh.prototype.reset=function(){console.log(\"Unimplemented; Tracking.js has no obvious reset function\");};/**\r\n * Draw TF_FaceMesh_Overlay\r\n */TFFaceMesh.prototype.drawFaceOverlay=function(ctx,keypoints){// If keypoints is falsy, don't do anything\nif(keypoints){ctx.fillStyle='#32EEDB';ctx.strokeStyle='#32EEDB';ctx.lineWidth=0.5;for(var i=0;i<keypoints.length;i++){var x=keypoints[i][0];var y=keypoints[i][1];ctx.beginPath();ctx.arc(x,y,1/* radius */,0,2*Math.PI);ctx.closePath();ctx.fill();}}};/**\r\n * The TFFaceMesh object name\r\n * @type {string}\r\n */TFFaceMesh.prototype.name='TFFaceMesh';/* harmony default export */var facemesh=TFFaceMesh;// EXTERNAL MODULE: ./node_modules/numeric/numeric-1.2.6.js\nvar numeric_1_2_6=__webpack_require__(12);// CONCATENATED MODULE: ./src/mat.mjs\nvar mat={};/**\r\n * Transposes an mxn array\r\n * @param {Array.<Array.<Number>>} matrix - of 'M x N' dimensionality\r\n * @return {Array.<Array.<Number>>} transposed matrix\r\n */mat.transpose=function(matrix){var m=matrix.length;var n=matrix[0].length;var transposedMatrix=new Array(n);for(var i=0;i<m;i++){for(var j=0;j<n;j++){if(i===0)transposedMatrix[j]=new Array(m);transposedMatrix[j][i]=matrix[i][j];}}return transposedMatrix;};/**\r\n * Get a sub-matrix of matrix\r\n * @param {Array.<Array.<Number>>} matrix - original matrix\r\n * @param {Array.<Number>} r - Array of row indices\r\n * @param {Number} j0 - Initial column index\r\n * @param {Number} j1 - Final column index\r\n * @returns {Array} The sub-matrix matrix(r(:),j0:j1)\r\n */mat.getMatrix=function(matrix,r,j0,j1){var X=new Array(r.length),m=j1-j0+1;for(var i=0;i<r.length;i++){X[i]=new Array(m);for(var j=j0;j<=j1;j++){X[i][j-j0]=matrix[r[i]][j];}}return X;};/**\r\n * Get a submatrix of matrix\r\n * @param {Array.<Array.<Number>>} matrix - original matrix\r\n * @param {Number} i0 - Initial row index\r\n * @param {Number} i1 - Final row index\r\n * @param {Number} j0 - Initial column index\r\n * @param {Number} j1 - Final column index\r\n * @return {Array} The sub-matrix matrix(i0:i1,j0:j1)\r\n */mat.getSubMatrix=function(matrix,i0,i1,j0,j1){var size=j1-j0+1,X=new Array(i1-i0+1);for(var i=i0;i<=i1;i++){var subI=i-i0;X[subI]=new Array(size);for(var j=j0;j<=j1;j++){X[subI][j-j0]=matrix[i][j];}}return X;};/**\r\n * Linear algebraic matrix multiplication, matrix1 * matrix2\r\n * @param {Array.<Array.<Number>>} matrix1\r\n * @param {Array.<Array.<Number>>} matrix2\r\n * @return {Array.<Array.<Number>>} Matrix product, matrix1 * matrix2\r\n */mat.mult=function(matrix1,matrix2){if(matrix2.length!=matrix1[0].length){console.log('Matrix inner dimensions must agree:');}var X=new Array(matrix1.length),Bcolj=new Array(matrix1[0].length);for(var j=0;j<matrix2[0].length;j++){for(var k=0;k<matrix1[0].length;k++){Bcolj[k]=matrix2[k][j];}for(var i=0;i<matrix1.length;i++){if(j===0)X[i]=new Array(matrix2[0].length);var Arowi=matrix1[i];var s=0;for(var k=0;k<matrix1[0].length;k++){s+=Arowi[k]*Bcolj[k];}X[i][j]=s;}}return X;};/**\r\n * LUDecomposition to solve A*X = B, based on WEKA code\r\n * @param {Array.<Array.<Number>>} A - left matrix of equation to be solved\r\n * @param {Array.<Array.<Number>>} B - right matrix of equation to be solved\r\n * @return {Array.<Array.<Number>>} X so that L*U*X = B(piv,:)\r\n */mat.LUDecomposition=function(A,B){var LU=new Array(A.length);for(var i=0;i<A.length;i++){LU[i]=new Array(A[0].length);for(var j=0;j<A[0].length;j++){LU[i][j]=A[i][j];}}var m=A.length;var n=A[0].length;var piv=new Array(m);for(var i=0;i<m;i++){piv[i]=i;}var pivsign=1;var LUrowi=new Array();var LUcolj=new Array(m);// Outer loop.\nfor(var j=0;j<n;j++){// Make a copy of the j-th column to localize references.\nfor(var i=0;i<m;i++){LUcolj[i]=LU[i][j];}// Apply previous transformations.\nfor(var i=0;i<m;i++){LUrowi=LU[i];// Most of the time is spent in the following dot product.\nvar kmax=Math.min(i,j);var s=0;for(var k=0;k<kmax;k++){s+=LUrowi[k]*LUcolj[k];}LUrowi[j]=LUcolj[i]-=s;}// Find pivot and exchange if necessary.\nvar p=j;for(var i=j+1;i<m;i++){if(Math.abs(LUcolj[i])>Math.abs(LUcolj[p])){p=i;}}if(p!=j){for(var k=0;k<n;k++){var t=LU[p][k];LU[p][k]=LU[j][k];LU[j][k]=t;}var k=piv[p];piv[p]=piv[j];piv[j]=k;pivsign=-pivsign;}// Compute multipliers.\nif(j<m&LU[j][j]!=0){for(var i=j+1;i<m;i++){LU[i][j]/=LU[j][j];}}}if(B.length!=m){console.log('Matrix row dimensions must agree.');}for(var j=0;j<n;j++){if(LU[j][j]===0){console.log('Matrix is singular.');}}var nx=B[0].length;var X=self.webgazer.mat.getMatrix(B,piv,0,nx-1);// Solve L*Y = B(piv,:)\nfor(var k=0;k<n;k++){for(var i=k+1;i<n;i++){for(var j=0;j<nx;j++){X[i][j]-=X[k][j]*LU[i][k];}}}// Solve U*X = Y;\nfor(var k=n-1;k>=0;k--){for(var j=0;j<nx;j++){X[k][j]/=LU[k][k];}for(var i=0;i<k;i++){for(var j=0;j<nx;j++){X[i][j]-=X[k][j]*LU[i][k];}}}return X;};/**\r\n * Least squares solution of A*X = B, based on WEKA code\r\n * @param {Array.<Array.<Number>>} A - left side matrix to be solved\r\n * @param {Array.<Array.<Number>>} B - a matrix with as many rows as A and any number of columns.\r\n * @return {Array.<Array.<Number>>} X - that minimizes the two norms of QR*X-B.\r\n */mat.QRDecomposition=function(A,B){// Initialize.\nvar QR=new Array(A.length);for(var i=0;i<A.length;i++){QR[i]=new Array(A[0].length);for(var j=0;j<A[0].length;j++){QR[i][j]=A[i][j];}}var m=A.length;var n=A[0].length;var Rdiag=new Array(n);var nrm;// Main loop.\nfor(var k=0;k<n;k++){// Compute 2-norm of k-th column without under/overflow.\nnrm=0;for(var i=k;i<m;i++){nrm=Math.hypot(nrm,QR[i][k]);}if(nrm!=0){// Form k-th Householder vector.\nif(QR[k][k]<0){nrm=-nrm;}for(var i=k;i<m;i++){QR[i][k]/=nrm;}QR[k][k]+=1;// Apply transformation to remaining columns.\nfor(var j=k+1;j<n;j++){var s=0;for(var i=k;i<m;i++){s+=QR[i][k]*QR[i][j];}s=-s/QR[k][k];for(var i=k;i<m;i++){QR[i][j]+=s*QR[i][k];}}}Rdiag[k]=-nrm;}if(B.length!=m){console.log('Matrix row dimensions must agree.');}for(var j=0;j<n;j++){if(Rdiag[j]===0)console.log('Matrix is rank deficient');}// Copy right hand side\nvar nx=B[0].length;var X=new Array(B.length);for(var i=0;i<B.length;i++){X[i]=new Array(B[0].length);}for(var i=0;i<B.length;i++){for(var j=0;j<B[0].length;j++){X[i][j]=B[i][j];}}// Compute Y = transpose(Q)*B\nfor(var k=0;k<n;k++){for(var j=0;j<nx;j++){var s=0.0;for(var i=k;i<m;i++){s+=QR[i][k]*X[i][j];}s=-s/QR[k][k];for(var i=k;i<m;i++){X[i][j]+=s*QR[i][k];}}}// Solve R*X = Y;\nfor(var k=n-1;k>=0;k--){for(var j=0;j<nx;j++){X[k][j]/=Rdiag[k];}for(var i=0;i<k;i++){for(var j=0;j<nx;j++){X[i][j]-=X[k][j]*QR[i][k];}}}return mat.getSubMatrix(X,0,n-1,0,nx-1);};/* harmony default export */var src_mat=mat;// CONCATENATED MODULE: ./src/util.mjs\nvar util={};/**\r\n * Eye class, represents an eye patch detected in the video stream\r\n * @param {ImageData} patch - the image data corresponding to an eye\r\n * @param {Number} imagex - x-axis offset from the top-left corner of the video canvas\r\n * @param {Number} imagey - y-axis offset from the top-left corner of the video canvas\r\n * @param {Number} width  - width of the eye patch\r\n * @param {Number} height - height of the eye patch\r\n */var resizeWidth=10;var resizeHeight=6;util.Eye=function(patch,imagex,imagey,width,height){this.patch=patch;this.imagex=imagex;this.imagey=imagey;this.width=width;this.height=height;};util.getEyeFeats=function(eyes){var resizedLeft=this.resizeEye(eyes.left,resizeHeight,resizeHeight);var resizedright=this.resizeEye(eyes.right,resizeHeight,resizeHeight);var leftGray=this.grayscale(resizedLeft.data,resizedLeft.width,resizedLeft.height);var rightGray=this.grayscale(resizedright.data,resizedright.width,resizedright.height);var histLeft=[];this.equalizeHistogram(leftGray,5,histLeft);var histRight=[];this.equalizeHistogram(rightGray,5,histRight);var leftGrayArray=Array.prototype.slice.call(histLeft);var rightGrayArray=Array.prototype.slice.call(histRight);return leftGrayArray.concat(rightGrayArray);};//Data Window class\n//operates like an array but 'wraps' data around to keep the array at a fixed windowSize\n/**\r\n * DataWindow class - Operates like an array, but 'wraps' data around to keep the array at a fixed windowSize\r\n * @param {Number} windowSize - defines the maximum size of the window\r\n * @param {Array} data - optional data to seed the DataWindow with\r\n **/util.DataWindow=function(windowSize,data){this.data=[];this.windowSize=windowSize;this.index=0;this.length=0;if(data){this.data=data.slice(data.length-windowSize,data.length);this.length=this.data.length;}};/**\r\n * [push description]\r\n * @param  {*} entry - item to be inserted. It either grows the DataWindow or replaces the oldest item\r\n * @return {DataWindow} this\r\n */util.DataWindow.prototype.push=function(entry){if(this.data.length<this.windowSize){this.data.push(entry);this.length=this.data.length;return this;}//replace oldest entry by wrapping around the DataWindow\nthis.data[this.index]=entry;this.index=(this.index+1)%this.windowSize;return this;};/**\r\n * Get the element at the ind position by wrapping around the DataWindow\r\n * @param  {Number} ind index of desired entry\r\n * @return {*}\r\n */util.DataWindow.prototype.get=function(ind){return this.data[this.getTrueIndex(ind)];};/**\r\n * Gets the true this.data array index given an index for a desired element\r\n * @param {Number} ind - index of desired entry\r\n * @return {Number} index of desired entry in this.data\r\n */util.DataWindow.prototype.getTrueIndex=function(ind){if(this.data.length<this.windowSize){return ind;}else{//wrap around ind so that we can traverse from oldest to newest\nreturn(ind+this.index)%this.windowSize;}};/**\r\n * Append all the contents of data\r\n * @param {Array} data - to be inserted\r\n */util.DataWindow.prototype.addAll=function(data){for(var i=0;i<data.length;i++){this.push(data[i]);}};//Helper functions\n/**\r\n * Grayscales an image patch. Can be used for the whole canvas, detected face, detected eye, etc.\r\n *\r\n * Code from tracking.js by Eduardo Lundgren, et al.\r\n * https://github.com/eduardolundgren/tracking.js/blob/master/src/tracking.js\r\n *\r\n * Software License Agreement (BSD License) Copyright (c) 2014, Eduardo A. Lundgren Melo. All rights reserved.\r\n * Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n * The name of Eduardo A. Lundgren Melo may not be used to endorse or promote products derived from this software without specific prior written permission of Eduardo A. Lundgren Melo.\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * @param  {Array} pixels - image data to be grayscaled\r\n * @param  {Number} width  - width of image data to be grayscaled\r\n * @param  {Number} height - height of image data to be grayscaled\r\n * @return {Array} grayscaledImage\r\n */util.grayscale=function(pixels,width,height){var gray=new Uint8ClampedArray(pixels.length>>2);var p=0;var w=0;for(var i=0;i<height;i++){for(var j=0;j<width;j++){var value=pixels[w]*0.299+pixels[w+1]*0.587+pixels[w+2]*0.114;gray[p++]=value;w+=4;}}return gray;};/**\r\n * Increase contrast of an image.\r\n *\r\n * Code from Martin Tschirsich, Copyright (c) 2012.\r\n * https://github.com/mtschirs/js-objectdetect/blob/gh-pages/js/objectdetect.js\r\n *\r\n * @param {Array} src - grayscale integer array\r\n * @param {Number} step - sampling rate, control performance\r\n * @param {Array} dst - array to hold the resulting image\r\n */util.equalizeHistogram=function(src,step,dst){var srcLength=src.length;if(!dst)dst=src;if(!step)step=5;// Compute histogram and histogram sum:\nvar hist=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(var i=0;i<srcLength;i+=step){++hist[src[i]];}// Compute integral histogram:\nvar norm=255*step/srcLength,prev=0;for(var i=0;i<256;++i){var h=hist[i];prev=h+=prev;hist[i]=h*norm;// For non-integer src: ~~(h * norm + 0.5);\n}// Equalize image:\nfor(var i=0;i<srcLength;++i){dst[i]=hist[src[i]];}return dst;};util.threshold=function(data,threshold){for(var i=0;i<data.length;i++){data[i]=data[i]>threshold?255:0;}return data;};util.correlation=function(data1,data2){var length=Math.min(data1.length,data2.length);var count=0;for(var i=0;i<length;i++){if(data1[i]===data2[i]){count++;}}return count/Math.max(data1.length,data2.length);};/**\r\n * Gets an Eye object and resizes it to the desired resolution\r\n * @param  {webgazer.util.Eye} eye - patch to be resized\r\n * @param  {Number} resizeWidth - desired width\r\n * @param  {Number} resizeHeight - desired height\r\n * @return {webgazer.util.Eye} resized eye patch\r\n */util.resizeEye=function(eye,resizeWidth,resizeHeight){var canvas=document.createElement('canvas');canvas.width=eye.width;canvas.height=eye.height;canvas.getContext('2d').putImageData(eye.patch,0,0);var tempCanvas=document.createElement('canvas');tempCanvas.width=resizeWidth;tempCanvas.height=resizeHeight;// save the canvas into temp canvas\ntempCanvas.getContext('2d').drawImage(canvas,0,0,canvas.width,canvas.height,0,0,resizeWidth,resizeHeight);return tempCanvas.getContext('2d').getImageData(0,0,resizeWidth,resizeHeight);};/**\r\n * Checks if the prediction is within the boundaries of the viewport and constrains it\r\n * @param  {Array} prediction [x,y] - predicted gaze coordinates\r\n * @return {Array} constrained coordinates\r\n */util.bound=function(prediction){if(prediction.x<0)prediction.x=0;if(prediction.y<0)prediction.y=0;var w=Math.max(document.documentElement.clientWidth,window.innerWidth||0);var h=Math.max(document.documentElement.clientHeight,window.innerHeight||0);if(prediction.x>w){prediction.x=w;}if(prediction.y>h){prediction.y=h;}return prediction;};/**\r\n * Write statistics in debug paragraph panel\r\n * @param {HTMLElement} para - The <p> tag where write data\r\n * @param {Object} stats - The stats data to output\r\n */function debugBoxWrite(para,stats){var str='';for(var key in stats){str+=key+': '+stats[key]+'\\n';}para.innerText=str;}/**\r\n * Constructor of DebugBox object,\r\n * it insert an paragraph inside a div to the body, in view to display debug data\r\n * @param {Number} interval - The log interval\r\n * @constructor\r\n */util.DebugBox=function(interval){this.para=document.createElement('p');this.div=document.createElement('div');this.div.appendChild(this.para);document.body.appendChild(this.div);this.buttons={};this.canvas={};this.stats={};var updateInterval=interval||300;(function(localThis){setInterval(function(){debugBoxWrite(localThis.para,localThis.stats);},updateInterval);})(this);};/**\r\n * Add stat data for log\r\n * @param {String} key - The data key\r\n * @param {*} value - The value\r\n */util.DebugBox.prototype.set=function(key,value){this.stats[key]=value;};/**\r\n * Initialize stats in case where key does not exist, else\r\n * increment value for key\r\n * @param {String} key - The key to process\r\n * @param {Number} incBy - Value to increment for given key (default: 1)\r\n * @param {Number} init - Initial value in case where key does not exist (default: 0)\r\n */util.DebugBox.prototype.inc=function(key,incBy,init){if(!this.stats[key]){this.stats[key]=init||0;}this.stats[key]+=incBy||1;};/**\r\n * Create a button and register the given function to the button click event\r\n * @param {String} name - The button name to link\r\n * @param {Function} func - The onClick callback\r\n */util.DebugBox.prototype.addButton=function(name,func){if(!this.buttons[name]){this.buttons[name]=document.createElement('button');this.div.appendChild(this.buttons[name]);}var button=this.buttons[name];this.buttons[name]=button;button.addEventListener('click',func);button.innerText=name;};/**\r\n * Search for a canvas elemenet with name, or create on if not exist.\r\n * Then send the canvas element as callback parameter.\r\n * @param {String} name - The canvas name to send/create\r\n * @param {Function} func - The callback function where send canvas\r\n */util.DebugBox.prototype.show=function(name,func){if(!this.canvas[name]){this.canvas[name]=document.createElement('canvas');this.div.appendChild(this.canvas[name]);}var canvas=this.canvas[name];canvas.getContext('2d').clearRect(0,0,canvas.width,canvas.height);func(canvas);};/**\r\n * Kalman Filter constructor\r\n * Kalman filters work by reducing the amount of noise in a models.\r\n * https://blog.cordiner.net/2011/05/03/object-tracking-using-a-kalman-filter-matlab/\r\n *\r\n * @param {Array.<Array.<Number>>} F - transition matrix\r\n * @param {Array.<Array.<Number>>} Q - process noise matrix\r\n * @param {Array.<Array.<Number>>} H - maps between measurement vector and noise matrix\r\n * @param {Array.<Array.<Number>>} R - defines measurement error of the device\r\n * @param {Array} P_initial - the initial state\r\n * @param {Array} X_initial - the initial state of the device\r\n */util.KalmanFilter=function(F,H,Q,R,P_initial,X_initial){this.F=F;// State transition matrix\nthis.Q=Q;// Process noise matrix\nthis.H=H;// Transformation matrix\nthis.R=R;// Measurement Noise\nthis.P=P_initial;//Initial covariance matrix\nthis.X=X_initial;//Initial guess of measurement\n};/**\r\n * Get Kalman next filtered value and update the internal state\r\n * @param {Array} z - the new measurement\r\n * @return {Array}\r\n */util.KalmanFilter.prototype.update=function(z){// Here, we define all the different matrix operations we will need\nvar add=numeric.add,sub=numeric.sub,inv=numeric.inv,identity=numeric.identity;var mult=src_mat.mult,transpose=src_mat.transpose;//TODO cache variables like the transpose of H\n// prediction: X = F * X  |  P = F * P * F' + Q\nvar X_p=mult(this.F,this.X);//Update state vector\nvar P_p=add(mult(mult(this.F,this.P),transpose(this.F)),this.Q);//Predicted covaraince\n//Calculate the update values\nvar y=sub(z,mult(this.H,X_p));// This is the measurement error (between what we expect and the actual value)\nvar S=add(mult(mult(this.H,P_p),transpose(this.H)),this.R);//This is the residual covariance (the error in the covariance)\n// kalman multiplier: K = P * H' * (H * P * H' + R)^-1\nvar K=mult(P_p,mult(transpose(this.H),inv(S)));//This is the Optimal Kalman Gain\n//We need to change Y into it's column vector form\nfor(var i=0;i<y.length;i++){y[i]=[y[i]];}//Now we correct the internal values of the model\n// correction: X = X + K * (m - H * X)  |  P = (I - K * H) * P\nthis.X=add(X_p,mult(K,y));this.P=mult(sub(identity(K.length),mult(K,this.H)),P_p);return transpose(mult(this.H,this.X))[0];//Transforms the predicted state back into it's measurement form\n};/* harmony default export */var src_util=util;// CONCATENATED MODULE: ./src/ridgeReg.mjs\nvar ridgeReg_reg={};var ridgeParameter=Math.pow(10,-5);var dataWindow=700;var trailDataWindow=10;/**\r\n * Performs ridge regression, according to the Weka code.\r\n * @param {Array} y - corresponds to screen coordinates (either x or y) for each of n click events\r\n * @param {Array.<Array.<Number>>} X - corresponds to gray pixel features (120 pixels for both eyes) for each of n clicks\r\n * @param {Array} k - ridge parameter\r\n * @return{Array} regression coefficients\r\n */function ridge(y,X,k){var nc=X[0].length;var m_Coefficients=new Array(nc);var xt=src_mat.transpose(X);var solution=new Array();var success=true;do{var ss=src_mat.mult(xt,X);// Set ridge regression adjustment\nfor(var i=0;i<nc;i++){ss[i][i]=ss[i][i]+k;}// Carry out the regression\nvar bb=src_mat.mult(xt,y);for(var i=0;i<nc;i++){m_Coefficients[i]=bb[i][0];}try{var n=m_Coefficients.length!==0?m_Coefficients.length/m_Coefficients.length:0;if(m_Coefficients.length*n!==m_Coefficients.length){console.log('Array length must be a multiple of m');}solution=ss.length===ss[0].length?numeric_1_2_6.LUsolve(numeric_1_2_6.LU(ss,true),bb):src_mat.QRDecomposition(ss,bb);for(var i=0;i<nc;i++){m_Coefficients[i]=solution[i];}success=true;}catch(ex){k*=10;console.log(ex);success=false;}}while(!success);return m_Coefficients;}//TODO: still usefull ???\n/**\r\n *\r\n * @returns {Number}\r\n */function getCurrentFixationIndex(){var index=0;var recentX=this.screenXTrailArray.get(0);var recentY=this.screenYTrailArray.get(0);for(var i=this.screenXTrailArray.length-1;i>=0;i--){var currX=this.screenXTrailArray.get(i);var currY=this.screenYTrailArray.get(i);var euclideanDistance=Math.sqrt(Math.pow(currX-recentX,2)+Math.pow(currY-recentY,2));if(euclideanDistance>72){return i+1;}}return i;}/**\r\n * Constructor of RidgeReg object,\r\n * this object allow to perform ridge regression\r\n * @constructor\r\n */ridgeReg_reg.RidgeReg=function(){this.init();};/**\r\n * Initialize new arrays and initialize Kalman filter.\r\n */ridgeReg_reg.RidgeReg.prototype.init=function(){this.screenXClicksArray=new src_util.DataWindow(dataWindow);this.screenYClicksArray=new src_util.DataWindow(dataWindow);this.eyeFeaturesClicks=new src_util.DataWindow(dataWindow);//sets to one second worth of cursor trail\nthis.trailTime=1000;this.trailDataWindow=this.trailTime/src_params.moveTickSize;this.screenXTrailArray=new src_util.DataWindow(trailDataWindow);this.screenYTrailArray=new src_util.DataWindow(trailDataWindow);this.eyeFeaturesTrail=new src_util.DataWindow(trailDataWindow);this.trailTimes=new src_util.DataWindow(trailDataWindow);this.dataClicks=new src_util.DataWindow(dataWindow);this.dataTrail=new src_util.DataWindow(trailDataWindow);// Initialize Kalman filter [20200608 xk] what do we do about parameters?\n// [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least\n//               by my own anecdotal observation a 4x1 x vector seems to work alright\nvar F=[[1,0,1,0],[0,1,0,1],[0,0,1,0],[0,0,0,1]];//Parameters Q and R may require some fine tuning\nvar Q=[[1/4,0,1/2,0],[0,1/4,0,1/2],[1/2,0,1,0],[0,1/2,0,1]];// * delta_t\nvar delta_t=1/10;// The amount of time between frames\nQ=numeric_1_2_6.mul(Q,delta_t);var H=[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0]];var H=[[1,0,0,0],[0,1,0,0]];var pixel_error=47;//We will need to fine tune this value [20200611 xk] I just put a random value here\n//This matrix represents the expected measurement error\nvar R=numeric_1_2_6.mul(numeric_1_2_6.identity(2),pixel_error);var P_initial=numeric_1_2_6.mul(numeric_1_2_6.identity(4),0.0001);//Initial covariance matrix\nvar x_initial=[[500],[500],[0],[0]];// Initial measurement matrix\nthis.kalman=new src_util.KalmanFilter(F,H,Q,R,P_initial,x_initial);};/**\r\n * Add given data from eyes\r\n * @param {Object} eyes - eyes where extract data to add\r\n * @param {Object} screenPos - The current screen point\r\n * @param {Object} type - The type of performed action\r\n */ridgeReg_reg.RidgeReg.prototype.addData=function(eyes,screenPos,type){if(!eyes){return;}//not doing anything with blink at present\n// if (eyes.left.blink || eyes.right.blink) {\n//   return;\n// }\n//why are we pushing these as arrays rather than single elements?\nif(type==='click'){this.screenXClicksArray.push([screenPos[0]]);this.screenYClicksArray.push([screenPos[1]]);this.eyeFeaturesClicks.push(src_util.getEyeFeats(eyes));this.dataClicks.push({'eyes':eyes,'screenPos':screenPos,'type':type});}else if(type==='move'){this.screenXTrailArray.push([screenPos[0]]);this.screenYTrailArray.push([screenPos[1]]);this.eyeFeaturesTrail.push(src_util.getEyeFeats(eyes));this.trailTimes.push(performance.now());this.dataTrail.push({'eyes':eyes,'screenPos':screenPos,'type':type});}// [20180730 JT] Why do we do this? It doesn't return anything...\n// But as JS is pass by reference, it still affects it.\n//\n// Causes problems for when we want to call 'addData' twice in a row on the same object, but perhaps with different screenPos or types (think multiple interactions within one video frame)\n//eyes.left.patch = Array.from(eyes.left.patch.data);\n//eyes.right.patch = Array.from(eyes.right.patch.data);\n};/**\r\n * Try to predict coordinates from pupil data\r\n * after apply linear regression on data set\r\n * @param {Object} eyesObj - The current user eyes object\r\n * @returns {Object}\r\n */ridgeReg_reg.RidgeReg.prototype.predict=function(eyesObj){if(!eyesObj||this.eyeFeaturesClicks.length===0){return null;}var acceptTime=performance.now()-this.trailTime;var trailX=[];var trailY=[];var trailFeat=[];for(var i=0;i<this.trailDataWindow;i++){if(this.trailTimes.get(i)>acceptTime){trailX.push(this.screenXTrailArray.get(i));trailY.push(this.screenYTrailArray.get(i));trailFeat.push(this.eyeFeaturesTrail.get(i));}}var screenXArray=this.screenXClicksArray.data.concat(trailX);var screenYArray=this.screenYClicksArray.data.concat(trailY);var eyeFeatures=this.eyeFeaturesClicks.data.concat(trailFeat);var coefficientsX=ridge(screenXArray,eyeFeatures,ridgeParameter);var coefficientsY=ridge(screenYArray,eyeFeatures,ridgeParameter);var eyeFeats=src_util.getEyeFeats(eyesObj);var predictedX=0;for(var i=0;i<eyeFeats.length;i++){predictedX+=eyeFeats[i]*coefficientsX[i];}var predictedY=0;for(var i=0;i<eyeFeats.length;i++){predictedY+=eyeFeats[i]*coefficientsY[i];}predictedX=Math.floor(predictedX);predictedY=Math.floor(predictedY);if(src_params.applyKalmanFilter){// Update Kalman model, and get prediction\nvar newGaze=[predictedX,predictedY];// [20200607 xk] Should we use a 1x4 vector?\nnewGaze=this.kalman.update(newGaze);return{x:newGaze[0],y:newGaze[1]};}else{return{x:predictedX,y:predictedY};}};/**\r\n * Add given data to current data set then,\r\n * replace current data member with given data\r\n * @param {Array.<Object>} data - The data to set\r\n */ridgeReg_reg.RidgeReg.prototype.setData=function(data){for(var i=0;i<data.length;i++){// Clone data array\nvar leftData=new Uint8ClampedArray(data[i].eyes.left.patch.data);var rightData=new Uint8ClampedArray(data[i].eyes.right.patch.data);// Duplicate ImageData object\ndata[i].eyes.left.patch=new ImageData(leftData,data[i].eyes.left.width,data[i].eyes.left.height);data[i].eyes.right.patch=new ImageData(rightData,data[i].eyes.right.width,data[i].eyes.right.height);// Add those data objects to model\nthis.addData(data[i].eyes,data[i].screenPos,data[i].type);}};/**\r\n * Return the data\r\n * @returns {Array.<Object>|*}\r\n */ridgeReg_reg.RidgeReg.prototype.getData=function(){return this.dataClicks.data;};/**\r\n * The RidgeReg object name\r\n * @type {string}\r\n */ridgeReg_reg.RidgeReg.prototype.name='ridge';/* harmony default export */var ridgeReg=ridgeReg_reg;// CONCATENATED MODULE: ./src/ridgeWeightedReg.mjs\nvar ridgeWeightedReg_reg={};var ridgeWeightedReg_ridgeParameter=Math.pow(10,-5);var ridgeWeightedReg_dataWindow=700;var ridgeWeightedReg_trailDataWindow=10;/**\r\n * Performs ridge regression, according to the Weka code.\r\n * @param {Array} y - corresponds to screen coordinates (either x or y) for each of n click events\r\n * @param {Array.<Array.<Number>>} X - corresponds to gray pixel features (120 pixels for both eyes) for each of n clicks\r\n * @param {Array} k - ridge parameter\r\n * @return{Array} regression coefficients\r\n */function ridgeWeightedReg_ridge(y,X,k){var nc=X[0].length;var m_Coefficients=new Array(nc);var xt=src_mat.transpose(X);var solution=new Array();var success=true;do{var ss=src_mat.mult(xt,X);// Set ridge regression adjustment\nfor(var i=0;i<nc;i++){ss[i][i]=ss[i][i]+k;}// Carry out the regression\nvar bb=src_mat.mult(xt,y);for(var i=0;i<nc;i++){m_Coefficients[i]=bb[i][0];}try{var n=m_Coefficients.length!==0?m_Coefficients.length/m_Coefficients.length:0;if(m_Coefficients.length*n!==m_Coefficients.length){console.log('Array length must be a multiple of m');}solution=ss.length===ss[0].length?numeric_1_2_6.LUsolve(numeric_1_2_6.LU(ss,true),bb):webgazer.mat.QRDecomposition(ss,bb);for(var i=0;i<nc;i++){m_Coefficients[i]=solution[i];}success=true;}catch(ex){k*=10;console.log(ex);success=false;}}while(!success);return m_Coefficients;}/**\r\n * Compute eyes size as gray histogram\r\n * @param {Object} eyes - The eyes where looking for gray histogram\r\n * @returns {Array.<T>} The eyes gray level histogram\r\n */ //TODO: still usefull ???\n/**\r\n *\r\n * @returns {Number}\r\n */function ridgeWeightedReg_getCurrentFixationIndex(){var index=0;var recentX=this.screenXTrailArray.get(0);var recentY=this.screenYTrailArray.get(0);for(var i=this.screenXTrailArray.length-1;i>=0;i--){var currX=this.screenXTrailArray.get(i);var currY=this.screenYTrailArray.get(i);var euclideanDistance=Math.sqrt(Math.pow(currX-recentX,2)+Math.pow(currY-recentY,2));if(euclideanDistance>72){return i+1;}}return i;}/**\r\n * Constructor of RidgeWeightedReg object\r\n * @constructor\r\n */ridgeWeightedReg_reg.RidgeWeightedReg=function(){this.init();};/**\r\n * Initialize new arrays and initialize Kalman filter.\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.init=function(){this.screenXClicksArray=new src_util.DataWindow(ridgeWeightedReg_dataWindow);this.screenYClicksArray=new src_util.DataWindow(ridgeWeightedReg_dataWindow);this.eyeFeaturesClicks=new src_util.DataWindow(ridgeWeightedReg_dataWindow);//sets to one second worth of cursor trail\nthis.trailTime=1000;this.trailDataWindow=this.trailTime/src_params.moveTickSize;this.screenXTrailArray=new src_util.DataWindow(ridgeWeightedReg_trailDataWindow);this.screenYTrailArray=new src_util.DataWindow(ridgeWeightedReg_trailDataWindow);this.eyeFeaturesTrail=new src_util.DataWindow(ridgeWeightedReg_trailDataWindow);this.trailTimes=new src_util.DataWindow(ridgeWeightedReg_trailDataWindow);this.dataClicks=new src_util.DataWindow(ridgeWeightedReg_dataWindow);this.dataTrail=new src_util.DataWindow(ridgeWeightedReg_trailDataWindow);// Initialize Kalman filter [20200608 xk] what do we do about parameters?\n// [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least\n//               by my own anecdotal observation a 4x1 x vector seems to work alright\nvar F=[[1,0,1,0],[0,1,0,1],[0,0,1,0],[0,0,0,1]];//Parameters Q and R may require some fine tuning\nvar Q=[[1/4,0,1/2,0],[0,1/4,0,1/2],[1/2,0,1,0],[0,1/2,0,1]];// * delta_t\nvar delta_t=1/10;// The amount of time between frames\nQ=numeric_1_2_6.mul(Q,delta_t);var H=[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0]];var H=[[1,0,0,0],[0,1,0,0]];var pixel_error=47;//We will need to fine tune this value [20200611 xk] I just put a random value here\n//This matrix represents the expected measurement error\nvar R=numeric_1_2_6.mul(numeric_1_2_6.identity(2),pixel_error);var P_initial=numeric_1_2_6.mul(numeric_1_2_6.identity(4),0.0001);//Initial covariance matrix\nvar x_initial=[[500],[500],[0],[0]];// Initial measurement matrix\nthis.kalman=new src_util.KalmanFilter(F,H,Q,R,P_initial,x_initial);};/**\r\n * Add given data from eyes\r\n * @param {Object} eyes - eyes where extract data to add\r\n * @param {Object} screenPos - The current screen point\r\n * @param {Object} type - The type of performed action\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.addData=function(eyes,screenPos,type){if(!eyes){return;}//not doing anything with blink at present\n// if (eyes.left.blink || eyes.right.blink) {\n//     return;\n// }\nif(type==='click'){this.screenXClicksArray.push([screenPos[0]]);this.screenYClicksArray.push([screenPos[1]]);this.eyeFeaturesClicks.push(src_util.getEyeFeats(eyes));this.dataClicks.push({'eyes':eyes,'screenPos':screenPos,'type':type});}else if(type==='move'){this.screenXTrailArray.push([screenPos[0]]);this.screenYTrailArray.push([screenPos[1]]);this.eyeFeaturesTrail.push(src_util.getEyeFeats(eyes));this.trailTimes.push(performance.now());this.dataTrail.push({'eyes':eyes,'screenPos':screenPos,'type':type});}// [20180730 JT] Why do we do this? It doesn't return anything...\n// But as JS is pass by reference, it still affects it.\n//\n// Causes problems for when we want to call 'addData' twice in a row on the same object, but perhaps with different screenPos or types (think multiple interactions within one video frame)\n//eyes.left.patch = Array.from(eyes.left.patch.data);\n//eyes.right.patch = Array.from(eyes.right.patch.data);\n};/**\r\n * Try to predict coordinates from pupil data\r\n * after apply linear regression on data set\r\n * @param {Object} eyesObj - The current user eyes object\r\n * @returns {Object}\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.predict=function(eyesObj){if(!eyesObj||this.eyeFeaturesClicks.length===0){return null;}var acceptTime=performance.now()-this.trailTime;var trailX=[];var trailY=[];var trailFeat=[];for(var i=0;i<this.trailDataWindow;i++){if(this.trailTimes.get(i)>acceptTime){trailX.push(this.screenXTrailArray.get(i));trailY.push(this.screenYTrailArray.get(i));trailFeat.push(this.eyeFeaturesTrail.get(i));}}var len=this.eyeFeaturesClicks.data.length;var weightedEyeFeats=Array(len);var weightedXArray=Array(len);var weightedYArray=Array(len);for(var i=0;i<len;i++){var weight=Math.sqrt(1/(len-i));// access from oldest to newest so should start with low weight and increase steadily\n//abstraction is leaking...\nvar trueIndex=this.eyeFeaturesClicks.getTrueIndex(i);for(var j=0;j<this.eyeFeaturesClicks.data[trueIndex].length;j++){var val=this.eyeFeaturesClicks.data[trueIndex][j]*weight;if(weightedEyeFeats[trueIndex]!==undefined){weightedEyeFeats[trueIndex].push(val);}else{weightedEyeFeats[trueIndex]=[val];}}weightedXArray[trueIndex]=this.screenXClicksArray.get(i).slice(0,this.screenXClicksArray.get(i).length);weightedYArray[trueIndex]=this.screenYClicksArray.get(i).slice(0,this.screenYClicksArray.get(i).length);weightedXArray[i][0]=weightedXArray[i][0]*weight;weightedYArray[i][0]=weightedYArray[i][0]*weight;}var screenXArray=weightedXArray.concat(trailX);var screenYArray=weightedYArray.concat(trailY);var eyeFeatures=weightedEyeFeats.concat(trailFeat);var coefficientsX=ridgeWeightedReg_ridge(screenXArray,eyeFeatures,ridgeWeightedReg_ridgeParameter);var coefficientsY=ridgeWeightedReg_ridge(screenYArray,eyeFeatures,ridgeWeightedReg_ridgeParameter);var eyeFeats=src_util.getEyeFeats(eyesObj);var predictedX=0;for(var i=0;i<eyeFeats.length;i++){predictedX+=eyeFeats[i]*coefficientsX[i];}var predictedY=0;for(var i=0;i<eyeFeats.length;i++){predictedY+=eyeFeats[i]*coefficientsY[i];}predictedX=Math.floor(predictedX);predictedY=Math.floor(predictedY);if(src_params.applyKalmanFilter){// Update Kalman model, and get prediction\nvar newGaze=[predictedX,predictedY];// [20200607 xk] Should we use a 1x4 vector?\nnewGaze=this.kalman.update(newGaze);return{x:newGaze[0],y:newGaze[1]};}else{return{x:predictedX,y:predictedY};}};/**\r\n * Add given data to current data set then,\r\n * replace current data member with given data\r\n * @param {Array.<Object>} data - The data to set\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.setData=function(data){for(var i=0;i<data.length;i++){// [20200611 xk] Previous comment said this was a kludge, but it seems like this is the best solution\n// Clone data array\nvar leftData=new Uint8ClampedArray(data[i].eyes.left.patch.data);var rightData=new Uint8ClampedArray(data[i].eyes.right.patch.data);// Duplicate ImageData object\ndata[i].eyes.left.patch=new ImageData(leftData,data[i].eyes.left.width,data[i].eyes.left.height);data[i].eyes.right.patch=new ImageData(rightData,data[i].eyes.right.width,data[i].eyes.right.height);this.addData(data[i].eyes,data[i].screenPos,data[i].type);}};/**\r\n * Return the data\r\n * @returns {Array.<Object>|*}\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.getData=function(){return this.dataClicks.data;};/**\r\n * The RidgeWeightedReg object name\r\n * @type {string}\r\n */ridgeWeightedReg_reg.RidgeWeightedReg.prototype.name='ridge';/* harmony default export */var ridgeWeightedReg=ridgeWeightedReg_reg;// CONCATENATED MODULE: ./src/ridgeRegThreaded.mjs\nvar ridgeRegThreaded_reg={};var ridgeRegThreaded_ridgeParameter=Math.pow(10,-5);var ridgeRegThreaded_dataWindow=700;var weights={'X':[0],'Y':[0]};var ridgeRegThreaded_trailDataWindow=10;/**\r\n * Constructor of RidgeRegThreaded object,\r\n * it retrieve data window, and prepare a worker,\r\n * this object allow to perform threaded ridge regression\r\n * @constructor\r\n */ridgeRegThreaded_reg.RidgeRegThreaded=function(){this.init();};/**\r\n * Initialize new arrays and initialize Kalman filter.\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.init=function(){this.screenXClicksArray=new src_util.DataWindow(ridgeRegThreaded_dataWindow);this.screenYClicksArray=new src_util.DataWindow(ridgeRegThreaded_dataWindow);this.eyeFeaturesClicks=new src_util.DataWindow(ridgeRegThreaded_dataWindow);this.screenXTrailArray=new src_util.DataWindow(ridgeRegThreaded_trailDataWindow);this.screenYTrailArray=new src_util.DataWindow(ridgeRegThreaded_trailDataWindow);this.eyeFeaturesTrail=new src_util.DataWindow(ridgeRegThreaded_trailDataWindow);this.dataClicks=new src_util.DataWindow(ridgeRegThreaded_dataWindow);this.dataTrail=new src_util.DataWindow(ridgeRegThreaded_dataWindow);// Place the src/ridgeworker.js file into the same directory as your html file.\nif(!this.worker){this.worker=new Worker('ridgeWorker.mjs');// [20200708] TODO: Figure out how to make this inline\nthis.worker.onerror=function(err){console.log(err.message);};this.worker.onmessage=function(evt){weights.X=evt.data.X;weights.Y=evt.data.Y;};console.log('initialized worker');}// Initialize Kalman filter [20200608 xk] what do we do about parameters?\n// [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least\n//               by my own anecdotal observation a 4x1 x vector seems to work alright\nvar F=[[1,0,1,0],[0,1,0,1],[0,0,1,0],[0,0,0,1]];//Parameters Q and R may require some fine tuning\nvar Q=[[1/4,0,1/2,0],[0,1/4,0,1/2],[1/2,0,1,0],[0,1/2,0,1]];// * delta_t\nvar delta_t=1/10;// The amount of time between frames\nQ=numeric_1_2_6.mul(Q,delta_t);var H=[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0]];var H=[[1,0,0,0],[0,1,0,0]];var pixel_error=47;//We will need to fine tune this value [20200611 xk] I just put a random value here\n//This matrix represents the expected measurement error\nvar R=numeric_1_2_6.mul(numeric_1_2_6.identity(2),pixel_error);var P_initial=numeric_1_2_6.mul(numeric_1_2_6.identity(4),0.0001);//Initial covariance matrix\nvar x_initial=[[500],[500],[0],[0]];// Initial measurement matrix\nthis.kalman=new src_util.KalmanFilter(F,H,Q,R,P_initial,x_initial);};/**\r\n * Add given data from eyes\r\n * @param {Object} eyes - eyes where extract data to add\r\n * @param {Object} screenPos - The current screen point\r\n * @param {Object} type - The type of performed action\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.addData=function(eyes,screenPos,type){if(!eyes){return;}//not doing anything with blink at present\n// if (eyes.left.blink || eyes.right.blink) {\n//     return;\n// }\nthis.worker.postMessage({'eyes':src_util.getEyeFeats(eyes),'screenPos':screenPos,'type':type});};/**\r\n * Try to predict coordinates from pupil data\r\n * after apply linear regression on data set\r\n * @param {Object} eyesObj - The current user eyes object\r\n * @returns {Object}\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.predict=function(eyesObj){// console.log('LOGGING..');\nif(!eyesObj){return null;}var coefficientsX=weights.X;var coefficientsY=weights.Y;var eyeFeats=src_util.getEyeFeats(eyesObj);var predictedX=0,predictedY=0;for(var i=0;i<eyeFeats.length;i++){predictedX+=eyeFeats[i]*coefficientsX[i];predictedY+=eyeFeats[i]*coefficientsY[i];}predictedX=Math.floor(predictedX);predictedY=Math.floor(predictedY);if(src_params.applyKalmanFilter){// Update Kalman model, and get prediction\nvar newGaze=[predictedX,predictedY];// [20200607 xk] Should we use a 1x4 vector?\nnewGaze=this.kalman.update(newGaze);return{x:newGaze[0],y:newGaze[1]};}else{return{x:predictedX,y:predictedY};}};/**\r\n * Add given data to current data set then,\r\n * replace current data member with given data\r\n * @param {Array.<Object>} data - The data to set\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.setData=function(data){for(var i=0;i<data.length;i++){// [20200611 xk] Previous comment said this was a kludge, but it seems like this is the best solution\n// Clone data array\nvar leftData=new Uint8ClampedArray(data[i].eyes.left.patch.data);var rightData=new Uint8ClampedArray(data[i].eyes.right.patch.data);// Duplicate ImageData object\ndata[i].eyes.left.patch=new ImageData(leftData,data[i].eyes.left.width,data[i].eyes.left.height);data[i].eyes.right.patch=new ImageData(rightData,data[i].eyes.right.width,data[i].eyes.right.height);this.addData(data[i].eyes,data[i].screenPos,data[i].type);}};/**\r\n * Return the data\r\n * @returns {Array.<Object>|*}\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.getData=function(){return this.dataClicks.data;};/**\r\n * The RidgeRegThreaded object name\r\n * @type {string}\r\n */ridgeRegThreaded_reg.RidgeRegThreaded.prototype.name='ridge';/* harmony default export */var ridgeRegThreaded=ridgeRegThreaded_reg;// CONCATENATED MODULE: ./src/index.mjs\nvar src_webgazer={};src_webgazer.tracker={};src_webgazer.tracker.TFFaceMesh=facemesh;src_webgazer.reg=ridgeReg;src_webgazer.reg.RidgeWeightedReg=ridgeWeightedReg.RidgeWeightedReg;src_webgazer.reg.RidgeRegThreaded=ridgeRegThreaded.RidgeRegThreaded;src_webgazer.util=src_util;src_webgazer.params=src_params;//PRIVATE VARIABLES\n//video elements\nvar videoStream=null;var videoContainerElement=null;var videoElement=null;var videoElementCanvas=null;var faceOverlay=null;var faceFeedbackBox=null;var gazeDot=null;// Why is this not in webgazer.params ?\nvar debugVideoLoc='';/*\r\n * Initialises variables used to store accuracy eigenValues\r\n * This is used by the calibration example file\r\n */var xPast50=new Array(50);var yPast50=new Array(50);// loop parameters\nvar clockStart=performance.now();var latestEyeFeatures=null;var latestGazeData=null;var paused=false;//registered callback for loop\nvar nopCallback=function nopCallback(data,time){};var callback=nopCallback;//Types that regression systems should handle\n//Describes the source of data so that regression systems may ignore or handle differently the various generating events\nvar eventTypes=['click','move'];//movelistener timeout clock parameters\nvar moveClock=performance.now();//currently used tracker and regression models, defaults to clmtrackr and linear regression\nvar curTracker=new src_webgazer.tracker.TFFaceMesh();var regs=[new src_webgazer.reg.RidgeReg()];// var blinkDetector = new webgazer.BlinkDetector();\n//lookup tables\nvar curTrackerMap={'TFFacemesh':function TFFacemesh(){return new src_webgazer.tracker.TFFaceMesh();}};var regressionMap={'ridge':function ridge(){return new src_webgazer.reg.RidgeReg();},'weightedRidge':function weightedRidge(){return new src_webgazer.reg.RidgeWeightedReg();},'threadedRidge':function threadedRidge(){return new src_webgazer.reg.RidgeRegThreaded();}};//localstorage name\nvar localstorageDataLabel='webgazerGlobalData';var localstorageSettingsLabel='webgazerGlobalSettings';//settings object for future storage of settings\nvar settings={};var data=[];var defaults={'data':[],'settings':{}};//PRIVATE FUNCTIONS\n/**\r\n * Computes the size of the face overlay validation box depending on the size of the video preview window.\r\n * @returns {Object} The dimensions of the validation box as top, left, width, height.\r\n */src_webgazer.computeValidationBoxSize=function(){var vw=videoElement.videoWidth;var vh=videoElement.videoHeight;var pw=parseInt(videoElement.style.width);var ph=parseInt(videoElement.style.height);// Find the size of the box.\n// Pick the smaller of the two video preview sizes\nvar smaller=Math.min(vw,vh);var larger=Math.max(vw,vh);// Overall scalar\nvar scalar=vw==larger?pw/vw:ph/vh;// Multiply this by 2/3, then adjust it to the size of the preview\nvar boxSize=smaller*src_webgazer.params.faceFeedbackBoxRatio*scalar;// Set the boundaries of the face overlay validation box based on the preview\nvar topVal=(ph-boxSize)/2;var leftVal=(pw-boxSize)/2;// top, left, width, height\nreturn[topVal,leftVal,boxSize,boxSize];};/**\r\n * Checks if the pupils are in the position box on the video\r\n * // TODO These are all wrong. The latestEyeFeatures will be in 'video' space not 'preview' space, and so need to be converted.\r\n */function checkEyesInValidationBox(){if(faceFeedbackBox!=null&&latestEyeFeatures){var w=videoElement.videoWidth;var h=videoElement.videoHeight;// Find the size of the box.\n// Pick the smaller of the two video preview sizes\nvar smaller=Math.min(w,h);var boxSize=smaller*src_webgazer.params.faceFeedbackBoxRatio;// Set the boundaries of the face overlay validation box based on the preview\nvar topBound=(h-boxSize)/2;var leftBound=(w-boxSize)/2;var rightBound=leftBound+boxSize;var bottomBound=topBound+boxSize;//get the x and y positions of the left and right eyes\nvar eyeLX=latestEyeFeatures.left.imagex;var eyeLY=latestEyeFeatures.left.imagey;var eyeRX=latestEyeFeatures.right.imagex;var eyeRY=latestEyeFeatures.right.imagey;var xPositions=false;var yPositions=false;//check if the x values for the left and right eye are within the\n//validation box\nif(eyeLX>leftBound&&eyeLX<rightBound){if(eyeRX>leftBound&&eyeRX<rightBound){xPositions=true;}}//check if the y values for the left and right eye are within the\n//validation box\nif(eyeLY>topBound&&eyeLY<bottomBound){if(eyeRY>topBound&&eyeRY<bottomBound){yPositions=true;}}//if the x and y values for both the left and right eye are within\n//the validation box then the box border turns green, otherwise if\n//the eyes are outside of the box the colour is red\nif(xPositions&&yPositions){faceFeedbackBox.style.border='solid green';}else{faceFeedbackBox.style.border='solid red';}}else faceFeedbackBox.style.border='solid black';}/**\r\n * This draws the point (x,y) onto the canvas in the HTML\r\n * @param {colour} colour - The colour of the circle to plot\r\n * @param {x} x - The x co-ordinate of the desired point to plot\r\n * @param {y} y - The y co-ordinate of the desired point to plot\r\n */function drawCoordinates(colour,x,y){var ctx=document.getElementById(\"plotting_canvas\").getContext('2d');ctx.fillStyle=colour;// Red color\nctx.beginPath();ctx.arc(x,y,5,0,Math.PI*2,true);ctx.fill();}/**\r\n * Gets the pupil features by following the pipeline which threads an eyes object through each call:\r\n * curTracker gets eye patches -> blink detector -> pupil detection\r\n * @param {Canvas} canvas - a canvas which will have the video drawn onto it\r\n * @param {Number} width - the width of canvas\r\n * @param {Number} height - the height of canvas\r\n */function getPupilFeatures(canvas,width,height){if(!canvas){return;}try{return curTracker.getEyePatches(canvas,width,height);}catch(err){console.log(\"can't get pupil features \",err);return null;}}/**\r\n * Gets the most current frame of video and paints it to a resized version of the canvas with width and height\r\n * @param {Canvas} canvas - the canvas to paint the video on to\r\n * @param {Number} width - the new width of the canvas\r\n * @param {Number} height - the new height of the canvas\r\n */function paintCurrentFrame(canvas,width,height){if(canvas.width!=width){canvas.width=width;}if(canvas.height!=height){canvas.height=height;}var ctx=canvas.getContext('2d');ctx.drawImage(videoElement,0,0,canvas.width,canvas.height);}/**\r\n * Paints the video to a canvas and runs the prediction pipeline to get a prediction\r\n * @param {Number|undefined} regModelIndex - The prediction index we're looking for\r\n * @returns {*}\r\n */function getPrediction(_x233){return _getPrediction.apply(this,arguments);}/**\r\n * Runs every available animation frame if webgazer is not paused\r\n */function _getPrediction(){_getPrediction=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee217(regModelIndex){var predictions,reg;return regeneratorRuntime.wrap(function _callee217$(_context220){while(1){switch(_context220.prev=_context220.next){case 0:predictions=[];// [20200617 xk] TODO: this call should be made async somehow. will take some work.\n_context220.next=3;return getPupilFeatures(videoElementCanvas,videoElementCanvas.width,videoElementCanvas.height);case 3:latestEyeFeatures=_context220.sent;if(!(regs.length===0)){_context220.next=7;break;}console.log('regression not set, call setRegression()');return _context220.abrupt(\"return\",null);case 7:for(reg in regs){predictions.push(regs[reg].predict(latestEyeFeatures));}if(!(regModelIndex!==undefined)){_context220.next=12;break;}return _context220.abrupt(\"return\",predictions[regModelIndex]===null?null:{'x':predictions[regModelIndex].x,'y':predictions[regModelIndex].y,'eyeFeatures':latestEyeFeatures});case 12:return _context220.abrupt(\"return\",predictions.length===0||predictions[0]===null?null:{'x':predictions[0].x,'y':predictions[0].y,'eyeFeatures':latestEyeFeatures,'all':predictions});case 13:case\"end\":return _context220.stop();}}},_callee217);}));return _getPrediction.apply(this,arguments);}var smoothingVals=new src_webgazer.util.DataWindow(4);var src_k=0;function loop(){return _loop28.apply(this,arguments);}//is problematic to test\n//because latestEyeFeatures is not set in many cases\n/**\r\n * Records screen position data based on current pupil feature and passes it\r\n * to the regression model.\r\n * @param {Number} x - The x screen position\r\n * @param {Number} y - The y screen position\r\n * @param {String} eventType - The event type to store\r\n * @returns {null}\r\n */function _loop28(){_loop28=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee218(){var elapsedTime,tracker,x,y,len,d,pred;return regeneratorRuntime.wrap(function _callee218$(_context221){while(1){switch(_context221.prev=_context221.next){case 0:if(paused){_context221.next=12;break;}// [20200617 XK] TODO: there is currently lag between the camera input and the face overlay. This behavior\n// is not seen in the facemesh demo. probably need to optimize async implementation. I think the issue lies\n// in the implementation of getPrediction().\n// Paint the latest video frame into the canvas which will be analyzed by WebGazer\n// [20180729 JT] Why do we need to do this? clmTracker does this itself _already_, which is just duplicating the work.\n// Is it because other trackers need a canvas instead of an img/video element?\npaintCurrentFrame(videoElementCanvas,videoElementCanvas.width,videoElementCanvas.height);// Get gaze prediction (ask clm to track; pass the data to the regressor; get back a prediction)\nlatestGazeData=getPrediction();// Count time\nelapsedTime=performance.now()-clockStart;// Draw face overlay\nif(src_webgazer.params.showFaceOverlay){// Get tracker object\ntracker=src_webgazer.getTracker();faceOverlay.getContext('2d').clearRect(0,0,videoElement.videoWidth,videoElement.videoHeight);tracker.drawFaceOverlay(faceOverlay.getContext('2d'),tracker.getPositions());}// Feedback box\n// Check that the eyes are inside of the validation box\nif(src_webgazer.params.showFaceFeedbackBox)checkEyesInValidationBox();_context221.next=8;return latestGazeData;case 8:latestGazeData=_context221.sent;// [20200623 xk] callback to function passed into setGazeListener(fn)\ncallback(latestGazeData,elapsedTime);if(latestGazeData){// [20200608 XK] Smoothing across the most recent 4 predictions, do we need this with Kalman filter?\nsmoothingVals.push(latestGazeData);x=0;y=0;len=smoothingVals.length;for(d in smoothingVals.data){x+=smoothingVals.get(d).x;y+=smoothingVals.get(d).y;}pred=src_webgazer.util.bound({'x':x/len,'y':y/len});if(src_webgazer.params.storingPoints){drawCoordinates('blue',pred.x,pred.y);//draws the previous predictions\n//store the position of the past fifty occuring tracker preditions\nsrc_webgazer.storePoints(pred.x,pred.y,src_k);src_k++;if(src_k==50){src_k=0;}}// GazeDot\nif(src_webgazer.params.showGazeDot){gazeDot.style.display='block';}gazeDot.style.transform='translate3d('+pred.x+'px,'+pred.y+'px,0)';}else{gazeDot.style.display='none';}requestAnimationFrame(loop);case 12:case\"end\":return _context221.stop();}}},_callee218);}));return _loop28.apply(this,arguments);}var recordScreenPosition=function recordScreenPosition(x,y,eventType){if(paused){return;}if(regs.length===0){console.log('regression not set, call setRegression()');return null;}for(var reg in regs){if(latestEyeFeatures)regs[reg].addData(latestEyeFeatures,[x,y],eventType);}};/**\r\n * Records click data and passes it to the regression model\r\n * @param {Event} event - The listened event\r\n */var clickListener=/*#__PURE__*/function(){var _ref69=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee212(event){return regeneratorRuntime.wrap(function _callee212$(_context215){while(1){switch(_context215.prev=_context215.next){case 0:recordScreenPosition(event.clientX,event.clientY,eventTypes[0]);// eventType[0] === 'click'\nif(!window.saveDataAcrossSessions){_context215.next=4;break;}_context215.next=4;return setGlobalData();case 4:case\"end\":return _context215.stop();}}},_callee212);}));return function clickListener(_x234){return _ref69.apply(this,arguments);};}();/**\r\n * Records mouse movement data and passes it to the regression model\r\n * @param {Event} event - The listened event\r\n */var moveListener=function moveListener(event){if(paused){return;}var now=performance.now();if(now<moveClock+src_webgazer.params.moveTickSize){return;}else{moveClock=now;}recordScreenPosition(event.clientX,event.clientY,eventTypes[1]);//eventType[1] === 'move'\n};/**\r\n * Add event listeners for mouse click and move.\r\n */var addMouseEventListeners=function addMouseEventListeners(){//third argument set to true so that we get event on 'capture' instead of 'bubbling'\n//this prevents a client using event.stopPropagation() preventing our access to the click\ndocument.addEventListener('click',clickListener,true);document.addEventListener('mousemove',moveListener,true);};/**\r\n * Remove event listeners for mouse click and move.\r\n */var removeMouseEventListeners=function removeMouseEventListeners(){// must set third argument to same value used in addMouseEventListeners\n// for this to work.\ndocument.removeEventListener('click',clickListener,true);document.removeEventListener('mousemove',moveListener,true);};/**\r\n * Loads the global data and passes it to the regression model\r\n */function loadGlobalData(){return _loadGlobalData.apply(this,arguments);}/**\r\n * Adds data to localforage\r\n */function _loadGlobalData(){_loadGlobalData=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee219(){var loadData,reg;return regeneratorRuntime.wrap(function _callee219$(_context222){while(1){switch(_context222.prev=_context222.next){case 0:_context222.next=2;return localforage.getItem(localstorageSettingsLabel);case 2:settings=_context222.sent;settings=settings||defaults;// Get click data from localforage\n_context222.next=6;return localforage.getItem(localstorageDataLabel);case 6:loadData=_context222.sent;loadData=loadData||defaults;// Set global var data to newly loaded data\ndata=loadData;// Load data into regression model(s)\nfor(reg in regs){regs[reg].setData(loadData);}console.log(\"loaded stored data into regression model\");case 11:case\"end\":return _context222.stop();}}},_callee219);}));return _loadGlobalData.apply(this,arguments);}function setGlobalData(){return _setGlobalData.apply(this,arguments);}/**\r\n * Clears data from model and global storage\r\n */function _setGlobalData(){_setGlobalData=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee220(){var storeData;return regeneratorRuntime.wrap(function _callee220$(_context223){while(1){switch(_context223.prev=_context223.next){case 0:// Grab data from regression model\nstoreData=regs[0].getData()||data;// Array\n// Store data into localforage\nlocalforage.setItem(localstorageSettingsLabel,settings);// [20200605 XK] is 'settings' ever being used?\nlocalforage.setItem(localstorageDataLabel,storeData);//TODO data should probably be stored in webgazer object instead of each regression model\n//     -> requires duplication of data, but is likely easier on regression model implementors\ncase 3:case\"end\":return _context223.stop();}}},_callee220);}));return _setGlobalData.apply(this,arguments);}function clearData(){// Removes data from localforage\nlocalforage.clear();// Removes data from regression model\nfor(var reg in regs){regs[reg].init();}}/**\r\n * Initializes all needed dom elements and begins the loop\r\n * @param {URL} stream - The video stream to use\r\n */function init(_x235){return _init.apply(this,arguments);}/**\r\n * Initializes navigator.mediaDevices.getUserMedia\r\n * depending on the browser capabilities\r\n * \r\n * @return Promise \r\n */function _init(){_init=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee221(stream){var topDist,leftDist,setupPreviewVideo;return regeneratorRuntime.wrap(function _callee221$(_context224){while(1){switch(_context224.prev=_context224.next){case 0:setupPreviewVideo=function _setupPreviewVideo(e){// All video preview parts have now been added, so set the size both internally and in the preview window.\nsetInternalVideoBufferSizes(videoElement.videoWidth,videoElement.videoHeight);src_webgazer.setVideoViewerSize(src_webgazer.params.videoViewerWidth,src_webgazer.params.videoViewerHeight);videoContainerElement.appendChild(videoElementCanvas);videoContainerElement.appendChild(faceOverlay);videoContainerElement.appendChild(faceFeedbackBox);document.body.appendChild(gazeDot);// Run this only once, so remove the event listener\ne.target.removeEventListener(e.type,setupPreviewVideo);};//////////////////////////\n// Video and video preview\n//////////////////////////\ntopDist='0px';leftDist='0px';// used for webgazer.stopVideo() and webgazer.setCameraConstraints()\nvideoStream=stream;// create a video element container to enable customizable placement on the page\nvideoContainerElement=document.createElement('div');videoContainerElement.id=src_webgazer.params.videoContainerId;videoContainerElement.style.display=src_webgazer.params.showVideo?'block':'none';videoContainerElement.style.position='fixed';videoContainerElement.style.top=topDist;videoContainerElement.style.left=leftDist;videoContainerElement.style.width=src_webgazer.params.videoViewerWidth+'px';videoContainerElement.style.height=src_webgazer.params.videoViewerHeight+'px';videoElement=document.createElement('video');videoElement.setAttribute('playsinline','');videoElement.id=src_webgazer.params.videoElementId;videoElement.srcObject=stream;videoElement.autoplay=true;videoElement.style.display=src_webgazer.params.showVideo?'block':'none';videoElement.style.position='absolute';// We set these to stop the video appearing too large when it is added for the very first time\nvideoElement.style.width=src_webgazer.params.videoViewerWidth+'px';videoElement.style.height=src_webgazer.params.videoViewerHeight+'px';// videoElement.style.zIndex=\"-1\";\n// Canvas for drawing video to pass to clm tracker\nvideoElementCanvas=document.createElement('canvas');videoElementCanvas.id=src_webgazer.params.videoElementCanvasId;videoElementCanvas.style.display='none';// Face overlay\n// Shows the CLM tracking result\nfaceOverlay=document.createElement('canvas');faceOverlay.id=src_webgazer.params.faceOverlayId;faceOverlay.style.display=src_webgazer.params.showFaceOverlay?'block':'none';faceOverlay.style.position='absolute';// Mirror video feed\nif(src_webgazer.params.mirrorVideo){videoElement.style.setProperty(\"-moz-transform\",\"scale(-1, 1)\");videoElement.style.setProperty(\"-webkit-transform\",\"scale(-1, 1)\");videoElement.style.setProperty(\"-o-transform\",\"scale(-1, 1)\");videoElement.style.setProperty(\"transform\",\"scale(-1, 1)\");videoElement.style.setProperty(\"filter\",\"FlipH\");faceOverlay.style.setProperty(\"-moz-transform\",\"scale(-1, 1)\");faceOverlay.style.setProperty(\"-webkit-transform\",\"scale(-1, 1)\");faceOverlay.style.setProperty(\"-o-transform\",\"scale(-1, 1)\");faceOverlay.style.setProperty(\"transform\",\"scale(-1, 1)\");faceOverlay.style.setProperty(\"filter\",\"FlipH\");}// Feedback box\n// Lets the user know when their face is in the middle\nfaceFeedbackBox=document.createElement('canvas');faceFeedbackBox.id=src_webgazer.params.faceFeedbackBoxId;faceFeedbackBox.style.display=src_webgazer.params.showFaceFeedbackBox?'block':'none';faceFeedbackBox.style.border='solid';faceFeedbackBox.style.position='absolute';// Gaze dot\n// Starts offscreen\ngazeDot=document.createElement('div');gazeDot.id=src_webgazer.params.gazeDotId;gazeDot.style.display=src_webgazer.params.showGazeDot?'block':'none';gazeDot.style.position='fixed';gazeDot.style.zIndex=99999;gazeDot.style.left='-5px';//'-999em';\ngazeDot.style.top='-5px';gazeDot.style.background='red';gazeDot.style.borderRadius='100%';gazeDot.style.opacity='0.7';gazeDot.style.width='10px';gazeDot.style.height='10px';// Add other preview/feedback elements to the screen once the video has shown and its parameters are initialized\nvideoContainerElement.appendChild(videoElement);document.body.appendChild(videoContainerElement);;videoElement.addEventListener('timeupdate',setupPreviewVideo);addMouseEventListeners();//BEGIN CALLBACK LOOP\npaused=false;clockStart=performance.now();_context224.next=55;return loop();case 55:case\"end\":return _context224.stop();}}},_callee221);}));return _init.apply(this,arguments);}function setUserMediaVariable(){if(navigator.mediaDevices===undefined){navigator.mediaDevices={};}if(navigator.mediaDevices.getUserMedia===undefined){navigator.mediaDevices.getUserMedia=function(constraints){// gets the alternative old getUserMedia is possible\nvar getUserMedia=navigator.webkitGetUserMedia||navigator.mozGetUserMedia;// set an error message if browser doesn't support getUserMedia\nif(!getUserMedia){return Promise.reject(new Error(\"Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead.\"));}// uses navigator.getUserMedia for older browsers\nreturn new Promise(function(resolve,reject){getUserMedia.call(navigator,constraints,resolve,reject);});};}}//PUBLIC FUNCTIONS - CONTROL\n/**\r\n * Starts all state related to webgazer -> dataLoop, video collection, click listener\r\n * If starting fails, call `onFail` param function.\r\n * @param {Function} onFail - Callback to call in case it is impossible to find user camera\r\n * @returns {*}\r\n */src_webgazer.begin=function(onFail){if(window.location.protocol!=='https:'&&window.location.hostname!=='localhost'&&window.chrome){alert(\"WebGazer works only over https. If you are doing local development, you need to run a local server.\");}// Load model data stored in localforage.\nif(window.saveDataAcrossSessions){loadGlobalData();}onFail=onFail||function(){console.log('No stream');};if(debugVideoLoc){init(debugVideoLoc);return src_webgazer;}///////////////////////\n// SETUP VIDEO ELEMENTS\n// Sets .mediaDevices.getUserMedia depending on browser\nsetUserMediaVariable();// Request webcam access under specific constraints\n// WAIT for access\nreturn new Promise(/*#__PURE__*/function(){var _ref70=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee213(resolve,reject){var stream;return regeneratorRuntime.wrap(function _callee213$(_context216){while(1){switch(_context216.prev=_context216.next){case 0:_context216.prev=0;_context216.next=3;return navigator.mediaDevices.getUserMedia(src_webgazer.params.camConstraints);case 3:stream=_context216.sent;init(stream);resolve(src_webgazer);_context216.next=14;break;case 8:_context216.prev=8;_context216.t0=_context216[\"catch\"](0);onFail();videoElement=null;stream=null;reject(_context216.t0);case 14:case\"end\":return _context216.stop();}}},_callee213,null,[[0,8]]);}));return function(_x236,_x237){return _ref70.apply(this,arguments);};}());};/**\r\n * Checks if webgazer has finished initializing after calling begin()\r\n * [20180729 JT] This seems like a bad idea for how this function should be implemented.\r\n * @returns {boolean} if webgazer is ready\r\n */src_webgazer.isReady=function(){if(videoElementCanvas===null){return false;}return videoElementCanvas.width>0;};/**\r\n * Stops collection of data and predictions\r\n * @returns {webgazer} this\r\n */src_webgazer.pause=function(){paused=true;return src_webgazer;};/**\r\n * Resumes collection of data and predictions if paused\r\n * @returns {webgazer} this\r\n */src_webgazer.resume=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee214(){return regeneratorRuntime.wrap(function _callee214$(_context217){while(1){switch(_context217.prev=_context217.next){case 0:if(paused){_context217.next=2;break;}return _context217.abrupt(\"return\",src_webgazer);case 2:paused=false;_context217.next=5;return loop();case 5:return _context217.abrupt(\"return\",src_webgazer);case 6:case\"end\":return _context217.stop();}}},_callee214);}));/**\r\n * stops collection of data and removes dom modifications, must call begin() to reset up\r\n * @return {webgazer} this\r\n */src_webgazer.end=function(){//loop may run an extra time and fail due to removed elements\npaused=true;//webgazer.stopVideo(); // uncomment if you want to stop the video from streaming\n//remove video element and canvas\ndocument.body.removeChild(videoElement);document.body.removeChild(videoElementCanvas);return src_webgazer;};/**\r\n * Stops the video camera from streaming and removes the video outlines\r\n * @return {webgazer} this\r\n */src_webgazer.stopVideo=function(){// Stops the video from streaming\nvideoStream.getTracks()[0].stop();// Removes the outline of the face\ndocument.body.removeChild(faceOverlay);// Removes the box around the face\ndocument.body.removeChild(faceFeedbackBox);return src_webgazer;};//PUBLIC FUNCTIONS - DEBUG\n/**\r\n * Returns if the browser is compatible with webgazer\r\n * @return {boolean} if browser is compatible\r\n */src_webgazer.detectCompatibility=function(){var getUserMedia=navigator.mediaDevices.getUserMedia||navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia;return getUserMedia!==undefined;};/**\r\n * Set whether to show any of the video previews (camera, face overlay, feedback box).\r\n * If true: visibility depends on corresponding params (default all true).\r\n * If false: camera, face overlay, feedback box are all hidden\r\n * @param {bool} val\r\n * @return {webgazer} this\r\n */src_webgazer.showVideoPreview=function(val){src_webgazer.params.showVideoPreview=val;src_webgazer.showVideo(val&&src_webgazer.params.showVideo);src_webgazer.showFaceOverlay(val&&src_webgazer.params.showFaceOverlay);src_webgazer.showFaceFeedbackBox(val&&src_webgazer.params.showFaceFeedbackBox);return src_webgazer;};/**\r\n * Set whether the camera video preview is visible or not (default true).\r\n * @param {*} bool\r\n * @return {webgazer} this\r\n */src_webgazer.showVideo=function(val){src_webgazer.params.showVideo=val;if(videoElement){videoElement.style.display=val?'block':'none';}if(videoContainerElement){videoContainerElement.style.display=val?'block':'none';}return src_webgazer;};/**\r\n * Set whether the face overlay is visible or not (default true).\r\n * @param {*} bool\r\n * @return {webgazer} this\r\n */src_webgazer.showFaceOverlay=function(val){src_webgazer.params.showFaceOverlay=val;if(faceOverlay){faceOverlay.style.display=val?'block':'none';}return src_webgazer;};/**\r\n * Set whether the face feedback box is visible or not (default true).\r\n * @param {*} bool\r\n * @return {webgazer} this\r\n */src_webgazer.showFaceFeedbackBox=function(val){src_webgazer.params.showFaceFeedbackBox=val;if(faceFeedbackBox){faceFeedbackBox.style.display=val?'block':'none';}return src_webgazer;};/**\r\n * Set whether the gaze prediction point(s) are visible or not.\r\n * Multiple because of a trail of past dots. Default true\r\n * @return {webgazer} this\r\n */src_webgazer.showPredictionPoints=function(val){src_webgazer.params.showGazeDot=val;if(gazeDot){gazeDot.style.display=val?'block':'none';}return src_webgazer;};/**\r\n * Set whether a Kalman filter will be applied to gaze predictions (default true);\r\n * @return {webgazer} this\r\n */src_webgazer.applyKalmanFilter=function(val){src_webgazer.params.applyKalmanFilter=val;return src_webgazer;};/**\r\n * Define constraints on the video camera that is used. Useful for non-standard setups.\r\n * This can be set before calling webgazer.begin(), but also mid stream.\r\n *\r\n * @param {Object} constraints Example constraints object:\r\n * { width: { min: 320, ideal: 1280, max: 1920 }, height: { min: 240, ideal: 720, max: 1080 }, facingMode: \"user\" };\r\n *\r\n * Follows definition here:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API/Constraints\r\n *\r\n * Note: The constraints set here are applied to the video track only. They also _replace_ any constraints, so be sure to set everything you need.\r\n * Warning: Setting a large video resolution will decrease performance, and may require\r\n */src_webgazer.setCameraConstraints=/*#__PURE__*/function(){var _ref72=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee215(constraints){var videoTrack,videoSettings;return regeneratorRuntime.wrap(function _callee215$(_context218){while(1){switch(_context218.prev=_context218.next){case 0:src_webgazer.params.camConstraints=constraints;// If the camera stream is already up...\nif(!videoStream){_context218.next=19;break;}src_webgazer.pause();videoTrack=videoStream.getVideoTracks()[0];_context218.prev=4;_context218.next=7;return videoTrack.applyConstraints(src_webgazer.params.camConstraints);case 7:videoSettings=videoTrack.getSettings();setInternalVideoBufferSizes(videoSettings.width,videoSettings.height);_context218.next=15;break;case 11:_context218.prev=11;_context218.t0=_context218[\"catch\"](4);console.log(_context218.t0);return _context218.abrupt(\"return\");case 15:// Reset and recompute sizes of the video viewer.\n// This is only to adjust the feedback box, say, if the aspect ratio of the video has changed.\nsrc_webgazer.setVideoViewerSize(src_webgazer.params.videoViewerWidth,src_webgazer.params.videoViewerHeight);src_webgazer.getTracker().reset();_context218.next=19;return src_webgazer.resume();case 19:case\"end\":return _context218.stop();}}},_callee215,null,[[4,11]]);}));return function(_x238){return _ref72.apply(this,arguments);};}();/**\r\n * Does what it says on the tin.\r\n * @param {*} width\r\n * @param {*} height\r\n */function setInternalVideoBufferSizes(width,height){// Re-set the canvas size used by the internal processes\nif(videoElementCanvas){videoElementCanvas.width=width;videoElementCanvas.height=height;}// Re-set the face overlay canvas size\nif(faceOverlay){faceOverlay.width=width;faceOverlay.height=height;}}/**\r\n *  Set a static video file to be used instead of webcam video\r\n *  @param {String} videoLoc - video file location\r\n *  @return {webgazer} this\r\n */src_webgazer.setStaticVideo=function(videoLoc){debugVideoLoc=videoLoc;return src_webgazer;};/**\r\n * Set the size of the video viewer\r\n */src_webgazer.setVideoViewerSize=function(w,h){src_webgazer.params.videoViewerWidth=w;src_webgazer.params.videoViewerHeight=h;// Change the video viewer\nvideoElement.style.width=w+'px';videoElement.style.height=h+'px';// Change the face overlay\nfaceOverlay.style.width=w+'px';faceOverlay.style.height=h+'px';// Change the feedback box size\n// Compute the boundaries of the face overlay validation box based on the video size\nvar tlwh=src_webgazer.computeValidationBoxSize();// Assign them to the object\nfaceFeedbackBox.style.top=tlwh[0]+'px';faceFeedbackBox.style.left=tlwh[1]+'px';faceFeedbackBox.style.width=tlwh[2]+'px';faceFeedbackBox.style.height=tlwh[3]+'px';};/**\r\n *  Add the mouse click and move listeners that add training data.\r\n *  @return {webgazer} this\r\n */src_webgazer.addMouseEventListeners=function(){addMouseEventListeners();return src_webgazer;};/**\r\n *  Remove the mouse click and move listeners that add training data.\r\n *  @return {webgazer} this\r\n */src_webgazer.removeMouseEventListeners=function(){removeMouseEventListeners();return src_webgazer;};/**\r\n *  Records current screen position for current pupil features.\r\n *  @param {String} x - position on screen in the x axis\r\n *  @param {String} y - position on screen in the y axis\r\n *  @return {webgazer} this\r\n */src_webgazer.recordScreenPosition=function(x,y){// give this the same weight that a click gets.\nrecordScreenPosition(x,y,eventTypes[0]);return src_webgazer;};/**\r\n *  Records current screen position for current pupil features.\r\n *  @param {String} x - position on screen in the x axis\r\n *  @param {String} y - position on screen in the y axis\r\n *  @param {String} eventType - \"click\" or \"move\", as per eventTypes\r\n *  @return {webgazer} this\r\n */src_webgazer.recordScreenPosition=function(x,y,eventType){// give this the same weight that a click gets.\nrecordScreenPosition(x,y,eventType);return src_webgazer;};/*\r\n * Stores the position of the fifty most recent tracker preditions\r\n */src_webgazer.storePoints=function(x,y,k){xPast50[k]=x;yPast50[k]=y;};//SETTERS\n/**\r\n * Sets the tracking module\r\n * @param {String} name - The name of the tracking module to use\r\n * @return {webgazer} this\r\n */src_webgazer.setTracker=function(name){if(curTrackerMap[name]===undefined){console.log('Invalid tracker selection');console.log('Options are: ');for(var t in curTrackerMap){console.log(t);}return src_webgazer;}curTracker=curTrackerMap[name]();return src_webgazer;};/**\r\n * Sets the regression module and clears any other regression modules\r\n * @param {String} name - The name of the regression module to use\r\n * @return {webgazer} this\r\n */src_webgazer.setRegression=function(name){if(regressionMap[name]===undefined){console.log('Invalid regression selection');console.log('Options are: ');for(var reg in regressionMap){console.log(reg);}return src_webgazer;}data=regs[0].getData();regs=[regressionMap[name]()];regs[0].setData(data);return src_webgazer;};/**\r\n * Adds a new tracker module so that it can be used by setTracker()\r\n * @param {String} name - the new name of the tracker\r\n * @param {Function} constructor - the constructor of the curTracker object\r\n * @return {webgazer} this\r\n */src_webgazer.addTrackerModule=function(name,constructor){curTrackerMap[name]=function(){return new constructor();};};/**\r\n * Adds a new regression module so that it can be used by setRegression() and addRegression()\r\n * @param {String} name - the new name of the regression\r\n * @param {Function} constructor - the constructor of the regression object\r\n */src_webgazer.addRegressionModule=function(name,constructor){regressionMap[name]=function(){return new constructor();};};/**\r\n * Adds a new regression module to the list of regression modules, seeding its data from the first regression module\r\n * @param {String} name - the string name of the regression module to add\r\n * @return {webgazer} this\r\n */src_webgazer.addRegression=function(name){var newReg=regressionMap[name]();data=regs[0].getData();newReg.setData(data);regs.push(newReg);return src_webgazer;};/**\r\n * Sets a callback to be executed on every gaze event (currently all time steps)\r\n * @param {function} listener - The callback function to call (it must be like function(data, elapsedTime))\r\n * @return {webgazer} this\r\n */src_webgazer.setGazeListener=function(listener){callback=listener;return src_webgazer;};/**\r\n * Removes the callback set by setGazeListener\r\n * @return {webgazer} this\r\n */src_webgazer.clearGazeListener=function(){callback=nopCallback;return src_webgazer;};/**\r\n * Set the video element canvas; useful if you want to run WebGazer on your own canvas (e.g., on any random image).\r\n * @return The current video element canvas\r\n */src_webgazer.setVideoElementCanvas=function(canvas){videoElementCanvas=canvas;};/**\r\n * Clear data from localforage and from regs\r\n */src_webgazer.clearData=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee216(){return regeneratorRuntime.wrap(function _callee216$(_context219){while(1){switch(_context219.prev=_context219.next){case 0:clearData();case 1:case\"end\":return _context219.stop();}}},_callee216);}));//GETTERS\n/**\r\n * Returns the tracker currently in use\r\n * @return {tracker} an object following the tracker interface\r\n */src_webgazer.getTracker=function(){return curTracker;};/**\r\n * Returns the regression currently in use\r\n * @return {Array.<Object>} an array of regression objects following the regression interface\r\n */src_webgazer.getRegression=function(){return regs;};/**\r\n * Requests an immediate prediction\r\n * @return {object} prediction data object\r\n */src_webgazer.getCurrentPrediction=function(){return getPrediction();};/**\r\n * returns the different event types that may be passed to regressions when calling regression.addData()\r\n * @return {Array} array of strings where each string is an event type\r\n */src_webgazer.params.getEventTypes=function(){return eventTypes.slice();};/**\r\n * Get the video element canvas that WebGazer uses internally on which to run its face tracker.\r\n * @return The current video element canvas\r\n */src_webgazer.getVideoElementCanvas=function(){return videoElementCanvas;};/**\r\n * @return array [a,b] where a is width ratio and b is height ratio\r\n */src_webgazer.getVideoPreviewToCameraResolutionRatio=function(){return[src_webgazer.params.videoViewerWidth/videoElement.videoWidth,src_webgazer.params.videoViewerHeight/videoElement.videoHeight];};/*\r\n * Gets the fifty most recent tracker preditions\r\n */src_webgazer.getStoredPoints=function(){return[xPast50,yPast50];};/* harmony default export */var src=__webpack_exports__[\"default\"]=src_webgazer;/***/}/******/])[\"default\"];\n\n//# sourceURL=webpack:///./src/webgazer.js?");

/***/ })

}]);